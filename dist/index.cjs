"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),require("colors");var fs=require("fs"),path=require("path"),httpsProxyAgent=require("https-proxy-agent"),url=require("url"),dotenv=require("dotenv"),zod=require("zod"),http=require("http"),https=require("https"),tarn=require("tarn"),uuid=require("uuid"),puppeteer=require("puppeteer"),DOMPurify=require("dompurify"),jsdom=require("jsdom"),cors=require("cors"),express=require("express"),multer=require("multer"),jwt=require("jsonwebtoken"),WebSocket=require("ws"),rateLimit=require("express-rate-limit"),_documentCurrentScript="undefined"!=typeof document?document.currentScript:null;const __dirname$1=url.fileURLToPath(new URL("../.","undefined"==typeof document?require("url").pathToFileURL(__filename).href:_documentCurrentScript&&"SCRIPT"===_documentCurrentScript.tagName.toUpperCase()&&_documentCurrentScript.src||new URL("index.cjs",document.baseURI).href));function deepCopy(e){if(null===e||"object"!=typeof e)return e;const t=Array.isArray(e)?[]:{};for(const o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=deepCopy(e[o]));return t}function getAbsolutePath(e){return path.isAbsolute(e)?path.normalize(e):path.resolve(e)}function getBase64(e,t){return"pdf"===t||"svg"==t?Buffer.from(e,"utf8").toString("base64"):e}function getNewDate(){return(new Date).toString().split("(")[0].trim()}function getNewDateTime(){return(new Date).getTime()}function isObject(e){return"[object Object]"===Object.prototype.toString.call(e)}function isObjectEmpty(e){return"object"==typeof e&&!Array.isArray(e)&&null!==e&&0===Object.keys(e).length}function isPrivateRangeUrlFound(e){return[/xlink:href="(?:http:\/\/|https:\/\/)?localhost\b/,/xlink:href="(?:http:\/\/|https:\/\/)?10\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?127\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?172\.(1[6-9]|2[0-9]|3[0-1])\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?192\.168\.\d{1,3}\.\d{1,3}\b/].some((t=>t.test(e)))}function measureTime(){const e=process.hrtime.bigint();return()=>Number(process.hrtime.bigint()-e)/1e6}function roundNumber(e,t=1){const o=Math.pow(10,t||0);return Math.round(+e*o)/o}const colors=["red","yellow","blue","gray","green"],logging={toConsole:!0,toFile:!1,pathCreated:!1,pathToLog:"",levelsDesc:[{title:"error",color:colors[0]},{title:"warning",color:colors[1]},{title:"notice",color:colors[2]},{title:"verbose",color:colors[3]},{title:"benchmark",color:colors[4]}]};function log(...e){const[t,...o]=e,{levelsDesc:r,level:n}=logging;if(5!==t&&(0===t||t>n||n>r.length))return;const i=`${getNewDate()} [${r[t-1].title}] -`;logging.toFile&&_logToFile(o,i),logging.toConsole&&console.log.apply(void 0,[i.toString()[logging.levelsDesc[t-1].color]].concat(o))}function logWithStack(e,t,o){const r=o||t&&t.message||"",{level:n,levelsDesc:i}=logging;if(0===e||e>n||n>i.length)return;const s=`${getNewDate()} [${i[e-1].title}] -`,a=t&&t.stack,l=[r];a&&l.push("\n",a),logging.toFile&&_logToFile(l,s),logging.toConsole&&console.log.apply(void 0,[s.toString()[logging.levelsDesc[e-1].color]].concat([l.shift()[colors[e-1]],...l]))}function logZodIssues(e,t,o){logWithStack(e,null,[`${o||"[validation] Validation error"} - the following Zod issues occured:`,...(t||[]).map((e=>`- ${e.message}`))].join("\n"))}function initLogging(e){const{level:t,dest:o,file:r,toConsole:n,toFile:i}=e;logging.pathCreated=!1,logging.pathToLog="",setLogLevel(t),enableConsoleLogging(n),enableFileLogging(o,r,i)}function setLogLevel(e){Number.isInteger(e)&&e>=0&&e<=logging.levelsDesc.length&&(logging.level=e)}function enableConsoleLogging(e){logging.toConsole=!!e}function enableFileLogging(e,t,o){logging.toFile=!!o,logging.toFile&&(logging.dest=e||"log",logging.file=t||"highcharts-export-server.log")}function _logToFile(e,t){logging.pathCreated||(!fs.existsSync(getAbsolutePath(logging.dest))&&fs.mkdirSync(getAbsolutePath(logging.dest)),logging.pathToLog=getAbsolutePath(path.join(logging.dest,logging.file)),logging.pathCreated=!0),fs.appendFile(logging.pathToLog,[t].concat(e).join(" ")+"\n",(e=>{e&&logging.toFile&&logging.pathCreated&&(logging.toFile=!1,logging.pathCreated=!1,logWithStack(2,e,"[logger] Unable to write to log file."))}))}const defaultConfig={puppeteer:{args:{value:["--allow-running-insecure-content","--ash-no-nudges","--autoplay-policy=user-gesture-required","--block-new-web-contents","--disable-accelerated-2d-canvas","--disable-background-networking","--disable-background-timer-throttling","--disable-backgrounding-occluded-windows","--disable-breakpad","--disable-checker-imaging","--disable-client-side-phishing-detection","--disable-component-extensions-with-background-pages","--disable-component-update","--disable-default-apps","--disable-dev-shm-usage","--disable-domain-reliability","--disable-extensions","--disable-features=CalculateNativeWinOcclusion,InterestFeedContentSuggestions,WebOTP","--disable-hang-monitor","--disable-ipc-flooding-protection","--disable-logging","--disable-notifications","--disable-offer-store-unmasked-wallet-cards","--disable-popup-blocking","--disable-print-preview","--disable-prompt-on-repost","--disable-renderer-backgrounding","--disable-search-engine-choice-screen","--disable-session-crashed-bubble","--disable-setuid-sandbox","--disable-site-isolation-trials","--disable-speech-api","--disable-sync","--enable-unsafe-webgpu","--hide-crash-restore-bubble","--hide-scrollbars","--metrics-recording-only","--mute-audio","--no-default-browser-check","--no-first-run","--no-pings","--no-sandbox","--no-startup-window","--no-zygote","--password-store=basic","--process-per-tab","--use-mock-keychain"],types:["string[]"],envLink:"PUPPETEER_ARGS",cliName:"puppeteerArgs",description:"Array of Puppeteer arguments",promptOptions:{type:"list",separator:";"}}},highcharts:{version:{value:"latest",types:["string"],envLink:"HIGHCHARTS_VERSION",description:"Highcharts version",promptOptions:{type:"text"}},cdnUrl:{value:"https://code.highcharts.com",types:["string"],envLink:"HIGHCHARTS_CDN_URL",description:"CDN URL for Highcharts scripts",promptOptions:{type:"text"}},forceFetch:{value:!1,types:["boolean"],envLink:"HIGHCHARTS_FORCE_FETCH",description:"Flag to refetch scripts after each server rerun",promptOptions:{type:"toggle"}},cachePath:{value:".cache",types:["string"],envLink:"HIGHCHARTS_CACHE_PATH",description:"Directory path for cached Highcharts scripts",promptOptions:{type:"text"}},coreScripts:{value:["highcharts","highcharts-more","highcharts-3d"],types:["string[]"],envLink:"HIGHCHARTS_CORE_SCRIPTS",description:"Highcharts core scripts to fetch",promptOptions:{type:"multiselect",instructions:"Space: Select specific, A: Select all, Enter: Confirm"}},moduleScripts:{value:["stock","map","gantt","exporting","parallel-coordinates","accessibility","boost-canvas","boost","data","data-tools","draggable-points","static-scale","broken-axis","heatmap","tilemap","tiledwebmap","timeline","treemap","treegraph","item-series","drilldown","histogram-bellcurve","bullet","funnel","funnel3d","geoheatmap","pyramid3d","networkgraph","overlapping-datalabels","pareto","pattern-fill","pictorial","price-indicator","sankey","arc-diagram","dependency-wheel","series-label","series-on-point","solid-gauge","sonification","streamgraph","sunburst","variable-pie","variwide","vector","venn","windbarb","wordcloud","xrange","no-data-to-display","drag-panes","debugger","dumbbell","lollipop","cylinder","organization","dotplot","marker-clusters","hollowcandlestick","heikinashi","flowmap","export-data","navigator","textpath"],types:["string[]"],envLink:"HIGHCHARTS_MODULE_SCRIPTS",description:"Highcharts module scripts to fetch",promptOptions:{type:"multiselect",instructions:"Space: Select specific, A: Select all, Enter: Confirm"}},indicatorScripts:{value:["indicators-all"],types:["string[]"],envLink:"HIGHCHARTS_INDICATOR_SCRIPTS",description:"Highcharts indicator scripts to fetch",promptOptions:{type:"multiselect",instructions:"Space: Select specific, A: Select all, Enter: Confirm"}},customScripts:{value:["https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/moment.min.js","https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.45/moment-timezone-with-data.min.js"],types:["string[]"],envLink:"HIGHCHARTS_CUSTOM_SCRIPTS",description:"Additional custom scripts or dependencies to fetch",promptOptions:{type:"list",separator:";"}}},export:{infile:{value:null,types:["string","null"],envLink:"EXPORT_INFILE",description:"Input filename with type, formatted correctly as JSON or SVG",promptOptions:{type:"text"}},instr:{value:null,types:["Object","string","null"],envLink:"EXPORT_INSTR",description:"Overrides the `infile` with JSON, stringified JSON, or SVG input",promptOptions:{type:"text"}},options:{value:null,types:["Object","string","null"],envLink:"EXPORT_OPTIONS",description:"Alias for the `instr` option",promptOptions:{type:"text"}},svg:{value:null,types:["string","null"],envLink:"EXPORT_SVG",description:"SVG string representation of the chart to render",promptOptions:{type:"text"}},batch:{value:null,types:["string","null"],envLink:"EXPORT_BATCH",description:'Batch job string with input/output pairs: "in=out;in=out;..."',promptOptions:{type:"text"}},outfile:{value:null,types:["string","null"],envLink:"EXPORT_OUTFILE",description:"Output filename with type. Can be jpeg, png, pdf, or svg and ignores `type` option",promptOptions:{type:"text"}},type:{value:"png",types:["string"],envLink:"EXPORT_TYPE",description:"File export format. Can be jpeg, png, pdf, or svg",promptOptions:{type:"select",hint:"Default: png",choices:["png","jpeg","pdf","svg"]}},constr:{value:"chart",types:["string"],envLink:"EXPORT_CONSTR",description:"Chart constructor. Can be chart, stockChart, mapChart, or ganttChart",promptOptions:{type:"select",hint:"Default: chart",choices:["chart","stockChart","mapChart","ganttChart"]}},b64:{value:!1,types:["boolean"],envLink:"EXPORT_B64",description:"Whether or not to the chart should be received in Base64 format instead of binary",promptOptions:{type:"toggle"}},noDownload:{value:!1,types:["boolean"],envLink:"EXPORT_NO_DOWNLOAD",description:"Whether or not to include or exclude attachment headers in the response",promptOptions:{type:"toggle"}},height:{value:null,types:["number","null"],envLink:"EXPORT_HEIGHT",description:"Height of the exported chart, overrides chart settings",promptOptions:{type:"number"}},width:{value:null,types:["number","null"],envLink:"EXPORT_WIDTH",description:"Width of the exported chart, overrides chart settings",promptOptions:{type:"number"}},scale:{value:null,types:["number","null"],envLink:"EXPORT_SCALE",description:"Scale of the exported chart, overrides chart settings. Ranges from 0.1 to 5.0",promptOptions:{type:"number"}},defaultHeight:{value:400,types:["number"],envLink:"EXPORT_DEFAULT_HEIGHT",description:"Default height of the exported chart if not set",promptOptions:{type:"number"}},defaultWidth:{value:600,types:["number"],envLink:"EXPORT_DEFAULT_WIDTH",description:"Default width of the exported chart if not set",promptOptions:{type:"number"}},defaultScale:{value:1,types:["number"],envLink:"EXPORT_DEFAULT_SCALE",description:"Default scale of the exported chart if not set. Ranges from 0.1 to 5.0",promptOptions:{type:"number",min:.1,max:5}},globalOptions:{value:null,types:["Object","string","null"],envLink:"EXPORT_GLOBAL_OPTIONS",description:"JSON, stringified JSON or filename with global options for Highcharts.setOptions",promptOptions:{type:"text"}},themeOptions:{value:null,types:["Object","string","null"],envLink:"EXPORT_THEME_OPTIONS",description:"JSON, stringified JSON or filename with theme options for Highcharts.setOptions",promptOptions:{type:"text"}},rasterizationTimeout:{value:1500,types:["number"],envLink:"EXPORT_RASTERIZATION_TIMEOUT",description:"Milliseconds to wait for webpage rendering",promptOptions:{type:"number"}}},customLogic:{allowCodeExecution:{value:!1,types:["boolean"],envLink:"CUSTOM_LOGIC_ALLOW_CODE_EXECUTION",description:"Allows or disallows execution of arbitrary code during exporting",promptOptions:{type:"toggle"}},allowFileResources:{value:!1,types:["boolean"],envLink:"CUSTOM_LOGIC_ALLOW_FILE_RESOURCES",description:"Allows or disallows injection of filesystem resources (disabled in server mode)",promptOptions:{type:"toggle"}},customCode:{value:null,types:["string","null"],envLink:"CUSTOM_LOGIC_CUSTOM_CODE",description:"Custom code to execute before chart initialization. Can be a function, code wrapped in a function, or a .js filename",promptOptions:{type:"text"}},callback:{value:null,types:["string","null"],envLink:"CUSTOM_LOGIC_CALLBACK",description:"JavaScript code to run during construction. Can be a function or a .js filename",promptOptions:{type:"text"}},resources:{value:null,types:["Object","string","null"],envLink:"CUSTOM_LOGIC_RESOURCES",description:"Additional resources as JSON, stringified JSON, or filename, containing files, js, and css sections",promptOptions:{type:"text"}},loadConfig:{value:null,types:["string","null"],envLink:"CUSTOM_LOGIC_LOAD_CONFIG",legacyName:"fromFile",description:"File with a pre-defined configuration to use",promptOptions:{type:"text"}},createConfig:{value:null,types:["string","null"],envLink:"CUSTOM_LOGIC_CREATE_CONFIG",description:"Prompt-based option setting, saved to a provided config file",promptOptions:{type:"text"}}},server:{enable:{value:!1,types:["boolean"],envLink:"SERVER_ENABLE",cliName:"enableServer",description:"Starts the server when true",promptOptions:{type:"toggle"}},host:{value:"0.0.0.0",types:["string"],envLink:"SERVER_HOST",description:"Hostname of the server",promptOptions:{type:"text"}},port:{value:7801,types:["number"],envLink:"SERVER_PORT",description:"Port number for the server",promptOptions:{type:"number"}},uploadLimit:{value:3,types:["number"],envLink:"SERVER_UPLOAD_LIMIT",description:"Maximum request body size in MB",promptOptions:{type:"number"}},benchmarking:{value:!1,types:["boolean"],envLink:"SERVER_BENCHMARKING",cliName:"serverBenchmarking",description:"Displays or not action durations in milliseconds during server requests",promptOptions:{type:"toggle"}},proxy:{host:{value:null,types:["string","null"],envLink:"SERVER_PROXY_HOST",cliName:"proxyHost",description:"Host of the proxy server, if applicable",promptOptions:{type:"text"}},port:{value:null,types:["number","null"],envLink:"SERVER_PROXY_PORT",cliName:"proxyPort",description:"Port of the proxy server, if applicable",promptOptions:{type:"number"}},timeout:{value:5e3,types:["number"],envLink:"SERVER_PROXY_TIMEOUT",cliName:"proxyTimeout",description:"Timeout in milliseconds for the proxy server, if applicable",promptOptions:{type:"number"}}},rateLimiting:{enable:{value:!1,types:["boolean"],envLink:"SERVER_RATE_LIMITING_ENABLE",cliName:"enableRateLimiting",description:"Enables or disables rate limiting on the server",promptOptions:{type:"toggle"}},maxRequests:{value:10,types:["number"],envLink:"SERVER_RATE_LIMITING_MAX_REQUESTS",legacyName:"rateLimit",description:"Maximum number of requests allowed per minute",promptOptions:{type:"number"}},window:{value:1,types:["number"],envLink:"SERVER_RATE_LIMITING_WINDOW",description:"Time window in minutes for rate limiting",promptOptions:{type:"number"}},delay:{value:0,types:["number"],envLink:"SERVER_RATE_LIMITING_DELAY",description:"Delay duration between successive requests before reaching the limit",promptOptions:{type:"number"}},trustProxy:{value:!1,types:["boolean"],envLink:"SERVER_RATE_LIMITING_TRUST_PROXY",description:"Set to true if the server is behind a load balancer",promptOptions:{type:"toggle"}},skipKey:{value:null,types:["string","null"],envLink:"SERVER_RATE_LIMITING_SKIP_KEY",description:"Key to bypass the rate limiter, used with `skipToken`",promptOptions:{type:"text"}},skipToken:{value:null,types:["string","null"],envLink:"SERVER_RATE_LIMITING_SKIP_TOKEN",description:"Token to bypass the rate limiter, used with `skipKey`",promptOptions:{type:"text"}}},ssl:{enable:{value:!1,types:["boolean"],envLink:"SERVER_SSL_ENABLE",cliName:"enableSsl",description:"Enables or disables SSL protocol",promptOptions:{type:"toggle"}},force:{value:!1,types:["boolean"],envLink:"SERVER_SSL_FORCE",cliName:"sslForce",legacyName:"sslOnly",description:"Forces the server to use HTTPS only when true",promptOptions:{type:"toggle"}},port:{value:443,types:["number"],envLink:"SERVER_SSL_PORT",cliName:"sslPort",description:"Port for the SSL server",promptOptions:{type:"number"}},certPath:{value:null,types:["string","null"],envLink:"SERVER_SSL_CERT_PATH",cliName:"sslCertPath",legacyName:"sslPath",description:"Path to the SSL certificate/key file",promptOptions:{type:"text"}}}},pool:{minWorkers:{value:4,types:["number"],envLink:"POOL_MIN_WORKERS",description:"Minimum and initial number of pool workers to spawn",promptOptions:{type:"number"}},maxWorkers:{value:8,types:["number"],envLink:"POOL_MAX_WORKERS",legacyName:"workers",description:"Maximum number of pool workers to spawn",promptOptions:{type:"number"}},workLimit:{value:40,types:["number"],envLink:"POOL_WORK_LIMIT",description:"Number of tasks a worker can handle before restarting",promptOptions:{type:"number"}},acquireTimeout:{value:5e3,types:["number"],envLink:"POOL_ACQUIRE_TIMEOUT",description:"Timeout in milliseconds for acquiring a resource",promptOptions:{type:"number"}},createTimeout:{value:5e3,types:["number"],envLink:"POOL_CREATE_TIMEOUT",description:"Timeout in milliseconds for creating a resource",promptOptions:{type:"number"}},destroyTimeout:{value:5e3,types:["number"],envLink:"POOL_DESTROY_TIMEOUT",description:"Timeout in milliseconds for destroying a resource",promptOptions:{type:"number"}},idleTimeout:{value:3e4,types:["number"],envLink:"POOL_IDLE_TIMEOUT",description:"Timeout in milliseconds for destroying idle resources",promptOptions:{type:"number"}},createRetryInterval:{value:200,types:["number"],envLink:"POOL_CREATE_RETRY_INTERVAL",description:"Interval in milliseconds before retrying resource creation on failure",promptOptions:{type:"number"}},reaperInterval:{value:1e3,types:["number"],envLink:"POOL_REAPER_INTERVAL",description:"Interval in milliseconds to check and destroy idle resources",promptOptions:{type:"number"}},benchmarking:{value:!1,types:["boolean"],envLink:"POOL_BENCHMARKING",cliName:"poolBenchmarking",description:"Shows statistics for the pool of resources",promptOptions:{type:"toggle"}}},logging:{level:{value:4,types:["number"],envLink:"LOGGING_LEVEL",cliName:"logLevel",description:"Logging verbosity level",promptOptions:{type:"number",round:0,min:0,max:5}},file:{value:"highcharts-export-server.log",types:["string"],envLink:"LOGGING_FILE",cliName:"logFile",description:"Log file name. Requires `logToFile` and `logDest` to be set",promptOptions:{type:"text"}},dest:{value:"log",types:["string"],envLink:"LOGGING_DEST",cliName:"logDest",description:"Path to store log files. Requires `logToFile` to be set",promptOptions:{type:"text"}},toConsole:{value:!0,types:["boolean"],envLink:"LOGGING_TO_CONSOLE",cliName:"logToConsole",description:"Enables or disables console logging",promptOptions:{type:"toggle"}},toFile:{value:!0,types:["boolean"],envLink:"LOGGING_TO_FILE",cliName:"logToFile",description:"Enables or disables logging to a file",promptOptions:{type:"toggle"}}},ui:{enable:{value:!1,types:["boolean"],envLink:"UI_ENABLE",cliName:"enableUi",description:"Enables or disables the UI for the export server",promptOptions:{type:"toggle"}},route:{value:"/",types:["string"],envLink:"UI_ROUTE",cliName:"uiRoute",description:"The endpoint route for the UI",promptOptions:{type:"text"}}},other:{nodeEnv:{value:"production",types:["string"],envLink:"OTHER_NODE_ENV",description:"The Node.js environment type",promptOptions:{type:"text"}},listenToProcessExits:{value:!0,types:["boolean"],envLink:"OTHER_LISTEN_TO_PROCESS_EXITS",description:"Whether or not to attach process.exit handlers",promptOptions:{type:"toggle"}},noLogo:{value:!1,types:["boolean"],envLink:"OTHER_NO_LOGO",description:"Display or skip printing the logo on startup",promptOptions:{type:"toggle"}},hardResetPage:{value:!1,types:["boolean"],envLink:"OTHER_HARD_RESET_PAGE",description:"Whether or not to reset the page content entirely",promptOptions:{type:"toggle"}},browserShellMode:{value:!0,types:["boolean"],envLink:"OTHER_BROWSER_SHELL_MODE",description:"Whether or not to set the browser to run in shell mode",promptOptions:{type:"toggle"}},validation:{value:!0,types:["boolean"],envLink:"OTHER_VALIDATION",description:"Whether or not to enable validation of options types",promptOptions:{type:"toggle"}}},debug:{enable:{value:!1,types:["boolean"],envLink:"DEBUG_ENABLE",cliName:"enableDebug",description:"Enables or disables debug mode for the underlying browser",promptOptions:{type:"toggle"}},headless:{value:!1,types:["boolean"],envLink:"DEBUG_HEADLESS",description:"Whether or not to set the browser to run in headless mode during debugging",promptOptions:{type:"toggle"}},devtools:{value:!1,types:["boolean"],envLink:"DEBUG_DEVTOOLS",description:"Enables or disables DevTools in headful mode",promptOptions:{type:"toggle"}},listenToConsole:{value:!1,types:["boolean"],envLink:"DEBUG_LISTEN_TO_CONSOLE",description:"Enables or disables listening to console messages from the browser",promptOptions:{type:"toggle"}},dumpio:{value:!1,types:["boolean"],envLink:"DEBUG_DUMPIO",description:"Redirects or not browser stdout and stderr to process.stdout and process.stderr",promptOptions:{type:"toggle"}},slowMo:{value:0,types:["number"],envLink:"DEBUG_SLOW_MO",description:"Delays Puppeteer operations by the specified milliseconds",promptOptions:{type:"number"}},debuggingPort:{value:9222,types:["number"],envLink:"DEBUG_DEBUGGING_PORT",description:"Port used for debugging",promptOptions:{type:"number"}}},webSocket:{enable:{value:!1,types:["boolean"],envLink:"WEB_SOCKET_ENABLE",cliName:"enableWs",description:"Enables or disables the WebSocket connection",promptOptions:{type:"toggle"}},reconnect:{value:!1,types:["boolean"],envLink:"WEB_SOCKET_RECONNECT",cliName:"wsReconnect",description:"Whether or not to attempt to reconnect to the WebSocket server if disconnected",promptOptions:{type:"toggle"}},rejectUnauthorized:{value:!1,types:["boolean"],envLink:"WEB_SOCKET_REJECT_UNAUTHORIZED",cliName:"wsRejectUnauthorized",description:"Whether or not to client should verify the server's SSL/TLS certificate during the handshake",promptOptions:{type:"toggle"}},pingTimeout:{value:16e3,types:["number"],envLink:"WEB_SOCKET_PING_TIMEOUT",cliName:"wsPingTimeout",description:"Timeout in milliseconds for the heartbeat mechanism between client and server",promptOptions:{type:"number"}},reconnectInterval:{value:3e3,types:["number"],envLink:"WEB_SOCKET_RECONNECT_INTERVAL",cliName:"wsReconnectInterval",description:"Interval in milliseconds between reconnect attempts",promptOptions:{type:"number"}},reconnectAttempts:{value:3,types:["number"],envLink:"WEB_SOCKET_RECONNECT_ATTEMPTS",cliName:"wsReconnectAttempts",description:"Number of attempts to reconnect before reporting an error",promptOptions:{type:"number"}},messageInterval:{value:36e5,types:["number"],envLink:"WEB_SOCKET_MESSAGE_INTERVAL",cliName:"wsMessageInterval",description:"Interval in milliseconds for automatically sending data through the WebSocket connection",promptOptions:{type:"number"}},gatherAllOptions:{value:!1,types:["boolean"],envLink:"WEB_SOCKET_GATHER_ALL_OPTIONS",cliName:"wsGatherAllOptions",description:"Whether or not to gather all chart options or only those defined in the telemetry.json file",promptOptions:{type:"toggle"}},url:{value:null,types:["string","null"],envLink:"WEB_SOCKET_URL",cliName:"wsUrl",description:"URL of the WebSocket server",promptOptions:{type:"text"}}}};dotenv.config();const{coreScripts:coreScripts,moduleScripts:moduleScripts,indicatorScripts:indicatorScripts}=defaultConfig.highcharts;zod.z.setErrorMap(_customErrorMap);const v={boolean:e=>e?zod.z.boolean():zod.z.union([zod.z.enum(["true","1","false","0","undefined","null",""]).transform((e=>["undefined","null",""].includes(e)?null:"true"===e||"1"===e)),zod.z.boolean()]).nullable(),string:e=>e?zod.z.string().trim().refine((e=>!["false","undefined","null",""].includes(e)),{params:{errorMessage:"The string contains a forbidden value"}}):zod.z.string().trim().transform((e=>["false","undefined","null",""].includes(e)?null:e)).nullable(),enum:(e,t)=>t?zod.z.enum([...e]):zod.z.enum([...e,"undefined","null",""]).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),stringArray(e,t,o){const r=zod.z.string().trim().array(),n=zod.z.string().trim().transform((e=>(e.startsWith("[")&&(e=e.slice(1)),e.endsWith("]")&&(e=e.slice(0,-1)),e.split(t)))),i=t=>t.map((e=>e.trim())).filter(e);return o?r.transform(i):zod.z.union([n,r]).transform(i).transform((e=>e.length?e:null)).nullable()},positiveNum:e=>e?zod.z.number().positive():zod.z.union([zod.z.string().trim().refine((e=>!isNaN(Number(e))&&Number(e)>0||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be numeric and positive"}}).transform((e=>["undefined","null",""].includes(e)?null:Number(e))),zod.z.number().positive()]).nullable(),nonNegativeNum:e=>e?zod.z.number().nonnegative():zod.z.union([zod.z.string().trim().refine((e=>!isNaN(Number(e))&&Number(e)>=0||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be numeric and non-negative"}}).transform((e=>["undefined","null",""].includes(e)?null:Number(e))),zod.z.number().nonnegative()]).nullable(),startsWith:(e,t)=>t?zod.z.string().trim().refine((t=>e.some((e=>t.startsWith(e)))),{params:{errorMessage:`The value must be a string that starts with ${e.join(", ")}`}}):zod.z.string().trim().refine((t=>e.some((e=>t.startsWith(e)))||["undefined","null",""].includes(t)),{params:{errorMessage:`The value must be a string that starts with ${e.join(", ")}`}}).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),chartConfig:()=>zod.z.union([zod.z.string().trim().refine((e=>e.startsWith("{")&&e.endsWith("}")||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that starts with '{' and ends with '}'"}}).transform((e=>["undefined","null",""].includes(e)?null:e)),zod.z.object({}).passthrough()]).nullable(),additionalOptions:()=>zod.z.union([zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".json")||e.startsWith("{")&&e.endsWith("}")||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that ends with '.json' or starts with '{' and ends with '}'"}}).transform((e=>["undefined","null",""].includes(e)?null:e)),zod.z.object({}).passthrough()]).nullable()},validators={args:e=>v.stringArray((e=>!["false","undefined","null",""].includes(e)),";",e),version:e=>e?zod.z.string().trim().refine((e=>/^(latest|\d{1,2}(\.\d{1,2}){0,2})$/.test(e)),{params:{errorMessage:"The value must be 'latest', a major version, or in the form XX.YY.ZZ"}}):zod.z.string().trim().refine((e=>/^(latest|\d{1,2}(\.\d{1,2}){0,2})$/.test(e)||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be 'latest', a major version, or in the form XX.YY.ZZ"}}).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),cdnUrl:e=>v.startsWith(["http://","https://"],e),forceFetch:e=>v.boolean(e),cachePath:e=>v.string(e),adminToken:e=>v.string(e),coreScripts:e=>v.stringArray((e=>coreScripts.value.includes(e)),",",e),moduleScripts:e=>v.stringArray((e=>moduleScripts.value.includes(e)),",",e),indicatorScripts:e=>v.stringArray((e=>indicatorScripts.value.includes(e)),",",e),customScripts:e=>v.stringArray((e=>e.startsWith("https://")||e.startsWith("http://")),",",e),infile:e=>e?zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".json")||e.length>=5&&e.endsWith(".svg")),{params:{errorMessage:"The value must be a string that ends with .json or .svg"}}).nullable():zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".json")||e.length>=5&&e.endsWith(".svg")||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that ends with .json or .svg"}}).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),instr:()=>v.chartConfig(),options:()=>v.chartConfig(),svg:()=>zod.z.string().trim().refine((e=>e.indexOf("<svg")>=0||e.indexOf("<?xml")>=0||["false","undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that contains '<svg' or '<?xml'"}}).transform((e=>["false","undefined","null",""].includes(e)?null:e)).nullable(),outfile:e=>e?zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".jpeg")||e.length>=5&&(e.endsWith(".jpg")||e.endsWith(".png")||e.endsWith(".pdf")||e.endsWith(".svg"))),{params:{errorMessage:"The value must be a string that ends with .jpeg, .jpg, .png, .pdf, or .svg"}}).nullable():zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".jpeg")||e.length>=5&&(e.endsWith(".jpg")||e.endsWith(".png")||e.endsWith(".pdf")||e.endsWith(".svg"))||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that ends with .jpeg, .jpg, .png, .pdf, or .svg"}}).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),type:e=>v.enum(["jpeg","jpg","png","pdf","svg"],e),constr:e=>v.enum(["chart","stockChart","mapChart","ganttChart"],e),b64:e=>v.boolean(e),noDownload:e=>v.boolean(e),defaultHeight:e=>v.positiveNum(e),defaultWidth:e=>v.positiveNum(e),defaultScale:e=>e?zod.z.number().gte(.1).lte(5):zod.z.union([zod.z.string().trim().refine((e=>!isNaN(Number(e))&&!0!==e&&!e.startsWith("[")&&Number(e)>=.1&&Number(e)<=5||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be within a 0.1 and 5.0 range"}}).transform((e=>["undefined","null",""].includes(e)?null:Number(e))),zod.z.number().gte(.1).lte(5)]).nullable(),height(e){return this.defaultHeight(e).nullable()},width(e){return this.defaultWidth(e).nullable()},scale(e){return this.defaultScale(e).nullable()},globalOptions:()=>v.additionalOptions(),themeOptions:()=>v.additionalOptions(),batch:e=>v.string(e),rasterizationTimeout:e=>v.nonNegativeNum(e),allowCodeExecution:e=>v.boolean(e),allowFileResources:e=>v.boolean(e),customCode:e=>v.string(e),callback:e=>v.string(e),resources(e){const t=zod.z.object({js:v.string(!1),css:v.string(!1),files:v.stringArray((e=>!["undefined","null",""].includes(e)),",",!0).nullable()}).partial(),o=zod.z.string().trim().refine((e=>e.startsWith("{")&&e.endsWith("}")||e.length>=6&&e.endsWith(".json")),{params:{errorMessage:"The value must be a string that starts with '{' and ends with '}"}}),r=zod.z.string().trim().refine((e=>e.startsWith("{")&&e.endsWith("}")||e.length>=6&&e.endsWith(".json")||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that ends with .json"}}).transform((e=>["undefined","null",""].includes(e)?null:e));return e?zod.z.union([t,o]).nullable():zod.z.union([t,r]).nullable()},loadConfig:e=>v.string(e).refine((e=>null===e||e.length>=6&&e.endsWith(".json")),{params:{errorMessage:"The value must be a string that ends with .json"}}),createConfig(e){return this.loadConfig(e)},enableServer:e=>v.boolean(e),host:e=>v.string(e),port:e=>v.nonNegativeNum(e),uploadLimit:e=>v.positiveNum(e),serverBenchmarking:e=>v.boolean(e),proxyHost:e=>v.string(e),proxyPort:e=>v.nonNegativeNum(e).nullable(),proxyTimeout:e=>v.nonNegativeNum(e),enableRateLimiting:e=>v.boolean(e),maxRequests:e=>v.nonNegativeNum(e),window:e=>v.nonNegativeNum(e),delay:e=>v.nonNegativeNum(e),trustProxy:e=>v.boolean(e),skipKey:e=>v.string(e),skipToken:e=>v.string(e),enableSsl:e=>v.boolean(e),sslForce:e=>v.boolean(e),sslPort:e=>v.nonNegativeNum(e),sslCertPath:e=>v.string(e),minWorkers:e=>v.positiveNum(e),maxWorkers:e=>v.positiveNum(e),workLimit:e=>v.positiveNum(e),acquireTimeout:e=>v.nonNegativeNum(e),createTimeout:e=>v.nonNegativeNum(e),destroyTimeout:e=>v.nonNegativeNum(e),idleTimeout:e=>v.nonNegativeNum(e),createRetryInterval:e=>v.nonNegativeNum(e),reaperInterval:e=>v.nonNegativeNum(e),poolBenchmarking:e=>v.boolean(e),resourcesInterval:e=>v.nonNegativeNum(e),logLevel:e=>e?zod.z.number().int().gte(0).lte(5):zod.z.union([zod.z.string().trim().refine((e=>!isNaN(Number(e))&&!0!==e&&!e.startsWith("[")&&Number.isInteger(Number(e))&&Number(e)>=0&&Number(e)<=5||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be within a 0 and 5 range"}}).transform((e=>["undefined","null",""].includes(e)?null:Number(e))),zod.z.number().int().gte(0).lte(5)]).nullable(),logFile:e=>v.string(e).refine((e=>null===e||e.length>=5&&e.endsWith(".log")),{params:{errorMessage:"The value must be a string that ends with .log"}}),logDest:e=>v.string(e),logToConsole:e=>v.boolean(e),logToFile:e=>v.boolean(e),enableUi:e=>v.boolean(e),uiRoute:e=>v.startsWith(["/"],e),nodeEnv:e=>v.enum(["development","production","test"],e),listenToProcessExits:e=>v.boolean(e),noLogo:e=>v.boolean(e),hardResetPage:e=>v.boolean(e),browserShellMode:e=>v.boolean(e),validation:e=>v.boolean(e),enableDebug:e=>v.boolean(e),headless:e=>v.boolean(e),devtools:e=>v.boolean(e),listenToConsole:e=>v.boolean(e),dumpio:e=>v.boolean(e),slowMo:e=>v.nonNegativeNum(e),debuggingPort:e=>v.nonNegativeNum(e),enableWs:e=>v.boolean(e),wsReconnect:e=>v.boolean(e),wsRejectUnauthorized:e=>v.boolean(e),wsPingTimeout:e=>v.nonNegativeNum(e),wsReconnectInterval:e=>v.nonNegativeNum(e),wsReconnectAttempts:e=>v.nonNegativeNum(e),wsMessageInterval:e=>v.nonNegativeNum(e),wsGatherAllOptions:e=>v.boolean(e),wsUrl:e=>v.startsWith(["ws://","wss://"],e).nullable(),wsSecret:e=>v.string(e),requestId:()=>zod.z.string().uuid({message:"The value must be a stringified UUID"}).nullable()},PuppeteerSchema=e=>zod.z.object({args:validators.args(e)}).partial(),HighchartsSchema=e=>zod.z.object({version:validators.version(e),cdnUrl:validators.cdnUrl(e),forceFetch:validators.forceFetch(e),cachePath:validators.cachePath(e),coreScripts:validators.coreScripts(e),moduleScripts:validators.moduleScripts(e),indicatorScripts:validators.indicatorScripts(e),customScripts:validators.customScripts(e)}).partial(),ExportSchema=e=>zod.z.object({infile:validators.infile(e),instr:validators.instr(),options:validators.options(),svg:validators.svg(),outfile:validators.outfile(e),type:validators.type(e),constr:validators.constr(e),b64:validators.b64(e),noDownload:validators.noDownload(e),defaultHeight:validators.defaultHeight(e),defaultWidth:validators.defaultWidth(e),defaultScale:validators.defaultScale(e),height:validators.height(e),width:validators.width(e),scale:validators.scale(e),globalOptions:validators.globalOptions(),themeOptions:validators.themeOptions(),batch:validators.batch(!1),rasterizationTimeout:validators.rasterizationTimeout(e)}).partial(),CustomLogicSchema=e=>zod.z.object({allowCodeExecution:validators.allowCodeExecution(e),allowFileResources:validators.allowFileResources(e),customCode:validators.customCode(!1),callback:validators.callback(!1),resources:validators.resources(e),loadConfig:validators.loadConfig(!1),createConfig:validators.createConfig(!1)}).partial(),ProxySchema=e=>zod.z.object({host:validators.proxyHost(!1),port:validators.proxyPort(e),timeout:validators.proxyTimeout(e)}).partial(),RateLimitingSchema=e=>zod.z.object({enable:validators.enableRateLimiting(e),maxRequests:validators.maxRequests(e),window:validators.window(e),delay:validators.delay(e),trustProxy:validators.trustProxy(e),skipKey:validators.skipKey(!1),skipToken:validators.skipToken(!1)}).partial(),SslSchema=e=>zod.z.object({enable:validators.enableSsl(e),force:validators.sslForce(e),port:validators.sslPort(e),certPath:validators.sslCertPath(!1)}).partial(),ServerSchema=e=>zod.z.object({enable:validators.enableServer(e).optional(),host:validators.host(e).optional(),port:validators.port(e).optional(),uploadLimit:validators.uploadLimit(e).optional(),benchmarking:validators.serverBenchmarking(e).optional(),proxy:ProxySchema(e).optional(),rateLimiting:RateLimitingSchema(e).optional(),ssl:SslSchema(e).optional()}),PoolSchema=e=>zod.z.object({minWorkers:validators.minWorkers(e),maxWorkers:validators.maxWorkers(e),workLimit:validators.workLimit(e),acquireTimeout:validators.acquireTimeout(e),createTimeout:validators.createTimeout(e),destroyTimeout:validators.destroyTimeout(e),idleTimeout:validators.idleTimeout(e),createRetryInterval:validators.createRetryInterval(e),reaperInterval:validators.reaperInterval(e),benchmarking:validators.poolBenchmarking(e)}).partial(),LoggingSchema=e=>zod.z.object({level:validators.logLevel(e),file:validators.logFile(e),dest:validators.logDest(e),toConsole:validators.logToConsole(e),toFile:validators.logToFile(e)}).partial(),UiSchema=e=>zod.z.object({enable:validators.enableUi(e),route:validators.uiRoute(e)}).partial(),OtherSchema=e=>zod.z.object({nodeEnv:validators.nodeEnv(e),listenToProcessExits:validators.listenToProcessExits(e),noLogo:validators.noLogo(e),hardResetPage:validators.hardResetPage(e),browserShellMode:validators.browserShellMode(e),validation:validators.validation(e)}).partial(),DebugSchema=e=>zod.z.object({enable:validators.enableDebug(e),headless:validators.headless(e),devtools:validators.devtools(e),listenToConsole:validators.listenToConsole(e),dumpio:validators.dumpio(e),slowMo:validators.slowMo(e),debuggingPort:validators.debuggingPort(e)}).partial(),WebSocketSchema=e=>zod.z.object({enable:validators.enableWs(e),reconnect:validators.wsReconnect(e),rejectUnauthorized:validators.wsRejectUnauthorized(e),pingTimeout:validators.wsPingTimeout(e),reconnectInterval:validators.wsReconnectInterval(e),reconnectAttempts:validators.wsReconnectAttempts(e),messageInterval:validators.wsMessageInterval(e),gatherAllOptions:validators.wsGatherAllOptions(e),url:validators.wsUrl(e)}).partial(),StrictConfigSchema=zod.z.object({requestId:validators.requestId(),puppeteer:PuppeteerSchema(!0),highcharts:HighchartsSchema(!0),export:ExportSchema(!0),customLogic:CustomLogicSchema(!0),server:ServerSchema(!0),pool:PoolSchema(!0),logging:LoggingSchema(!0),ui:UiSchema(!0),other:OtherSchema(!0),debug:DebugSchema(!0),webSocket:WebSocketSchema(!0)}),LooseConfigSchema=zod.z.object({requestId:validators.requestId(),puppeteer:PuppeteerSchema(!1),highcharts:HighchartsSchema(!1),export:ExportSchema(!1),customLogic:CustomLogicSchema(!1),server:ServerSchema(!1),pool:PoolSchema(!1),logging:LoggingSchema(!1),ui:UiSchema(!1),other:OtherSchema(!1),debug:DebugSchema(!1),webSocket:WebSocketSchema(!1)}),EnvSchema=zod.z.object({PUPPETEER_ARGS:validators.args(!1),HIGHCHARTS_VERSION:validators.version(!1),HIGHCHARTS_CDN_URL:validators.cdnUrl(!1),HIGHCHARTS_FORCE_FETCH:validators.forceFetch(!1),HIGHCHARTS_CACHE_PATH:validators.cachePath(!1),HIGHCHARTS_ADMIN_TOKEN:validators.adminToken(!1),HIGHCHARTS_CORE_SCRIPTS:validators.coreScripts(!1),HIGHCHARTS_MODULE_SCRIPTS:validators.moduleScripts(!1),HIGHCHARTS_INDICATOR_SCRIPTS:validators.indicatorScripts(!1),HIGHCHARTS_CUSTOM_SCRIPTS:validators.customScripts(!1),EXPORT_INFILE:validators.infile(!1),EXPORT_INSTR:validators.instr(),EXPORT_OPTIONS:validators.options(),EXPORT_SVG:validators.svg(),EXPORT_BATCH:validators.batch(!1),EXPORT_OUTFILE:validators.outfile(!1),EXPORT_TYPE:validators.type(!1),EXPORT_CONSTR:validators.constr(!1),EXPORT_B64:validators.b64(!1),EXPORT_NO_DOWNLOAD:validators.noDownload(!1),EXPORT_HEIGHT:validators.height(!1),EXPORT_WIDTH:validators.width(!1),EXPORT_SCALE:validators.scale(!1),EXPORT_DEFAULT_HEIGHT:validators.defaultHeight(!1),EXPORT_DEFAULT_WIDTH:validators.defaultWidth(!1),EXPORT_DEFAULT_SCALE:validators.defaultScale(!1),EXPORT_GLOBAL_OPTIONS:validators.globalOptions(),EXPORT_THEME_OPTIONS:validators.themeOptions(),EXPORT_RASTERIZATION_TIMEOUT:validators.rasterizationTimeout(!1),CUSTOM_LOGIC_ALLOW_CODE_EXECUTION:validators.allowCodeExecution(!1),CUSTOM_LOGIC_ALLOW_FILE_RESOURCES:validators.allowFileResources(!1),CUSTOM_LOGIC_CUSTOM_CODE:validators.customCode(!1),CUSTOM_LOGIC_CALLBACK:validators.callback(!1),CUSTOM_LOGIC_RESOURCES:validators.resources(!1),CUSTOM_LOGIC_LOAD_CONFIG:validators.loadConfig(!1),CUSTOM_LOGIC_CREATE_CONFIG:validators.createConfig(!1),SERVER_ENABLE:validators.enableServer(!1),SERVER_HOST:validators.host(!1),SERVER_PORT:validators.port(!1),SERVER_UPLOAD_LIMIT:validators.uploadLimit(!1),SERVER_BENCHMARKING:validators.serverBenchmarking(!1),SERVER_PROXY_HOST:validators.proxyHost(!1),SERVER_PROXY_PORT:validators.proxyPort(!1),SERVER_PROXY_TIMEOUT:validators.proxyTimeout(!1),SERVER_RATE_LIMITING_ENABLE:validators.enableRateLimiting(!1),SERVER_RATE_LIMITING_MAX_REQUESTS:validators.maxRequests(!1),SERVER_RATE_LIMITING_WINDOW:validators.window(!1),SERVER_RATE_LIMITING_DELAY:validators.delay(!1),SERVER_RATE_LIMITING_TRUST_PROXY:validators.trustProxy(!1),SERVER_RATE_LIMITING_SKIP_KEY:validators.skipKey(!1),SERVER_RATE_LIMITING_SKIP_TOKEN:validators.skipToken(!1),SERVER_SSL_ENABLE:validators.enableSsl(!1),SERVER_SSL_FORCE:validators.sslForce(!1),SERVER_SSL_PORT:validators.sslPort(!1),SERVER_SSL_CERT_PATH:validators.sslCertPath(!1),POOL_MIN_WORKERS:validators.minWorkers(!1),POOL_MAX_WORKERS:validators.maxWorkers(!1),POOL_WORK_LIMIT:validators.workLimit(!1),POOL_ACQUIRE_TIMEOUT:validators.acquireTimeout(!1),POOL_CREATE_TIMEOUT:validators.createTimeout(!1),POOL_DESTROY_TIMEOUT:validators.destroyTimeout(!1),POOL_IDLE_TIMEOUT:validators.idleTimeout(!1),POOL_CREATE_RETRY_INTERVAL:validators.createRetryInterval(!1),POOL_REAPER_INTERVAL:validators.reaperInterval(!1),POOL_BENCHMARKING:validators.poolBenchmarking(!1),LOGGING_LEVEL:validators.logLevel(!1),LOGGING_FILE:validators.logFile(!1),LOGGING_DEST:validators.logDest(!1),LOGGING_TO_CONSOLE:validators.logToConsole(!1),LOGGING_TO_FILE:validators.logToFile(!1),UI_ENABLE:validators.enableUi(!1),UI_ROUTE:validators.uiRoute(!1),OTHER_NODE_ENV:validators.nodeEnv(!1),OTHER_LISTEN_TO_PROCESS_EXITS:validators.listenToProcessExits(!1),OTHER_NO_LOGO:validators.noLogo(!1),OTHER_HARD_RESET_PAGE:validators.hardResetPage(!1),OTHER_BROWSER_SHELL_MODE:validators.browserShellMode(!1),OTHER_VALIDATION:validators.validation(!1),DEBUG_ENABLE:validators.enableDebug(!1),DEBUG_HEADLESS:validators.headless(!1),DEBUG_DEVTOOLS:validators.devtools(!1),DEBUG_LISTEN_TO_CONSOLE:validators.listenToConsole(!1),DEBUG_DUMPIO:validators.dumpio(!1),DEBUG_SLOW_MO:validators.slowMo(!1),DEBUG_DEBUGGING_PORT:validators.debuggingPort(!1),WEB_SOCKET_ENABLE:validators.enableWs(!1),WEB_SOCKET_RECONNECT:validators.wsReconnect(!1),WEB_SOCKET_REJECT_UNAUTHORIZED:validators.wsRejectUnauthorized(!1),WEB_SOCKET_PING_TIMEOUT:validators.wsPingTimeout(!1),WEB_SOCKET_RECONNECT_INTERVAL:validators.wsReconnectInterval(!1),WEB_SOCKET_RECONNECT_ATTEMPTS:validators.wsReconnectAttempts(!1),WEB_SOCKET_MESSAGE_INTERVAL:validators.wsMessageInterval(!1),WEB_SOCKET_GATHER_ALL_OPTIONS:validators.wsGatherAllOptions(!1),WEB_SOCKET_URL:validators.wsUrl(!1),WEB_SOCKET_SECRET:validators.wsSecret(!1)}),envs=EnvSchema.partial().parse(process.env);function strictValidate(e){return StrictConfigSchema.partial().parse(e)}function looseValidate(e){return LooseConfigSchema.partial().parse(e)}function _customErrorMap(e,t){const o=e.path.join("."),r=`Invalid value for the ${o}`;if(e.code===zod.z.ZodIssueCode.invalid_type)return e.received===zod.z.ZodParsedType.undefined?{message:`${r} - No value was provided.`}:{message:`${r} - Invalid type. ${t.defaultError}.`};if(e.code===zod.z.ZodIssueCode.custom&&e.params?.errorMessage)return{message:`${r} - ${e.params?.errorMessage}, received '${t.data}'.`};if(e.code===zod.z.ZodIssueCode.invalid_union){let t=`Multiple errors occurred for the ${o}:\n`;return e.unionErrors.forEach((e=>{const o=e.issues[0].message.indexOf("-");t+=-1!==o?`${e.issues[0].message}\n`.substring(o):`${e.issues[0].message}\n`})),{message:t}}return{message:`${r} - ${t.defaultError}.`}}class ExportError extends Error{constructor(e,t){super(),this.message=e,this.stackMessage=e,t&&(this.statusCode=t)}setError(e){return this.error=e,e.name&&(this.name=e.name),e.statusCode&&(this.statusCode=e.statusCode),e.stack&&(this.stackMessage=e.message,this.stack=e.stack),this}}const globalOptions=_initOptions(defaultConfig),nestedProps=_createNestedProps(defaultConfig),absoluteProps=_createAbsoluteProps(defaultConfig);function getOptions(e=!0){return e?deepCopy(globalOptions):globalOptions}function updateOptions(e,t=!1,o=!0){return _mergeOptions(getOptions(t),validateOptions(e,o))}function mapToNewOptions(e){const t={};if(isObject(e))for(const[o,r]of Object.entries(e)){const e=nestedProps[o]?nestedProps[o].split("."):[];e.reduce(((t,o,n)=>t[o]=e.length-1===n?r:t[o]||{}),t)}else log(2,"[config] No correct object with options was provided. Returning an empty object.");return t}function validateOption(e,t,o=!0){if(!getOptions().other.validation)return t;try{return validators[e](o).parse(t)}catch(t){throw logZodIssues(1,t.issues,`[validation] The ${e} option validation error`),new ExportError(`[validation] The ${e} option validation error`,400)}}function validateOptions(e,t=!0){if(!getOptions().other.validation)return e;try{return t?strictValidate(e):looseValidate(e)}catch(e){throw logZodIssues(1,e.issues,"[validation] Options validation error"),new ExportError("[validation] Options validation error",400)}}function isAllowedConfig(config,toString=!1,allowFunctions=!1){try{if(!isObject(config)&&"string"!=typeof config)return null;const objectConfig="string"==typeof config?allowFunctions?eval(`(${config})`):JSON.parse(config):config,stringifiedOptions=_optionsStringify(objectConfig,allowFunctions,!1),parsedOptions=allowFunctions?JSON.parse(_optionsStringify(objectConfig,allowFunctions,!0),((_,value)=>"string"==typeof value&&value.startsWith("function")?eval(`(${value})`):value)):JSON.parse(stringifiedOptions);return toString?stringifiedOptions:parsedOptions}catch(e){return null}}function _initOptions(e){const t={};for(const[o,r]of Object.entries(e))Object.prototype.hasOwnProperty.call(r,"value")?void 0!==envs[r.envLink]&&null!==envs[r.envLink]?t[o]=envs[r.envLink]:t[o]=r.value:t[o]=_initOptions(r);return t}function _mergeOptions(e,t){if(isObject(e)&&isObject(t))for(const[o,r]of Object.entries(t))e[o]=isObject(r)&&!absoluteProps.includes(o)&&void 0!==e[o]?_mergeOptions(e[o],r):void 0!==r?r:e[o]||null;return e}function _optionsStringify(e,t,o){return JSON.stringify(e,((e,r)=>{if("string"==typeof r&&(r=r.trim()),"function"==typeof r||"string"==typeof r&&r.startsWith("function")&&r.endsWith("}")){if(t)return o?`"EXP_FUN${(r+"").replaceAll(/\s+/g," ")}EXP_FUN"`:`EXP_FUN${(r+"").replaceAll(/\s+/g," ")}EXP_FUN`;throw new Error}return r})).replaceAll(o?/\\"EXP_FUN|EXP_FUN\\"/g:/"EXP_FUN|EXP_FUN"/g,"")}function _createNestedProps(e,t={},o=""){return Object.keys(e).forEach((r=>{const n=e[r];void 0===n.value?_createNestedProps(n,t,`${o}.${r}`):(t[n.cliName||r]=`${o}.${r}`.substring(1),void 0!==n.legacyName&&(t[n.legacyName]=`${o}.${r}`.substring(1)))})),t}function _createAbsoluteProps(e,t=[]){return Object.keys(e).forEach((o=>{const r=e[o];void 0===r.types?_createAbsoluteProps(r,t):r.types.includes("Object")&&t.push(o)})),t}async function get$1(e,t={}){return new Promise(((o,r)=>{_getProtocolModule(e).get(e,t,(e=>{let t="";e.on("data",(e=>{t+=e})),e.on("end",(()=>{t||r("Nothing was fetched from the URL."),e.text=t,o(e)}))})).on("error",(e=>{r(e)}))}))}function _getProtocolModule(e){return e.startsWith("https")?https:http}const cache={cdnUrl:"https://code.highcharts.com",activeManifest:{},sources:"",hcVersion:""};async function checkCache(e,t){try{let o;const r=getCachePath(),n=path.join(r,"manifest.json"),i=path.join(r,"sources.js");if(!fs.existsSync(r)&&fs.mkdirSync(r,{recursive:!0}),!fs.existsSync(n)||e.forceFetch)log(3,"[cache] Fetching and caching Highcharts dependencies."),o=await _updateCache(e,t,i);else{let r=!1;const s=JSON.parse(fs.readFileSync(n),"utf8");if(s.modules&&Array.isArray(s.modules)){const e={};s.modules.forEach((t=>e[t]=1)),s.modules=e}const{coreScripts:a,moduleScripts:l,indicatorScripts:c}=e,p=a.length+l.length+c.length;s.version!==e.version?(log(2,"[cache] A Highcharts version mismatch in the cache, need to re-fetch."),r=!0):Object.keys(s.modules||{}).length!==p?(log(2,"[cache] The cache and the requested modules do not match, need to re-fetch."),r=!0):r=(l||[]).some((e=>{if(!s.modules[e])return log(2,`[cache] The ${e} is missing in the cache, need to re-fetch.`),!0})),r?o=await _updateCache(e,t,i):(log(3,"[cache] Dependency cache is up to date, proceeding."),cache.sources=fs.readFileSync(i,"utf8"),o=s.modules,cache.hcVersion=_extractHcVersion(cache.sources))}await _saveConfigToManifest(e.version,o)}catch(e){throw new ExportError("[cache] Could not configure cache and create or update the config manifest.",500).setError(e)}}function getHcVersion(){return cache.hcVersion}async function updateHcVersion(e){const t=updateOptions({highcharts:{version:e}});await checkCache(t.highcharts,t.server.proxy)}function getCachePath(){return getAbsolutePath(getOptions().highcharts.cachePath)}async function _saveConfigToManifest(e,t={}){cache.activeManifest={version:e,modules:t},log(3,"[cache] Writing a new manifest.");try{fs.writeFileSync(path.join(getCachePath(),"manifest.json"),JSON.stringify(cache.activeManifest),"utf8")}catch(e){throw new ExportError("[cache] Error writing the cache manifest.",500).setError(e)}}async function _updateCache(e,t,o){try{const r="latest"===e.version?null:`${e.version}`;log(3,`[cache] Updating cache version to Highcharts: ${r||"latest"}.`);const n=e.cdnUrl||cache.cdnUrl,i=_configureRequest(t),s={};return cache.sources=(await Promise.all([...e.coreScripts.map((e=>_fetchScript(r?`${n}/${r}/${e}`:`${n}/${e}`,i,s,!0))),...e.moduleScripts.map((e=>_fetchScript("map"===e?r?`${n}/maps/${r}/modules/${e}`:`${n}/maps/modules/${e}`:r?`${n}/${r}/modules/${e}`:`${n}/modules/${e}`,i,s))),...e.indicatorScripts.map((e=>_fetchScript(r?`${n}/stock/${r}/indicators/${e}`:`${n}/stock/indicators/${e}`,i,s))),...e.customScripts.map((e=>_fetchScript(`${e}`,i)))])).join(";\n"),cache.hcVersion=_extractHcVersion(cache.sources),fs.writeFileSync(o,cache.sources),s}catch(e){throw new ExportError("[cache] Unable to update the local Highcharts cache.",500).setError(e)}}async function _fetchScript(e,t,o,r=!1){e.endsWith(".js")&&(e=e.substring(0,e.length-3)),log(4,`[cache] Fetching script - ${e}.js`);const n=await get$1(`${e}.js`,t);if(200===n.statusCode&&"string"==typeof n.text){if(o){o[_extractModuleName(e)]=1}return n.text}if(r)throw new ExportError(`[cache] Could not fetch the ${e}.js. The script might not exist in the requested version (status code: ${n.statusCode}).`,404).setError(n);log(2,`[cache] Could not fetch the ${e}.js. The script might not exist in the requested version.`)}function _configureRequest(e){const t=e.host,o=e.port;if(t&&o)try{return{agent:new httpsProxyAgent.HttpsProxyAgent({host:t,port:o}),timeout:e.timeout}}catch(e){throw new ExportError("[cache] Could not create a Proxy Agent.",500).setError(e)}return{}}function _extractHcVersion(e){return e.substring(0,e.indexOf("*/")).replace("/*","").replace("*/","").replace(/\n/g,"").trim()}function _extractModuleName(e){return e.replace(/(.*)\/|(.*)modules\/|stock\/(.*)indicators\/|maps\/(.*)modules\//gi,"")}function setupHighcharts(){Highcharts.animObject=function(){return{duration:0}}}async function createChart(e,t){const{getOptions:o,setOptions:r,merge:n,wrap:i}=Highcharts;Highcharts.setOptionsObj=n(!1,{},o()),window.isRenderComplete=!1,i(Highcharts.Chart.prototype,"init",(function(e,t,o){((t=n(t,{exporting:{enabled:!1},plotOptions:{series:{label:{enabled:!1}}},tooltip:{}})).series||[]).forEach((function(e){e.animation=!1})),window.onHighchartsRender||(window.onHighchartsRender=Highcharts.addEvent(this,"render",(()=>{window.isRenderComplete=!0}))),e.apply(this,[t,o])})),i(Highcharts.Series.prototype,"init",(function(e,t,o){e.apply(this,[t,o])}));const s={chart:{animation:!1,height:e.height,width:e.width},exporting:{enabled:!1}},a=new Function(`return ${e.instr}`)(),l=new Function(`return ${e.themeOptions}`)(),c=n(!1,l,a,s),p=t.callback?new Function(`return ${t.callback}`)():null;t.customCode&&new Function("options",t.customCode)(a);const u=new Function(`return ${e.globalOptions}`)();u&&r(u),Highcharts[e.constr]("container",c,p);const d=Array.from(document.querySelectorAll(".highcharts-container image"));await Promise.race([Promise.all(d.map((e=>e.complete&&0!==e.naturalHeight?Promise.resolve():new Promise((t=>e.addEventListener("load",t,{once:!0})))))),new Promise((e=>setTimeout(e,2e3)))]);const g=o();for(const e in g)"function"!=typeof g[e]&&delete g[e];r(Highcharts.setOptionsObj),Highcharts.setOptionsObj={}}const pageTemplate=fs.readFileSync(path.join(__dirname$1,"templates","template.html"),"utf8");let browser=null;async function createBrowser(e){const{debug:t,other:o}=getOptions(),{enable:r,...n}=t,i={headless:!o.browserShellMode||"shell",userDataDir:"tmp",args:e||[],handleSIGINT:!1,handleSIGTERM:!1,handleSIGHUP:!1,waitForInitialPage:!1,defaultViewport:null,...r&&n};if(!browser){let e=0;const t=async()=>{try{log(3,`[browser] Attempting to launch and get a browser instance (try ${++e}).`),browser=await puppeteer.launch(i)}catch(o){if(logWithStack(1,o,"[browser] Failed to launch a browser instance."),!(e<25))throw o;log(3,`[browser] Retry to open a browser (${e} out of 25).`),await new Promise((e=>setTimeout(e,4e3))),await t()}};try{await t(),"shell"===i.headless&&log(3,"[browser] Launched browser in shell mode."),r&&log(3,"[browser] Launched browser in debug mode.")}catch(e){throw new ExportError("[browser] Maximum retries to open a browser instance reached.",500).setError(e)}if(!browser)throw new ExportError("[browser] Cannot find a browser to open.",500)}return browser}async function closeBrowser(){browser&&browser.connected&&await browser.close(),browser=null,log(4,"[browser] Closed the browser.")}async function newPage(e){if(!browser||!browser.connected)throw new ExportError("[browser] Browser is not yet connected.",500);if(e.page=await browser.newPage(),await e.page.setCacheEnabled(!1),await _setPageContent(e.page),_setPageEvents(e.page),!e.page||e.page.isClosed())throw new ExportError("[browser] The page is invalid or closed.",400)}async function clearPage(e,t=!1){try{if(e.page&&!e.page.isClosed())return t?(await e.page.goto("about:blank",{waitUntil:"domcontentloaded"}),await _setPageContent(e.page)):await e.page.evaluate((()=>{document.body.innerHTML='<div id="chart-container"><div id="container"></div></div>'})),!0}catch(t){logWithStack(2,t,`[pool] Pool resource [${e.id}] - Content of the page could not be cleared.`),e.workCount=getOptions().pool.workLimit+1}return!1}async function addPageResources(e,t){const o=[],r=t.resources;if(r){const n=[];if(r.js&&n.push({content:r.js}),r.files)for(const e of r.files){const t=!e.startsWith("http");n.push(t?{content:fs.readFileSync(getAbsolutePath(e),"utf8")}:{url:e})}for(const t of n)try{o.push(await e.addScriptTag(t))}catch(e){logWithStack(2,e,"[browser] The JS resource cannot be loaded.")}n.length=0;const i=[];if(r.css){const n=r.css.match(/@import\s*([^;]*);/g);if(n)for(let e of n)e&&(e=e.replace("url(","").replace("@import","").replace(/"/g,"").replace(/'/g,"").replace(/;/,"").replace(/\)/g,"").trim(),e.startsWith("http")?i.push({url:e}):t.allowFileResources&&i.push({path:getAbsolutePath(e)}));i.push({content:r.css.replace(/@import\s*([^;]*);/g,"")||" "});for(const t of i)try{o.push(await e.addStyleTag(t))}catch(e){logWithStack(2,e,"[browser] The CSS resource cannot be loaded.")}i.length=0}}return o}async function clearPageResources(e,t){try{for(const e of t)await e.dispose();await e.evaluate((()=>{if("undefined"!=typeof Highcharts){const e=Highcharts.charts;if(Array.isArray(e)&&e.length)for(const t of e)t&&t.destroy(),Highcharts.charts.shift()}const[...e]=document.getElementsByTagName("script"),[,...t]=document.getElementsByTagName("style"),[...o]=document.getElementsByTagName("link");for(const r of[...e,...t,...o])r.remove()}))}catch(e){logWithStack(2,e,"[browser] Could not clear page's resources.")}}async function _setPageContent(e){await e.setContent(pageTemplate,{waitUntil:"domcontentloaded"}),await e.addScriptTag({path:path.join(getCachePath(),"sources.js")}),await e.evaluate(setupHighcharts)}function _setPageEvents(e){const{debug:t}=getOptions();e.on("pageerror",(async()=>{e.isClosed()})),t.enable&&t.listenToConsole&&e.on("console",(e=>{console.log(`[debug] ${e.text()}`)}))}var cssTemplate=()=>"\n\nhtml, body {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n#table-div, #sliders, #datatable, #controls, .ld-row {\n  display: none;\n  height: 0;\n}\n\n#chart-container {\n  box-sizing: border-box;\n  margin: 0;\n  overflow: auto;\n  font-size: 0;\n}\n\n#chart-container > figure, div {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n\n",svgTemplate=e=>`\n<!DOCTYPE html>\n<html lang='en-US'>\n  <head>\n    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n    <title>Highcharts Export</title>\n  </head>\n  <style>\n    ${cssTemplate()}\n  </style>\n  <body>\n    <div id="chart-container">\n      ${e}\n    </div>\n  </body>\n</html>\n\n`;async function puppeteerExport(e,t,o){const r=[];try{let n=!1;if(t.svg){if(log(4,"[export] Treating as SVG input."),"svg"===t.type)return t.svg;n=!0,await e.setContent(svgTemplate(t.svg),{waitUntil:"domcontentloaded"})}else log(4,"[export] Treating as JSON config."),await e.evaluate(createChart,t,o);r.push(...await addPageResources(e,o));const i=await _getChartSize(e,n,t.scale),{x:s,y:a}=await _getClipRegion(e),l=Math.abs(Math.ceil(i.chartHeight||t.height)),c=Math.abs(Math.ceil(i.chartWidth||t.width));let p;switch(await e.setViewport({height:l,width:c,deviceScaleFactor:n?1:parseFloat(t.scale)}),t.type){case"svg":p=await _createSVG(e);break;case"png":case"jpeg":p=await _createImage(e,t.type,{width:c,height:l,x:s,y:a},t.rasterizationTimeout);break;case"pdf":p=await _createPDF(e,l,c,t.rasterizationTimeout);break;default:throw new ExportError(`[export] Unsupported output format: ${t.type}.`,400)}return await clearPageResources(e,r),p}catch(t){return await clearPageResources(e,r),t}}async function _getClipRegion(e){return e.$eval("#chart-container",(e=>{const{x:t,y:o,width:r,height:n}=e.getBoundingClientRect();return{x:t,y:o,width:r,height:Math.trunc(n>1?n:500)}}))}async function _getChartSize(e,t,o){return t?await e.evaluate((e=>{const t=document.querySelector("#chart-container svg:first-of-type"),o=t.height.baseVal.value*e,r=t.width.baseVal.value*e;return document.body.style.zoom=e,document.body.style.margin="0px",{chartHeight:o,chartWidth:r}}),parseFloat(o)):await e.evaluate((()=>{const{chartHeight:e,chartWidth:t}=window.Highcharts.charts[0];return document.body.style.zoom=1,{chartHeight:e,chartWidth:t}}))}async function _createSVG(e){return e.$eval("#container svg:first-of-type",(e=>e.outerHTML))}async function _createImage(e,t,o,r){return Promise.race([e.screenshot({type:t,clip:o,encoding:"base64",fullPage:!1,optimizeForSpeed:!0,captureBeyondViewport:!0,..."png"!==t?{quality:80}:{},omitBackground:"png"==t}),new Promise(((e,t)=>setTimeout((()=>t(new ExportError("Rasterization timeout",408))),r||1500)))])}async function _createPDF(e,t,o,r){return await e.emulateMediaType("screen"),e.pdf({height:t+1,width:o,encoding:"base64",timeout:r||1500})}let pool=null;const poolStats={exportsAttempted:0,exportsPerformed:0,exportsDropped:0,exportsFromSvg:0,exportsFromOptions:0,exportsFromSvgAttempts:0,exportsFromOptionsAttempts:0,timeSpent:0,timeSpentAverage:0};async function initPool(e,t){await createBrowser(t);try{if(log(3,`[pool] Initializing pool with workers: min ${e.minWorkers}, max ${e.maxWorkers}.`),pool)return void log(4,"[pool] Already initialized, please kill it before creating a new one.");e.minWorkers>e.maxWorkers&&(e.minWorkers=e.maxWorkers),pool=new tarn.Pool({..._factory(e),min:e.minWorkers,max:e.maxWorkers,acquireTimeoutMillis:e.acquireTimeout,createTimeoutMillis:e.createTimeout,destroyTimeoutMillis:e.destroyTimeout,idleTimeoutMillis:e.idleTimeout,createRetryIntervalMillis:e.createRetryInterval,reapIntervalMillis:e.reaperInterval,propagateCreateError:!1}),pool.on("release",(async e=>{const t=await clearPage(e,!1);log(4,`[pool] Pool resource [${e.id}] - Releasing a worker. Clear page status: ${t}.`)})),pool.on("destroySuccess",((e,t)=>{log(4,`[pool] Pool resource [${t.id}] - Destroyed a worker successfully.`),t.page=null}));const t=[];for(let o=0;o<e.minWorkers;o++)try{const e=await pool.acquire().promise;t.push(e)}catch(e){logWithStack(2,e,"[pool] Could not create an initial resource.")}t.forEach((e=>{pool.release(e)})),log(3,"[pool] The pool is ready"+(t.length?` with ${t.length} initial resources waiting.`:"."))}catch(e){throw new ExportError("[pool] Could not configure and create the pool of workers.",500).setError(e)}}async function killPool(){if(log(3,"[pool] Killing pool with all workers and closing browser."),pool){for(const e of pool.used)pool.release(e.resource);pool.destroyed||(await pool.destroy(),log(4,"[pool] Destroyed the pool of resources.")),pool=null}await closeBrowser()}async function postWork(e){let t;try{if(log(4,"[pool] Work received, starting to process."),++poolStats.exportsAttempted,e.pool.benchmarking&&_getPoolInfo(),!pool)throw new ExportError("[pool] Work received, but pool has not been started.",500);const o=measureTime();try{log(4,"[pool] Acquiring a worker handle."),t=await pool.acquire().promise,e.server.benchmarking&&log(5,"[benchmark] "+(e.requestId?`Request [${e.requestId}] - `:""),`Acquiring a worker handle took ${o()}ms.`)}catch(t){throw new ExportError(`[pool] ${e.requestId?`Request [${e.requestId}] - `:""}Error encountered when acquiring an available entry: ${o()}ms.`,400).setError(t)}if(log(4,"[pool] Acquired a worker handle."),!t.page)throw t.workCount=e.pool.workLimit+1,new ExportError("[pool] Resolved worker page is invalid: the pool setup is wonky.",400);log(4,`[pool] Pool resource [${t.id}] - Starting work on this pool entry.`);const r=measureTime(),n=await puppeteerExport(t.page,e.export,e.customLogic);if(n instanceof Error)throw"Rasterization timeout"===n.message&&(t.workCount=e.pool.workLimit+1,t.page=null),"TimeoutError"===n.name||"Rasterization timeout"===n.message?new ExportError(`[pool] ${e.requestId?`Request [${e.requestId}] - `:""}Rasterization timeout: your chart may be too complex or large, and failed to render within the allotted time.`).setError(n):new ExportError(`[pool] ${e.requestId?`Request [${e.requestId}] - `:""}Error encountered during export: ${r()}ms.`).setError(n);return e.server.benchmarking&&log(5,"[benchmark] "+(e.requestId?`Request [${e.requestId}] - `:""),`Exporting a chart sucessfully took ${r()}ms.`),pool.release(t),poolStats.timeSpent+=r(),poolStats.timeSpentAverage=poolStats.timeSpent/++poolStats.exportsPerformed,log(4,`[pool] Work completed in ${r()}ms.`),{result:n,options:e}}catch(e){throw++poolStats.exportsDropped,t&&pool.release(t),e}}function getPoolStats(){return poolStats}function getPoolInfoJSON(){return{min:pool.min,max:pool.max,used:pool.numUsed(),available:pool.numFree(),allCreated:pool.numUsed()+pool.numFree(),pendingAcquires:pool.numPendingAcquires(),pendingCreates:pool.numPendingCreates(),pendingValidations:pool.numPendingValidations(),pendingDestroys:pool.pendingDestroys.length,absoluteAll:pool.numUsed()+pool.numFree()+pool.numPendingAcquires()+pool.numPendingCreates()+pool.numPendingValidations()+pool.pendingDestroys.length}}function _getPoolInfo(){const{min:e,max:t,used:o,available:r,allCreated:n,pendingAcquires:i,pendingCreates:s,pendingValidations:a,pendingDestroys:l,absoluteAll:c}=getPoolInfoJSON();log(5,`[pool] The minimum number of resources allowed by pool: ${e}.`),log(5,`[pool] The maximum number of resources allowed by pool: ${t}.`),log(5,`[pool] The number of used resources: ${o}.`),log(5,`[pool] The number of free resources: ${r}.`),log(5,`[pool] The number of all created (used and free) resources: ${n}.`),log(5,`[pool] The number of resources waiting to be acquired: ${i}.`),log(5,`[pool] The number of resources waiting to be created: ${s}.`),log(5,`[pool] The number of resources waiting to be validated: ${a}.`),log(5,`[pool] The number of resources waiting to be destroyed: ${l}.`),log(5,`[pool] The number of all resources: ${c}.`)}function _factory(e){return{create:async()=>{const t={id:uuid.v4(),workCount:Math.round(Math.random()*(e.workLimit/2))};try{const e=getNewDateTime();return await newPage(t),log(3,`[pool] Pool resource [${t.id}] - Successfully created a worker, took ${getNewDateTime()-e}ms.`),t}catch(e){throw log(3,`[pool] Pool resource [${t.id}] - Error encountered when creating a new page.`),e}},validate:async t=>t.page?t.page.isClosed()?(log(3,`[pool] Pool resource [${t.id}] - Validation failed (page is closed or invalid).`),!1):t.page.mainFrame().detached?(log(3,`[pool] Pool resource [${t.id}] - Validation failed (page's frame is detached).`),!1):!(e.workLimit&&++t.workCount>e.workLimit)||(log(3,`[pool] Pool resource [${t.id}] - Validation failed (exceeded the ${e.workLimit} works per resource limit).`),!1):(log(3,`[pool] Pool resource [${t.id}] - Validation failed (no valid page is found).`),!1),destroy:async e=>{if(log(3,`[pool] Pool resource [${e.id}] - Destroying a worker.`),e.page&&!e.page.isClosed())try{e.page.removeAllListeners("pageerror"),e.page.removeAllListeners("console"),e.page.removeAllListeners("framedetached"),await e.page.close()}catch(t){throw log(3,`[pool] Pool resource [${e.id}] - Page could not be closed upon destroying.`),t}}}}function sanitize(e){const t=new jsdom.JSDOM("").window;return DOMPurify(t).sanitize(e,{ADD_TAGS:["foreignObject"]})}let allowCodeExecution=!1;async function singleExport(e){if(!e||!e.export)throw new ExportError("[chart] No expected `export` options were found. Please provide one of the following options: `infile`, `instr`, `options`, or `svg` to generate a valid image.",400);await startExport({export:e.export,customLogic:e.customLogic},(async(e,t)=>{if(e)throw e;const{b64:o,outfile:r,type:n}=t.options.export;try{o?fs.writeFileSync(`${r.split(".").shift()||"chart"}.txt`,getBase64(t.result,n)):fs.writeFileSync(r||`chart.${n}`,"svg"!==n?Buffer.from(t.result,"base64"):t.result)}catch(e){throw new ExportError("[chart] Error while saving a chart.",500).setError(e)}await killPool()}))}async function batchExport(e){if(!(e&&e.export&&e.export.batch))throw new ExportError("[chart] No expected `export` options were found. Please provide the `batch` option to generate valid images.",400);{const t=[];for(let o of e.export.batch.split(";")||[])o=o.split("="),2===o.length?t.push(startExport({export:{...e.export,infile:o[0],outfile:o[1]},customLogic:e.customLogic},((e,t)=>{if(e)throw e;const{b64:o,outfile:r,type:n}=t.options.export;try{o?fs.writeFileSync(`${r.split(".").shift()||"chart"}.txt`,getBase64(t.result,n)):fs.writeFileSync(r,"svg"!==n?Buffer.from(t.result,"base64"):t.result)}catch(e){throw new ExportError("[chart] Error while saving a chart.",500).setError(e)}}))):log(2,"[chart] No correct pair found for the batch export.");const o=await Promise.allSettled(t);await killPool(),o.forEach(((e,t)=>{e.reason&&logWithStack(1,e.reason,`[chart] Batch export number ${t+1} could not be correctly completed.`)}))}}async function startExport(e,t){try{if(!isObject(e))throw new ExportError("[chart] Incorrect value of the provided `imageOptions`. Needs to be an object.",400);const o=updateOptions({export:e.export,customLogic:e.customLogic},!0),r=o.export;if(log(4,"[chart] Starting the exporting process."),null!==r.infile){let e;log(4,"[chart] Attempting to export from a file input.");try{e=fs.readFileSync(getAbsolutePath(r.infile),"utf8")}catch(e){throw new ExportError("[chart] Error loading content from a file input.",400).setError(e)}if(r.infile.endsWith(".svg"))r.svg=validateOption("svg",e);else{if(!r.infile.endsWith(".json"))throw new ExportError("[chart] Incorrect value of the `infile` option.",400);r.instr=validateOption("instr",e)}}if(null!==r.svg){log(4,"[chart] Attempting to export from an SVG input."),++getPoolStats().exportsFromSvgAttempts;const e=await _exportFromSvg(sanitize(r.svg),o);return++getPoolStats().exportsFromSvg,t(null,e)}if(null!==r.instr||null!==r.options){log(4,"[chart] Attempting to export from options input."),++getPoolStats().exportsFromOptionsAttempts;const e=await _exportFromOptions(r.instr||r.options,o);return++getPoolStats().exportsFromOptions,t(null,e)}return t(new ExportError("[chart] No valid input specified. Check if at least one of the following parameters is correctly set: 'infile', 'instr', 'options', or 'svg'.",400))}catch(e){return t(e)}}function getAllowCodeExecution(){return allowCodeExecution}function setAllowCodeExecution(e){allowCodeExecution=e}async function _exportFromSvg(e,t){if("string"==typeof e&&(e.indexOf("<svg")>=0||e.indexOf("<?xml")>=0))return log(4,"[chart] Parsing input as SVG."),t.export.svg=e,t.export.options=null,t.export.instr=null,_prepareExport(t);throw new ExportError("[chart] Not a correct SVG input.",400)}async function _exportFromOptions(e,t){log(4,"[chart] Parsing input from options.");const o=isAllowedConfig(e,!0,t.customLogic.allowCodeExecution);if(null===o||"string"!=typeof o||!o.startsWith("{")||!o.endsWith("}"))throw new ExportError("[chart] Invalid configuration provided - Only options configurations and SVG are allowed for this server. If this is your server, JavaScript custom code can be enabled by starting the server with the `allowCodeExecution` options set to true.",403);return t.export.instr=o,t.export.options=null,t.export.svg=null,_prepareExport(t)}async function _prepareExport(e){const{export:t,customLogic:o}=e;return t.constr=_fixConstr(t.constr),t.type=_fixType(t.type,t.outfile),t.outfile=_fixOutfile(t.type,t.outfile),log(3,`[chart] The custom logic is ${o.allowCodeExecution?"allowed":"disallowed"}.`),_handleCustomLogic(o),_handleGlobalAndTheme(t,o),_handleSize(t),_checkDataSize({export:t,customLogic:o}),postWork(e)}function _fixConstr(e){try{const t=`${e.toLowerCase().replace("chart","")}Chart`;return"Chart"===t&&t.toLowerCase(),["chart","stockChart","mapChart","ganttChart"].includes(t)?t:"chart"}catch{return"chart"}}function _fixOutfile(e,t){return`${getAbsolutePath(t||"chart").split(".").shift()}.${e||"png"}`}function _fixType(e,t=null){const o={"image/png":"png","image/jpeg":"jpeg","application/pdf":"pdf","image/svg+xml":"svg"},r=Object.values(o);if(t){const o=t.split(".").pop();"jpg"===o?e="jpeg":r.includes(o)&&e!==o&&(e=o)}return o[e]||r.find((t=>t===e))||"png"}function _handleSize(e){const{chart:t,exporting:o}=isAllowedConfig(e.instr)||!1,{chart:r,exporting:n}=isAllowedConfig(e.globalOptions)||!1,{chart:i,exporting:s}=isAllowedConfig(e.themeOptions)||!1,a=e.height||o?.sourceHeight||t?.height||n?.sourceHeight||r?.height||s?.sourceHeight||i?.height||e.defaultHeight||400,l=e.width||o?.sourceWidth||t?.width||n?.sourceWidth||r?.width||s?.sourceWidth||i?.width||e.defaultWidth||600,c=roundNumber(Math.max(.1,Math.min(e.scale||o?.scale||n?.scale||s?.scale||e.defaultScale||1,5)),2);e.height=a,e.width=l,e.scale=c;for(let t of["height","width","scale"])"string"==typeof e[t]&&(e[t]=+e[t].replace(/px|%/gi,""))}function _handleCustomLogic(e){if(e.allowCodeExecution){try{e.resources=_handleResources(e.resources,e.allowFileResources,!0),e.resources=validateOption("resources",e.resources)}catch(t){log(2,"[chart] The `resources` cannot be loaded."),e.resources=null}try{e.customCode=_handleCustomCode(e.customCode,e.allowFileResources),e.customCode=validateOption("customCode",e.customCode)}catch(t){logWithStack(2,t,"[chart] The `customCode` cannot be loaded."),e.customCode=null}try{e.callback=_handleCustomCode(e.callback,e.allowFileResources,!0),e.callback=validateOption("callback",e.callback)}catch(t){logWithStack(2,t,"[chart] The `callback` cannot be loaded."),e.callback=null}[null,void 0].includes(e.customCode)&&log(3,"[chart] No value for the `customCode` option found."),[null,void 0].includes(e.callback)&&log(3,"[chart] No value for the `callback` option found."),[null,void 0].includes(e.resources)&&log(3,"[chart] No value for the `resources` option found.")}else if(e.callback||e.resources||e.customCode)throw e.callback=null,e.resources=null,e.customCode=null,new ExportError("[chart] The 'callback', 'resources', and 'customCode' options have been disabled for this server.",403)}function _handleResources(e=null,t,o){let r=e;r||(e="resources.json");const n=["js","css","files"];let i=!1;t&&"string"==typeof e&&e.endsWith(".json")?r=isAllowedConfig(fs.readFileSync(getAbsolutePath(e),"utf8"),!1,o):(r=isAllowedConfig(e,!1,o),r&&!t&&delete r.files);for(const e in r)n.includes(e)?i||(i=!0):delete r[e];return i?(r.files&&(r.files=r.files.map((e=>e.trim())),(!r.files||r.files.length<=0)&&delete r.files),r):null}function _handleCustomCode(e,t,o=!1){if(e&&"string"==typeof e)return(e=e.trim()).endsWith(".js")?t?_handleCustomCode(fs.readFileSync(getAbsolutePath(e),"utf8"),t,o):null:!o&&(e.startsWith("function()")||e.startsWith("function ()")||e.startsWith("()=>")||e.startsWith("() =>"))?`(${e})()`:e.replace(/;$/,"")}function _handleGlobalAndTheme(e,t){const{allowFileResources:o,allowCodeExecution:r}=t;["globalOptions","themeOptions"].forEach((t=>{try{e[t]&&(o&&"string"==typeof e[t]&&e[t].endsWith(".json")?e[t]=isAllowedConfig(fs.readFileSync(getAbsolutePath(e[t]),"utf8"),!0,r):e[t]=isAllowedConfig(e[t],!0,r),e[t]=validateOption(t,e[t]))}catch(o){logWithStack(2,o,`[chart] The \`${t}\` cannot be loaded.`),e[t]=null}})),[null,void 0].includes(e.globalOptions)&&log(3,"[chart] No value for the `globalOptions` option found."),[null,void 0].includes(e.themeOptions)&&log(3,"[chart] No value for the `themeOptions` option found.")}function _checkDataSize(e){const t=Buffer.byteLength(JSON.stringify(e),"utf-8");if(log(3,`[chart] The current total size of the data for the export process is around ${(t/1048576).toFixed(2)}MB.`),t>=104857600)throw new ExportError("[chart] The data for the export process exceeds 100MB limit.")}const timerIds=[];function addTimer(e){timerIds.push(e)}function clearAllTimers(){log(4,"[timer] Clearing all registered intervals and timeouts.");for(const e of timerIds)clearInterval(e),clearTimeout(e)}const telemetryTemplate=JSON.parse(fs.readFileSync(path.join(__dirname$1,"lib","schemas","telemetry.json"))),optionsInArray=["series","xAxis","yAxis","zAxis"],telemetryData={timeOfSent:null,lastSent:null,optionsPerRequest:{},numberOfRequests:0};function prepareTelemetry(e,t){telemetryData.optionsPerRequest[t]=getOptions().webSocket.gatherAllOptions?e:_filterData(telemetryTemplate,e),telemetryData.numberOfRequests++}function _filterData(e,t){const o={};for(const[r,n]of Object.entries(e))if(void 0!==t[r])if(null!==n)if(Array.isArray(t[r]))if(optionsInArray.includes(r)){o[r]=[];for(const[e,i]of t[r].entries())o[r][e]=_filterData(n,i)}else o[r]=_filterData(n,t[r][0]);else o[r]=_filterData(n,t[r]);else o[r]=t[r];return o}const webSocketClients=new Map;let webSocketOptions,messageInterval=null;function webSocketInit(e){if(webSocketOptions=getOptions().webSocket,!0===webSocketOptions.enable){const t=envs.WEB_SOCKET_SECRET,o={rejectUnauthorized:webSocketOptions.rejectUnauthorized,headers:{auth:jwt.sign({success:"success"},t,{algorithm:"HS256"}),"X-Server-Address":`${e.protocol}://${["::","0.0.0.0"].includes(e.address)?"localhost":e.address}:${e.port}`}},r={id:uuid.v4(),reconnect:webSocketOptions.reconnect,reconnectIntervalMs:webSocketOptions.reconnectInterval,reconnectTry:0,reconnectInterval:null,pingTimeout:null};connect(webSocketOptions.url,o,r),webSocketOptions.messageInterval>0&&_sendingMessageInterval(webSocketOptions)}}function connect(e,t,o){let r=new WebSocket(e,t);r.on("open",(()=>{clearInterval(o.reconnectInterval),webSocketClients.set(o.id,r),log(3,`[websocket] WebSocket: ${o.id} - Connected to server: ${e}.`)})),r.on("close",(n=>{log(3,"[websocket]",`WebSocket: ${o.id} - Disconnected from server: ${e} with code: ${n}.`),clearTimeout(o.pingTimeout),webSocketClients.delete(o.id),r=null,_reconnect(e,t,o)})),r.on("error",(e=>{logWithStack(1,e,`[websocket] WebSocket: ${o.id} - Error occured.`),e.message.includes("403")||"DEPTH_ZERO_SELF_SIGNED_CERT"===e.code?(o.reconnect=!1,o.reconnectTry=webSocketOptions.reconnectAttempts):o.reconnect=webSocketOptions.reconnect})),r.on("message",(e=>{log(3,`[websocket] WebSocket: ${o.id} - Data received: ${e}`)})),r.on("ping",(()=>{log(3,`[websocket] WebSocket: ${o.id} - Received PING from server: ${e}.`),webSocketOptions.pingTimeout>0&&(clearTimeout(o.pingTimeout),o.pingTimeout=setTimeout((()=>{r.terminate(),_reconnect(e,t,o)}),webSocketOptions.pingTimeout))}))}function getClients(e){return e?webSocketClients.get(e):webSocketClients.values()}function terminateClients(){for(const e of webSocketClients.values())e.terminate();webSocketClients.clear()}function _sendingMessageInterval(e){messageInterval=setInterval((()=>{try{const e=getClients().next().value;if(log(3,"[websocket] WebSocket message sending queue."),e&&e.readyState===WebSocket.OPEN&&Object.keys(telemetryData.optionsPerRequest).length>0&&telemetryData.numberOfRequests>0){log(3,"[websocket] Sending data through a WebSocket connection.");const t=getNewDate();telemetryData.lastSent=telemetryData.timeOfSent||t,telemetryData.timeOfSent=t,e.send(JSON.stringify(telemetryData)),telemetryData.numberOfRequests=0,telemetryData.optionsPerRequest={}}}catch(e){logWithStack(1,e,"[websocket] Could not send data through WebSocket.")}}),e.messageInterval),addTimer(messageInterval)}function _reconnect(e,t,o){o.reconnect&&o.reconnectIntervalMs>0&&!o.reconnectInterval&&(o.reconnectInterval=setInterval((()=>{o.reconnectTry<webSocketOptions.reconnectAttempts?(log(3,`[websocket] WebSocket: ${o.id} - Attempt ${++o.reconnectTry} of ${webSocketOptions.reconnectAttempts} to reconnect to server: ${e}.`),connect(e,t,o)):(o.reconnect=!1,clearInterval(o.reconnectInterval),log(2,`[websocket] WebSocket: ${o.id} - Could not reconnect to server: ${e}.`))}),webSocketOptions.reconnectInterval),addTimer(o.reconnectInterval))}function logErrorMiddleware(e,t,o,r){return logWithStack(1,e),"development"!==getOptions().other.nodeEnv&&delete e.stack,r(e)}function returnErrorMiddleware(e,t,o,r){const{message:n,stack:i}=e,s=e.statusCode||400;o.status(s).json({statusCode:s,message:n,stack:i})}function errorMiddleware(e){e.use(logErrorMiddleware),e.use(returnErrorMiddleware)}function rateLimitingMiddleware(e,t){try{if(e&&t.enable){const o="Too many requests, you have been rate limited. Please try again later.",r={window:t.window||1,maxRequests:t.maxRequests||30,delay:t.delay||0,trustProxy:t.trustProxy||!1,skipKey:t.skipKey||null,skipToken:t.skipToken||null};r.trustProxy&&e.enable("trust proxy");const n=rateLimit({windowMs:60*r.window*1e3,limit:r.maxRequests,delayMs:r.delay,handler:(e,t)=>{t.format({json:()=>{t.status(429).send({message:o})},default:()=>{t.status(429).send(o)}})},skip:e=>null!==r.skipKey&&null!==r.skipToken&&e.query.key===r.skipKey&&e.query.access_token===r.skipToken&&(log(4,"[rate limiting] Skipping rate limiter."),!0)});e.use(n),log(3,`[rate limiting] Enabled rate limiting with ${r.maxRequests} requests per ${r.window} minute for each IP, trusting proxy: ${r.trustProxy}.`)}}catch(e){throw new ExportError("[rate limiting] Could not configure and set the rate limiting options.",500).setError(e)}}function contentTypeMiddleware(e,t,o){try{const t=e.headers["content-type"]||"";if(!t.includes("application/json")&&!t.includes("application/x-www-form-urlencoded")&&!t.includes("multipart/form-data"))throw new ExportError("[validation] Content-Type must be application/json, application/x-www-form-urlencoded, or multipart/form-data.",415);return o()}catch(e){return o(e)}}function requestBodyMiddleware(e,t,o){try{const t=e.body,r=uuid.v4();if(!t||isObjectEmpty(t))throw log(2,`[validation] Request [${r}] - The request from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Received payload is empty.`),new ExportError(`[validation] Request [${r}] - The request body is required. Please ensure that your Content-Type header is correct. Accepted types are 'application/json' and 'multipart/form-data'.`,400);const n=getAllowCodeExecution(),i=isAllowedConfig(t.instr||t.options||t.infile||t.data,!0,n);if(null===i&&!t.svg)throw log(2,`[validation] Request [${r}] - The request from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Received payload is missing correct chart data for export: ${JSON.stringify(t)}.`),new ExportError(`[validation] Request [${r}] - No correct chart data found. Ensure that you are using either application/json or multipart/form-data headers. If sending JSON, make sure the chart data is in the 'infile', 'options', or 'data' attribute. If sending SVG, ensure it is in the 'svg' attribute.`,400);if(t.svg&&isPrivateRangeUrlFound(t.svg))throw new ExportError(`[validation] Request [${r}] - SVG potentially contain at least one forbidden URL in 'xlink:href' element. Please review the SVG content and ensure that all referenced URLs comply with security policies.`,400);return e.validatedOptions={requestId:r,export:{instr:i,svg:t.svg,outfile:t.outfile||`${e.params.filename||"chart"}.${t.type||"png"}`,type:t.type,constr:t.constr,b64:t.b64,noDownload:t.noDownload,height:t.height,width:t.width,scale:t.scale,globalOptions:isAllowedConfig(t.globalOptions,!0,n),themeOptions:isAllowedConfig(t.themeOptions,!0,n)},customLogic:{allowCodeExecution:n,allowFileResources:!1,customCode:t.customCode,callback:t.callback,resources:isAllowedConfig(t.resources,!0,n)}},o()}catch(e){return o(e)}}function validationMiddleware(e){e.post(["/","/:filename"],contentTypeMiddleware),e.post(["/","/:filename"],requestBodyMiddleware)}const reversedMime={png:"image/png",jpeg:"image/jpeg",gif:"image/gif",pdf:"application/pdf",svg:"image/svg+xml"};async function requestExport(e,t,o){try{const o=measureTime();let r=!1;e.socket.on("close",(e=>{e&&(r=!0)}));const n=e.validatedOptions,i=n.requestId;log(4,`[export] Request [${i}] - Got an incoming HTTP request.`),await startExport(n,((s,a)=>{if(e.socket.removeAllListeners("close"),r)log(3,`[export] Request [${i}] - The client closed the connection before the chart finished processing.`);else{if(s)throw s;if(!a||!a.result)throw log(2,`[export] Request [${i}] - Request from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Received result is ${a.result}.`),new ExportError(`[export] Request [${i}] - Unexpected return of the export result from the chart generation. Please check your request data.`,400);if(n.export.svg||prepareTelemetry(n.export.options,n.payload.requestId),a.result){log(3,`[export] Request [${i}] - The whole exporting process took ${o()}ms.`);const{type:e,b64:r,noDownload:n,outfile:s}=a.options.export;return r?t.send(getBase64(a.result,e)):(t.header("Content-Type",reversedMime[e]||"image/png"),n||t.attachment(s),"svg"===e?t.send(a.result):t.send(Buffer.from(a.result,"base64")))}}}))}catch(e){return o(e)}}function exportRoutes(e){e.post("/",requestExport),e.post("/:filename",requestExport)}const serverStartTime=new Date,packageFile=JSON.parse(fs.readFileSync(path.join(__dirname$1,"package.json"),"utf8")),successRates=[],recordInterval=6e4,windowSize=30;function _calculateMovingAverage(){return successRates.reduce(((e,t)=>e+t),0)/successRates.length}function _startSuccessRate(){return setInterval((()=>{const e=getPoolStats(),t=0===e.exportsAttempted?1:e.exportsPerformed/e.exportsAttempted*100;successRates.push(t),successRates.length>windowSize&&successRates.shift()}),recordInterval)}function healthRoutes(e){addTimer(_startSuccessRate()),e.get("/health",((e,t,o)=>{try{log(4,"[health] Returning server health.");const e=getPoolStats(),o=successRates.length,r=_calculateMovingAverage();t.send({status:"OK",bootTime:serverStartTime,uptime:`${Math.floor((getNewDateTime()-serverStartTime.getTime())/1e3/60)} minutes`,serverVersion:packageFile.version,highchartsVersion:getHcVersion(),averageExportTime:e.timeSpentAverage,attemptedExports:e.exportsAttempted,performedExports:e.exportsPerformed,failedExports:e.exportsDropped,sucessRatio:e.exportsPerformed/e.exportsAttempted*100,pool:getPoolInfoJSON(),period:o,movingAverage:r,message:isNaN(r)||!successRates.length?"Too early to report. No exports made yet. Please check back soon.":`Last ${o} minutes had a success rate of ${r.toFixed(2)}%.`,svgExports:e.exportsFromSvg,jsonExports:e.exportsFromOptions,svgExportsAttempts:e.exportsFromSvgAttempts,jsonExportsAttempts:e.exportsFromOptionsAttempts})}catch(e){return o(e)}}))}function uiRoutes(e){getOptions().ui.enable&&e.get(getOptions().ui.route||"/",((e,t,o)=>{try{log(4,"[ui] Returning UI for the export."),t.sendFile(path.join(__dirname$1,"public","index.html"),{acceptRanges:!1})}catch(e){return o(e)}}))}function versionChangeRoutes(e){e.post("/version_change/:newVersion",(async(e,t,o)=>{try{log(4,"[version] Changing Highcharts version.");const o=envs.HIGHCHARTS_ADMIN_TOKEN;if(!o||!o.length)throw new ExportError("[version] The server is not configured to perform run-time version changes: `HIGHCHARTS_ADMIN_TOKEN` is not set.",401);const r=e.get("hc-auth");if(!r||r!==o)throw new ExportError("[version] Invalid or missing token: Set the token in the hc-auth header.",401);const n=e.params.newVersion;if(!n)throw new ExportError("[version] No new version supplied.",400);try{await updateHcVersion(n)}catch(e){throw new ExportError(`[version] Version change: ${e.message}`,400).setError(e)}t.status(200).send({statusCode:200,highchartsVersion:getHcVersion(),message:`Successfully updated Highcharts to version: ${n}.`})}catch(e){return o(e)}}))}const activeServers=new Map,app=express();async function startServer(e={}){try{const t=updateOptions({server:e});if(!(e=t.server).enable||!app)throw new ExportError("[server] Server cannot be started (not enabled or no correct Express app found).",500);const o=1024*e.uploadLimit*1024,r=multer.memoryStorage(),n=multer({storage:r,limits:{fieldSize:o}});if(app.disable("x-powered-by"),app.use(cors({methods:["POST","GET","OPTIONS"]})),app.use(((e,t,o)=>{t.set("Accept-Ranges","none"),o()})),app.use(express.json({limit:o})),app.use(express.urlencoded({extended:!0,limit:o})),app.use(n.none()),app.use(express.static(path.join(__dirname$1,"public"))),!e.ssl.force){const t=http.createServer(app);_attachServerErrorHandlers(t),t.listen(e.port,e.host,(()=>{activeServers.set(e.port,t),log(3,`[server] Started HTTP server on ${e.host}:${e.port}.`),1===activeServers.size&&webSocketInit({...t.address(),protocol:"http"})}))}if(e.ssl.enable){let t,o;try{t=fs.readFileSync(path.join(getAbsolutePath(e.ssl.certPath),"server.key"),"utf8"),o=fs.readFileSync(path.join(getAbsolutePath(e.ssl.certPath),"server.crt"),"utf8")}catch(t){log(2,`[server] Unable to load key/certificate from the '${e.ssl.certPath}' path. Could not run secured layer server.`)}if(t&&o){const r=https.createServer({key:t,cert:o},app);_attachServerErrorHandlers(r),r.listen(e.ssl.port,e.host,(()=>{activeServers.set(e.ssl.port,r),log(3,`[server] Started HTTPS server on ${e.host}:${e.ssl.port}.`),1===activeServers.size&&webSocketInit({...r.address(),protocol:"https"})}))}}rateLimitingMiddleware(app,e.rateLimiting),validationMiddleware(app),exportRoutes(app),healthRoutes(app),uiRoutes(app),versionChangeRoutes(app),errorMiddleware(app)}catch(e){throw new ExportError("[server] Could not configure and start the server.",500).setError(e)}}function closeServers(){if(activeServers.size>0){log(4,"[server] Closing all servers.");for(const[e,t]of activeServers)t.close((()=>{activeServers.delete(e),log(4,`[server] Closed server on port: ${e}.`)}))}}function getServers(){return activeServers}function getExpress(){return express}function getApp(){return app}function enableRateLimiting(e){const t=updateOptions({server:{rateLimiting:e}});rateLimitingMiddleware(app,t.server.rateLimitingOptions)}function use(e,...t){app.use(e,...t)}function get(e,...t){app.get(e,...t)}function post(e,...t){app.post(e,...t)}function _attachServerErrorHandlers(e){e.on("clientError",((e,t)=>{logWithStack(1,e,`[server] Client error: ${e.message}, destroying socket.`),t.destroy()})),e.on("error",(e=>{logWithStack(1,e,`[server] Server error: ${e.message}`)})),e.on("connection",(e=>{e.on("error",(e=>{logWithStack(1,e,`[server] Socket error: ${e.message}`)}))}))}var server={startServer:startServer,closeServers:closeServers,getServers:getServers,getExpress:getExpress,getApp:getApp,enableRateLimiting:enableRateLimiting,use:use,get:get,post:post};async function shutdownCleanUp(e=0){await Promise.allSettled([clearAllTimers(),terminateClients(),closeServers(),killPool()]),process.exit(e)}async function initExport(e={}){const t=updateOptions(e);setAllowCodeExecution(t.customLogic.allowCodeExecution),initLogging(t.logging),t.other.listenToProcessExits&&_attachProcessExitListeners(),await checkCache(t.highcharts,t.server.proxy),await initPool(t.pool,t.puppeteer.args)}function _attachProcessExitListeners(){log(3,"[process] Attaching exit listeners to the process."),process.on("exit",(e=>{log(4,`[process] Process exited with code: ${e}.`)})),process.on("SIGINT",(async(e,t)=>{log(4,`[process] The ${e} event with code: ${t}.`),await shutdownCleanUp()})),process.on("SIGTERM",(async(e,t)=>{log(4,`[process] The ${e} event with code: ${t}.`),await shutdownCleanUp()})),process.on("SIGHUP",(async(e,t)=>{log(4,`[process] The ${e} event with code: ${t}.`),await shutdownCleanUp()})),process.on("uncaughtException",(async(e,t)=>{logWithStack(1,e,`[process] The ${t} error.`),await shutdownCleanUp(1)}))}var index={...server,getOptions:getOptions,updateOptions:updateOptions,mapToNewOptions:mapToNewOptions,validateOption:validateOption,validateOptions:validateOptions,initExport:initExport,singleExport:singleExport,batchExport:batchExport,startExport:startExport,killPool:killPool,shutdownCleanUp:shutdownCleanUp,log:log,logWithStack:logWithStack,logZodIssues:logZodIssues,setLogLevel:function(e){setLogLevel(updateOptions({logging:{level:e}}).logging.level)},enableConsoleLogging:function(e){enableConsoleLogging(updateOptions({logging:{toConsole:e}}).logging.toConsole)},enableFileLogging:function(e,t,o){const r=updateOptions({logging:{dest:e,file:t,toFile:o}});enableFileLogging(r.logging.dest,r.logging.file,r.logging.toFile)}};exports.default=index,exports.initExport=initExport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2pzIiwic291cmNlcyI6WyIuLi9saWIvdXRpbHMuanMiLCIuLi9saWIvbG9nZ2VyLmpzIiwiLi4vbGliL3NjaGVtYXMvY29uZmlnLmpzIiwiLi4vbGliL3ZhbGlkYXRpb24uanMiLCIuLi9saWIvZXJyb3JzL0V4cG9ydEVycm9yLmpzIiwiLi4vbGliL2NvbmZpZy5qcyIsIi4uL2xpYi9mZXRjaC5qcyIsIi4uL2xpYi9jYWNoZS5qcyIsIi4uL2xpYi9oaWdoY2hhcnRzLmpzIiwiLi4vbGliL2Jyb3dzZXIuanMiLCIuLi90ZW1wbGF0ZXMvc3ZnRXhwb3J0L2Nzcy5qcyIsIi4uL3RlbXBsYXRlcy9zdmdFeHBvcnQvc3ZnRXhwb3J0LmpzIiwiLi4vbGliL2V4cG9ydC5qcyIsIi4uL2xpYi9wb29sLmpzIiwiLi4vbGliL3Nhbml0aXplLmpzIiwiLi4vbGliL2NoYXJ0LmpzIiwiLi4vbGliL3RpbWVyLmpzIiwiLi4vbGliL3RlbGVtZXRyeS5qcyIsIi4uL2xpYi9zZXJ2ZXIvd2ViU29ja2V0LmpzIiwiLi4vbGliL3NlcnZlci9taWRkbGV3YXJlcy9lcnJvci5qcyIsIi4uL2xpYi9zZXJ2ZXIvbWlkZGxld2FyZXMvcmF0ZUxpbWl0aW5nLmpzIiwiLi4vbGliL3NlcnZlci9taWRkbGV3YXJlcy92YWxpZGF0aW9uLmpzIiwiLi4vbGliL3NlcnZlci9yb3V0ZXMvZXhwb3J0LmpzIiwiLi4vbGliL3NlcnZlci9yb3V0ZXMvaGVhbHRoLmpzIiwiLi4vbGliL3NlcnZlci9yb3V0ZXMvdWkuanMiLCIuLi9saWIvc2VydmVyL3JvdXRlcy92ZXJzaW9uQ2hhbmdlLmpzIiwiLi4vbGliL3NlcnZlci9zZXJ2ZXIuanMiLCIuLi9saWIvcmVzb3VyY2VSZWxlYXNlLmpzIiwiLi4vbGliL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBUaGUgSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyIHV0aWxpdHkgbW9kdWxlIHByb3ZpZGVzXHJcbiAqIGEgY29tcHJlaGVuc2l2ZSBzZXQgb2YgaGVscGVyIGZ1bmN0aW9ucyBhbmQgY29uc3RhbnRzIGRlc2lnbmVkIHRvIHN0cmVhbWxpbmVcclxuICogYW5kIGVuaGFuY2UgdmFyaW91cyBvcGVyYXRpb25zIHJlcXVpcmVkIGZvciBIaWdoY2hhcnRzIGV4cG9ydCB0YXNrcy5cclxuICovXHJcblxyXG5pbXBvcnQgeyBpc0Fic29sdXRlLCBub3JtYWxpemUsIHJlc29sdmUgfSBmcm9tICdwYXRoJztcclxuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XHJcblxyXG5jb25zdCBNQVhfQkFDS09GRl9BVFRFTVBUUyA9IDY7XHJcblxyXG4vLyBUaGUgZGlyZWN0b3J5IHBhdGhcclxuZXhwb3J0IGNvbnN0IF9fZGlybmFtZSA9IGZpbGVVUkxUb1BhdGgobmV3IFVSTCgnLi4vLicsIGltcG9ydC5tZXRhLnVybCkpO1xyXG5cclxuLyoqXHJcbiAqIENsZWFycyBhbmQgc3RhbmRhcmRpemVzIHRleHQgYnkgcmVwbGFjaW5nIG11bHRpcGxlIGNvbnNlY3V0aXZlIHdoaXRlc3BhY2VcclxuICogY2hhcmFjdGVycyB3aXRoIGEgc2luZ2xlIHNwYWNlIGFuZCB0cmltbWluZyBhbnkgbGVhZGluZyBvciB0cmFpbGluZ1xyXG4gKiB3aGl0ZXNwYWNlLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gY2xlYXJUZXh0XHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gVGhlIGlucHV0IHRleHQgdG8gYmUgY2xlYXJlZC5cclxuICogQHBhcmFtIHtSZWdFeHB9IFtydWxlPS9cXHNcXHMrL2ddIC0gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBydWxlIHRvIG1hdGNoXHJcbiAqIG11bHRpcGxlIGNvbnNlY3V0aXZlIHdoaXRlc3BhY2UgY2hhcmFjdGVycy4gVGhlIGRlZmF1bHQgdmFsdWVcclxuICogaXMgdGhlICcvXFxzXFxzKy9nJyBSZWdFeHAuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcmVwbGFjZXI9JyAnXSAtIFRoZSBzdHJpbmcgdXNlZCB0byByZXBsYWNlIG11bHRpcGxlXHJcbiAqIGNvbnNlY3V0aXZlIHdoaXRlc3BhY2UgY2hhcmFjdGVycy4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgdGhlICcgJyBzdHJpbmcuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjbGVhcmVkIGFuZCBzdGFuZGFyZGl6ZWQgdGV4dC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhclRleHQodGV4dCwgcnVsZSA9IC9cXHNcXHMrL2csIHJlcGxhY2VyID0gJyAnKSB7XHJcbiAgcmV0dXJuIHRleHQucmVwbGFjZUFsbChydWxlLCByZXBsYWNlcikudHJpbSgpO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIGRlZXAgY29weSBvZiB0aGUgZ2l2ZW4gb2JqZWN0IG9yIGFycmF5LlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZGVlcENvcHlcclxuICpcclxuICogQHBhcmFtIHsoT2JqZWN0fEFycmF5KX0gb2JqQXJyIC0gVGhlIG9iamVjdCBvciBhcnJheSB0byBiZSBkZWVwbHkgY29waWVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7KE9iamVjdHxBcnJheSl9IFRoZSBkZWVwIGNvcHkgb2YgdGhlIHByb3ZpZGVkIG9iamVjdCBvciBhcnJheS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWVwQ29weShvYmpBcnIpIHtcclxuICAvLyBJZiB0aGUgYG9iakFycmAgaXMgbnVsbCBvciBub3Qgb2YgdGhlIGBvYmplY3RgIHR5cGUsIHJldHVybiBpdFxyXG4gIGlmIChvYmpBcnIgPT09IG51bGwgfHwgdHlwZW9mIG9iakFyciAhPT0gJ29iamVjdCcpIHtcclxuICAgIHJldHVybiBvYmpBcnI7XHJcbiAgfVxyXG5cclxuICAvLyBQcmVwYXJlIGVpdGhlciBhIG5ldyBhcnJheSBvciBhIG5ldyBvYmplY3RcclxuICBjb25zdCBvYmpBcnJDb3B5ID0gQXJyYXkuaXNBcnJheShvYmpBcnIpID8gW10gOiB7fTtcclxuXHJcbiAgLy8gUmVjdXJzaXZlbHkgY29weSBlYWNoIHByb3BlcnR5XHJcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqQXJyKSB7XHJcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakFyciwga2V5KSkge1xyXG4gICAgICBvYmpBcnJDb3B5W2tleV0gPSBkZWVwQ29weShvYmpBcnJba2V5XSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBSZXR1cm4gdGhlIGNvcGllZCBvYmplY3RcclxuICByZXR1cm4gb2JqQXJyQ29weTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEltcGxlbWVudHMgYW4gZXhwb25lbnRpYWwgYmFja29mZiBzdHJhdGVneSBmb3IgcmV0cnlpbmcgYSBmdW5jdGlvbiB1bnRpbFxyXG4gKiBhIGNlcnRhaW4gbnVtYmVyIG9mIGF0dGVtcHRzIGFyZSByZWFjaGVkLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIGV4cEJhY2tvZmZcclxuICpcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gYmUgcmV0cmllZC5cclxuICogQHBhcmFtIHtudW1iZXJ9IFthdHRlbXB0PTBdIC0gVGhlIGN1cnJlbnQgYXR0ZW1wdCBudW1iZXIuIFRoZSBkZWZhdWx0IHZhbHVlXHJcbiAqIGlzIGAwYC5cclxuICogQHBhcmFtIHsuLi51bmtub3dufSBhcmdzIC0gQXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byB0aGUgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPHVua25vd24+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgcmVzdWx0XHJcbiAqIG9mIHRoZSBmdW5jdGlvbiBpZiBzdWNjZXNzZnVsLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gVGhyb3dzIGFuIGBFcnJvcmAgaWYgdGhlIG1heGltdW0gbnVtYmVyIG9mIGF0dGVtcHRzXHJcbiAqIGlzIHJlYWNoZWQuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhwQmFja29mZihmbiwgYXR0ZW1wdCA9IDAsIC4uLmFyZ3MpIHtcclxuICB0cnkge1xyXG4gICAgLy8gVHJ5IHRvIGNhbGwgdGhlIGZ1bmN0aW9uXHJcbiAgICByZXR1cm4gYXdhaXQgZm4oLi4uYXJncyk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIC8vIENhbGN1bGF0ZSBkZWxheSBpbiBtc1xyXG4gICAgY29uc3QgZGVsYXlJbk1zID0gMiAqKiBhdHRlbXB0ICogMTAwMDtcclxuXHJcbiAgICAvLyBJZiB0aGUgYXR0ZW1wdCBleGNlZWRzIHRoZSBtYXhpbXVtIGF0dGVtcHRzIG9mIHJlcGVhdCwgdGhyb3cgYW4gZXJyb3JcclxuICAgIGlmICgrK2F0dGVtcHQgPj0gTUFYX0JBQ0tPRkZfQVRURU1QVFMpIHtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gV2FpdCBnaXZlbiBhbW91bnQgb2YgdGltZVxyXG4gICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc3BvbnNlKSA9PiBzZXRUaW1lb3V0KHJlc3BvbnNlLCBkZWxheUluTXMpKTtcclxuXHJcbiAgICAvLy8gVE8gRE86IENvcnJlY3RcclxuICAgIC8vIC8vIEluZm9ybWF0aW9uIGFib3V0IHRoZSByZXNvdXJjZSB0aW1lb3V0XHJcbiAgICAvLyBsb2coXHJcbiAgICAvLyAgIDMsXHJcbiAgICAvLyAgIGBbdXRpbHNdIFdhaXRlZCAke2RlbGF5SW5Nc31tcyB1bnRpbCBuZXh0IGNhbGwgZm9yIHRoZSByZXNvdXJjZSBvZiBJRDogJHthcmdzWzBdfS5gXHJcbiAgICAvLyApO1xyXG5cclxuICAgIC8vIFRyeSBhZ2FpblxyXG4gICAgcmV0dXJuIGV4cEJhY2tvZmYoZm4sIGF0dGVtcHQsIC4uLmFyZ3MpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gcGF0aCBpcyByZWxhdGl2ZSBvciBhYnNvbHV0ZSBhbmQgcmV0dXJucyB0aGUgY29ycmVjdGVkLFxyXG4gKiBhYnNvbHV0ZSBwYXRoLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZ2V0QWJzb2x1dGVQYXRoXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gYmUgY2hlY2tlZCBvbi5cclxuICpcclxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGFic29sdXRlIHBhdGguXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWJzb2x1dGVQYXRoKHBhdGgpIHtcclxuICByZXR1cm4gaXNBYnNvbHV0ZShwYXRoKSA/IG5vcm1hbGl6ZShwYXRoKSA6IHJlc29sdmUocGF0aCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBpbnB1dCBkYXRhIHRvIGEgQmFzZTY0IHN0cmluZyBiYXNlZCBvbiB0aGUgZXhwb3J0IHR5cGUuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBnZXRCYXNlNjRcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IC0gVGhlIGlucHV0IHRvIGJlIHRyYW5zZm9ybWVkIHRvIEJhc2U2NCBmb3JtYXQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIG9yaWdpbmFsIGV4cG9ydCB0eXBlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgQmFzZTY0IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgaW5wdXQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFzZTY0KGlucHV0LCB0eXBlKSB7XHJcbiAgLy8gRm9yIHBkZiBhbmQgc3ZnIHR5cGVzIHRoZSBpbnB1dCBtdXN0IGJlIHRyYW5zZm9ybWVkIHRvIEJhc2U2NCBmcm9tIGEgYnVmZmVyXHJcbiAgaWYgKHR5cGUgPT09ICdwZGYnIHx8IHR5cGUgPT0gJ3N2ZycpIHtcclxuICAgIHJldHVybiBCdWZmZXIuZnJvbShpbnB1dCwgJ3V0ZjgnKS50b1N0cmluZygnYmFzZTY0Jyk7XHJcbiAgfVxyXG5cclxuICAvLyBGb3IgcG5nIGFuZCBqcGVnIGlucHV0IGlzIGFscmVhZHkgYSBCYXNlNjQgc3RyaW5nXHJcbiAgcmV0dXJuIGlucHV0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBzdHJpbmdpZmllZCBkYXRlIHdpdGhvdXQgdGhlIEdNVCB0ZXh0IGluZm9ybWF0aW9uLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZ2V0TmV3RGF0ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE5ld0RhdGUoKSB7XHJcbiAgLy8gR2V0IHJpZCBvZiB0aGUgR01UIHRleHQgaW5mb3JtYXRpb25cclxuICByZXR1cm4gbmV3IERhdGUoKS50b1N0cmluZygpLnNwbGl0KCcoJylbMF0udHJpbSgpO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgc3RvcmVkIHRpbWUgdmFsdWUgaW4gbWlsbGlzZWNvbmRzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZ2V0TmV3RGF0ZVRpbWVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXROZXdEYXRlVGltZSgpIHtcclxuICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGl0ZW0gaXMgYW4gb2JqZWN0LlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gaXNPYmplY3RcclxuICpcclxuICogQHBhcmFtIHt1bmtub3dufSBpdGVtIC0gVGhlIGl0ZW0gdG8gYmUgY2hlY2tlZC5cclxuICpcclxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBpdGVtIGlzIGFuIG9iamVjdCwgYGZhbHNlYFxyXG4gKiBvdGhlcndpc2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoaXRlbSkge1xyXG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlbSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBvYmplY3QgaXMgZW1wdHkuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBpc09iamVjdEVtcHR5XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtIC0gVGhlIG9iamVjdCB0byBiZSBjaGVja2VkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGl0ZW0gaXMgYW4gZW1wdHkgb2JqZWN0LCBgZmFsc2VgXHJcbiAqIG90aGVyd2lzZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdEVtcHR5KGl0ZW0pIHtcclxuICByZXR1cm4gKFxyXG4gICAgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmXHJcbiAgICAhQXJyYXkuaXNBcnJheShpdGVtKSAmJlxyXG4gICAgaXRlbSAhPT0gbnVsbCAmJlxyXG4gICAgT2JqZWN0LmtleXMoaXRlbSkubGVuZ3RoID09PSAwXHJcbiAgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBhIHByaXZhdGUgSVAgcmFuZ2UgVVJMIGlzIGZvdW5kIGluIHRoZSBnaXZlbiBzdHJpbmcuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBpc1ByaXZhdGVSYW5nZVVybEZvdW5kXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpdGVtIC0gVGhlIHN0cmluZyB0byBiZSBjaGVja2VkIGZvciBhIHByaXZhdGUgSVAgcmFuZ2UgVVJMLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBwcml2YXRlIElQIHJhbmdlIFVSTCBpcyBmb3VuZCwgYGZhbHNlYFxyXG4gKiBvdGhlcndpc2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNQcml2YXRlUmFuZ2VVcmxGb3VuZChpdGVtKSB7XHJcbiAgY29uc3QgcmVnZXhQYXR0ZXJucyA9IFtcclxuICAgIC94bGluazpocmVmPVwiKD86aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvKT9sb2NhbGhvc3RcXGIvLFxyXG4gICAgL3hsaW5rOmhyZWY9XCIoPzpodHRwOlxcL1xcL3xodHRwczpcXC9cXC8pPzEwXFwuXFxkezEsM31cXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFxiLyxcclxuICAgIC94bGluazpocmVmPVwiKD86aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvKT8xMjdcXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM31cXGIvLFxyXG4gICAgL3hsaW5rOmhyZWY9XCIoPzpodHRwOlxcL1xcL3xodHRwczpcXC9cXC8pPzE3MlxcLigxWzYtOV18MlswLTldfDNbMC0xXSlcXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFxiLyxcclxuICAgIC94bGluazpocmVmPVwiKD86aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvKT8xOTJcXC4xNjhcXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFxiL1xyXG4gIF07XHJcblxyXG4gIHJldHVybiByZWdleFBhdHRlcm5zLnNvbWUoKHBhdHRlcm4pID0+IHBhdHRlcm4udGVzdChpdGVtKSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBVdGlsaXR5IHRvIG1lYXN1cmUgZWxhcHNlZCB0aW1lIHVzaW5nIHRoZSBOb2RlLmpzIGBwcm9jZXNzLmhydGltZSgpYCBtZXRob2QuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBtZWFzdXJlVGltZVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSBlbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1lYXN1cmVUaW1lKCkge1xyXG4gIGNvbnN0IHN0YXJ0ID0gcHJvY2Vzcy5ocnRpbWUuYmlnaW50KCk7XHJcbiAgcmV0dXJuICgpID0+IE51bWJlcihwcm9jZXNzLmhydGltZS5iaWdpbnQoKSAtIHN0YXJ0KSAvIDEwMDAwMDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb3VuZHMgYSBudW1iZXIgdG8gdGhlIHNwZWNpZmllZCBwcmVjaXNpb24uXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiByb3VuZE51bWJlclxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgbnVtYmVyIHRvIGJlIHJvdW5kZWQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwcmVjaXNpb24gLSBUaGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRvLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcm91bmRlZCBudW1iZXIuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm91bmROdW1iZXIodmFsdWUsIHByZWNpc2lvbiA9IDEpIHtcclxuICBjb25zdCBtdWx0aXBsaWVyID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbiB8fCAwKTtcclxuICByZXR1cm4gTWF0aC5yb3VuZCgrdmFsdWUgKiBtdWx0aXBsaWVyKSAvIG11bHRpcGxpZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhIHZhbHVlIHRvIGEgYm9vbGVhbi5cclxuICpcclxuICogQGZ1bmN0aW9uIHRvQm9vbGVhblxyXG4gKlxyXG4gKiBAcGFyYW0ge3Vua25vd259IGl0ZW0gLSBUaGUgdmFsdWUgdG8gYmUgY29udmVydGVkIHRvIGEgYm9vbGVhbi5cclxuICpcclxuICogQHJldHVybnMge2Jvb2xlYW59IFRoZSBib29sZWFuIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpbnB1dCB2YWx1ZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0Jvb2xlYW4oaXRlbSkge1xyXG4gIHJldHVybiBbJ2ZhbHNlJywgJ3VuZGVmaW5lZCcsICdudWxsJywgJ05hTicsICcwJywgJyddLmluY2x1ZGVzKGl0ZW0pXHJcbiAgICA/IGZhbHNlXHJcbiAgICA6ICEhaXRlbTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIF9fZGlybmFtZSxcclxuICBjbGVhclRleHQsXHJcbiAgZGVlcENvcHksXHJcbiAgZXhwQmFja29mZixcclxuICBnZXRBYnNvbHV0ZVBhdGgsXHJcbiAgZ2V0QmFzZTY0LFxyXG4gIGdldE5ld0RhdGUsXHJcbiAgZ2V0TmV3RGF0ZVRpbWUsXHJcbiAgaXNPYmplY3QsXHJcbiAgaXNPYmplY3RFbXB0eSxcclxuICBpc1ByaXZhdGVSYW5nZVVybEZvdW5kLFxyXG4gIG1lYXN1cmVUaW1lLFxyXG4gIHJvdW5kTnVtYmVyLFxyXG4gIHRvQm9vbGVhblxyXG59O1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNSwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgQSBtb2R1bGUgZm9yIG1hbmFnaW5nIGxvZ2dpbmcgZnVuY3Rpb25hbGl0eSB3aXRoIGN1c3RvbWl6YWJsZVxyXG4gKiBsb2cgbGV2ZWxzLCBjb25zb2xlIGFuZCBmaWxlIGxvZ2dpbmcgb3B0aW9ucywgYW5kIGVycm9yIGhhbmRsaW5nIHN1cHBvcnQuXHJcbiAqIFRoZSBtb2R1bGUgYWxzbyBlbnN1cmVzIHRoYXQgZmlsZS1iYXNlZCBsb2dzIGFyZSBzdG9yZWQgaW4gYSBzdHJ1Y3R1cmVkXHJcbiAqIGRpcmVjdG9yeSwgY3JlYXRpbmcgdGhlIG5lY2Vzc2FyeSBwYXRocyBhdXRvbWF0aWNhbGx5IGlmIHRoZXkgZG8gbm90IGV4aXN0LlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGFwcGVuZEZpbGUsIGV4aXN0c1N5bmMsIG1rZGlyU3luYyB9IGZyb20gJ2ZzJztcclxuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xyXG5cclxuaW1wb3J0IHsgZ2V0QWJzb2x1dGVQYXRoLCBnZXROZXdEYXRlIH0gZnJvbSAnLi91dGlscy5qcyc7XHJcblxyXG4vLyBUaGUgYXZhaWxhYmxlIGNvbG9yc1xyXG5jb25zdCBjb2xvcnMgPSBbJ3JlZCcsICd5ZWxsb3cnLCAnYmx1ZScsICdncmF5JywgJ2dyZWVuJ107XHJcblxyXG4vLyBUaGUgZGVmYXVsdCBsb2dnaW5nIGNvbmZpZ1xyXG5jb25zdCBsb2dnaW5nID0ge1xyXG4gIC8vIEZsYWdzIGZvciBsb2dnaW5nIHN0YXR1c1xyXG4gIHRvQ29uc29sZTogdHJ1ZSxcclxuICB0b0ZpbGU6IGZhbHNlLFxyXG4gIHBhdGhDcmVhdGVkOiBmYWxzZSxcclxuICAvLyBGdWxsIHBhdGggdG8gdGhlIGxvZyBmaWxlXHJcbiAgcGF0aFRvTG9nOiAnJyxcclxuICAvLyBMb2cgbGV2ZWxzXHJcbiAgbGV2ZWxzRGVzYzogW1xyXG4gICAge1xyXG4gICAgICB0aXRsZTogJ2Vycm9yJyxcclxuICAgICAgY29sb3I6IGNvbG9yc1swXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdGl0bGU6ICd3YXJuaW5nJyxcclxuICAgICAgY29sb3I6IGNvbG9yc1sxXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdGl0bGU6ICdub3RpY2UnLFxyXG4gICAgICBjb2xvcjogY29sb3JzWzJdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0aXRsZTogJ3ZlcmJvc2UnLFxyXG4gICAgICBjb2xvcjogY29sb3JzWzNdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0aXRsZTogJ2JlbmNobWFyaycsXHJcbiAgICAgIGNvbG9yOiBjb2xvcnNbNF1cclxuICAgIH1cclxuICBdXHJcbn07XHJcblxyXG4vKipcclxuICogTG9ncyBhIG1lc3NhZ2Ugd2l0aCBhIHNwZWNpZmllZCBsb2cgbGV2ZWwuIEFjY2VwdHMgYSB2YXJpYWJsZSBudW1iZXJcclxuICogb2YgYXJndW1lbnRzLiBUaGUgYXJndW1lbnRzIGFmdGVyIHRoZSBgbGV2ZWxgIGFyZSBwYXNzZWQgdG8gYGNvbnNvbGUubG9nYFxyXG4gKiBhbmQvb3IgdXNlZCB0byBjb25zdHJ1Y3QgYW5kIGFwcGVuZCBtZXNzYWdlcyB0byBhIGxvZyBmaWxlLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gbG9nXHJcbiAqXHJcbiAqIEBwYXJhbSB7Li4udW5rbm93bn0gYXJncyAtIEFuIGFycmF5IG9mIGFyZ3VtZW50cyB3aGVyZSB0aGUgZmlyc3QgaXMgdGhlIGxvZ1xyXG4gKiBsZXZlbCBhbmQgdGhlIHJlbWFpbmluZyBhcmUgc3RyaW5ncyB1c2VkIHRvIGJ1aWxkIHRoZSBsb2cgbWVzc2FnZS5cclxuICpcclxuICogQHJldHVybnMge3ZvaWR9IEV4aXRzIHRoZSBmdW5jdGlvbiBleGVjdXRpb24gaWYgYXR0ZW1wdGluZyB0byBsb2cgYXQgYSBsZXZlbFxyXG4gKiBoaWdoZXIgdGhhbiBhbGxvd2VkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XHJcbiAgY29uc3QgW25ld0xldmVsLCAuLi50ZXh0c10gPSBhcmdzO1xyXG5cclxuICAvLyBDdXJyZW50IGxvZ2dpbmcgb3B0aW9uc1xyXG4gIGNvbnN0IHsgbGV2ZWxzRGVzYywgbGV2ZWwgfSA9IGxvZ2dpbmc7XHJcblxyXG4gIC8vIENoZWNrIGlmIHRoZSBsb2cgbGV2ZWwgaXMgd2l0aGluIGEgY29ycmVjdCByYW5nZSBvciBpcyBpdCBhIGJlbmNobWFyayBsb2dcclxuICBpZiAoXHJcbiAgICBuZXdMZXZlbCAhPT0gNSAmJlxyXG4gICAgKG5ld0xldmVsID09PSAwIHx8IG5ld0xldmVsID4gbGV2ZWwgfHwgbGV2ZWwgPiBsZXZlbHNEZXNjLmxlbmd0aClcclxuICApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8vIENyZWF0ZSBhIG1lc3NhZ2UncyBwcmVmaXhcclxuICBjb25zdCBwcmVmaXggPSBgJHtnZXROZXdEYXRlKCl9IFske2xldmVsc0Rlc2NbbmV3TGV2ZWwgLSAxXS50aXRsZX1dIC1gO1xyXG5cclxuICAvLyBMb2cgdG8gZmlsZVxyXG4gIGlmIChsb2dnaW5nLnRvRmlsZSkge1xyXG4gICAgX2xvZ1RvRmlsZSh0ZXh0cywgcHJlZml4KTtcclxuICB9XHJcblxyXG4gIC8vIExvZyB0byBjb25zb2xlXHJcbiAgaWYgKGxvZ2dpbmcudG9Db25zb2xlKSB7XHJcbiAgICBjb25zb2xlLmxvZy5hcHBseShcclxuICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICBbcHJlZml4LnRvU3RyaW5nKClbbG9nZ2luZy5sZXZlbHNEZXNjW25ld0xldmVsIC0gMV0uY29sb3JdXS5jb25jYXQodGV4dHMpXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIExvZ3MgYW4gZXJyb3IgbWVzc2FnZSBhbG9uZyB3aXRoIGl0cyBzdGFjayB0cmFjZS4gT3B0aW9uYWxseSwgYSBjdXN0b21cclxuICogbWVzc2FnZSBjYW4gYmUgcHJvdmlkZWQuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBsb2dXaXRoU3RhY2tcclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ9IG5ld0xldmVsIC0gVGhlIGxvZyBsZXZlbC5cclxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgLSBUaGUgZXJyb3Igb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN0YWNrIHRyYWNlLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gY3VzdG9tTWVzc2FnZSAtIEFuIG9wdGlvbmFsIGN1c3RvbSBtZXNzYWdlIHRvIGJlIGluY2x1ZGVkXHJcbiAqIGluIHRoZSBsb2cgYWxvbmdzaWRlIHRoZSBlcnJvci5cclxuICpcclxuICogQHJldHVybnMge3ZvaWR9IEV4aXRzIHRoZSBmdW5jdGlvbiBleGVjdXRpb24gaWYgYXR0ZW1wdGluZyB0byBsb2cgYXQgYSBsZXZlbFxyXG4gKiBoaWdoZXIgdGhhbiBhbGxvd2VkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGxvZ1dpdGhTdGFjayhuZXdMZXZlbCwgZXJyb3IsIGN1c3RvbU1lc3NhZ2UpIHtcclxuICAvLyBHZXQgdGhlIG1haW4gbWVzc2FnZVxyXG4gIGNvbnN0IG1haW5NZXNzYWdlID0gY3VzdG9tTWVzc2FnZSB8fCAoZXJyb3IgJiYgZXJyb3IubWVzc2FnZSkgfHwgJyc7XHJcblxyXG4gIC8vIEN1cnJlbnQgbG9nZ2luZyBvcHRpb25zXHJcbiAgY29uc3QgeyBsZXZlbCwgbGV2ZWxzRGVzYyB9ID0gbG9nZ2luZztcclxuXHJcbiAgLy8gQ2hlY2sgaWYgdGhlIGxvZyBsZXZlbCBpcyB3aXRoaW4gYSBjb3JyZWN0IHJhbmdlXHJcbiAgaWYgKG5ld0xldmVsID09PSAwIHx8IG5ld0xldmVsID4gbGV2ZWwgfHwgbGV2ZWwgPiBsZXZlbHNEZXNjLmxlbmd0aCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gQ3JlYXRlIGEgbWVzc2FnZSdzIHByZWZpeFxyXG4gIGNvbnN0IHByZWZpeCA9IGAke2dldE5ld0RhdGUoKX0gWyR7bGV2ZWxzRGVzY1tuZXdMZXZlbCAtIDFdLnRpdGxlfV0gLWA7XHJcblxyXG4gIC8vIEFkZCB0aGUgd2hvbGUgc3RhY2sgbWVzc2FnZVxyXG4gIGNvbnN0IHN0YWNrTWVzc2FnZSA9IGVycm9yICYmIGVycm9yLnN0YWNrO1xyXG5cclxuICAvLyBDb21iaW5lIGN1c3RvbSBtZXNzYWdlIG9yIGVycm9yIG1lc3NhZ2Ugd2l0aCBlcnJvciBzdGFjayBtZXNzYWdlLCBpZiBleGlzdHNcclxuICBjb25zdCB0ZXh0cyA9IFttYWluTWVzc2FnZV07XHJcbiAgaWYgKHN0YWNrTWVzc2FnZSkge1xyXG4gICAgdGV4dHMucHVzaCgnXFxuJywgc3RhY2tNZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIC8vIExvZyB0byBmaWxlXHJcbiAgaWYgKGxvZ2dpbmcudG9GaWxlKSB7XHJcbiAgICBfbG9nVG9GaWxlKHRleHRzLCBwcmVmaXgpO1xyXG4gIH1cclxuXHJcbiAgLy8gTG9nIHRvIGNvbnNvbGVcclxuICBpZiAobG9nZ2luZy50b0NvbnNvbGUpIHtcclxuICAgIGNvbnNvbGUubG9nLmFwcGx5KFxyXG4gICAgICB1bmRlZmluZWQsXHJcbiAgICAgIFtwcmVmaXgudG9TdHJpbmcoKVtsb2dnaW5nLmxldmVsc0Rlc2NbbmV3TGV2ZWwgLSAxXS5jb2xvcl1dLmNvbmNhdChbXHJcbiAgICAgICAgdGV4dHMuc2hpZnQoKVtjb2xvcnNbbmV3TGV2ZWwgLSAxXV0sXHJcbiAgICAgICAgLi4udGV4dHNcclxuICAgICAgXSlcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogTG9ncyBhbiBlcnJvciBtZXNzYWdlIHJlbGF0ZWQgdG8gWm9kIHZhbGlkYXRpb24gaXNzdWVzLiBPcHRpb25hbGx5LCBhIGN1c3RvbVxyXG4gKiBtZXNzYWdlIGNhbiBiZSBwcm92aWRlZC5cclxuICpcclxuICogQGZ1bmN0aW9uIGxvZ1pvZElzc3Vlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3TGV2ZWwgLSBUaGUgbG9nIGxldmVsLlxyXG4gKiBAcGFyYW0ge0Vycm9yW119IGlzc3VlcyAtIEFuIGFycmF5IG9mIFpvZCB2YWxpZGF0aW9uIGlzc3Vlcy5cclxuICogQHBhcmFtIHtzdHJpbmd9IGN1c3RvbU1lc3NhZ2UgLSBBbiBvcHRpb25hbCBjdXN0b20gbWVzc2FnZSB0byBiZSBpbmNsdWRlZFxyXG4gKiBpbiB0aGUgbG9nIGFsb25nc2lkZSB0aGUgZXJyb3IuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9nWm9kSXNzdWVzKG5ld0xldmVsLCBpc3N1ZXMsIGN1c3RvbU1lc3NhZ2UpIHtcclxuICBsb2dXaXRoU3RhY2soXHJcbiAgICBuZXdMZXZlbCxcclxuICAgIG51bGwsXHJcbiAgICBbXHJcbiAgICAgIGAke2N1c3RvbU1lc3NhZ2UgfHwgJ1t2YWxpZGF0aW9uXSBWYWxpZGF0aW9uIGVycm9yJ30gLSB0aGUgZm9sbG93aW5nIFpvZCBpc3N1ZXMgb2NjdXJlZDpgLFxyXG4gICAgICAuLi4oaXNzdWVzIHx8IFtdKS5tYXAoKGlzc3VlKSA9PiBgLSAke2lzc3VlLm1lc3NhZ2V9YClcclxuICAgIF0uam9pbignXFxuJylcclxuICApO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZXMgbG9nZ2luZyB3aXRoIHRoZSBzcGVjaWZpZWQgbG9nZ2luZyBjb25maWd1cmF0aW9uLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gaW5pdExvZ2dpbmdcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IGxvZ2dpbmdPcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmdcclxuICogYGxvZ2dpbmdgIG9wdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5pdExvZ2dpbmcobG9nZ2luZ09wdGlvbnMpIHtcclxuICAvLyBHZXQgb3B0aW9ucyBmcm9tIHRoZSBgbG9nZ2luZ09wdGlvbnNgIG9iamVjdFxyXG4gIGNvbnN0IHsgbGV2ZWwsIGRlc3QsIGZpbGUsIHRvQ29uc29sZSwgdG9GaWxlIH0gPSBsb2dnaW5nT3B0aW9ucztcclxuXHJcbiAgLy8gUmVzZXQgZmxhZ3MgdG8gdGhlIGRlZmF1bHQgdmFsdWVzXHJcbiAgbG9nZ2luZy5wYXRoQ3JlYXRlZCA9IGZhbHNlO1xyXG4gIGxvZ2dpbmcucGF0aFRvTG9nID0gJyc7XHJcblxyXG4gIC8vIFNldCB0aGUgbG9nZ2luZyBsZXZlbFxyXG4gIHNldExvZ0xldmVsKGxldmVsKTtcclxuXHJcbiAgLy8gU2V0IHRoZSBjb25zb2xlIGxvZ2dpbmdcclxuICBlbmFibGVDb25zb2xlTG9nZ2luZyh0b0NvbnNvbGUpO1xyXG5cclxuICAvLyBTZXQgdGhlIGZpbGUgbG9nZ2luZ1xyXG4gIGVuYWJsZUZpbGVMb2dnaW5nKGRlc3QsIGZpbGUsIHRvRmlsZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXRzIHRoZSBsb2cgbGV2ZWwgdG8gdGhlIHNwZWNpZmllZCB2YWx1ZS4gTG9nIGxldmVscyBhcmUgKGAwYCA9IG5vIGxvZ2dpbmcsXHJcbiAqIGAxYCA9IGVycm9yLCBgMmAgPSB3YXJuaW5nLCBgM2AgPSBub3RpY2UsIGA0YCA9IHZlcmJvc2UsIG9yIGA1YCA9IGJlbmNobWFyaykuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBzZXRMb2dMZXZlbFxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gbGV2ZWwgLSBUaGUgbG9nIGxldmVsIHRvIGJlIHNldC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkge1xyXG4gIGlmIChcclxuICAgIE51bWJlci5pc0ludGVnZXIobGV2ZWwpICYmXHJcbiAgICBsZXZlbCA+PSAwICYmXHJcbiAgICBsZXZlbCA8PSBsb2dnaW5nLmxldmVsc0Rlc2MubGVuZ3RoXHJcbiAgKSB7XHJcbiAgICAvLyBVcGRhdGUgdGhlIG1vZHVsZSBsb2dnaW5nJ3MgYGxldmVsYCBvcHRpb25cclxuICAgIGxvZ2dpbmcubGV2ZWwgPSBsZXZlbDtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFbmFibGVzIGNvbnNvbGUgbG9nZ2luZy5cclxuICpcclxuICogQGZ1bmN0aW9uIGVuYWJsZUNvbnNvbGVMb2dnaW5nXHJcbiAqXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdG9Db25zb2xlIC0gVGhlIGZsYWcgZm9yIHNldHRpbmcgdGhlIGxvZ2dpbmcgdG8gdGhlIGNvbnNvbGUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlQ29uc29sZUxvZ2dpbmcodG9Db25zb2xlKSB7XHJcbiAgLy8gVXBkYXRlIHRoZSBtb2R1bGUgbG9nZ2luZydzIGB0b0NvbnNvbGVgIG9wdGlvblxyXG4gIGxvZ2dpbmcudG9Db25zb2xlID0gISF0b0NvbnNvbGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFbmFibGVzIGZpbGUgbG9nZ2luZyB3aXRoIHRoZSBzcGVjaWZpZWQgZGVzdGluYXRpb24gYW5kIGxvZyBmaWxlIG5hbWUuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBlbmFibGVGaWxlTG9nZ2luZ1xyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZGVzdCAtIFRoZSBkZXN0aW5hdGlvbiBwYXRoIHdoZXJlIHRoZSBsb2cgZmlsZSBzaG91bGRcclxuICogYmUgc2F2ZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlIC0gVGhlIG5hbWUgb2YgdGhlIGxvZyBmaWxlLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHRvRmlsZSAtIEEgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgbG9nZ2luZyBzaG91bGRcclxuICogYmUgZGlyZWN0ZWQgdG8gYSBmaWxlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZUZpbGVMb2dnaW5nKGRlc3QsIGZpbGUsIHRvRmlsZSkge1xyXG4gIC8vIFVwZGF0ZSB0aGUgbW9kdWxlIGxvZ2dpbmcncyBgdG9GaWxlYCBvcHRpb25cclxuICBsb2dnaW5nLnRvRmlsZSA9ICEhdG9GaWxlO1xyXG5cclxuICAvLyBTZXQgdGhlIGBkZXN0YCBhbmQgYGZpbGVgIG9wdGlvbnMgb25seSBpZiB0aGUgZmlsZSBsb2dnaW5nIGlzIGVuYWJsZWRcclxuICBpZiAobG9nZ2luZy50b0ZpbGUpIHtcclxuICAgIGxvZ2dpbmcuZGVzdCA9IGRlc3QgfHwgJ2xvZyc7XHJcbiAgICBsb2dnaW5nLmZpbGUgPSBmaWxlIHx8ICdoaWdoY2hhcnRzLWV4cG9ydC1zZXJ2ZXIubG9nJztcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMb2dzIHRoZSBwcm92aWRlZCB0ZXh0cyB0byBhIGZpbGUsIGlmIGZpbGUgbG9nZ2luZyBpcyBlbmFibGVkLiBJdCBjcmVhdGVzXHJcbiAqIHRoZSBuZWNlc3NhcnkgZGlyZWN0b3J5IHN0cnVjdHVyZSBpZiBub3QgYWxyZWFkeSBjcmVhdGVkIGFuZCBhcHBlbmRzXHJcbiAqIHRoZSBjb250ZW50LCBpbmNsdWRpbmcgYW4gb3B0aW9uYWwgcHJlZml4LCB0byB0aGUgc3BlY2lmaWVkIGxvZyBmaWxlLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX2xvZ1RvRmlsZVxyXG4gKlxyXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IHRleHRzIC0gQW4gYXJyYXkgb2YgdGV4dHMgdG8gYmUgbG9nZ2VkLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IC0gQW4gb3B0aW9uYWwgcHJlZml4IHRvIGJlIGFkZGVkIHRvIGVhY2ggbG9nIGVudHJ5LlxyXG4gKi9cclxuZnVuY3Rpb24gX2xvZ1RvRmlsZSh0ZXh0cywgcHJlZml4KSB7XHJcbiAgaWYgKCFsb2dnaW5nLnBhdGhDcmVhdGVkKSB7XHJcbiAgICAvLyBDcmVhdGUgaWYgZG9lcyBub3QgZXhpc3RcclxuICAgICFleGlzdHNTeW5jKGdldEFic29sdXRlUGF0aChsb2dnaW5nLmRlc3QpKSAmJlxyXG4gICAgICBta2RpclN5bmMoZ2V0QWJzb2x1dGVQYXRoKGxvZ2dpbmcuZGVzdCkpO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgZnVsbCBwYXRoXHJcbiAgICBsb2dnaW5nLnBhdGhUb0xvZyA9IGdldEFic29sdXRlUGF0aChqb2luKGxvZ2dpbmcuZGVzdCwgbG9nZ2luZy5maWxlKSk7XHJcblxyXG4gICAgLy8gV2Ugbm93IGFzc3VtZSB0aGUgcGF0aCBpcyBhdmFpbGFibGUsIGUuZy4gaXQncyB0aGUgcmVzcG9uc2liaWxpdHlcclxuICAgIC8vIG9mIHRoZSB1c2VyIHRvIGNyZWF0ZSB0aGUgcGF0aCB3aXRoIHRoZSBjb3JyZWN0IGFjY2VzcyByaWdodHMuXHJcbiAgICBsb2dnaW5nLnBhdGhDcmVhdGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8vIEFkZCB0aGUgY29udGVudCB0byBhIGZpbGVcclxuICBhcHBlbmRGaWxlKFxyXG4gICAgbG9nZ2luZy5wYXRoVG9Mb2csXHJcbiAgICBbcHJlZml4XS5jb25jYXQodGV4dHMpLmpvaW4oJyAnKSArICdcXG4nLFxyXG4gICAgKGVycm9yKSA9PiB7XHJcbiAgICAgIGlmIChlcnJvciAmJiBsb2dnaW5nLnRvRmlsZSAmJiBsb2dnaW5nLnBhdGhDcmVhdGVkKSB7XHJcbiAgICAgICAgbG9nZ2luZy50b0ZpbGUgPSBmYWxzZTtcclxuICAgICAgICBsb2dnaW5nLnBhdGhDcmVhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgbG9nV2l0aFN0YWNrKDIsIGVycm9yLCBgW2xvZ2dlcl0gVW5hYmxlIHRvIHdyaXRlIHRvIGxvZyBmaWxlLmApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGxvZyxcclxuICBsb2dXaXRoU3RhY2ssXHJcbiAgbG9nWm9kSXNzdWVzLFxyXG4gIGluaXRMb2dnaW5nLFxyXG4gIHNldExvZ0xldmVsLFxyXG4gIGVuYWJsZUNvbnNvbGVMb2dnaW5nLFxyXG4gIGVuYWJsZUZpbGVMb2dnaW5nXHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBDb25maWd1cmF0aW9uIG1hbmFnZW1lbnQgbW9kdWxlIGZvciB0aGUgSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyLlxyXG4gKiBJdCBwcm92aWRlcyBhIGRlZmF1bHQgY29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCBwcmVkZWZpbmVkIGRlZmF1bHQgdmFsdWVzLFxyXG4gKiBkZXNjcmlwdGlvbnMsIGFuZCBjaGFyYWN0ZXJpc3RpY3MgZm9yIGVhY2ggb3B0aW9uIHVzZWQgaW4gdGhlIEV4cG9ydCBTZXJ2ZXIuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGF2YWlsYWJsZSBvcHRpb25zLCBvcmdhbml6ZWRcclxuICogYnkgc2VjdGlvbnMuXHJcbiAqXHJcbiAqIFRoaXMgb2JqZWN0IGluY2x1ZGVzOlxyXG4gKiAtIERlZmF1bHQgdmFsdWVzIGZvciBlYWNoIG9wdGlvbi5cclxuICogLSBEYXRhIHR5cGVzIGZvciB2YWxpZGF0aW9uLlxyXG4gKiAtIE5hbWVzIG9mIGNvcnJlc3BvbmRpbmcgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxyXG4gKiAtIERlc2NyaXB0aW9ucyBvZiBlYWNoIHByb3BlcnR5LlxyXG4gKiAtIEluZm9ybWF0aW9uIHVzZWQgZm9yIHByb21wdHMgaW4gaW50ZXJhY3RpdmUgY29uZmlndXJhdGlvbi5cclxuICogLSBbT3B0aW9uYWxdIENvcnJlc3BvbmRpbmcgQ0xJIGFyZ3VtZW50IG5hbWVzIGZvciBDTEkgdXNhZ2UuXHJcbiAqIC0gW09wdGlvbmFsXSBMZWdhY3kgbmFtZXMgZnJvbSB0aGUgcHJldmlvdXMgUGhhbnRvbUpTLWJhc2VkIHNlcnZlci5cclxuICovXHJcbmNvbnN0IGRlZmF1bHRDb25maWcgPSB7XHJcbiAgcHVwcGV0ZWVyOiB7XHJcbiAgICBhcmdzOiB7XHJcbiAgICAgIHZhbHVlOiBbXHJcbiAgICAgICAgJy0tYWxsb3ctcnVubmluZy1pbnNlY3VyZS1jb250ZW50JyxcclxuICAgICAgICAnLS1hc2gtbm8tbnVkZ2VzJyxcclxuICAgICAgICAnLS1hdXRvcGxheS1wb2xpY3k9dXNlci1nZXN0dXJlLXJlcXVpcmVkJyxcclxuICAgICAgICAnLS1ibG9jay1uZXctd2ViLWNvbnRlbnRzJyxcclxuICAgICAgICAnLS1kaXNhYmxlLWFjY2VsZXJhdGVkLTJkLWNhbnZhcycsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1iYWNrZ3JvdW5kLW5ldHdvcmtpbmcnLFxyXG4gICAgICAgICctLWRpc2FibGUtYmFja2dyb3VuZC10aW1lci10aHJvdHRsaW5nJyxcclxuICAgICAgICAnLS1kaXNhYmxlLWJhY2tncm91bmRpbmctb2NjbHVkZWQtd2luZG93cycsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1icmVha3BhZCcsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1jaGVja2VyLWltYWdpbmcnLFxyXG4gICAgICAgICctLWRpc2FibGUtY2xpZW50LXNpZGUtcGhpc2hpbmctZGV0ZWN0aW9uJyxcclxuICAgICAgICAnLS1kaXNhYmxlLWNvbXBvbmVudC1leHRlbnNpb25zLXdpdGgtYmFja2dyb3VuZC1wYWdlcycsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1jb21wb25lbnQtdXBkYXRlJyxcclxuICAgICAgICAnLS1kaXNhYmxlLWRlZmF1bHQtYXBwcycsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1kZXYtc2htLXVzYWdlJyxcclxuICAgICAgICAnLS1kaXNhYmxlLWRvbWFpbi1yZWxpYWJpbGl0eScsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1leHRlbnNpb25zJyxcclxuICAgICAgICAnLS1kaXNhYmxlLWZlYXR1cmVzPUNhbGN1bGF0ZU5hdGl2ZVdpbk9jY2x1c2lvbixJbnRlcmVzdEZlZWRDb250ZW50U3VnZ2VzdGlvbnMsV2ViT1RQJyxcclxuICAgICAgICAnLS1kaXNhYmxlLWhhbmctbW9uaXRvcicsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1pcGMtZmxvb2RpbmctcHJvdGVjdGlvbicsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1sb2dnaW5nJyxcclxuICAgICAgICAnLS1kaXNhYmxlLW5vdGlmaWNhdGlvbnMnLFxyXG4gICAgICAgICctLWRpc2FibGUtb2ZmZXItc3RvcmUtdW5tYXNrZWQtd2FsbGV0LWNhcmRzJyxcclxuICAgICAgICAnLS1kaXNhYmxlLXBvcHVwLWJsb2NraW5nJyxcclxuICAgICAgICAnLS1kaXNhYmxlLXByaW50LXByZXZpZXcnLFxyXG4gICAgICAgICctLWRpc2FibGUtcHJvbXB0LW9uLXJlcG9zdCcsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1yZW5kZXJlci1iYWNrZ3JvdW5kaW5nJyxcclxuICAgICAgICAnLS1kaXNhYmxlLXNlYXJjaC1lbmdpbmUtY2hvaWNlLXNjcmVlbicsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1zZXNzaW9uLWNyYXNoZWQtYnViYmxlJyxcclxuICAgICAgICAnLS1kaXNhYmxlLXNldHVpZC1zYW5kYm94JyxcclxuICAgICAgICAnLS1kaXNhYmxlLXNpdGUtaXNvbGF0aW9uLXRyaWFscycsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1zcGVlY2gtYXBpJyxcclxuICAgICAgICAnLS1kaXNhYmxlLXN5bmMnLFxyXG4gICAgICAgICctLWVuYWJsZS11bnNhZmUtd2ViZ3B1JyxcclxuICAgICAgICAnLS1oaWRlLWNyYXNoLXJlc3RvcmUtYnViYmxlJyxcclxuICAgICAgICAnLS1oaWRlLXNjcm9sbGJhcnMnLFxyXG4gICAgICAgICctLW1ldHJpY3MtcmVjb3JkaW5nLW9ubHknLFxyXG4gICAgICAgICctLW11dGUtYXVkaW8nLFxyXG4gICAgICAgICctLW5vLWRlZmF1bHQtYnJvd3Nlci1jaGVjaycsXHJcbiAgICAgICAgJy0tbm8tZmlyc3QtcnVuJyxcclxuICAgICAgICAnLS1uby1waW5ncycsXHJcbiAgICAgICAgJy0tbm8tc2FuZGJveCcsXHJcbiAgICAgICAgJy0tbm8tc3RhcnR1cC13aW5kb3cnLFxyXG4gICAgICAgICctLW5vLXp5Z290ZScsXHJcbiAgICAgICAgJy0tcGFzc3dvcmQtc3RvcmU9YmFzaWMnLFxyXG4gICAgICAgICctLXByb2Nlc3MtcGVyLXRhYicsXHJcbiAgICAgICAgJy0tdXNlLW1vY2sta2V5Y2hhaW4nXHJcbiAgICAgIF0sXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZ1tdJ10sXHJcbiAgICAgIGVudkxpbms6ICdQVVBQRVRFRVJfQVJHUycsXHJcbiAgICAgIGNsaU5hbWU6ICdwdXBwZXRlZXJBcmdzJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdBcnJheSBvZiBQdXBwZXRlZXIgYXJndW1lbnRzJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdsaXN0JyxcclxuICAgICAgICBzZXBhcmF0b3I6ICc7J1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBoaWdoY2hhcnRzOiB7XHJcbiAgICB2ZXJzaW9uOiB7XHJcbiAgICAgIHZhbHVlOiAnbGF0ZXN0JyxcclxuICAgICAgdHlwZXM6IFsnc3RyaW5nJ10sXHJcbiAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX1ZFUlNJT04nLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0hpZ2hjaGFydHMgdmVyc2lvbicsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNkblVybDoge1xyXG4gICAgICB2YWx1ZTogJ2h0dHBzOi8vY29kZS5oaWdoY2hhcnRzLmNvbScsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZyddLFxyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19DRE5fVVJMJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdDRE4gVVJMIGZvciBIaWdoY2hhcnRzIHNjcmlwdHMnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBmb3JjZUZldGNoOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19GT1JDRV9GRVRDSCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnRmxhZyB0byByZWZldGNoIHNjcmlwdHMgYWZ0ZXIgZWFjaCBzZXJ2ZXIgcmVydW4nLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNhY2hlUGF0aDoge1xyXG4gICAgICB2YWx1ZTogJy5jYWNoZScsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZyddLFxyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19DQUNIRV9QQVRIJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdEaXJlY3RvcnkgcGF0aCBmb3IgY2FjaGVkIEhpZ2hjaGFydHMgc2NyaXB0cycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNvcmVTY3JpcHRzOiB7XHJcbiAgICAgIHZhbHVlOiBbJ2hpZ2hjaGFydHMnLCAnaGlnaGNoYXJ0cy1tb3JlJywgJ2hpZ2hjaGFydHMtM2QnXSxcclxuICAgICAgdHlwZXM6IFsnc3RyaW5nW10nXSxcclxuICAgICAgZW52TGluazogJ0hJR0hDSEFSVFNfQ09SRV9TQ1JJUFRTJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdIaWdoY2hhcnRzIGNvcmUgc2NyaXB0cyB0byBmZXRjaCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbXVsdGlzZWxlY3QnLFxyXG4gICAgICAgIGluc3RydWN0aW9uczogJ1NwYWNlOiBTZWxlY3Qgc3BlY2lmaWMsIEE6IFNlbGVjdCBhbGwsIEVudGVyOiBDb25maXJtJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgbW9kdWxlU2NyaXB0czoge1xyXG4gICAgICB2YWx1ZTogW1xyXG4gICAgICAgICdzdG9jaycsXHJcbiAgICAgICAgJ21hcCcsXHJcbiAgICAgICAgJ2dhbnR0JyxcclxuICAgICAgICAnZXhwb3J0aW5nJyxcclxuICAgICAgICAncGFyYWxsZWwtY29vcmRpbmF0ZXMnLFxyXG4gICAgICAgICdhY2Nlc3NpYmlsaXR5JyxcclxuICAgICAgICAvLyAnYW5ub3RhdGlvbnMtYWR2YW5jZWQnLFxyXG4gICAgICAgICdib29zdC1jYW52YXMnLFxyXG4gICAgICAgICdib29zdCcsXHJcbiAgICAgICAgJ2RhdGEnLFxyXG4gICAgICAgICdkYXRhLXRvb2xzJyxcclxuICAgICAgICAnZHJhZ2dhYmxlLXBvaW50cycsXHJcbiAgICAgICAgJ3N0YXRpYy1zY2FsZScsXHJcbiAgICAgICAgJ2Jyb2tlbi1heGlzJyxcclxuICAgICAgICAnaGVhdG1hcCcsXHJcbiAgICAgICAgJ3RpbGVtYXAnLFxyXG4gICAgICAgICd0aWxlZHdlYm1hcCcsXHJcbiAgICAgICAgJ3RpbWVsaW5lJyxcclxuICAgICAgICAndHJlZW1hcCcsXHJcbiAgICAgICAgJ3RyZWVncmFwaCcsXHJcbiAgICAgICAgJ2l0ZW0tc2VyaWVzJyxcclxuICAgICAgICAnZHJpbGxkb3duJyxcclxuICAgICAgICAnaGlzdG9ncmFtLWJlbGxjdXJ2ZScsXHJcbiAgICAgICAgJ2J1bGxldCcsXHJcbiAgICAgICAgJ2Z1bm5lbCcsXHJcbiAgICAgICAgJ2Z1bm5lbDNkJyxcclxuICAgICAgICAnZ2VvaGVhdG1hcCcsXHJcbiAgICAgICAgJ3B5cmFtaWQzZCcsXHJcbiAgICAgICAgJ25ldHdvcmtncmFwaCcsXHJcbiAgICAgICAgJ292ZXJsYXBwaW5nLWRhdGFsYWJlbHMnLFxyXG4gICAgICAgICdwYXJldG8nLFxyXG4gICAgICAgICdwYXR0ZXJuLWZpbGwnLFxyXG4gICAgICAgICdwaWN0b3JpYWwnLFxyXG4gICAgICAgICdwcmljZS1pbmRpY2F0b3InLFxyXG4gICAgICAgICdzYW5rZXknLFxyXG4gICAgICAgICdhcmMtZGlhZ3JhbScsXHJcbiAgICAgICAgJ2RlcGVuZGVuY3ktd2hlZWwnLFxyXG4gICAgICAgICdzZXJpZXMtbGFiZWwnLFxyXG4gICAgICAgICdzZXJpZXMtb24tcG9pbnQnLFxyXG4gICAgICAgICdzb2xpZC1nYXVnZScsXHJcbiAgICAgICAgJ3NvbmlmaWNhdGlvbicsXHJcbiAgICAgICAgLy8gJ3N0b2NrLXRvb2xzJyxcclxuICAgICAgICAnc3RyZWFtZ3JhcGgnLFxyXG4gICAgICAgICdzdW5idXJzdCcsXHJcbiAgICAgICAgJ3ZhcmlhYmxlLXBpZScsXHJcbiAgICAgICAgJ3Zhcml3aWRlJyxcclxuICAgICAgICAndmVjdG9yJyxcclxuICAgICAgICAndmVubicsXHJcbiAgICAgICAgJ3dpbmRiYXJiJyxcclxuICAgICAgICAnd29yZGNsb3VkJyxcclxuICAgICAgICAneHJhbmdlJyxcclxuICAgICAgICAnbm8tZGF0YS10by1kaXNwbGF5JyxcclxuICAgICAgICAnZHJhZy1wYW5lcycsXHJcbiAgICAgICAgJ2RlYnVnZ2VyJyxcclxuICAgICAgICAnZHVtYmJlbGwnLFxyXG4gICAgICAgICdsb2xsaXBvcCcsXHJcbiAgICAgICAgJ2N5bGluZGVyJyxcclxuICAgICAgICAnb3JnYW5pemF0aW9uJyxcclxuICAgICAgICAnZG90cGxvdCcsXHJcbiAgICAgICAgJ21hcmtlci1jbHVzdGVycycsXHJcbiAgICAgICAgJ2hvbGxvd2NhbmRsZXN0aWNrJyxcclxuICAgICAgICAnaGVpa2luYXNoaScsXHJcbiAgICAgICAgJ2Zsb3dtYXAnLFxyXG4gICAgICAgICdleHBvcnQtZGF0YScsXHJcbiAgICAgICAgJ25hdmlnYXRvcicsXHJcbiAgICAgICAgJ3RleHRwYXRoJ1xyXG4gICAgICBdLFxyXG4gICAgICB0eXBlczogWydzdHJpbmdbXSddLFxyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19NT0RVTEVfU0NSSVBUUycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnSGlnaGNoYXJ0cyBtb2R1bGUgc2NyaXB0cyB0byBmZXRjaCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbXVsdGlzZWxlY3QnLFxyXG4gICAgICAgIGluc3RydWN0aW9uczogJ1NwYWNlOiBTZWxlY3Qgc3BlY2lmaWMsIEE6IFNlbGVjdCBhbGwsIEVudGVyOiBDb25maXJtJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgaW5kaWNhdG9yU2NyaXB0czoge1xyXG4gICAgICB2YWx1ZTogWydpbmRpY2F0b3JzLWFsbCddLFxyXG4gICAgICB0eXBlczogWydzdHJpbmdbXSddLFxyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19JTkRJQ0FUT1JfU0NSSVBUUycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnSGlnaGNoYXJ0cyBpbmRpY2F0b3Igc2NyaXB0cyB0byBmZXRjaCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbXVsdGlzZWxlY3QnLFxyXG4gICAgICAgIGluc3RydWN0aW9uczogJ1NwYWNlOiBTZWxlY3Qgc3BlY2lmaWMsIEE6IFNlbGVjdCBhbGwsIEVudGVyOiBDb25maXJtJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgY3VzdG9tU2NyaXB0czoge1xyXG4gICAgICB2YWx1ZTogW1xyXG4gICAgICAgICdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9tb21lbnQuanMvMi4zMC4xL21vbWVudC5taW4uanMnLFxyXG4gICAgICAgICdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9tb21lbnQtdGltZXpvbmUvMC41LjQ1L21vbWVudC10aW1lem9uZS13aXRoLWRhdGEubWluLmpzJ1xyXG4gICAgICBdLFxyXG4gICAgICB0eXBlczogWydzdHJpbmdbXSddLFxyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19DVVNUT01fU0NSSVBUUycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnQWRkaXRpb25hbCBjdXN0b20gc2NyaXB0cyBvciBkZXBlbmRlbmNpZXMgdG8gZmV0Y2gnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ2xpc3QnLFxyXG4gICAgICAgIHNlcGFyYXRvcjogJzsnXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIGV4cG9ydDoge1xyXG4gICAgaW5maWxlOiB7XHJcbiAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICB0eXBlczogWydzdHJpbmcnLCAnbnVsbCddLFxyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX0lORklMRScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdJbnB1dCBmaWxlbmFtZSB3aXRoIHR5cGUsIGZvcm1hdHRlZCBjb3JyZWN0bHkgYXMgSlNPTiBvciBTVkcnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBpbnN0cjoge1xyXG4gICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgdHlwZXM6IFsnT2JqZWN0JywgJ3N0cmluZycsICdudWxsJ10sXHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfSU5TVFInLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnT3ZlcnJpZGVzIHRoZSBgaW5maWxlYCB3aXRoIEpTT04sIHN0cmluZ2lmaWVkIEpTT04sIG9yIFNWRyBpbnB1dCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9wdGlvbnM6IHtcclxuICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgIHR5cGVzOiBbJ09iamVjdCcsICdzdHJpbmcnLCAnbnVsbCddLFxyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX09QVElPTlMnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0FsaWFzIGZvciB0aGUgYGluc3RyYCBvcHRpb24nLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzdmc6IHtcclxuICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZycsICdudWxsJ10sXHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfU1ZHJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdTVkcgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjaGFydCB0byByZW5kZXInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBiYXRjaDoge1xyXG4gICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgdHlwZXM6IFsnc3RyaW5nJywgJ251bGwnXSxcclxuICAgICAgZW52TGluazogJ0VYUE9SVF9CQVRDSCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdCYXRjaCBqb2Igc3RyaW5nIHdpdGggaW5wdXQvb3V0cHV0IHBhaXJzOiBcImluPW91dDtpbj1vdXQ7Li4uXCInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBvdXRmaWxlOiB7XHJcbiAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICB0eXBlczogWydzdHJpbmcnLCAnbnVsbCddLFxyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX09VVEZJTEUnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnT3V0cHV0IGZpbGVuYW1lIHdpdGggdHlwZS4gQ2FuIGJlIGpwZWcsIHBuZywgcGRmLCBvciBzdmcgYW5kIGlnbm9yZXMgYHR5cGVgIG9wdGlvbicsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHR5cGU6IHtcclxuICAgICAgdmFsdWU6ICdwbmcnLFxyXG4gICAgICB0eXBlczogWydzdHJpbmcnXSxcclxuICAgICAgZW52TGluazogJ0VYUE9SVF9UWVBFJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdGaWxlIGV4cG9ydCBmb3JtYXQuIENhbiBiZSBqcGVnLCBwbmcsIHBkZiwgb3Igc3ZnJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdzZWxlY3QnLFxyXG4gICAgICAgIGhpbnQ6ICdEZWZhdWx0OiBwbmcnLFxyXG4gICAgICAgIGNob2ljZXM6IFsncG5nJywgJ2pwZWcnLCAncGRmJywgJ3N2ZyddXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjb25zdHI6IHtcclxuICAgICAgdmFsdWU6ICdjaGFydCcsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZyddLFxyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX0NPTlNUUicsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdDaGFydCBjb25zdHJ1Y3Rvci4gQ2FuIGJlIGNoYXJ0LCBzdG9ja0NoYXJ0LCBtYXBDaGFydCwgb3IgZ2FudHRDaGFydCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnc2VsZWN0JyxcclxuICAgICAgICBoaW50OiAnRGVmYXVsdDogY2hhcnQnLFxyXG4gICAgICAgIGNob2ljZXM6IFsnY2hhcnQnLCAnc3RvY2tDaGFydCcsICdtYXBDaGFydCcsICdnYW50dENoYXJ0J11cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGI2NDoge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgZW52TGluazogJ0VYUE9SVF9CNjQnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnV2hldGhlciBvciBub3QgdG8gdGhlIGNoYXJ0IHNob3VsZCBiZSByZWNlaXZlZCBpbiBCYXNlNjQgZm9ybWF0IGluc3RlYWQgb2YgYmluYXJ5JyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBub0Rvd25sb2FkOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX05PX0RPV05MT0FEJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ1doZXRoZXIgb3Igbm90IHRvIGluY2x1ZGUgb3IgZXhjbHVkZSBhdHRhY2htZW50IGhlYWRlcnMgaW4gdGhlIHJlc3BvbnNlJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBoZWlnaHQ6IHtcclxuICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlcicsICdudWxsJ10sXHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfSEVJR0hUJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdIZWlnaHQgb2YgdGhlIGV4cG9ydGVkIGNoYXJ0LCBvdmVycmlkZXMgY2hhcnQgc2V0dGluZ3MnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHdpZHRoOiB7XHJcbiAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICB0eXBlczogWydudW1iZXInLCAnbnVsbCddLFxyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX1dJRFRIJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdXaWR0aCBvZiB0aGUgZXhwb3J0ZWQgY2hhcnQsIG92ZXJyaWRlcyBjaGFydCBzZXR0aW5ncycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbnVtYmVyJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2NhbGU6IHtcclxuICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlcicsICdudWxsJ10sXHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfU0NBTEUnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnU2NhbGUgb2YgdGhlIGV4cG9ydGVkIGNoYXJ0LCBvdmVycmlkZXMgY2hhcnQgc2V0dGluZ3MuIFJhbmdlcyBmcm9tIDAuMSB0byA1LjAnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRlZmF1bHRIZWlnaHQ6IHtcclxuICAgICAgdmFsdWU6IDQwMCxcclxuICAgICAgdHlwZXM6IFsnbnVtYmVyJ10sXHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfREVGQVVMVF9IRUlHSFQnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0RlZmF1bHQgaGVpZ2h0IG9mIHRoZSBleHBvcnRlZCBjaGFydCBpZiBub3Qgc2V0JyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkZWZhdWx0V2lkdGg6IHtcclxuICAgICAgdmFsdWU6IDYwMCxcclxuICAgICAgdHlwZXM6IFsnbnVtYmVyJ10sXHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfREVGQVVMVF9XSURUSCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnRGVmYXVsdCB3aWR0aCBvZiB0aGUgZXhwb3J0ZWQgY2hhcnQgaWYgbm90IHNldCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbnVtYmVyJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZGVmYXVsdFNjYWxlOiB7XHJcbiAgICAgIHZhbHVlOiAxLFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ0VYUE9SVF9ERUZBVUxUX1NDQUxFJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ0RlZmF1bHQgc2NhbGUgb2YgdGhlIGV4cG9ydGVkIGNoYXJ0IGlmIG5vdCBzZXQuIFJhbmdlcyBmcm9tIDAuMSB0byA1LjAnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgICAgbWluOiAwLjEsXHJcbiAgICAgICAgbWF4OiA1XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBnbG9iYWxPcHRpb25zOiB7XHJcbiAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICB0eXBlczogWydPYmplY3QnLCAnc3RyaW5nJywgJ251bGwnXSxcclxuICAgICAgZW52TGluazogJ0VYUE9SVF9HTE9CQUxfT1BUSU9OUycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdKU09OLCBzdHJpbmdpZmllZCBKU09OIG9yIGZpbGVuYW1lIHdpdGggZ2xvYmFsIG9wdGlvbnMgZm9yIEhpZ2hjaGFydHMuc2V0T3B0aW9ucycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHRoZW1lT3B0aW9uczoge1xyXG4gICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgdHlwZXM6IFsnT2JqZWN0JywgJ3N0cmluZycsICdudWxsJ10sXHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfVEhFTUVfT1BUSU9OUycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdKU09OLCBzdHJpbmdpZmllZCBKU09OIG9yIGZpbGVuYW1lIHdpdGggdGhlbWUgb3B0aW9ucyBmb3IgSGlnaGNoYXJ0cy5zZXRPcHRpb25zJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0ZXh0J1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmFzdGVyaXphdGlvblRpbWVvdXQ6IHtcclxuICAgICAgdmFsdWU6IDE1MDAsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX1JBU1RFUklaQVRJT05fVElNRU9VVCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnTWlsbGlzZWNvbmRzIHRvIHdhaXQgZm9yIHdlYnBhZ2UgcmVuZGVyaW5nJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIGN1c3RvbUxvZ2ljOiB7XHJcbiAgICBhbGxvd0NvZGVFeGVjdXRpb246IHtcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICB0eXBlczogWydib29sZWFuJ10sXHJcbiAgICAgIGVudkxpbms6ICdDVVNUT01fTE9HSUNfQUxMT1dfQ09ERV9FWEVDVVRJT04nLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnQWxsb3dzIG9yIGRpc2FsbG93cyBleGVjdXRpb24gb2YgYXJiaXRyYXJ5IGNvZGUgZHVyaW5nIGV4cG9ydGluZycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgYWxsb3dGaWxlUmVzb3VyY2VzOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnQ1VTVE9NX0xPR0lDX0FMTE9XX0ZJTEVfUkVTT1VSQ0VTJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ0FsbG93cyBvciBkaXNhbGxvd3MgaW5qZWN0aW9uIG9mIGZpbGVzeXN0ZW0gcmVzb3VyY2VzIChkaXNhYmxlZCBpbiBzZXJ2ZXIgbW9kZSknLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGN1c3RvbUNvZGU6IHtcclxuICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZycsICdudWxsJ10sXHJcbiAgICAgIGVudkxpbms6ICdDVVNUT01fTE9HSUNfQ1VTVE9NX0NPREUnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnQ3VzdG9tIGNvZGUgdG8gZXhlY3V0ZSBiZWZvcmUgY2hhcnQgaW5pdGlhbGl6YXRpb24uIENhbiBiZSBhIGZ1bmN0aW9uLCBjb2RlIHdyYXBwZWQgaW4gYSBmdW5jdGlvbiwgb3IgYSAuanMgZmlsZW5hbWUnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjYWxsYmFjazoge1xyXG4gICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgdHlwZXM6IFsnc3RyaW5nJywgJ251bGwnXSxcclxuICAgICAgZW52TGluazogJ0NVU1RPTV9MT0dJQ19DQUxMQkFDSycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdKYXZhU2NyaXB0IGNvZGUgdG8gcnVuIGR1cmluZyBjb25zdHJ1Y3Rpb24uIENhbiBiZSBhIGZ1bmN0aW9uIG9yIGEgLmpzIGZpbGVuYW1lJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0ZXh0J1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmVzb3VyY2VzOiB7XHJcbiAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICB0eXBlczogWydPYmplY3QnLCAnc3RyaW5nJywgJ251bGwnXSxcclxuICAgICAgZW52TGluazogJ0NVU1RPTV9MT0dJQ19SRVNPVVJDRVMnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnQWRkaXRpb25hbCByZXNvdXJjZXMgYXMgSlNPTiwgc3RyaW5naWZpZWQgSlNPTiwgb3IgZmlsZW5hbWUsIGNvbnRhaW5pbmcgZmlsZXMsIGpzLCBhbmQgY3NzIHNlY3Rpb25zJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0ZXh0J1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgbG9hZENvbmZpZzoge1xyXG4gICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgdHlwZXM6IFsnc3RyaW5nJywgJ251bGwnXSxcclxuICAgICAgZW52TGluazogJ0NVU1RPTV9MT0dJQ19MT0FEX0NPTkZJRycsXHJcbiAgICAgIGxlZ2FjeU5hbWU6ICdmcm9tRmlsZScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnRmlsZSB3aXRoIGEgcHJlLWRlZmluZWQgY29uZmlndXJhdGlvbiB0byB1c2UnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGVDb25maWc6IHtcclxuICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZycsICdudWxsJ10sXHJcbiAgICAgIGVudkxpbms6ICdDVVNUT01fTE9HSUNfQ1JFQVRFX0NPTkZJRycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdQcm9tcHQtYmFzZWQgb3B0aW9uIHNldHRpbmcsIHNhdmVkIHRvIGEgcHJvdmlkZWQgY29uZmlnIGZpbGUnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIHNlcnZlcjoge1xyXG4gICAgZW5hYmxlOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnU0VSVkVSX0VOQUJMRScsXHJcbiAgICAgIGNsaU5hbWU6ICdlbmFibGVTZXJ2ZXInLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1N0YXJ0cyB0aGUgc2VydmVyIHdoZW4gdHJ1ZScsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgaG9zdDoge1xyXG4gICAgICB2YWx1ZTogJzAuMC4wLjAnLFxyXG4gICAgICB0eXBlczogWydzdHJpbmcnXSxcclxuICAgICAgZW52TGluazogJ1NFUlZFUl9IT1NUJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdIb3N0bmFtZSBvZiB0aGUgc2VydmVyJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0ZXh0J1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcG9ydDoge1xyXG4gICAgICB2YWx1ZTogNzgwMSxcclxuICAgICAgdHlwZXM6IFsnbnVtYmVyJ10sXHJcbiAgICAgIGVudkxpbms6ICdTRVJWRVJfUE9SVCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnUG9ydCBudW1iZXIgZm9yIHRoZSBzZXJ2ZXInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHVwbG9hZExpbWl0OiB7XHJcbiAgICAgIHZhbHVlOiAzLFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ1NFUlZFUl9VUExPQURfTElNSVQnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ01heGltdW0gcmVxdWVzdCBib2R5IHNpemUgaW4gTUInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGJlbmNobWFya2luZzoge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgZW52TGluazogJ1NFUlZFUl9CRU5DSE1BUktJTkcnLFxyXG4gICAgICBjbGlOYW1lOiAnc2VydmVyQmVuY2htYXJraW5nJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ0Rpc3BsYXlzIG9yIG5vdCBhY3Rpb24gZHVyYXRpb25zIGluIG1pbGxpc2Vjb25kcyBkdXJpbmcgc2VydmVyIHJlcXVlc3RzJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwcm94eToge1xyXG4gICAgICBob3N0OiB7XHJcbiAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgdHlwZXM6IFsnc3RyaW5nJywgJ251bGwnXSxcclxuICAgICAgICBlbnZMaW5rOiAnU0VSVkVSX1BST1hZX0hPU1QnLFxyXG4gICAgICAgIGNsaU5hbWU6ICdwcm94eUhvc3QnLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSG9zdCBvZiB0aGUgcHJveHkgc2VydmVyLCBpZiBhcHBsaWNhYmxlJyxcclxuICAgICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHBvcnQ6IHtcclxuICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICB0eXBlczogWydudW1iZXInLCAnbnVsbCddLFxyXG4gICAgICAgIGVudkxpbms6ICdTRVJWRVJfUFJPWFlfUE9SVCcsXHJcbiAgICAgICAgY2xpTmFtZTogJ3Byb3h5UG9ydCcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdQb3J0IG9mIHRoZSBwcm94eSBzZXJ2ZXIsIGlmIGFwcGxpY2FibGUnLFxyXG4gICAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0aW1lb3V0OiB7XHJcbiAgICAgICAgdmFsdWU6IDUwMDAsXHJcbiAgICAgICAgdHlwZXM6IFsnbnVtYmVyJ10sXHJcbiAgICAgICAgZW52TGluazogJ1NFUlZFUl9QUk9YWV9USU1FT1VUJyxcclxuICAgICAgICBjbGlOYW1lOiAncHJveHlUaW1lb3V0JyxcclxuICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICdUaW1lb3V0IGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHByb3h5IHNlcnZlciwgaWYgYXBwbGljYWJsZScsXHJcbiAgICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICByYXRlTGltaXRpbmc6IHtcclxuICAgICAgZW5hYmxlOiB7XHJcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgICBlbnZMaW5rOiAnU0VSVkVSX1JBVEVfTElNSVRJTkdfRU5BQkxFJyxcclxuICAgICAgICBjbGlOYW1lOiAnZW5hYmxlUmF0ZUxpbWl0aW5nJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ0VuYWJsZXMgb3IgZGlzYWJsZXMgcmF0ZSBsaW1pdGluZyBvbiB0aGUgc2VydmVyJyxcclxuICAgICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgbWF4UmVxdWVzdHM6IHtcclxuICAgICAgICB2YWx1ZTogMTAsXHJcbiAgICAgICAgdHlwZXM6IFsnbnVtYmVyJ10sXHJcbiAgICAgICAgZW52TGluazogJ1NFUlZFUl9SQVRFX0xJTUlUSU5HX01BWF9SRVFVRVNUUycsXHJcbiAgICAgICAgbGVnYWN5TmFtZTogJ3JhdGVMaW1pdCcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdNYXhpbXVtIG51bWJlciBvZiByZXF1ZXN0cyBhbGxvd2VkIHBlciBtaW51dGUnLFxyXG4gICAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB3aW5kb3c6IHtcclxuICAgICAgICB2YWx1ZTogMSxcclxuICAgICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgICBlbnZMaW5rOiAnU0VSVkVSX1JBVEVfTElNSVRJTkdfV0lORE9XJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ1RpbWUgd2luZG93IGluIG1pbnV0ZXMgZm9yIHJhdGUgbGltaXRpbmcnLFxyXG4gICAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBkZWxheToge1xyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICAgIGVudkxpbms6ICdTRVJWRVJfUkFURV9MSU1JVElOR19ERUxBWScsXHJcbiAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAnRGVsYXkgZHVyYXRpb24gYmV0d2VlbiBzdWNjZXNzaXZlIHJlcXVlc3RzIGJlZm9yZSByZWFjaGluZyB0aGUgbGltaXQnLFxyXG4gICAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0cnVzdFByb3h5OiB7XHJcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgICBlbnZMaW5rOiAnU0VSVkVSX1JBVEVfTElNSVRJTkdfVFJVU1RfUFJPWFknLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnU2V0IHRvIHRydWUgaWYgdGhlIHNlcnZlciBpcyBiZWhpbmQgYSBsb2FkIGJhbGFuY2VyJyxcclxuICAgICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgc2tpcEtleToge1xyXG4gICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIHR5cGVzOiBbJ3N0cmluZycsICdudWxsJ10sXHJcbiAgICAgICAgZW52TGluazogJ1NFUlZFUl9SQVRFX0xJTUlUSU5HX1NLSVBfS0VZJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ0tleSB0byBieXBhc3MgdGhlIHJhdGUgbGltaXRlciwgdXNlZCB3aXRoIGBza2lwVG9rZW5gJyxcclxuICAgICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHNraXBUb2tlbjoge1xyXG4gICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIHR5cGVzOiBbJ3N0cmluZycsICdudWxsJ10sXHJcbiAgICAgICAgZW52TGluazogJ1NFUlZFUl9SQVRFX0xJTUlUSU5HX1NLSVBfVE9LRU4nLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnVG9rZW4gdG8gYnlwYXNzIHRoZSByYXRlIGxpbWl0ZXIsIHVzZWQgd2l0aCBgc2tpcEtleWAnLFxyXG4gICAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICAgIHR5cGU6ICd0ZXh0J1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHNzbDoge1xyXG4gICAgICBlbmFibGU6IHtcclxuICAgICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICAgIGVudkxpbms6ICdTRVJWRVJfU1NMX0VOQUJMRScsXHJcbiAgICAgICAgY2xpTmFtZTogJ2VuYWJsZVNzbCcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdFbmFibGVzIG9yIGRpc2FibGVzIFNTTCBwcm90b2NvbCcsXHJcbiAgICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGZvcmNlOiB7XHJcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgICBlbnZMaW5rOiAnU0VSVkVSX1NTTF9GT1JDRScsXHJcbiAgICAgICAgY2xpTmFtZTogJ3NzbEZvcmNlJyxcclxuICAgICAgICBsZWdhY3lOYW1lOiAnc3NsT25seScsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdGb3JjZXMgdGhlIHNlcnZlciB0byB1c2UgSFRUUFMgb25seSB3aGVuIHRydWUnLFxyXG4gICAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBwb3J0OiB7XHJcbiAgICAgICAgdmFsdWU6IDQ0MyxcclxuICAgICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgICBlbnZMaW5rOiAnU0VSVkVSX1NTTF9QT1JUJyxcclxuICAgICAgICBjbGlOYW1lOiAnc3NsUG9ydCcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdQb3J0IGZvciB0aGUgU1NMIHNlcnZlcicsXHJcbiAgICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGNlcnRQYXRoOiB7XHJcbiAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgdHlwZXM6IFsnc3RyaW5nJywgJ251bGwnXSxcclxuICAgICAgICBlbnZMaW5rOiAnU0VSVkVSX1NTTF9DRVJUX1BBVEgnLFxyXG4gICAgICAgIGNsaU5hbWU6ICdzc2xDZXJ0UGF0aCcsXHJcbiAgICAgICAgbGVnYWN5TmFtZTogJ3NzbFBhdGgnLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnUGF0aCB0byB0aGUgU1NMIGNlcnRpZmljYXRlL2tleSBmaWxlJyxcclxuICAgICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIHBvb2w6IHtcclxuICAgIG1pbldvcmtlcnM6IHtcclxuICAgICAgdmFsdWU6IDQsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICBlbnZMaW5rOiAnUE9PTF9NSU5fV09SS0VSUycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnTWluaW11bSBhbmQgaW5pdGlhbCBudW1iZXIgb2YgcG9vbCB3b3JrZXJzIHRvIHNwYXduJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtYXhXb3JrZXJzOiB7XHJcbiAgICAgIHZhbHVlOiA4LFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ1BPT0xfTUFYX1dPUktFUlMnLFxyXG4gICAgICBsZWdhY3lOYW1lOiAnd29ya2VycycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnTWF4aW11bSBudW1iZXIgb2YgcG9vbCB3b3JrZXJzIHRvIHNwYXduJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB3b3JrTGltaXQ6IHtcclxuICAgICAgdmFsdWU6IDQwLFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ1BPT0xfV09SS19MSU1JVCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnTnVtYmVyIG9mIHRhc2tzIGEgd29ya2VyIGNhbiBoYW5kbGUgYmVmb3JlIHJlc3RhcnRpbmcnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGFjcXVpcmVUaW1lb3V0OiB7XHJcbiAgICAgIHZhbHVlOiA1MDAwLFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ1BPT0xfQUNRVUlSRV9USU1FT1VUJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdUaW1lb3V0IGluIG1pbGxpc2Vjb25kcyBmb3IgYWNxdWlyaW5nIGEgcmVzb3VyY2UnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZVRpbWVvdXQ6IHtcclxuICAgICAgdmFsdWU6IDUwMDAsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICBlbnZMaW5rOiAnUE9PTF9DUkVBVEVfVElNRU9VVCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnVGltZW91dCBpbiBtaWxsaXNlY29uZHMgZm9yIGNyZWF0aW5nIGEgcmVzb3VyY2UnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRlc3Ryb3lUaW1lb3V0OiB7XHJcbiAgICAgIHZhbHVlOiA1MDAwLFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ1BPT0xfREVTVFJPWV9USU1FT1VUJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdUaW1lb3V0IGluIG1pbGxpc2Vjb25kcyBmb3IgZGVzdHJveWluZyBhIHJlc291cmNlJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBpZGxlVGltZW91dDoge1xyXG4gICAgICB2YWx1ZTogMzAwMDAsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICBlbnZMaW5rOiAnUE9PTF9JRExFX1RJTUVPVVQnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1RpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIGZvciBkZXN0cm95aW5nIGlkbGUgcmVzb3VyY2VzJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGVSZXRyeUludGVydmFsOiB7XHJcbiAgICAgIHZhbHVlOiAyMDAsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICBlbnZMaW5rOiAnUE9PTF9DUkVBVEVfUkVUUllfSU5URVJWQUwnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnSW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzIGJlZm9yZSByZXRyeWluZyByZXNvdXJjZSBjcmVhdGlvbiBvbiBmYWlsdXJlJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICByZWFwZXJJbnRlcnZhbDoge1xyXG4gICAgICB2YWx1ZTogMTAwMCxcclxuICAgICAgdHlwZXM6IFsnbnVtYmVyJ10sXHJcbiAgICAgIGVudkxpbms6ICdQT09MX1JFQVBFUl9JTlRFUlZBTCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdJbnRlcnZhbCBpbiBtaWxsaXNlY29uZHMgdG8gY2hlY2sgYW5kIGRlc3Ryb3kgaWRsZSByZXNvdXJjZXMnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGJlbmNobWFya2luZzoge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgZW52TGluazogJ1BPT0xfQkVOQ0hNQVJLSU5HJyxcclxuICAgICAgY2xpTmFtZTogJ3Bvb2xCZW5jaG1hcmtpbmcnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1Nob3dzIHN0YXRpc3RpY3MgZm9yIHRoZSBwb29sIG9mIHJlc291cmNlcycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBsb2dnaW5nOiB7XHJcbiAgICBsZXZlbDoge1xyXG4gICAgICB2YWx1ZTogNCxcclxuICAgICAgdHlwZXM6IFsnbnVtYmVyJ10sXHJcbiAgICAgIGVudkxpbms6ICdMT0dHSU5HX0xFVkVMJyxcclxuICAgICAgY2xpTmFtZTogJ2xvZ0xldmVsJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdMb2dnaW5nIHZlcmJvc2l0eSBsZXZlbCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgICByb3VuZDogMCxcclxuICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgbWF4OiA1XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBmaWxlOiB7XHJcbiAgICAgIHZhbHVlOiAnaGlnaGNoYXJ0cy1leHBvcnQtc2VydmVyLmxvZycsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZyddLFxyXG4gICAgICBlbnZMaW5rOiAnTE9HR0lOR19GSUxFJyxcclxuICAgICAgY2xpTmFtZTogJ2xvZ0ZpbGUnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnTG9nIGZpbGUgbmFtZS4gUmVxdWlyZXMgYGxvZ1RvRmlsZWAgYW5kIGBsb2dEZXN0YCB0byBiZSBzZXQnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkZXN0OiB7XHJcbiAgICAgIHZhbHVlOiAnbG9nJyxcclxuICAgICAgdHlwZXM6IFsnc3RyaW5nJ10sXHJcbiAgICAgIGVudkxpbms6ICdMT0dHSU5HX0RFU1QnLFxyXG4gICAgICBjbGlOYW1lOiAnbG9nRGVzdCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnUGF0aCB0byBzdG9yZSBsb2cgZmlsZXMuIFJlcXVpcmVzIGBsb2dUb0ZpbGVgIHRvIGJlIHNldCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHRvQ29uc29sZToge1xyXG4gICAgICB2YWx1ZTogdHJ1ZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnTE9HR0lOR19UT19DT05TT0xFJyxcclxuICAgICAgY2xpTmFtZTogJ2xvZ1RvQ29uc29sZScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnRW5hYmxlcyBvciBkaXNhYmxlcyBjb25zb2xlIGxvZ2dpbmcnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHRvRmlsZToge1xyXG4gICAgICB2YWx1ZTogdHJ1ZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnTE9HR0lOR19UT19GSUxFJyxcclxuICAgICAgY2xpTmFtZTogJ2xvZ1RvRmlsZScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnRW5hYmxlcyBvciBkaXNhYmxlcyBsb2dnaW5nIHRvIGEgZmlsZScsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICB1aToge1xyXG4gICAgZW5hYmxlOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnVUlfRU5BQkxFJyxcclxuICAgICAgY2xpTmFtZTogJ2VuYWJsZVVpJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdFbmFibGVzIG9yIGRpc2FibGVzIHRoZSBVSSBmb3IgdGhlIGV4cG9ydCBzZXJ2ZXInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJvdXRlOiB7XHJcbiAgICAgIHZhbHVlOiAnLycsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZyddLFxyXG4gICAgICBlbnZMaW5rOiAnVUlfUk9VVEUnLFxyXG4gICAgICBjbGlOYW1lOiAndWlSb3V0ZScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIGVuZHBvaW50IHJvdXRlIGZvciB0aGUgVUknLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIG90aGVyOiB7XHJcbiAgICBub2RlRW52OiB7XHJcbiAgICAgIHZhbHVlOiAncHJvZHVjdGlvbicsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZyddLFxyXG4gICAgICBlbnZMaW5rOiAnT1RIRVJfTk9ERV9FTlYnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1RoZSBOb2RlLmpzIGVudmlyb25tZW50IHR5cGUnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBsaXN0ZW5Ub1Byb2Nlc3NFeGl0czoge1xyXG4gICAgICB2YWx1ZTogdHJ1ZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnT1RIRVJfTElTVEVOX1RPX1BST0NFU1NfRVhJVFMnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1doZXRoZXIgb3Igbm90IHRvIGF0dGFjaCBwcm9jZXNzLmV4aXQgaGFuZGxlcnMnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIG5vTG9nbzoge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgZW52TGluazogJ09USEVSX05PX0xPR08nLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0Rpc3BsYXkgb3Igc2tpcCBwcmludGluZyB0aGUgbG9nbyBvbiBzdGFydHVwJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBoYXJkUmVzZXRQYWdlOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnT1RIRVJfSEFSRF9SRVNFVF9QQUdFJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdXaGV0aGVyIG9yIG5vdCB0byByZXNldCB0aGUgcGFnZSBjb250ZW50IGVudGlyZWx5JyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBicm93c2VyU2hlbGxNb2RlOiB7XHJcbiAgICAgIHZhbHVlOiB0cnVlLFxyXG4gICAgICB0eXBlczogWydib29sZWFuJ10sXHJcbiAgICAgIGVudkxpbms6ICdPVEhFUl9CUk9XU0VSX1NIRUxMX01PREUnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1doZXRoZXIgb3Igbm90IHRvIHNldCB0aGUgYnJvd3NlciB0byBydW4gaW4gc2hlbGwgbW9kZScsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgdmFsaWRhdGlvbjoge1xyXG4gICAgICB2YWx1ZTogdHJ1ZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnT1RIRVJfVkFMSURBVElPTicsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnV2hldGhlciBvciBub3QgdG8gZW5hYmxlIHZhbGlkYXRpb24gb2Ygb3B0aW9ucyB0eXBlcycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBkZWJ1Zzoge1xyXG4gICAgZW5hYmxlOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnREVCVUdfRU5BQkxFJyxcclxuICAgICAgY2xpTmFtZTogJ2VuYWJsZURlYnVnJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdFbmFibGVzIG9yIGRpc2FibGVzIGRlYnVnIG1vZGUgZm9yIHRoZSB1bmRlcmx5aW5nIGJyb3dzZXInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGhlYWRsZXNzOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnREVCVUdfSEVBRExFU1MnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnV2hldGhlciBvciBub3QgdG8gc2V0IHRoZSBicm93c2VyIHRvIHJ1biBpbiBoZWFkbGVzcyBtb2RlIGR1cmluZyBkZWJ1Z2dpbmcnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRldnRvb2xzOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnREVCVUdfREVWVE9PTFMnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0VuYWJsZXMgb3IgZGlzYWJsZXMgRGV2VG9vbHMgaW4gaGVhZGZ1bCBtb2RlJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBsaXN0ZW5Ub0NvbnNvbGU6IHtcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICB0eXBlczogWydib29sZWFuJ10sXHJcbiAgICAgIGVudkxpbms6ICdERUJVR19MSVNURU5fVE9fQ09OU09MRScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdFbmFibGVzIG9yIGRpc2FibGVzIGxpc3RlbmluZyB0byBjb25zb2xlIG1lc3NhZ2VzIGZyb20gdGhlIGJyb3dzZXInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGR1bXBpbzoge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgZW52TGluazogJ0RFQlVHX0RVTVBJTycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdSZWRpcmVjdHMgb3Igbm90IGJyb3dzZXIgc3Rkb3V0IGFuZCBzdGRlcnIgdG8gcHJvY2Vzcy5zdGRvdXQgYW5kIHByb2Nlc3Muc3RkZXJyJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzbG93TW86IHtcclxuICAgICAgdmFsdWU6IDAsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICBlbnZMaW5rOiAnREVCVUdfU0xPV19NTycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnRGVsYXlzIFB1cHBldGVlciBvcGVyYXRpb25zIGJ5IHRoZSBzcGVjaWZpZWQgbWlsbGlzZWNvbmRzJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkZWJ1Z2dpbmdQb3J0OiB7XHJcbiAgICAgIHZhbHVlOiA5MjIyLFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ0RFQlVHX0RFQlVHR0lOR19QT1JUJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdQb3J0IHVzZWQgZm9yIGRlYnVnZ2luZycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbnVtYmVyJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICB3ZWJTb2NrZXQ6IHtcclxuICAgIGVuYWJsZToge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgZW52TGluazogJ1dFQl9TT0NLRVRfRU5BQkxFJyxcclxuICAgICAgY2xpTmFtZTogJ2VuYWJsZVdzJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdFbmFibGVzIG9yIGRpc2FibGVzIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbicsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmVjb25uZWN0OiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnV0VCX1NPQ0tFVF9SRUNPTk5FQ1QnLFxyXG4gICAgICBjbGlOYW1lOiAnd3NSZWNvbm5lY3QnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnV2hldGhlciBvciBub3QgdG8gYXR0ZW1wdCB0byByZWNvbm5lY3QgdG8gdGhlIFdlYlNvY2tldCBzZXJ2ZXIgaWYgZGlzY29ubmVjdGVkJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICByZWplY3RVbmF1dGhvcml6ZWQ6IHtcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICB0eXBlczogWydib29sZWFuJ10sXHJcbiAgICAgIGVudkxpbms6ICdXRUJfU09DS0VUX1JFSkVDVF9VTkFVVEhPUklaRUQnLFxyXG4gICAgICBjbGlOYW1lOiAnd3NSZWplY3RVbmF1dGhvcml6ZWQnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICBcIldoZXRoZXIgb3Igbm90IHRvIGNsaWVudCBzaG91bGQgdmVyaWZ5IHRoZSBzZXJ2ZXIncyBTU0wvVExTIGNlcnRpZmljYXRlIGR1cmluZyB0aGUgaGFuZHNoYWtlXCIsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcGluZ1RpbWVvdXQ6IHtcclxuICAgICAgdmFsdWU6IDE2MDAwLFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ1dFQl9TT0NLRVRfUElOR19USU1FT1VUJyxcclxuICAgICAgY2xpTmFtZTogJ3dzUGluZ1RpbWVvdXQnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnVGltZW91dCBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSBoZWFydGJlYXQgbWVjaGFuaXNtIGJldHdlZW4gY2xpZW50IGFuZCBzZXJ2ZXInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJlY29ubmVjdEludGVydmFsOiB7XHJcbiAgICAgIHZhbHVlOiAzMDAwLFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ1dFQl9TT0NLRVRfUkVDT05ORUNUX0lOVEVSVkFMJyxcclxuICAgICAgY2xpTmFtZTogJ3dzUmVjb25uZWN0SW50ZXJ2YWwnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0ludGVydmFsIGluIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIHJlY29ubmVjdCBhdHRlbXB0cycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbnVtYmVyJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmVjb25uZWN0QXR0ZW1wdHM6IHtcclxuICAgICAgdmFsdWU6IDMsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICBlbnZMaW5rOiAnV0VCX1NPQ0tFVF9SRUNPTk5FQ1RfQVRURU1QVFMnLFxyXG4gICAgICBjbGlOYW1lOiAnd3NSZWNvbm5lY3RBdHRlbXB0cycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnTnVtYmVyIG9mIGF0dGVtcHRzIHRvIHJlY29ubmVjdCBiZWZvcmUgcmVwb3J0aW5nIGFuIGVycm9yJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtZXNzYWdlSW50ZXJ2YWw6IHtcclxuICAgICAgdmFsdWU6IDM2MDAwMDAsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICBlbnZMaW5rOiAnV0VCX1NPQ0tFVF9NRVNTQUdFX0lOVEVSVkFMJyxcclxuICAgICAgY2xpTmFtZTogJ3dzTWVzc2FnZUludGVydmFsJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ0ludGVydmFsIGluIG1pbGxpc2Vjb25kcyBmb3IgYXV0b21hdGljYWxseSBzZW5kaW5nIGRhdGEgdGhyb3VnaCB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24nLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGdhdGhlckFsbE9wdGlvbnM6IHtcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICB0eXBlczogWydib29sZWFuJ10sXHJcbiAgICAgIGVudkxpbms6ICdXRUJfU09DS0VUX0dBVEhFUl9BTExfT1BUSU9OUycsXHJcbiAgICAgIGNsaU5hbWU6ICd3c0dhdGhlckFsbE9wdGlvbnMnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnV2hldGhlciBvciBub3QgdG8gZ2F0aGVyIGFsbCBjaGFydCBvcHRpb25zIG9yIG9ubHkgdGhvc2UgZGVmaW5lZCBpbiB0aGUgdGVsZW1ldHJ5Lmpzb24gZmlsZScsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgdXJsOiB7XHJcbiAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICB0eXBlczogWydzdHJpbmcnLCAnbnVsbCddLFxyXG4gICAgICBlbnZMaW5rOiAnV0VCX1NPQ0tFVF9VUkwnLFxyXG4gICAgICBjbGlOYW1lOiAnd3NVcmwnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1VSTCBvZiB0aGUgV2ViU29ja2V0IHNlcnZlcicsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRDb25maWc7XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBUaGlzIGZpbGUgaGFuZGxlcyBwYXJzaW5nIGFuZCB2YWxpZGF0aW5nIG9wdGlvbnMgZnJvbSBtdWx0aXBsZVxyXG4gKiBzb3VyY2VzICh0aGUgY29uZmlnIGZpbGUsIGN1c3RvbSBKU09OLCBlbnZpcm9ubWVudCB2YXJpYWJsZXMsIENMSSBhcmd1bWVudHMsXHJcbiAqIGFuZCByZXF1ZXN0IHBheWxvYWQpIHVzaW5nIHRoZSAnem9kJyBsaWJyYXJ5LlxyXG4gKlxyXG4gKiBFbnZpcm9ubWVudCB2YXJpYWJsZXMgYXJlIHBhcnNlZCBhbmQgdmFsaWRhdGVkIG9ubHkgb25jZSBhdCBhcHBsaWNhdGlvblxyXG4gKiBzdGFydHVwLCBhbmQgdGhlIHZhbGlkYXRlZCByZXN1bHRzIGFyZSBleHBvcnRlZCBhcyBgZW52c2AgZm9yIHVzZSB0aHJvdWdob3V0XHJcbiAqIHRoZSBhcHBsaWNhdGlvbi5cclxuICpcclxuICogT3B0aW9ucyBmcm9tIG90aGVyIHNvdXJjZXMsIGhvd2V2ZXIsIGFyZSBwYXJzZWQgYW5kIHZhbGlkYXRlZCBvbiBkZW1hbmQsXHJcbiAqIGVhY2ggdGltZSBhbiBleHBvcnQgaXMgYXR0ZW1wdGVkLlxyXG4gKi9cclxuXHJcbmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52JztcclxuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XHJcblxyXG5pbXBvcnQgZGVmYXVsdENvbmZpZyBmcm9tICcuL3NjaGVtYXMvY29uZmlnLmpzJztcclxuXHJcbi8vIExvYWQgdGhlIC5lbnYgaW50byBlbnZpcm9ubWVudCB2YXJpYWJsZXNcclxuZG90ZW52LmNvbmZpZygpO1xyXG5cclxuLy8gR2V0IHNjcmlwdHMgbmFtZXMgb2YgZWFjaCBjYXRlZ29yeSBmcm9tIHRoZSBkZWZhdWx0IGNvbmZpZ1xyXG5jb25zdCB7IGNvcmVTY3JpcHRzLCBtb2R1bGVTY3JpcHRzLCBpbmRpY2F0b3JTY3JpcHRzIH0gPVxyXG4gIGRlZmF1bHRDb25maWcuaGlnaGNoYXJ0cztcclxuXHJcbi8vIFNldHMgdGhlIGN1c3RvbSBlcnJvciBtYXAgZ2xvYmFsbHlcclxuei5zZXRFcnJvck1hcChfY3VzdG9tRXJyb3JNYXApO1xyXG5cclxuLyoqXHJcbiAqIE9iamVjdCBjb250YWluaW5nIGN1c3RvbSBnZW5lcmFsIHZhbGlkYXRvcnMgYW5kIHBhcnNlcnMgdG8gYXZvaWQgcmVwZXRpdGlvblxyXG4gKiBpbiBzY2hlbWEgb2JqZWN0cy4gQWxsIHZhbGlkYXRvcnMgYXBwbHkgdG8gdmFsdWVzIGZyb20gdmFyaW91cyBzb3VyY2VzLFxyXG4gKiBpbmNsdWRpbmcgdGhlIGRlZmF1bHQgY29uZmlnIGZpbGUsIGEgY3VzdG9tIEpTT04gZmlsZSBsb2FkZWQgd2l0aCB0aGUgb3B0aW9uXHJcbiAqIGNhbGxlZCBgbG9hZENvbmZpZ2AsIHRoZSAuZW52IGZpbGUsIENMSSBhcmd1bWVudHMsIGFuZCB0aGUgcmVxdWVzdCBwYXlsb2FkLlxyXG4gKiBUaGUgYHN0cmljdENoZWNrYCBmbGFnIGVuYWJsZXMgc3RyaWN0ZXIgdmFsaWRhdGlvbiBhbmQgcGFyc2luZyBydWxlcy4gVGhpc1xyXG4gKiBmbGFnIGlzIHNldCB0byBmYWxzZSBmb3IgdmFsdWVzIHRoYXQgY29tZSBmcm9tIHRoZSAuZW52IGZpbGUgb3IgQ0xJIGFyZ3VtZW50c1xyXG4gKiBiZWNhdXNlIHRoZXkgYXJlIHByb3ZpZGVkIGFzIHN0cmluZ3MgYW5kIG5lZWQgdG8gYmUgcGFyc2VkIGFjY29yZGluZ2x5IGZpcnN0LlxyXG4gKi9cclxuY29uc3QgdiA9IHtcclxuICAvKipcclxuICAgKiBUaGUgYGJvb2xlYW5gIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGF0OlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgdHJ1ZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCB2YWx1ZXMgYXJlIHRydWVcclxuICAgKiBhbmQgZmFsc2UgYW5kIHRoZSBzY2hlbWEgd2lsbCB2YWxpZGF0ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGJvb2xlYW5cclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyBmYWxzZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCB2YWx1ZXMgYXJlIHRydWUsXHJcbiAgICogZmFsc2UsIG51bGwsICd0cnVlJywgJzEnLCAnZmFsc2UnLCAnMCcsICd1bmRlZmluZWQnLCAnbnVsbCcsIGFuZCAnJy5cclxuICAgKiBUaGUgc3RyaW5ncyAndW5kZWZpbmVkJywgJ251bGwnLCBhbmQgJycgd2lsbCBiZSB0cmFuc2Zvcm1lZCB0byBudWxsLFxyXG4gICAqIHRoZSBzdHJpbmcgJ3RydWUnIHdpbGwgYmUgdHJhbnNmb3JtZWQgdG8gdGhlIGJvb2xlYW4gdmFsdWUgdHJ1ZSxcclxuICAgKiBhbmQgJ2ZhbHNlJyB3aWxsIGJlIHRyYW5zZm9ybWVkIHRvIHRoZSBib29sZWFuIHZhbHVlIGZhbHNlLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGJvb2xlYW5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyBib29sZWFuIHZhbHVlcy5cclxuICAgKi9cclxuICBib29sZWFuKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gc3RyaWN0Q2hlY2tcclxuICAgICAgPyB6LmJvb2xlYW4oKVxyXG4gICAgICA6IHpcclxuICAgICAgICAgIC51bmlvbihbXHJcbiAgICAgICAgICAgIHpcclxuICAgICAgICAgICAgICAuZW51bShbJ3RydWUnLCAnMScsICdmYWxzZScsICcwJywgJ3VuZGVmaW5lZCcsICdudWxsJywgJyddKVxyXG4gICAgICAgICAgICAgIC50cmFuc2Zvcm0oKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAgICAgIVsndW5kZWZpbmVkJywgJ251bGwnLCAnJ10uaW5jbHVkZXModmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgID8gdmFsdWUgPT09ICd0cnVlJyB8fCB2YWx1ZSA9PT0gJzEnXHJcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxyXG4gICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgIHouYm9vbGVhbigpXHJcbiAgICAgICAgICBdKVxyXG4gICAgICAgICAgLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBzdHJpbmdgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGF0OlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgdHJ1ZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCB0cmltbWVkIHN0cmluZ3MgZXhjZXB0XHJcbiAgICogdGhlIGZvcmJpZGRlbiB2YWx1ZXM6ICdmYWxzZScsICd1bmRlZmluZWQnLCAnbnVsbCcsIGFuZCAnJy5cclxuICAgKlxyXG4gICAqIC0gV2hlbiBgc3RyaWN0Q2hlY2tgIGlzIGZhbHNlLCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IHRyaW1tZWQgc3RyaW5nc1xyXG4gICAqIGFuZCBudWxsLiBUaGUgZm9yYmlkZGVuIHZhbHVlczogJ2ZhbHNlJywgJ3VuZGVmaW5lZCcsICdudWxsJywgYW5kICcnIHdpbGxcclxuICAgKiBiZSB0cmFuc2Zvcm1lZCB0byBudWxsLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHN0cmluZ1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHN0cmluZyB2YWx1ZXMuXHJcbiAgICovXHJcbiAgc3RyaW5nKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gc3RyaWN0Q2hlY2tcclxuICAgICAgPyB6XHJcbiAgICAgICAgICAuc3RyaW5nKClcclxuICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgICAgICh2YWx1ZSkgPT4gIVsnZmFsc2UnLCAndW5kZWZpbmVkJywgJ251bGwnLCAnJ10uaW5jbHVkZXModmFsdWUpLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6ICdUaGUgc3RyaW5nIGNvbnRhaW5zIGEgZm9yYmlkZGVuIHZhbHVlJ1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKVxyXG4gICAgICA6IHpcclxuICAgICAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgLnRyYW5zZm9ybSgodmFsdWUpID0+XHJcbiAgICAgICAgICAgICFbJ2ZhbHNlJywgJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogbnVsbFxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBlbnVtYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHNjaGVtYSB3aWxsIHZhbGlkYXRlIGFnYWluc3QgdGhlIHByb3ZpZGVkIGB2YWx1ZXNgIGFycmF5LlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhhdDpcclxuICAgKlxyXG4gICAqIC0gV2hlbiBgc3RyaWN0Q2hlY2tgIGlzIHRydWUsIHRoZSBzY2hlbWEgd2lsbCB2YWxpZGF0ZSBhZ2FpbnN0IHRoZSBgdmFsdWVzYFxyXG4gICAqIGFycmF5IHdpdGggdGhlIGRlZmF1bHQgZW51bSB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyBmYWxzZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCBhbHNvIG51bGwsXHJcbiAgICogJ3VuZGVmaW5lZCcsICdudWxsJywgYW5kICcnLCB3aGljaCB3aWxsIGJlIHRyYW5zZm9ybWVkIHRvIG51bGwuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gZW51bVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gdmFsdWVzIC0gQW4gYXJyYXkgb2YgdmFsaWQgc3RyaW5nIHZhbHVlc1xyXG4gICAqIGZvciB0aGUgZW51bS5cclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgZW51bSB2YWx1ZXMuXHJcbiAgICovXHJcbiAgZW51bSh2YWx1ZXMsIHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gc3RyaWN0Q2hlY2tcclxuICAgICAgPyB6LmVudW0oWy4uLnZhbHVlc10pXHJcbiAgICAgIDogelxyXG4gICAgICAgICAgLmVudW0oWy4uLnZhbHVlcywgJ3VuZGVmaW5lZCcsICdudWxsJywgJyddKVxyXG4gICAgICAgICAgLnRyYW5zZm9ybSgodmFsdWUpID0+XHJcbiAgICAgICAgICAgICFbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogbnVsbFxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBzdHJpbmdBcnJheWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoYXQ6XHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyB0cnVlLCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IGFuIGFycmF5IG9mIHRyaW1tZWRcclxuICAgKiBzdHJpbmcgdmFsdWVzIGZpbHRlcmVkIGJ5IHRoZSBsb2dpYyBwcm92aWRlZCB0aHJvdWdoIHRoZSBgZmlsdGVyQ2FsbGJhY2tgLlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgZmFsc2UsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgbnVsbCBhbmQgdHJpbW1lZFxyXG4gICAqIHN0cmluZyB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBzcGxpdHRlZCBpbnRvIGFuIGFycmF5IG9mIHN0cmluZ3MgYW5kIGZpbHRlcmVkXHJcbiAgICogZnJvbSB0aGUgJ1snIGFuZCAnXScgY2hhcmFjdGVycyBhbmQgYnkgdGhlIGxvZ2ljIHByb3ZpZGVkIHRocm91Z2hcclxuICAgKiB0aGUgYGZpbHRlckNhbGxiYWNrYC4gSWYgdGhlIGFycmF5IGlzIGVtcHR5LCBpdCB3aWxsIGJlIHRyYW5zZm9ybWVkXHJcbiAgICogdG8gbnVsbC5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBzdHJpbmdBcnJheVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZmlsdGVyQ2FsbGJhY2sgLSBUaGUgZmlsdGVyIGNhbGxiYWNrLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZXBhcmF0b3IgLSBUaGUgc2VwYXJhdG9yIGZvciBzcGxpdGluZyBhIHN0cmluZy5cclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgYXJyYXkgb2Ygc3RyaW5nXHJcbiAgICogdmFsdWVzLlxyXG4gICAqL1xyXG4gIHN0cmluZ0FycmF5KGZpbHRlckNhbGxiYWNrLCBzZXBhcmF0b3IsIHN0cmljdENoZWNrKSB7XHJcbiAgICBjb25zdCBhcnJheVNjaGVtYSA9IHouc3RyaW5nKCkudHJpbSgpLmFycmF5KCk7XHJcbiAgICBjb25zdCBzdHJpbmdTY2hlbWEgPSB6XHJcbiAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAudHJpbSgpXHJcbiAgICAgIC50cmFuc2Zvcm0oKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoJ1snKSkge1xyXG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbHVlLmVuZHNXaXRoKCddJykpIHtcclxuICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgLTEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWUuc3BsaXQoc2VwYXJhdG9yKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgY29uc3QgdHJhbnNmb3JtQ2FsbGJhY2sgPSAodmFsdWUpID0+XHJcbiAgICAgIHZhbHVlLm1hcCgodmFsdWUpID0+IHZhbHVlLnRyaW0oKSkuZmlsdGVyKGZpbHRlckNhbGxiYWNrKTtcclxuXHJcbiAgICByZXR1cm4gc3RyaWN0Q2hlY2tcclxuICAgICAgPyBhcnJheVNjaGVtYS50cmFuc2Zvcm0odHJhbnNmb3JtQ2FsbGJhY2spXHJcbiAgICAgIDogelxyXG4gICAgICAgICAgLnVuaW9uKFtzdHJpbmdTY2hlbWEsIGFycmF5U2NoZW1hXSlcclxuICAgICAgICAgIC50cmFuc2Zvcm0odHJhbnNmb3JtQ2FsbGJhY2spXHJcbiAgICAgICAgICAudHJhbnNmb3JtKCh2YWx1ZSkgPT4gKHZhbHVlLmxlbmd0aCA/IHZhbHVlIDogbnVsbCkpXHJcbiAgICAgICAgICAubnVsbGFibGUoKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHBvc2l0aXZlTnVtYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhhdDpcclxuICAgKlxyXG4gICAqIC0gV2hlbiBgc3RyaWN0Q2hlY2tgIGlzIHRydWUsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgcG9zaXRpdmUgbnVtYmVyIHZhbHVlc1xyXG4gICAqIGFuZCB2YWxpZGF0ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IHBvc2l0aXZlIG51bWJlciB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyBmYWxzZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCBwb3NpdGl2ZSBudW1iZXJcclxuICAgKiB2YWx1ZXMsIG51bGwsIGFuZCB0cmltbWVkIHN0cmluZyB2YWx1ZXMgdGhhdCBjYW4gZWl0aGVyIGJlICd1bmRlZmluZWQnLFxyXG4gICAqICdudWxsJywgJycsIG9yIHJlcHJlc2VudCBhIHBvc2l0aXZlIG51bWJlci4gSXQgd2lsbCB0cmFuc2Zvcm0gdGhlIHN0cmluZ1xyXG4gICAqIHRvIGEgcG9zaXRpdmUgbnVtYmVyLCBvciB0byBudWxsIGlmIGl0IGlzICd1bmRlZmluZWQnLCAnbnVsbCcsIG9yICcnLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHBvc2l0aXZlTnVtXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgcG9zaXRpdmUgbnVtYmVyXHJcbiAgICogdmFsdWVzLlxyXG4gICAqL1xyXG4gIHBvc2l0aXZlTnVtKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gc3RyaWN0Q2hlY2tcclxuICAgICAgPyB6Lm51bWJlcigpLnBvc2l0aXZlKClcclxuICAgICAgOiB6XHJcbiAgICAgICAgICAudW5pb24oW1xyXG4gICAgICAgICAgICB6XHJcbiAgICAgICAgICAgICAgLnN0cmluZygpXHJcbiAgICAgICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgICAgICAgICAodmFsdWUpID0+XHJcbiAgICAgICAgICAgICAgICAgICghaXNOYU4oTnVtYmVyKHZhbHVlKSkgJiYgTnVtYmVyKHZhbHVlKSA+IDApIHx8XHJcbiAgICAgICAgICAgICAgICAgIFsndW5kZWZpbmVkJywgJ251bGwnLCAnJ10uaW5jbHVkZXModmFsdWUpLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6ICdUaGUgdmFsdWUgbXVzdCBiZSBudW1lcmljIGFuZCBwb3NpdGl2ZSdcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAudHJhbnNmb3JtKCh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgICAgICFbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICA/IE51bWJlcih2YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgOiBudWxsXHJcbiAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgei5udW1iZXIoKS5wb3NpdGl2ZSgpXHJcbiAgICAgICAgICBdKVxyXG4gICAgICAgICAgLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBub25OZWdhdGl2ZU51bWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoYXQ6XHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyB0cnVlLCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IG5vbi1uZWdhdGl2ZSBudW1iZXJcclxuICAgKiB2YWx1ZXMgYW5kIHZhbGlkYXRlIGFnYWluc3QgdGhlIGRlZmF1bHQgbm9uLW5lZ2F0aXZlIG51bWJlciB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyBmYWxzZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCBub24tbmVnYXRpdmUgbnVtYmVyXHJcbiAgICogdmFsdWVzLCBudWxsLCBhbmQgdHJpbW1lZCBzdHJpbmcgdmFsdWVzIHRoYXQgY2FuIGVpdGhlciBiZSAndW5kZWZpbmVkJyxcclxuICAgKiAnbnVsbCcsICcnLCBvciByZXByZXNlbnQgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBJdCB3aWxsIHRyYW5zZm9ybVxyXG4gICAqIHRoZSBzdHJpbmcgdG8gYSBub24tbmVnYXRpdmUgbnVtYmVyLCBvciB0byBudWxsIGlmIGl0IGlzICd1bmRlZmluZWQnLFxyXG4gICAqICdudWxsJywgb3IgJycuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gbm9uTmVnYXRpdmVOdW1cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyBub24tbmVnYXRpdmVcclxuICAgKiBudW1iZXIgdmFsdWVzLlxyXG4gICAqL1xyXG4gIG5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gc3RyaWN0Q2hlY2tcclxuICAgICAgPyB6Lm51bWJlcigpLm5vbm5lZ2F0aXZlKClcclxuICAgICAgOiB6XHJcbiAgICAgICAgICAudW5pb24oW1xyXG4gICAgICAgICAgICB6XHJcbiAgICAgICAgICAgICAgLnN0cmluZygpXHJcbiAgICAgICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgICAgICAgICAodmFsdWUpID0+XHJcbiAgICAgICAgICAgICAgICAgICghaXNOYU4oTnVtYmVyKHZhbHVlKSkgJiYgTnVtYmVyKHZhbHVlKSA+PSAwKSB8fFxyXG4gICAgICAgICAgICAgICAgICBbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAnVGhlIHZhbHVlIG11c3QgYmUgbnVtZXJpYyBhbmQgbm9uLW5lZ2F0aXZlJ1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgIC50cmFuc2Zvcm0oKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAgICAgIVsndW5kZWZpbmVkJywgJ251bGwnLCAnJ10uaW5jbHVkZXModmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgID8gTnVtYmVyKHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICA6IG51bGxcclxuICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICB6Lm51bWJlcigpLm5vbm5lZ2F0aXZlKClcclxuICAgICAgICAgIF0pXHJcbiAgICAgICAgICAubnVsbGFibGUoKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHN0YXJ0c1dpdGhgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgc2NoZW1hIHdpbGwgdmFsaWRhdGUgYWdhaW5zdCB0aGUgcHJvdmlkZWQgYHByZWZpeGVzYCBhcnJheSB0byBjaGVja1xyXG4gICAqIHdoZXRoZXIgYSBzdHJpbmcgdmFsdWUgc3RhcnRzIHdpdGggYW55IG9mIHRoZSB2YWx1ZXMgcHJvdmlkZWRcclxuICAgKiBpbiB0aGUgYHByZWZpeGVzYCBhcnJheS5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoYXQ6XHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyB0cnVlLCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IHRyaW1tZWQgc3RyaW5nIHZhbHVlc1xyXG4gICAqIHRoYXQgc3RhcnQgd2l0aCB2YWx1ZXMgZnJvbSB0aGUgcHJlZml4ZXMgYXJyYXkuXHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyBmYWxzZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCB0cmltbWVkIHN0cmluZyB2YWx1ZXNcclxuICAgKiB0aGF0IHN0YXJ0IHdpdGggdmFsdWVzIGZyb20gdGhlIHByZWZpeGVzIGFycmF5LCBudWxsLCAndW5kZWZpbmVkJywgJ251bGwnLFxyXG4gICAqIGFuZCAnJyB3aGVyZSB0aGUgc2NoZW1hIHdpbGwgdHJhbnNmb3JtIHRoZW0gdG8gbnVsbC5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBzdGFydHNXaXRoXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+fSBwcmVmaXhlcyAtIEFuIGFycmF5IG9mIHByZWZpeGVzIHRvIHZhbGlkYXRlXHJcbiAgICogdGhlIHN0cmluZyBhZ2FpbnN0LlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyBzdHJpbmdzIHRoYXRcclxuICAgKiBzdGFydHMgd2l0aCB2YWx1ZXMuXHJcbiAgICovXHJcbiAgc3RhcnRzV2l0aChwcmVmaXhlcywgc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiBzdHJpY3RDaGVja1xyXG4gICAgICA/IHpcclxuICAgICAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgLnJlZmluZShcclxuICAgICAgICAgICAgKHZhbHVlKSA9PiBwcmVmaXhlcy5zb21lKChwcmVmaXgpID0+IHZhbHVlLnN0YXJ0c1dpdGgocHJlZml4KSksXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogYFRoZSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nIHRoYXQgc3RhcnRzIHdpdGggJHtwcmVmaXhlcy5qb2luKCcsICcpfWBcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIClcclxuICAgICAgOiB6XHJcbiAgICAgICAgICAuc3RyaW5nKClcclxuICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgICAgICh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgICBwcmVmaXhlcy5zb21lKChwcmVmaXgpID0+IHZhbHVlLnN0YXJ0c1dpdGgocHJlZml4KSkgfHxcclxuICAgICAgICAgICAgICBbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBgVGhlIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcgdGhhdCBzdGFydHMgd2l0aCAke3ByZWZpeGVzLmpvaW4oJywgJyl9YFxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgLnRyYW5zZm9ybSgodmFsdWUpID0+XHJcbiAgICAgICAgICAgICFbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogbnVsbFxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBjaGFydENvbmZpZ2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGF0IHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgb2JqZWN0IHZhbHVlc1xyXG4gICAqIG9yIHRyaW1tZWQgc3RyaW5nIHZhbHVlcyB0aGF0IGNvbnRhaW4gJzxzdmcnIG9yICc8P3htbCcgZWxlbWVudHMsIHN0YXJ0XHJcbiAgICogd2l0aCB0aGUgJ3snIGFuZCBlbmQgd2l0aCB0aGUgJ30nLCBhbmQgbnVsbC4gVGhlICd1bmRlZmluZWQnLCAnbnVsbCcsXHJcbiAgICogYW5kICcnIHZhbHVlcyB3aWxsIGJlIHRyYW5zZm9ybWVkIHRvIG51bGwuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gY2hhcnRDb25maWdcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyBjaGFydFxyXG4gICAqIGNvbmZpZ3VyYXRpb24gdmFsdWUuXHJcbiAgICovXHJcbiAgY2hhcnRDb25maWcoKSB7XHJcbiAgICByZXR1cm4gelxyXG4gICAgICAudW5pb24oW1xyXG4gICAgICAgIHpcclxuICAgICAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgLnJlZmluZShcclxuICAgICAgICAgICAgKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAgICh2YWx1ZS5zdGFydHNXaXRoKCd7JykgJiYgdmFsdWUuZW5kc1dpdGgoJ30nKSkgfHxcclxuICAgICAgICAgICAgICBbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOlxyXG4gICAgICAgICAgICAgICAgICBcIlRoZSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nIHRoYXQgc3RhcnRzIHdpdGggJ3snIGFuZCBlbmRzIHdpdGggJ30nXCJcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIClcclxuICAgICAgICAgIC50cmFuc2Zvcm0oKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAhWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IG51bGxcclxuICAgICAgICAgICksXHJcbiAgICAgICAgei5vYmplY3Qoe30pLnBhc3N0aHJvdWdoKClcclxuICAgICAgXSlcclxuICAgICAgLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBhZGRpdGlvbmFsT3B0aW9uc2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGF0IHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgb2JqZWN0IHZhbHVlc1xyXG4gICAqIG9yIHRyaW1tZWQgc3RyaW5nIHZhbHVlcyB0aGF0IGVuZCB3aXRoICcuanNvbicgYW5kIGFyZSBhdCBsZWFzdCBvbmVcclxuICAgKiBjaGFyYWN0ZXIgbG9uZyBleGNsdWRpbmcgdGhlIGV4dGVuc2lvbiwgc3RhcnQgd2l0aCB0aGUgJ3snIGFuZCBlbmRcclxuICAgKiB3aXRoIHRoZSAnfScsIGFuZCBudWxsLiBUaGUgJ3VuZGVmaW5lZCcsICdudWxsJywgYW5kICcnIHZhbHVlcyB3aWxsXHJcbiAgICogYmUgdHJhbnNmb3JtZWQgdG8gbnVsbC5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBhZGRpdGlvbmFsT3B0aW9uc1xyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSAgQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyBhZGRpdGlvbmFsIGNoYXJ0XHJcbiAgICogb3B0aW9ucyB2YWx1ZS5cclxuICAgKi9cclxuICBhZGRpdGlvbmFsT3B0aW9ucygpIHtcclxuICAgIHJldHVybiB6XHJcbiAgICAgIC51bmlvbihbXHJcbiAgICAgICAgelxyXG4gICAgICAgICAgLnN0cmluZygpXHJcbiAgICAgICAgICAudHJpbSgpXHJcbiAgICAgICAgICAucmVmaW5lKFxyXG4gICAgICAgICAgICAodmFsdWUpID0+XHJcbiAgICAgICAgICAgICAgKHZhbHVlLmxlbmd0aCA+PSA2ICYmIHZhbHVlLmVuZHNXaXRoKCcuanNvbicpKSB8fFxyXG4gICAgICAgICAgICAgICh2YWx1ZS5zdGFydHNXaXRoKCd7JykgJiYgdmFsdWUuZW5kc1dpdGgoJ30nKSkgfHxcclxuICAgICAgICAgICAgICBbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOlxyXG4gICAgICAgICAgICAgICAgICBcIlRoZSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nIHRoYXQgZW5kcyB3aXRoICcuanNvbicgb3Igc3RhcnRzIHdpdGggJ3snIGFuZCBlbmRzIHdpdGggJ30nXCJcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIClcclxuICAgICAgICAgIC50cmFuc2Zvcm0oKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAhWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IG51bGxcclxuICAgICAgICAgICksXHJcbiAgICAgICAgei5vYmplY3Qoe30pLnBhc3N0aHJvdWdoKClcclxuICAgICAgXSlcclxuICAgICAgLm51bGxhYmxlKCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIE9iamVjdCBjb250YWluaW5nIGN1c3RvbSBjb25maWcgdmFsaWRhdG9ycyBhbmQgcGFyc2VycyB0byBhdm9pZCByZXBldGl0aW9uXHJcbiAqIGluIHNjaGVtYSBvYmplY3RzLiBBbGwgdmFsaWRhdG9ycyBhcHBseSB0byB2YWx1ZXMgZnJvbSB2YXJpb3VzIHNvdXJjZXMsXHJcbiAqIGluY2x1ZGluZyB0aGUgZGVmYXVsdCBjb25maWcgZmlsZSwgYSBjdXN0b20gSlNPTiBmaWxlIGxvYWRlZCB3aXRoIHRoZSBvcHRpb25cclxuICogY2FsbGVkIGBsb2FkQ29uZmlnYCwgdGhlIC5lbnYgZmlsZSwgQ0xJIGFyZ3VtZW50cywgYW5kIHRoZSByZXF1ZXN0IHBheWxvYWQuXHJcbiAqIFRoZSBgc3RyaWN0Q2hlY2tgIGZsYWcgZW5hYmxlcyBzdHJpY3RlciB2YWxpZGF0aW9uIGFuZCBwYXJzaW5nIHJ1bGVzLiBUaGlzXHJcbiAqIGZsYWcgaXMgc2V0IHRvIGZhbHNlIGZvciB2YWx1ZXMgdGhhdCBjb21lIGZyb20gdGhlIC5lbnYgZmlsZSBvciBDTEkgYXJndW1lbnRzXHJcbiAqIGJlY2F1c2UgdGhleSBhcmUgcHJvdmlkZWQgYXMgc3RyaW5ncyBhbmQgbmVlZCB0byBiZSBwYXJzZWQgYWNjb3JkaW5nbHkgZmlyc3QuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdmFsaWRhdG9ycyA9IHtcclxuICAvKipcclxuICAgKiBUaGUgYGFyZ3NgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgc3RyaW5nQXJyYXlgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBhcmdzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBhcmdzYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBhcmdzKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdHJpbmdBcnJheShcclxuICAgICAgKHZhbHVlKSA9PiAhWydmYWxzZScsICd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSksXHJcbiAgICAgICc7JyxcclxuICAgICAgc3RyaWN0Q2hlY2tcclxuICAgICk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGB2ZXJzaW9uYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhhdDpcclxuICAgKlxyXG4gICAqIC0gV2hlbiBgc3RyaWN0Q2hlY2tgIGlzIHRydWUsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgdHJpbW1lZCBzdHJpbmcgdmFsdWVzXHJcbiAgICogdGhhdCBhcmUgYSBSZWdFeHAtYmFzZWQgdGhhdCBhbGxvd3MgdG8gYmUgJ2xhdGVzdCcsIG9yIGluIHRoZSBmb3JtYXQgWFgsXHJcbiAgICogWFguWVksIG9yIFhYLllZLlpaLCB3aGVyZSBYWCwgWVksIGFuZCBaWiBhcmUgbnVtZXJpYyBmb3IgdGhlIEhpZ2hjaGFydHNcclxuICAgKiB2ZXJzaW9uIG9wdGlvbi5cclxuICAgKlxyXG4gICAqIC0gV2hlbiBgc3RyaWN0Q2hlY2tgIGlzIGZhbHNlLCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IGFsc28gbnVsbCxcclxuICAgKiAndW5kZWZpbmVkJywgJ251bGwnLCBvciAnJyBhbmQgaW4gYWxsIGNhc2VzIHRoZSBzY2hlbWEgd2lsbCB0cmFuc2Zvcm0gdGhlbVxyXG4gICAqIHRvIG51bGwuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gdmVyc2lvblxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgdmVyc2lvbmBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgdmVyc2lvbihzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHN0cmljdENoZWNrXHJcbiAgICAgID8gelxyXG4gICAgICAgICAgLnN0cmluZygpXHJcbiAgICAgICAgICAudHJpbSgpXHJcbiAgICAgICAgICAucmVmaW5lKCh2YWx1ZSkgPT4gL14obGF0ZXN0fFxcZHsxLDJ9KFxcLlxcZHsxLDJ9KXswLDJ9KSQvLnRlc3QodmFsdWUpLCB7XHJcbiAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgIGVycm9yTWVzc2FnZTpcclxuICAgICAgICAgICAgICAgIFwiVGhlIHZhbHVlIG11c3QgYmUgJ2xhdGVzdCcsIGEgbWFqb3IgdmVyc2lvbiwgb3IgaW4gdGhlIGZvcm0gWFguWVkuWlpcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICA6IHpcclxuICAgICAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgLnJlZmluZShcclxuICAgICAgICAgICAgKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAgIC9eKGxhdGVzdHxcXGR7MSwyfShcXC5cXGR7MSwyfSl7MCwyfSkkLy50ZXN0KHZhbHVlKSB8fFxyXG4gICAgICAgICAgICAgIFsndW5kZWZpbmVkJywgJ251bGwnLCAnJ10uaW5jbHVkZXModmFsdWUpLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6XHJcbiAgICAgICAgICAgICAgICAgIFwiVGhlIHZhbHVlIG11c3QgYmUgJ2xhdGVzdCcsIGEgbWFqb3IgdmVyc2lvbiwgb3IgaW4gdGhlIGZvcm0gWFguWVkuWlpcIlxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgLnRyYW5zZm9ybSgodmFsdWUpID0+XHJcbiAgICAgICAgICAgICFbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogbnVsbFxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBjZG5VcmxgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgc3RhcnRzV2l0aGAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGNkblVybFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgY2RuVXJsYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBjZG5Vcmwoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LnN0YXJ0c1dpdGgoWydodHRwOi8vJywgJ2h0dHBzOi8vJ10sIHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGZvcmNlRmV0Y2hgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGZvcmNlRmV0Y2hcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGZvcmNlRmV0Y2hgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIGZvcmNlRmV0Y2goc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgY2FjaGVQYXRoYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ2AgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGNhY2hlUGF0aFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgY2FjaGVQYXRoYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBjYWNoZVBhdGgoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LnN0cmluZyhzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBhZG1pblRva2VuYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ2AgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGFkbWluVG9rZW5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGFkbWluVG9rZW5gXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIGFkbWluVG9rZW4oc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LnN0cmluZyhzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBjb3JlU2NyaXB0c2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdHJpbmdBcnJheWAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGNvcmVTY3JpcHRzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBjb3JlU2NyaXB0c2BcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgY29yZVNjcmlwdHMoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LnN0cmluZ0FycmF5KFxyXG4gICAgICAodmFsdWUpID0+IGNvcmVTY3JpcHRzLnZhbHVlLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgJywnLFxyXG4gICAgICBzdHJpY3RDaGVja1xyXG4gICAgKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYG1vZHVsZVNjcmlwdHNgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgc3RyaW5nQXJyYXlgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBtb2R1bGVTY3JpcHRzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYG1vZHVsZVNjcmlwdHNgIG9wdGlvbi5cclxuICAgKi9cclxuICBtb2R1bGVTY3JpcHRzKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdHJpbmdBcnJheShcclxuICAgICAgKHZhbHVlKSA9PiBtb2R1bGVTY3JpcHRzLnZhbHVlLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgJywnLFxyXG4gICAgICBzdHJpY3RDaGVja1xyXG4gICAgKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGluZGljYXRvclNjcmlwdHNgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgc3RyaW5nQXJyYXlgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBpbmRpY2F0b3JTY3JpcHRzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGluZGljYXRvclNjcmlwdHNgIG9wdGlvbi5cclxuICAgKi9cclxuICBpbmRpY2F0b3JTY3JpcHRzKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdHJpbmdBcnJheShcclxuICAgICAgKHZhbHVlKSA9PiBpbmRpY2F0b3JTY3JpcHRzLnZhbHVlLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgJywnLFxyXG4gICAgICBzdHJpY3RDaGVja1xyXG4gICAgKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGN1c3RvbVNjcmlwdHNgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgc3RyaW5nQXJyYXlgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBjdXN0b21TY3JpcHRzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGN1c3RvbVNjcmlwdHNgIG9wdGlvbi5cclxuICAgKi9cclxuICBjdXN0b21TY3JpcHRzKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdHJpbmdBcnJheShcclxuICAgICAgKHZhbHVlKSA9PiB2YWx1ZS5zdGFydHNXaXRoKCdodHRwczovLycpIHx8IHZhbHVlLnN0YXJ0c1dpdGgoJ2h0dHA6Ly8nKSxcclxuICAgICAgJywnLFxyXG4gICAgICBzdHJpY3RDaGVja1xyXG4gICAgKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGluZmlsZWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoYXQ6XHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyB0cnVlLCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IHRyaW1tZWQgc3RyaW5nIHZhbHVlc1xyXG4gICAqIHRoYXQgZW5kIHdpdGggJy5qc29uJyBvciAnLnN2ZycsIGFyZSBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyIGxvbmcgZXhjbHVkaW5nXHJcbiAgICogdGhlIGV4dGVuc2lvbiwgb3IgbnVsbC5cclxuICAgKlxyXG4gICAqIC0gV2hlbiBgc3RyaWN0Q2hlY2tgIGlzIGZhbHNlLCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IHRyaW1tZWQgc3RyaW5nIHZhbHVlc1xyXG4gICAqIHRoYXQgZW5kIHdpdGggJy5qc29uJyBvciAnLnN2ZycsIGFyZSBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyIGxvbmcgZXhjbHVkaW5nXHJcbiAgICogdGhlIGV4dGVuc2lvbiBhbmQgd2lsbCBiZSBudWxsIGlmIHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxsLCAndW5kZWZpbmVkJyxcclxuICAgKiAnbnVsbCcsIG9yICcnLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGluZmlsZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgaW5maWxlYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBpbmZpbGUoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiBzdHJpY3RDaGVja1xyXG4gICAgICA/IHpcclxuICAgICAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgLnJlZmluZShcclxuICAgICAgICAgICAgKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAgICh2YWx1ZS5sZW5ndGggPj0gNiAmJiB2YWx1ZS5lbmRzV2l0aCgnLmpzb24nKSkgfHxcclxuICAgICAgICAgICAgICAodmFsdWUubGVuZ3RoID49IDUgJiYgdmFsdWUuZW5kc1dpdGgoJy5zdmcnKSksXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTpcclxuICAgICAgICAgICAgICAgICAgJ1RoZSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nIHRoYXQgZW5kcyB3aXRoIC5qc29uIG9yIC5zdmcnXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICAubnVsbGFibGUoKVxyXG4gICAgICA6IHpcclxuICAgICAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgLnJlZmluZShcclxuICAgICAgICAgICAgKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAgICh2YWx1ZS5sZW5ndGggPj0gNiAmJiB2YWx1ZS5lbmRzV2l0aCgnLmpzb24nKSkgfHxcclxuICAgICAgICAgICAgICAodmFsdWUubGVuZ3RoID49IDUgJiYgdmFsdWUuZW5kc1dpdGgoJy5zdmcnKSkgfHxcclxuICAgICAgICAgICAgICBbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOlxyXG4gICAgICAgICAgICAgICAgICAnVGhlIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcgdGhhdCBlbmRzIHdpdGggLmpzb24gb3IgLnN2ZydcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIClcclxuICAgICAgICAgIC50cmFuc2Zvcm0oKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAhWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IG51bGxcclxuICAgICAgICAgIClcclxuICAgICAgICAgIC5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgaW5zdHJgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYG9wdGlvbnNgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBpbnN0clxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgaW5zdHJgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIGluc3RyKCkge1xyXG4gICAgcmV0dXJuIHYuY2hhcnRDb25maWcoKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYG9wdGlvbnNgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYG9wdGlvbnNgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBvcHRpb25zXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBvcHRpb25zYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBvcHRpb25zKCkge1xyXG4gICAgcmV0dXJuIHYuY2hhcnRDb25maWcoKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHN2Z2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGF0IHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgb2JqZWN0IHZhbHVlc1xyXG4gICAqIG9yIHRyaW1tZWQgc3RyaW5nIHZhbHVlcyB0aGF0IGNvbnRhaW4gJzxzdmcnIG9yICc8P3htbCcgZWxlbWVudHMgYW5kIG51bGwuXHJcbiAgICogVGhlICd1bmRlZmluZWQnLCAnbnVsbCcsIGFuZCAnJyB2YWx1ZXMgd2lsbCBiZSB0cmFuc2Zvcm1lZCB0byBudWxsLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHN2Z1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgc3ZnYCBvcHRpb24uXHJcbiAgICovXHJcbiAgc3ZnKCkge1xyXG4gICAgcmV0dXJuIHpcclxuICAgICAgLnN0cmluZygpXHJcbiAgICAgIC50cmltKClcclxuICAgICAgLnJlZmluZShcclxuICAgICAgICAodmFsdWUpID0+XHJcbiAgICAgICAgICB2YWx1ZS5pbmRleE9mKCc8c3ZnJykgPj0gMCB8fFxyXG4gICAgICAgICAgdmFsdWUuaW5kZXhPZignPD94bWwnKSA+PSAwIHx8XHJcbiAgICAgICAgICBbJ2ZhbHNlJywgJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOlxyXG4gICAgICAgICAgICAgIFwiVGhlIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcgdGhhdCBjb250YWlucyAnPHN2Zycgb3IgJzw/eG1sJ1wiXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApXHJcbiAgICAgIC50cmFuc2Zvcm0oKHZhbHVlKSA9PlxyXG4gICAgICAgICFbJ2ZhbHNlJywgJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogbnVsbFxyXG4gICAgICApXHJcbiAgICAgIC5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgb3V0ZmlsZWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoYXQ6XHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyB0cnVlLCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IHRyaW1tZWQgc3RyaW5nIHZhbHVlc1xyXG4gICAqIHRoYXQgZW5kIHdpdGggJy5qcGVnJywgJy5qcGcnLCAnLnBuZycsICcucGRmJywgb3IgJy5zdmcnLCBhcmUgYXQgbGVhc3Qgb25lXHJcbiAgICogY2hhcmFjdGVyIGxvbmcgZXhjbHVkaW5nIHRoZSBleHRlbnNpb24sIG9yIG51bGwuXHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyBmYWxzZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCB0cmltbWVkIHN0cmluZyB2YWx1ZXNcclxuICAgKiB0aGF0IGVuZCB3aXRoICcuanBlZycsICcuanBnJywgJy5wbmcnLCAnLnBkZicsIG9yICcuc3ZnJywgYXJlIGF0IGxlYXN0IG9uZVxyXG4gICAqIGNoYXJhY3RlciBsb25nIGV4Y2x1ZGluZyB0aGUgZXh0ZW5zaW9uIGFuZCB3aWxsIGJlIG51bGwgaWYgdGhlIHByb3ZpZGVkXHJcbiAgICogdmFsdWUgaXMgbnVsbCwgJ3VuZGVmaW5lZCcsICdudWxsJywgb3IgJycuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gb3V0ZmlsZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgb3V0ZmlsZWBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgb3V0ZmlsZShzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHN0cmljdENoZWNrXHJcbiAgICAgID8gelxyXG4gICAgICAgICAgLnN0cmluZygpXHJcbiAgICAgICAgICAudHJpbSgpXHJcbiAgICAgICAgICAucmVmaW5lKFxyXG4gICAgICAgICAgICAodmFsdWUpID0+XHJcbiAgICAgICAgICAgICAgKHZhbHVlLmxlbmd0aCA+PSA2ICYmIHZhbHVlLmVuZHNXaXRoKCcuanBlZycpKSB8fFxyXG4gICAgICAgICAgICAgICh2YWx1ZS5sZW5ndGggPj0gNSAmJlxyXG4gICAgICAgICAgICAgICAgKHZhbHVlLmVuZHNXaXRoKCcuanBnJykgfHxcclxuICAgICAgICAgICAgICAgICAgdmFsdWUuZW5kc1dpdGgoJy5wbmcnKSB8fFxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZS5lbmRzV2l0aCgnLnBkZicpIHx8XHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlLmVuZHNXaXRoKCcuc3ZnJykpKSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOlxyXG4gICAgICAgICAgICAgICAgICAnVGhlIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcgdGhhdCBlbmRzIHdpdGggLmpwZWcsIC5qcGcsIC5wbmcsIC5wZGYsIG9yIC5zdmcnXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICAubnVsbGFibGUoKVxyXG4gICAgICA6IHpcclxuICAgICAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgLnJlZmluZShcclxuICAgICAgICAgICAgKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAgICh2YWx1ZS5sZW5ndGggPj0gNiAmJiB2YWx1ZS5lbmRzV2l0aCgnLmpwZWcnKSkgfHxcclxuICAgICAgICAgICAgICAodmFsdWUubGVuZ3RoID49IDUgJiZcclxuICAgICAgICAgICAgICAgICh2YWx1ZS5lbmRzV2l0aCgnLmpwZycpIHx8XHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlLmVuZHNXaXRoKCcucG5nJykgfHxcclxuICAgICAgICAgICAgICAgICAgdmFsdWUuZW5kc1dpdGgoJy5wZGYnKSB8fFxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZS5lbmRzV2l0aCgnLnN2ZycpKSkgfHxcclxuICAgICAgICAgICAgICBbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOlxyXG4gICAgICAgICAgICAgICAgICAnVGhlIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcgdGhhdCBlbmRzIHdpdGggLmpwZWcsIC5qcGcsIC5wbmcsIC5wZGYsIG9yIC5zdmcnXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICAudHJhbnNmb3JtKCh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgIVsndW5kZWZpbmVkJywgJ251bGwnLCAnJ10uaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBudWxsXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICAubnVsbGFibGUoKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHR5cGVgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgZW51bWAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHR5cGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYHR5cGVgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIHR5cGUoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmVudW0oWydqcGVnJywgJ2pwZycsICdwbmcnLCAncGRmJywgJ3N2ZyddLCBzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBjb25zdHJgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgZW51bWAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGNvbnN0clxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgY29uc3RyYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBjb25zdHIoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmVudW0oXHJcbiAgICAgIFsnY2hhcnQnLCAnc3RvY2tDaGFydCcsICdtYXBDaGFydCcsICdnYW50dENoYXJ0J10sXHJcbiAgICAgIHN0cmljdENoZWNrXHJcbiAgICApO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgYjY0YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBiNjRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGI2NGAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIGI2NChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBub0Rvd25sb2FkYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBub0Rvd25sb2FkXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBub0Rvd25sb2FkYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBub0Rvd25sb2FkKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ib29sZWFuKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGRlZmF1bHRIZWlnaHRgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgcG9zaXRpdmVOdW1gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBkZWZhdWx0SGVpZ2h0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGRlZmF1bHRIZWlnaHRgIG9wdGlvbi5cclxuICAgKi9cclxuICBkZWZhdWx0SGVpZ2h0KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5wb3NpdGl2ZU51bShzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBkZWZhdWx0V2lkdGhgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgcG9zaXRpdmVOdW1gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBkZWZhdWx0V2lkdGhcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgZGVmYXVsdFdpZHRoYCBvcHRpb24uXHJcbiAgICovXHJcbiAgZGVmYXVsdFdpZHRoKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5wb3NpdGl2ZU51bShzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBkZWZhdWx0U2NhbGVgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGF0OlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgdHJ1ZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCBudW1iZXIgdmFsdWVzIHRoYXRcclxuICAgKiBhcmUgYmV0d2VlbiAwLjEgYW5kIDUgKGluY2x1c2l2ZSkuXHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyBmYWxzZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCBudW1iZXIgdmFsdWVzXHJcbiAgICogYW5kIHN0cmluZ2lmaWVkIG51bWJlciB2YWx1ZXMgdGhhdCBhcmUgYmV0d2VlbiAwLjEgYW5kIDUgKGluY2x1c2l2ZSksIG51bGwsXHJcbiAgICogJ3VuZGVmaW5lZCcsICdudWxsJywgYW5kICcnIHdoaWNoIHdpbGwgYmUgdHJhbnNmb3JtZWQgdG8gbnVsbC5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBkZWZhdWx0U2NhbGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgZGVmYXVsdFNjYWxlYCBvcHRpb24uXHJcbiAgICovXHJcbiAgZGVmYXVsdFNjYWxlKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gc3RyaWN0Q2hlY2tcclxuICAgICAgPyB6Lm51bWJlcigpLmd0ZSgwLjEpLmx0ZSg1KVxyXG4gICAgICA6IHpcclxuICAgICAgICAgIC51bmlvbihbXHJcbiAgICAgICAgICAgIHpcclxuICAgICAgICAgICAgICAuc3RyaW5nKClcclxuICAgICAgICAgICAgICAudHJpbSgpXHJcbiAgICAgICAgICAgICAgLnJlZmluZShcclxuICAgICAgICAgICAgICAgICh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgICAgICAgKCFpc05hTihOdW1iZXIodmFsdWUpKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICE9PSB0cnVlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgIXZhbHVlLnN0YXJ0c1dpdGgoJ1snKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIE51bWJlcih2YWx1ZSkgPj0gMC4xICYmXHJcbiAgICAgICAgICAgICAgICAgICAgTnVtYmVyKHZhbHVlKSA8PSA1KSB8fFxyXG4gICAgICAgICAgICAgICAgICBbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAnVGhlIHZhbHVlIG11c3QgYmUgd2l0aGluIGEgMC4xIGFuZCA1LjAgcmFuZ2UnXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgLnRyYW5zZm9ybSgodmFsdWUpID0+XHJcbiAgICAgICAgICAgICAgICAhWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgPyBOdW1iZXIodmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxyXG4gICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgIHoubnVtYmVyKCkuZ3RlKDAuMSkubHRlKDUpXHJcbiAgICAgICAgICBdKVxyXG4gICAgICAgICAgLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBoZWlnaHRgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIGEgbnVsbGFibGUgYGRlZmF1bHRIZWlnaHRgXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGhlaWdodFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgaGVpZ2h0YFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBoZWlnaHQoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB0aGlzLmRlZmF1bHRIZWlnaHQoc3RyaWN0Q2hlY2spLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGB3aWR0aGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgYSBudWxsYWJsZSBgZGVmYXVsdFdpZHRoYFxyXG4gICAqIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiB3aWR0aFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgd2lkdGhgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIHdpZHRoKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0V2lkdGgoc3RyaWN0Q2hlY2spLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBzY2FsZWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgYSBudWxsYWJsZSBgZGVmYXVsdFNjYWxlYFxyXG4gICAqIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBzY2FsZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgc2NhbGVgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIHNjYWxlKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0U2NhbGUoc3RyaWN0Q2hlY2spLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBnbG9iYWxPcHRpb25zYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYS5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBhZGRpdGlvbmFsT3B0aW9uc2BcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gZ2xvYmFsT3B0aW9uc1xyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBnbG9iYWxPcHRpb25zYCBvcHRpb24uXHJcbiAgICovXHJcbiAgZ2xvYmFsT3B0aW9ucygpIHtcclxuICAgIHJldHVybiB2LmFkZGl0aW9uYWxPcHRpb25zKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGB0aGVtZU9wdGlvbnNgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGFkZGl0aW9uYWxPcHRpb25zYFxyXG4gICAqIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiB0aGVtZU9wdGlvbnNcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgdGhlbWVPcHRpb25zYCBvcHRpb24uXHJcbiAgICovXHJcbiAgdGhlbWVPcHRpb25zKCkge1xyXG4gICAgcmV0dXJuIHYuYWRkaXRpb25hbE9wdGlvbnMoKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGJhdGNoYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ2AgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGJhdGNoXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBiYXRjaGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgYmF0Y2goc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LnN0cmluZyhzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGByYXN0ZXJpemF0aW9uVGltZW91dGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aFxyXG4gICAqIGFuIG9wdGlvbmFsIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBub25OZWdhdGl2ZU51bWBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gcmFzdGVyaXphdGlvblRpbWVvdXRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgcmFzdGVyaXphdGlvblRpbWVvdXRgIG9wdGlvbi5cclxuICAgKi9cclxuICByYXN0ZXJpemF0aW9uVGltZW91dChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYubm9uTmVnYXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgYWxsb3dDb2RlRXhlY3V0aW9uYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoXHJcbiAgICogYW4gb3B0aW9uYWwgc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBhbGxvd0NvZGVFeGVjdXRpb25cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgYWxsb3dDb2RlRXhlY3V0aW9uYCBvcHRpb24uXHJcbiAgICovXHJcbiAgYWxsb3dDb2RlRXhlY3V0aW9uKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ib29sZWFuKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGFsbG93RmlsZVJlc291cmNlc2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aFxyXG4gICAqIGFuIG9wdGlvbmFsIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gYWxsb3dGaWxlUmVzb3VyY2VzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGFsbG93RmlsZVJlc291cmNlc2Agb3B0aW9uLlxyXG4gICAqL1xyXG4gIGFsbG93RmlsZVJlc291cmNlcyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBjdXN0b21Db2RlYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ2AgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGN1c3RvbUNvZGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGN1c3RvbUNvZGVgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIGN1c3RvbUNvZGUoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LnN0cmluZyhzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBjYWxsYmFja2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdHJpbmdgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBjYWxsYmFja1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgY2FsbGJhY2tgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIGNhbGxiYWNrKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdHJpbmcoc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgcmVzb3VyY2VzYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhhdDpcclxuICAgKlxyXG4gICAqIC0gV2hlbiBgc3RyaWN0Q2hlY2tgIGlzIHRydWUsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgYSBwYXJ0aWFsIG9iamVjdFxyXG4gICAqIHdpdGggYWxsb3dlZCBwcm9wZXJ0aWVzIGBqc2AsIGBjc3NgLCBhbmQgYGZpbGVzYCB3aGVyZSBlYWNoIG9mIHRoZSBhbGxvd2VkXHJcbiAgICogcHJvcGVydGllcyBjYW4gYmUgbnVsbCwgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgb2JqZWN0LCBzdHJpbmcgdGhhdCBlbmRzXHJcbiAgICogd2l0aCB0aGUgJy5qc29uJywgYW5kIG51bGwuXHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyBmYWxzZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCBhIHN0cmluZ2lmaWVkIHZlcnNpb25cclxuICAgKiBvZiBhIHBhcnRpYWwgb2JqZWN0IHdpdGggYWxsb3dlZCBwcm9wZXJ0aWVzIGBqc2AsIGBjc3NgLCBhbmQgYGZpbGVzYCB3aGVyZVxyXG4gICAqIGVhY2ggb2YgdGhlIGFsbG93ZWQgcHJvcGVydGllcyBjYW4gYmUgbnVsbCwgc3RyaW5nIHRoYXQgZW5kcyB3aXRoIHRoZVxyXG4gICAqICcuanNvbicsIGFuZCB3aWxsIGJlIG51bGwgaWYgdGhlIHByb3ZpZGVkIHZhbHVlIGlzICd1bmRlZmluZWQnLCAnbnVsbCdcclxuICAgKiBvciAnJy5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiByZXNvdXJjZXNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYHJlc291cmNlc2BcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgcmVzb3VyY2VzKHN0cmljdENoZWNrKSB7XHJcbiAgICBjb25zdCBvYmplY3RTY2hlbWEgPSB6XHJcbiAgICAgIC5vYmplY3Qoe1xyXG4gICAgICAgIGpzOiB2LnN0cmluZyhmYWxzZSksXHJcbiAgICAgICAgY3NzOiB2LnN0cmluZyhmYWxzZSksXHJcbiAgICAgICAgZmlsZXM6IHZcclxuICAgICAgICAgIC5zdHJpbmdBcnJheShcclxuICAgICAgICAgICAgKHZhbHVlKSA9PiAhWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSksXHJcbiAgICAgICAgICAgICcsJyxcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgLm51bGxhYmxlKClcclxuICAgICAgfSlcclxuICAgICAgLnBhcnRpYWwoKTtcclxuXHJcbiAgICBjb25zdCBzdHJpbmdTY2hlbWExID0gelxyXG4gICAgICAuc3RyaW5nKClcclxuICAgICAgLnRyaW0oKVxyXG4gICAgICAucmVmaW5lKFxyXG4gICAgICAgICh2YWx1ZSkgPT5cclxuICAgICAgICAgICh2YWx1ZS5zdGFydHNXaXRoKCd7JykgJiYgdmFsdWUuZW5kc1dpdGgoJ30nKSkgfHxcclxuICAgICAgICAgICh2YWx1ZS5sZW5ndGggPj0gNiAmJiB2YWx1ZS5lbmRzV2l0aCgnLmpzb24nKSksXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTpcclxuICAgICAgICAgICAgICBcIlRoZSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nIHRoYXQgc3RhcnRzIHdpdGggJ3snIGFuZCBlbmRzIHdpdGggJ31cIlxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuXHJcbiAgICBjb25zdCBzdHJpbmdTY2hlbWEyID0gelxyXG4gICAgICAuc3RyaW5nKClcclxuICAgICAgLnRyaW0oKVxyXG4gICAgICAucmVmaW5lKFxyXG4gICAgICAgICh2YWx1ZSkgPT5cclxuICAgICAgICAgICh2YWx1ZS5zdGFydHNXaXRoKCd7JykgJiYgdmFsdWUuZW5kc1dpdGgoJ30nKSkgfHxcclxuICAgICAgICAgICh2YWx1ZS5sZW5ndGggPj0gNiAmJiB2YWx1ZS5lbmRzV2l0aCgnLmpzb24nKSkgfHxcclxuICAgICAgICAgIFsndW5kZWZpbmVkJywgJ251bGwnLCAnJ10uaW5jbHVkZXModmFsdWUpLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6ICdUaGUgdmFsdWUgbXVzdCBiZSBhIHN0cmluZyB0aGF0IGVuZHMgd2l0aCAuanNvbidcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIClcclxuICAgICAgLnRyYW5zZm9ybSgodmFsdWUpID0+XHJcbiAgICAgICAgIVsndW5kZWZpbmVkJywgJ251bGwnLCAnJ10uaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBudWxsXHJcbiAgICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHN0cmljdENoZWNrXHJcbiAgICAgID8gei51bmlvbihbb2JqZWN0U2NoZW1hLCBzdHJpbmdTY2hlbWExXSkubnVsbGFibGUoKVxyXG4gICAgICA6IHoudW5pb24oW29iamVjdFNjaGVtYSwgc3RyaW5nU2NoZW1hMl0pLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBsb2FkQ29uZmlnYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ2AgdmFsaWRhdG9yLlxyXG4gICAqIEFkZGl0aW9uYWxseSwgaXQgbXVzdCBiZSBhIHN0cmluZyB0aGF0IGVuZHMgd2l0aCAnLmpzb24nLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGxvYWRDb25maWdcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGxvYWRDb25maWdgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIGxvYWRDb25maWcoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2XHJcbiAgICAgIC5zdHJpbmcoc3RyaWN0Q2hlY2spXHJcbiAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgKHZhbHVlKSA9PlxyXG4gICAgICAgICAgdmFsdWUgPT09IG51bGwgfHwgKHZhbHVlLmxlbmd0aCA+PSA2ICYmIHZhbHVlLmVuZHNXaXRoKCcuanNvbicpKSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAnVGhlIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcgdGhhdCBlbmRzIHdpdGggLmpzb24nXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgY3JlYXRlQ29uZmlnYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGxvYWRDb25maWdgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBjcmVhdGVDb25maWdcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgY3JlYXRlQ29uZmlnYCBvcHRpb24uXHJcbiAgICovXHJcbiAgY3JlYXRlQ29uZmlnKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sb2FkQ29uZmlnKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGVuYWJsZVNlcnZlcmAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gZW5hYmxlU2VydmVyXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGVuYWJsZVNlcnZlcmAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIGVuYWJsZVNlcnZlcihzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBob3N0YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ2AgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGhvc3RcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGhvc3RgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIGhvc3Qoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LnN0cmluZyhzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBwb3J0YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYG5vbk5lZ2F0aXZlTnVtYFxyXG4gICAqIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBwb3J0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBwb3J0YFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBwb3J0KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ub25OZWdhdGl2ZU51bShzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGB1cGxvYWRMaW1pdGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBwb3NpdGl2ZU51bWAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHVwbG9hZExpbWl0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGB1cGxvYWRMaW1pdGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgdXBsb2FkTGltaXQoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LnBvc2l0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHNlcnZlckJlbmNobWFya2luZ2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aFxyXG4gICAqIGFuIG9wdGlvbmFsIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gc2VydmVyQmVuY2htYXJraW5nXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYHNlcnZlckJlbmNobWFya2luZ2Agb3B0aW9uLlxyXG4gICAqL1xyXG4gIHNlcnZlckJlbmNobWFya2luZyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBwcm94eUhvc3RgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgc3RyaW5nYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gcHJveHlIb3N0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBwcm94eUhvc3RgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIHByb3h5SG9zdChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuc3RyaW5nKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHByb3h5UG9ydGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgYSBudWxsYWJsZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHByb3h5UG9ydFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgcHJveHlQb3J0YFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBwcm94eVBvcnQoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKS5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgcHJveHlUaW1lb3V0YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYG5vbk5lZ2F0aXZlTnVtYFxyXG4gICAqIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBwcm94eVRpbWVvdXRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgcHJveHlUaW1lb3V0YCBvcHRpb24uXHJcbiAgICovXHJcbiAgcHJveHlUaW1lb3V0KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ub25OZWdhdGl2ZU51bShzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBlbmFibGVSYXRlTGltaXRpbmdgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGhcclxuICAgKiBhbiBvcHRpb25hbCBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGVuYWJsZVJhdGVMaW1pdGluZ1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBlbmFibGVSYXRlTGltaXRpbmdgIG9wdGlvbi5cclxuICAgKi9cclxuICBlbmFibGVSYXRlTGltaXRpbmcoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgbWF4UmVxdWVzdHNgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIG1heFJlcXVlc3RzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBtYXhSZXF1ZXN0c2BcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgbWF4UmVxdWVzdHMoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHdpbmRvd2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBub25OZWdhdGl2ZU51bWBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gd2luZG93XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGB3aW5kb3dgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIHdpbmRvdyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYubm9uTmVnYXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgZGVsYXlgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGRlbGF5XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBkZWxheWBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgZGVsYXkoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHRydXN0UHJveHlgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHRydXN0UHJveHlcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYHRydXN0UHJveHlgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIHRydXN0UHJveHkoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgc2tpcEtleWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdHJpbmdgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBza2lwS2V5XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBza2lwS2V5YFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBza2lwS2V5KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdHJpbmcoc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgc2tpcFRva2VuYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ2AgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHNraXBUb2tlblxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgc2tpcFRva2VuYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBza2lwVG9rZW4oc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LnN0cmluZyhzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBlbmFibGVTc2xgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGVuYWJsZVNzbFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgZW5hYmxlU3NsYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBlbmFibGVTc2woc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgc3NsRm9yY2VgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHNzbEZvcmNlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBzc2xGb3JjZWBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgc3NsRm9yY2Uoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgc3NsUG9ydGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBub25OZWdhdGl2ZU51bWBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gc3NsUG9ydFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgc3NsUG9ydGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgc3NsUG9ydChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYubm9uTmVnYXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgc3NsQ2VydFBhdGhgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgc3RyaW5nYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gc3NsQ2VydFBhdGhcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYHNzbENlcnRQYXRoYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBzc2xDZXJ0UGF0aChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuc3RyaW5nKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYG1pbldvcmtlcnNgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgcG9zaXRpdmVOdW1gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBtaW5Xb3JrZXJzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBtaW5Xb3JrZXJzYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBtaW5Xb3JrZXJzKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5wb3NpdGl2ZU51bShzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBtYXhXb3JrZXJzYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHBvc2l0aXZlTnVtYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gbWF4V29ya2Vyc1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgbWF4V29ya2Vyc2BcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgbWF4V29ya2VycyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYucG9zaXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgd29ya0xpbWl0YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHBvc2l0aXZlTnVtYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gd29ya0xpbWl0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGB3b3JrTGltaXRgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIHdvcmtMaW1pdChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYucG9zaXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgYWNxdWlyZVRpbWVvdXRgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGFjcXVpcmVUaW1lb3V0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGFjcXVpcmVUaW1lb3V0YCBvcHRpb24uXHJcbiAgICovXHJcbiAgYWNxdWlyZVRpbWVvdXQoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGNyZWF0ZVRpbWVvdXRgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGNyZWF0ZVRpbWVvdXRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgY3JlYXRlVGltZW91dGAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIGNyZWF0ZVRpbWVvdXQoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGRlc3Ryb3lUaW1lb3V0YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYG5vbk5lZ2F0aXZlTnVtYFxyXG4gICAqIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBkZXN0cm95VGltZW91dFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBkZXN0cm95VGltZW91dGAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIGRlc3Ryb3lUaW1lb3V0KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ub25OZWdhdGl2ZU51bShzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBpZGxlVGltZW91dGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBub25OZWdhdGl2ZU51bWBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gaWRsZVRpbWVvdXRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgaWRsZVRpbWVvdXRgIG9wdGlvbi5cclxuICAgKi9cclxuICBpZGxlVGltZW91dChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYubm9uTmVnYXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgY3JlYXRlUmV0cnlJbnRlcnZhbGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aFxyXG4gICAqIGFuIG9wdGlvbmFsIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBub25OZWdhdGl2ZU51bWBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gY3JlYXRlUmV0cnlJbnRlcnZhbFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBjcmVhdGVSZXRyeUludGVydmFsYCBvcHRpb24uXHJcbiAgICovXHJcbiAgY3JlYXRlUmV0cnlJbnRlcnZhbChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYubm9uTmVnYXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgcmVhcGVySW50ZXJ2YWxgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHJlYXBlckludGVydmFsXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYHJlYXBlckludGVydmFsYCBvcHRpb24uXHJcbiAgICovXHJcbiAgcmVhcGVySW50ZXJ2YWwoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHBvb2xCZW5jaG1hcmtpbmdgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHBvb2xCZW5jaG1hcmtpbmdcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgcG9vbEJlbmNobWFya2luZ2Agb3B0aW9uLlxyXG4gICAqL1xyXG4gIHBvb2xCZW5jaG1hcmtpbmcoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgcmVzb3VyY2VzSW50ZXJ2YWxgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGhcclxuICAgKiBhbiBvcHRpb25hbCBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHJlc291cmNlc0ludGVydmFsXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYHJlc291cmNlc0ludGVydmFsYCBvcHRpb24uXHJcbiAgICovXHJcbiAgcmVzb3VyY2VzSW50ZXJ2YWwoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGxvZ0xldmVsYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhhdDpcclxuICAgKlxyXG4gICAqIC0gV2hlbiBgc3RyaWN0Q2hlY2tgIGlzIHRydWUsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgaW50ZWdlciBudW1iZXIgdmFsdWVzXHJcbiAgICogdGhhdCBhcmUgYmV0d2VlbiAwIGFuZCA1IChpbmNsdXNpdmUpLlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgZmFsc2UsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgaW50ZWdlciBudW1iZXIgdmFsdWVzXHJcbiAgICogYW5kIHN0cmluZ2lmaWVkIGludGVnZXIgbnVtYmVyIHZhbHVlcyB0aGF0IGFyZSBiZXR3ZWVuIDEgYW5kIDUgKGluY2x1c2l2ZSksXHJcbiAgICogbnVsbCwgJ3VuZGVmaW5lZCcsICdudWxsJywgYW5kICcnIHdoaWNoIHdpbGwgYmUgdHJhbnNmb3JtZWQgdG8gbnVsbC5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBsb2dMZXZlbFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgbG9nTGV2ZWxgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIGxvZ0xldmVsKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gc3RyaWN0Q2hlY2tcclxuICAgICAgPyB6Lm51bWJlcigpLmludCgpLmd0ZSgwKS5sdGUoNSlcclxuICAgICAgOiB6XHJcbiAgICAgICAgICAudW5pb24oW1xyXG4gICAgICAgICAgICB6XHJcbiAgICAgICAgICAgICAgLnN0cmluZygpXHJcbiAgICAgICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgICAgICAgICAodmFsdWUpID0+XHJcbiAgICAgICAgICAgICAgICAgICghaXNOYU4oTnVtYmVyKHZhbHVlKSkgJiZcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAhPT0gdHJ1ZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICF2YWx1ZS5zdGFydHNXaXRoKCdbJykgJiZcclxuICAgICAgICAgICAgICAgICAgICBOdW1iZXIuaXNJbnRlZ2VyKE51bWJlcih2YWx1ZSkpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgTnVtYmVyKHZhbHVlKSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgTnVtYmVyKHZhbHVlKSA8PSA1KSB8fFxyXG4gICAgICAgICAgICAgICAgICBbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAnVGhlIHZhbHVlIG11c3QgYmUgd2l0aGluIGEgMCBhbmQgNSByYW5nZSdcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAudHJhbnNmb3JtKCh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgICAgICFbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICA/IE51bWJlcih2YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgOiBudWxsXHJcbiAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgei5udW1iZXIoKS5pbnQoKS5ndGUoMCkubHRlKDUpXHJcbiAgICAgICAgICBdKVxyXG4gICAgICAgICAgLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBsb2dGaWxlYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ2AgdmFsaWRhdG9yLlxyXG4gICAqIEFkZGl0aW9uYWxseSwgaXQgbXVzdCBiZSBhIHN0cmluZyB0aGF0IGVuZHMgd2l0aCAnLmxvZycuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gbG9nRmlsZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgbG9nRmlsZWBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgbG9nRmlsZShzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHZcclxuICAgICAgLnN0cmluZyhzdHJpY3RDaGVjaylcclxuICAgICAgLnJlZmluZShcclxuICAgICAgICAodmFsdWUpID0+XHJcbiAgICAgICAgICB2YWx1ZSA9PT0gbnVsbCB8fCAodmFsdWUubGVuZ3RoID49IDUgJiYgdmFsdWUuZW5kc1dpdGgoJy5sb2cnKSksXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJ1RoZSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nIHRoYXQgZW5kcyB3aXRoIC5sb2cnXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgbG9nRGVzdGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdHJpbmdgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBsb2dEZXN0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBsb2dEZXN0YFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBsb2dEZXN0KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdHJpbmcoc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgbG9nVG9Db25zb2xlYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBsb2dUb0NvbnNvbGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgbG9nVG9Db25zb2xlYCBvcHRpb24uXHJcbiAgICovXHJcbiAgbG9nVG9Db25zb2xlKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ib29sZWFuKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGxvZ1RvRmlsZWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gbG9nVG9GaWxlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBsb2dUb0ZpbGVgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIGxvZ1RvRmlsZShzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBlbmFibGVVaWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gZW5hYmxlVWlcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGVuYWJsZVVpYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBlbmFibGVVaShzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGB1aVJvdXRlYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0YXJ0c1dpdGhgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiB1aVJvdXRlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGB1aVJvdXRlYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICB1aVJvdXRlKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdGFydHNXaXRoKFsnLyddLCBzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBub2RlRW52YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGVudW1gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBub2RlRW52XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBub2RlRW52YFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBub2RlRW52KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5lbnVtKFsnZGV2ZWxvcG1lbnQnLCAncHJvZHVjdGlvbicsICd0ZXN0J10sIHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGxpc3RlblRvUHJvY2Vzc0V4aXRzYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoXHJcbiAgICogYW4gb3B0aW9uYWwgc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBsaXN0ZW5Ub1Byb2Nlc3NFeGl0c1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBsaXN0ZW5Ub1Byb2Nlc3NFeGl0c2Agb3B0aW9uLlxyXG4gICAqL1xyXG4gIGxpc3RlblRvUHJvY2Vzc0V4aXRzKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ib29sZWFuKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYG5vTG9nb2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gbm9Mb2dvXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBub0xvZ29gXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIG5vTG9nbyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBoYXJkUmVzZXRQYWdlYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBoYXJkUmVzZXRQYWdlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGhhcmRSZXNldFBhZ2VgIG9wdGlvbi5cclxuICAgKi9cclxuICBoYXJkUmVzZXRQYWdlKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ib29sZWFuKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGJyb3dzZXJTaGVsbE1vZGVgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGJyb3dzZXJTaGVsbE1vZGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgYnJvd3NlclNoZWxsTW9kZWAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIGJyb3dzZXJTaGVsbE1vZGUoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgdmFsaWRhdGlvbmAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gdmFsaWRhdGlvblxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgdmFsaWRhdGlvbmBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgdmFsaWRhdGlvbihzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBlbmFibGVEZWJ1Z2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gZW5hYmxlRGVidWdcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGVuYWJsZURlYnVnYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBlbmFibGVEZWJ1ZyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBoZWFkbGVzc2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gaGVhZGxlc3NcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGhlYWRsZXNzYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBoZWFkbGVzcyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBkZXZ0b29sc2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gZGV2dG9vbHNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGRldnRvb2xzYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBkZXZ0b29scyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBsaXN0ZW5Ub0NvbnNvbGVgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGxpc3RlblRvQ29uc29sZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBsaXN0ZW5Ub0NvbnNvbGVgIG9wdGlvbi5cclxuICAgKi9cclxuICBsaXN0ZW5Ub0NvbnNvbGUoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgZHVtcGlvYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBkdW1waW9cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGR1bXBpb2BcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgZHVtcGlvKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ib29sZWFuKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHNsb3dNb2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBub25OZWdhdGl2ZU51bWBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gc2xvd01vXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBzbG93TW9gXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIHNsb3dNbyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYubm9uTmVnYXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgZGVidWdnaW5nUG9ydGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBub25OZWdhdGl2ZU51bWBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gZGVidWdnaW5nUG9ydFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBkZWJ1Z2dpbmdQb3J0YCBvcHRpb24uXHJcbiAgICovXHJcbiAgZGVidWdnaW5nUG9ydChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYubm9uTmVnYXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgZW5hYmxlV3NgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGVuYWJsZVdzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBlbmFibGVXc2BcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgZW5hYmxlV3Moc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgd3NSZWNvbm5lY3RgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHdzUmVjb25uZWN0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGB3c1JlY29ubmVjdGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgd3NSZWNvbm5lY3Qoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgd3NSZWplY3RVbmF1dGhvcml6ZWRgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGhcclxuICAgKiBhbiBvcHRpb25hbCBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYHdzUmVqZWN0VW5hdXRob3JpemVkYCBvcHRpb24uXHJcbiAgICovXHJcbiAgd3NSZWplY3RVbmF1dGhvcml6ZWQoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgd3NQaW5nVGltZW91dGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBub25OZWdhdGl2ZU51bWBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gd3NQaW5nVGltZW91dFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGB3c1BpbmdUaW1lb3V0YCBvcHRpb24uXHJcbiAgICovXHJcbiAgd3NQaW5nVGltZW91dChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYubm9uTmVnYXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgd3NSZWNvbm5lY3RJbnRlcnZhbGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aFxyXG4gICAqIGFuIG9wdGlvbmFsIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBub25OZWdhdGl2ZU51bWBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gd3NSZWNvbm5lY3RJbnRlcnZhbFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGB3c1JlY29ubmVjdEludGVydmFsYCBvcHRpb24uXHJcbiAgICovXHJcbiAgd3NSZWNvbm5lY3RJbnRlcnZhbChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYubm9uTmVnYXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgd3NSZWNvbm5lY3RBdHRlbXB0c2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aFxyXG4gICAqIGFuIG9wdGlvbmFsIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBub25OZWdhdGl2ZU51bWBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gd3NSZWNvbm5lY3RBdHRlbXB0c1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGB3c1JlY29ubmVjdEF0dGVtcHRzYCBvcHRpb24uXHJcbiAgICovXHJcbiAgd3NSZWNvbm5lY3RBdHRlbXB0cyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYubm9uTmVnYXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgd3NNZXNzYWdlSW50ZXJ2YWxgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGhcclxuICAgKiBhbiBvcHRpb25hbCBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHdzTWVzc2FnZUludGVydmFsXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYHdzTWVzc2FnZUludGVydmFsYCBvcHRpb24uXHJcbiAgICovXHJcbiAgd3NNZXNzYWdlSW50ZXJ2YWwoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHdzR2F0aGVyQWxsT3B0aW9uc2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aFxyXG4gICAqIGFuIG9wdGlvbmFsIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gd3NHYXRoZXJBbGxPcHRpb25zXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYHdzR2F0aGVyQWxsT3B0aW9uc2Agb3B0aW9uLlxyXG4gICAqL1xyXG4gIHdzR2F0aGVyQWxsT3B0aW9ucyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGB3c1VybGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdGFydHNXaXRoYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gd3NVcmxcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYHdzVXJsYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICB3c1VybChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuc3RhcnRzV2l0aChbJ3dzOi8vJywgJ3dzczovLyddLCBzdHJpY3RDaGVjaykubnVsbGFibGUoKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHdzU2VjcmV0YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ2AgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHdzU2VjcmV0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGB3c1NlY3JldGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgd3NTZWNyZXQoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LnN0cmluZyhzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGByZXF1ZXN0SWRgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgc3RyaW5nYCB2YWxpZGF0b3IuXHJcbiAgICogQWRkaXRpb25hbGx5LCBpdCBtdXN0IGJlIGEgc3RyaW5naWZpZWQgVVVJRCBvciBjYW4gYmUgbnVsbC5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiByZXF1ZXN0SWRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYHJlcXVlc3RJZGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgcmVxdWVzdElkKCkge1xyXG4gICAgcmV0dXJuIHpcclxuICAgICAgLnN0cmluZygpXHJcbiAgICAgIC51dWlkKHsgbWVzc2FnZTogJ1RoZSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5naWZpZWQgVVVJRCcgfSlcclxuICAgICAgLm51bGxhYmxlKCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gU2NoZW1hIGZvciB0aGUgcHVwcGV0ZWVyIHNlY3Rpb24gb2Ygb3B0aW9uc1xyXG5jb25zdCBQdXBwZXRlZXJTY2hlbWEgPSAoc3RyaWN0Q2hlY2spID0+XHJcbiAgelxyXG4gICAgLm9iamVjdCh7XHJcbiAgICAgIGFyZ3M6IHZhbGlkYXRvcnMuYXJncyhzdHJpY3RDaGVjaylcclxuICAgIH0pXHJcbiAgICAucGFydGlhbCgpO1xyXG5cclxuLy8gU2NoZW1hIGZvciB0aGUgaGlnaGNoYXJ0cyBzZWN0aW9uIG9mIG9wdGlvbnNcclxuY29uc3QgSGlnaGNoYXJ0c1NjaGVtYSA9IChzdHJpY3RDaGVjaykgPT5cclxuICB6XHJcbiAgICAub2JqZWN0KHtcclxuICAgICAgdmVyc2lvbjogdmFsaWRhdG9ycy52ZXJzaW9uKHN0cmljdENoZWNrKSxcclxuICAgICAgY2RuVXJsOiB2YWxpZGF0b3JzLmNkblVybChzdHJpY3RDaGVjayksXHJcbiAgICAgIGZvcmNlRmV0Y2g6IHZhbGlkYXRvcnMuZm9yY2VGZXRjaChzdHJpY3RDaGVjayksXHJcbiAgICAgIGNhY2hlUGF0aDogdmFsaWRhdG9ycy5jYWNoZVBhdGgoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBjb3JlU2NyaXB0czogdmFsaWRhdG9ycy5jb3JlU2NyaXB0cyhzdHJpY3RDaGVjayksXHJcbiAgICAgIG1vZHVsZVNjcmlwdHM6IHZhbGlkYXRvcnMubW9kdWxlU2NyaXB0cyhzdHJpY3RDaGVjayksXHJcbiAgICAgIGluZGljYXRvclNjcmlwdHM6IHZhbGlkYXRvcnMuaW5kaWNhdG9yU2NyaXB0cyhzdHJpY3RDaGVjayksXHJcbiAgICAgIGN1c3RvbVNjcmlwdHM6IHZhbGlkYXRvcnMuY3VzdG9tU2NyaXB0cyhzdHJpY3RDaGVjaylcclxuICAgIH0pXHJcbiAgICAucGFydGlhbCgpO1xyXG5cclxuLy8gU2NoZW1hIGZvciB0aGUgZXhwb3J0IHNlY3Rpb24gb2Ygb3B0aW9uc1xyXG5jb25zdCBFeHBvcnRTY2hlbWEgPSAoc3RyaWN0Q2hlY2spID0+XHJcbiAgelxyXG4gICAgLm9iamVjdCh7XHJcbiAgICAgIGluZmlsZTogdmFsaWRhdG9ycy5pbmZpbGUoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBpbnN0cjogdmFsaWRhdG9ycy5pbnN0cigpLFxyXG4gICAgICBvcHRpb25zOiB2YWxpZGF0b3JzLm9wdGlvbnMoKSxcclxuICAgICAgc3ZnOiB2YWxpZGF0b3JzLnN2ZygpLFxyXG4gICAgICBvdXRmaWxlOiB2YWxpZGF0b3JzLm91dGZpbGUoc3RyaWN0Q2hlY2spLFxyXG4gICAgICB0eXBlOiB2YWxpZGF0b3JzLnR5cGUoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBjb25zdHI6IHZhbGlkYXRvcnMuY29uc3RyKHN0cmljdENoZWNrKSxcclxuICAgICAgYjY0OiB2YWxpZGF0b3JzLmI2NChzdHJpY3RDaGVjayksXHJcbiAgICAgIG5vRG93bmxvYWQ6IHZhbGlkYXRvcnMubm9Eb3dubG9hZChzdHJpY3RDaGVjayksXHJcbiAgICAgIGRlZmF1bHRIZWlnaHQ6IHZhbGlkYXRvcnMuZGVmYXVsdEhlaWdodChzdHJpY3RDaGVjayksXHJcbiAgICAgIGRlZmF1bHRXaWR0aDogdmFsaWRhdG9ycy5kZWZhdWx0V2lkdGgoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBkZWZhdWx0U2NhbGU6IHZhbGlkYXRvcnMuZGVmYXVsdFNjYWxlKHN0cmljdENoZWNrKSxcclxuICAgICAgaGVpZ2h0OiB2YWxpZGF0b3JzLmhlaWdodChzdHJpY3RDaGVjayksXHJcbiAgICAgIHdpZHRoOiB2YWxpZGF0b3JzLndpZHRoKHN0cmljdENoZWNrKSxcclxuICAgICAgc2NhbGU6IHZhbGlkYXRvcnMuc2NhbGUoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBnbG9iYWxPcHRpb25zOiB2YWxpZGF0b3JzLmdsb2JhbE9wdGlvbnMoKSxcclxuICAgICAgdGhlbWVPcHRpb25zOiB2YWxpZGF0b3JzLnRoZW1lT3B0aW9ucygpLFxyXG4gICAgICBiYXRjaDogdmFsaWRhdG9ycy5iYXRjaChmYWxzZSksXHJcbiAgICAgIHJhc3Rlcml6YXRpb25UaW1lb3V0OiB2YWxpZGF0b3JzLnJhc3Rlcml6YXRpb25UaW1lb3V0KHN0cmljdENoZWNrKVxyXG4gICAgfSlcclxuICAgIC5wYXJ0aWFsKCk7XHJcblxyXG4vLyBTY2hlbWEgZm9yIHRoZSBjdXN0b21Mb2dpYyBzZWN0aW9uIG9mIG9wdGlvbnNcclxuY29uc3QgQ3VzdG9tTG9naWNTY2hlbWEgPSAoc3RyaWN0Q2hlY2spID0+XHJcbiAgelxyXG4gICAgLm9iamVjdCh7XHJcbiAgICAgIGFsbG93Q29kZUV4ZWN1dGlvbjogdmFsaWRhdG9ycy5hbGxvd0NvZGVFeGVjdXRpb24oc3RyaWN0Q2hlY2spLFxyXG4gICAgICBhbGxvd0ZpbGVSZXNvdXJjZXM6IHZhbGlkYXRvcnMuYWxsb3dGaWxlUmVzb3VyY2VzKHN0cmljdENoZWNrKSxcclxuICAgICAgY3VzdG9tQ29kZTogdmFsaWRhdG9ycy5jdXN0b21Db2RlKGZhbHNlKSxcclxuICAgICAgY2FsbGJhY2s6IHZhbGlkYXRvcnMuY2FsbGJhY2soZmFsc2UpLFxyXG4gICAgICByZXNvdXJjZXM6IHZhbGlkYXRvcnMucmVzb3VyY2VzKHN0cmljdENoZWNrKSxcclxuICAgICAgbG9hZENvbmZpZzogdmFsaWRhdG9ycy5sb2FkQ29uZmlnKGZhbHNlKSxcclxuICAgICAgY3JlYXRlQ29uZmlnOiB2YWxpZGF0b3JzLmNyZWF0ZUNvbmZpZyhmYWxzZSlcclxuICAgIH0pXHJcbiAgICAucGFydGlhbCgpO1xyXG5cclxuLy8gU2NoZW1hIGZvciB0aGUgc2VydmVyLnByb3h5IHNlY3Rpb24gb2Ygb3B0aW9uc1xyXG5jb25zdCBQcm94eVNjaGVtYSA9IChzdHJpY3RDaGVjaykgPT5cclxuICB6XHJcbiAgICAub2JqZWN0KHtcclxuICAgICAgaG9zdDogdmFsaWRhdG9ycy5wcm94eUhvc3QoZmFsc2UpLFxyXG4gICAgICBwb3J0OiB2YWxpZGF0b3JzLnByb3h5UG9ydChzdHJpY3RDaGVjayksXHJcbiAgICAgIHRpbWVvdXQ6IHZhbGlkYXRvcnMucHJveHlUaW1lb3V0KHN0cmljdENoZWNrKVxyXG4gICAgfSlcclxuICAgIC5wYXJ0aWFsKCk7XHJcblxyXG4vLyBTY2hlbWEgZm9yIHRoZSBzZXJ2ZXIucmF0ZUxpbWl0aW5nIHNlY3Rpb24gb2Ygb3B0aW9uc1xyXG5jb25zdCBSYXRlTGltaXRpbmdTY2hlbWEgPSAoc3RyaWN0Q2hlY2spID0+XHJcbiAgelxyXG4gICAgLm9iamVjdCh7XHJcbiAgICAgIGVuYWJsZTogdmFsaWRhdG9ycy5lbmFibGVSYXRlTGltaXRpbmcoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBtYXhSZXF1ZXN0czogdmFsaWRhdG9ycy5tYXhSZXF1ZXN0cyhzdHJpY3RDaGVjayksXHJcbiAgICAgIHdpbmRvdzogdmFsaWRhdG9ycy53aW5kb3coc3RyaWN0Q2hlY2spLFxyXG4gICAgICBkZWxheTogdmFsaWRhdG9ycy5kZWxheShzdHJpY3RDaGVjayksXHJcbiAgICAgIHRydXN0UHJveHk6IHZhbGlkYXRvcnMudHJ1c3RQcm94eShzdHJpY3RDaGVjayksXHJcbiAgICAgIHNraXBLZXk6IHZhbGlkYXRvcnMuc2tpcEtleShmYWxzZSksXHJcbiAgICAgIHNraXBUb2tlbjogdmFsaWRhdG9ycy5za2lwVG9rZW4oZmFsc2UpXHJcbiAgICB9KVxyXG4gICAgLnBhcnRpYWwoKTtcclxuXHJcbi8vIFNjaGVtYSBmb3IgdGhlIHNlcnZlci5zc2wgc2VjdGlvbiBvZiBvcHRpb25zXHJcbmNvbnN0IFNzbFNjaGVtYSA9IChzdHJpY3RDaGVjaykgPT5cclxuICB6XHJcbiAgICAub2JqZWN0KHtcclxuICAgICAgZW5hYmxlOiB2YWxpZGF0b3JzLmVuYWJsZVNzbChzdHJpY3RDaGVjayksXHJcbiAgICAgIGZvcmNlOiB2YWxpZGF0b3JzLnNzbEZvcmNlKHN0cmljdENoZWNrKSxcclxuICAgICAgcG9ydDogdmFsaWRhdG9ycy5zc2xQb3J0KHN0cmljdENoZWNrKSxcclxuICAgICAgY2VydFBhdGg6IHZhbGlkYXRvcnMuc3NsQ2VydFBhdGgoZmFsc2UpXHJcbiAgICB9KVxyXG4gICAgLnBhcnRpYWwoKTtcclxuXHJcbi8vIFNjaGVtYSBmb3IgdGhlIHNlcnZlciBzZWN0aW9uIG9mIG9wdGlvbnNcclxuY29uc3QgU2VydmVyU2NoZW1hID0gKHN0cmljdENoZWNrKSA9PlxyXG4gIHoub2JqZWN0KHtcclxuICAgIGVuYWJsZTogdmFsaWRhdG9ycy5lbmFibGVTZXJ2ZXIoc3RyaWN0Q2hlY2spLm9wdGlvbmFsKCksXHJcbiAgICBob3N0OiB2YWxpZGF0b3JzLmhvc3Qoc3RyaWN0Q2hlY2spLm9wdGlvbmFsKCksXHJcbiAgICBwb3J0OiB2YWxpZGF0b3JzLnBvcnQoc3RyaWN0Q2hlY2spLm9wdGlvbmFsKCksXHJcbiAgICB1cGxvYWRMaW1pdDogdmFsaWRhdG9ycy51cGxvYWRMaW1pdChzdHJpY3RDaGVjaykub3B0aW9uYWwoKSxcclxuICAgIGJlbmNobWFya2luZzogdmFsaWRhdG9ycy5zZXJ2ZXJCZW5jaG1hcmtpbmcoc3RyaWN0Q2hlY2spLm9wdGlvbmFsKCksXHJcbiAgICBwcm94eTogUHJveHlTY2hlbWEoc3RyaWN0Q2hlY2spLm9wdGlvbmFsKCksXHJcbiAgICByYXRlTGltaXRpbmc6IFJhdGVMaW1pdGluZ1NjaGVtYShzdHJpY3RDaGVjaykub3B0aW9uYWwoKSxcclxuICAgIHNzbDogU3NsU2NoZW1hKHN0cmljdENoZWNrKS5vcHRpb25hbCgpXHJcbiAgfSk7XHJcblxyXG4vLyBTY2hlbWEgZm9yIHRoZSBwb29sIHNlY3Rpb24gb2Ygb3B0aW9uc1xyXG5jb25zdCBQb29sU2NoZW1hID0gKHN0cmljdENoZWNrKSA9PlxyXG4gIHpcclxuICAgIC5vYmplY3Qoe1xyXG4gICAgICBtaW5Xb3JrZXJzOiB2YWxpZGF0b3JzLm1pbldvcmtlcnMoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBtYXhXb3JrZXJzOiB2YWxpZGF0b3JzLm1heFdvcmtlcnMoc3RyaWN0Q2hlY2spLFxyXG4gICAgICB3b3JrTGltaXQ6IHZhbGlkYXRvcnMud29ya0xpbWl0KHN0cmljdENoZWNrKSxcclxuICAgICAgYWNxdWlyZVRpbWVvdXQ6IHZhbGlkYXRvcnMuYWNxdWlyZVRpbWVvdXQoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBjcmVhdGVUaW1lb3V0OiB2YWxpZGF0b3JzLmNyZWF0ZVRpbWVvdXQoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBkZXN0cm95VGltZW91dDogdmFsaWRhdG9ycy5kZXN0cm95VGltZW91dChzdHJpY3RDaGVjayksXHJcbiAgICAgIGlkbGVUaW1lb3V0OiB2YWxpZGF0b3JzLmlkbGVUaW1lb3V0KHN0cmljdENoZWNrKSxcclxuICAgICAgY3JlYXRlUmV0cnlJbnRlcnZhbDogdmFsaWRhdG9ycy5jcmVhdGVSZXRyeUludGVydmFsKHN0cmljdENoZWNrKSxcclxuICAgICAgcmVhcGVySW50ZXJ2YWw6IHZhbGlkYXRvcnMucmVhcGVySW50ZXJ2YWwoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBiZW5jaG1hcmtpbmc6IHZhbGlkYXRvcnMucG9vbEJlbmNobWFya2luZyhzdHJpY3RDaGVjaylcclxuICAgIH0pXHJcbiAgICAucGFydGlhbCgpO1xyXG5cclxuLy8gU2NoZW1hIGZvciB0aGUgbG9nZ2luZyBzZWN0aW9uIG9mIG9wdGlvbnNcclxuY29uc3QgTG9nZ2luZ1NjaGVtYSA9IChzdHJpY3RDaGVjaykgPT5cclxuICB6XHJcbiAgICAub2JqZWN0KHtcclxuICAgICAgbGV2ZWw6IHZhbGlkYXRvcnMubG9nTGV2ZWwoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBmaWxlOiB2YWxpZGF0b3JzLmxvZ0ZpbGUoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBkZXN0OiB2YWxpZGF0b3JzLmxvZ0Rlc3Qoc3RyaWN0Q2hlY2spLFxyXG4gICAgICB0b0NvbnNvbGU6IHZhbGlkYXRvcnMubG9nVG9Db25zb2xlKHN0cmljdENoZWNrKSxcclxuICAgICAgdG9GaWxlOiB2YWxpZGF0b3JzLmxvZ1RvRmlsZShzdHJpY3RDaGVjaylcclxuICAgIH0pXHJcbiAgICAucGFydGlhbCgpO1xyXG5cclxuLy8gU2NoZW1hIGZvciB0aGUgdWkgc2VjdGlvbiBvZiBvcHRpb25zXHJcbmNvbnN0IFVpU2NoZW1hID0gKHN0cmljdENoZWNrKSA9PlxyXG4gIHpcclxuICAgIC5vYmplY3Qoe1xyXG4gICAgICBlbmFibGU6IHZhbGlkYXRvcnMuZW5hYmxlVWkoc3RyaWN0Q2hlY2spLFxyXG4gICAgICByb3V0ZTogdmFsaWRhdG9ycy51aVJvdXRlKHN0cmljdENoZWNrKVxyXG4gICAgfSlcclxuICAgIC5wYXJ0aWFsKCk7XHJcblxyXG4vLyBTY2hlbWEgZm9yIHRoZSBvdGhlciBzZWN0aW9uIG9mIG9wdGlvbnNcclxuY29uc3QgT3RoZXJTY2hlbWEgPSAoc3RyaWN0Q2hlY2spID0+XHJcbiAgelxyXG4gICAgLm9iamVjdCh7XHJcbiAgICAgIG5vZGVFbnY6IHZhbGlkYXRvcnMubm9kZUVudihzdHJpY3RDaGVjayksXHJcbiAgICAgIGxpc3RlblRvUHJvY2Vzc0V4aXRzOiB2YWxpZGF0b3JzLmxpc3RlblRvUHJvY2Vzc0V4aXRzKHN0cmljdENoZWNrKSxcclxuICAgICAgbm9Mb2dvOiB2YWxpZGF0b3JzLm5vTG9nbyhzdHJpY3RDaGVjayksXHJcbiAgICAgIGhhcmRSZXNldFBhZ2U6IHZhbGlkYXRvcnMuaGFyZFJlc2V0UGFnZShzdHJpY3RDaGVjayksXHJcbiAgICAgIGJyb3dzZXJTaGVsbE1vZGU6IHZhbGlkYXRvcnMuYnJvd3NlclNoZWxsTW9kZShzdHJpY3RDaGVjayksXHJcbiAgICAgIHZhbGlkYXRpb246IHZhbGlkYXRvcnMudmFsaWRhdGlvbihzdHJpY3RDaGVjaylcclxuICAgIH0pXHJcbiAgICAucGFydGlhbCgpO1xyXG5cclxuLy8gU2NoZW1hIGZvciB0aGUgZGVidWcgc2VjdGlvbiBvZiBvcHRpb25zXHJcbmNvbnN0IERlYnVnU2NoZW1hID0gKHN0cmljdENoZWNrKSA9PlxyXG4gIHpcclxuICAgIC5vYmplY3Qoe1xyXG4gICAgICBlbmFibGU6IHZhbGlkYXRvcnMuZW5hYmxlRGVidWcoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBoZWFkbGVzczogdmFsaWRhdG9ycy5oZWFkbGVzcyhzdHJpY3RDaGVjayksXHJcbiAgICAgIGRldnRvb2xzOiB2YWxpZGF0b3JzLmRldnRvb2xzKHN0cmljdENoZWNrKSxcclxuICAgICAgbGlzdGVuVG9Db25zb2xlOiB2YWxpZGF0b3JzLmxpc3RlblRvQ29uc29sZShzdHJpY3RDaGVjayksXHJcbiAgICAgIGR1bXBpbzogdmFsaWRhdG9ycy5kdW1waW8oc3RyaWN0Q2hlY2spLFxyXG4gICAgICBzbG93TW86IHZhbGlkYXRvcnMuc2xvd01vKHN0cmljdENoZWNrKSxcclxuICAgICAgZGVidWdnaW5nUG9ydDogdmFsaWRhdG9ycy5kZWJ1Z2dpbmdQb3J0KHN0cmljdENoZWNrKVxyXG4gICAgfSlcclxuICAgIC5wYXJ0aWFsKCk7XHJcblxyXG4vLyBTY2hlbWEgZm9yIHRoZSB3ZWJTb2NrZXQgc2VjdGlvbiBvZiBvcHRpb25zXHJcbmNvbnN0IFdlYlNvY2tldFNjaGVtYSA9IChzdHJpY3RDaGVjaykgPT5cclxuICB6XHJcbiAgICAub2JqZWN0KHtcclxuICAgICAgZW5hYmxlOiB2YWxpZGF0b3JzLmVuYWJsZVdzKHN0cmljdENoZWNrKSxcclxuICAgICAgcmVjb25uZWN0OiB2YWxpZGF0b3JzLndzUmVjb25uZWN0KHN0cmljdENoZWNrKSxcclxuICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiB2YWxpZGF0b3JzLndzUmVqZWN0VW5hdXRob3JpemVkKHN0cmljdENoZWNrKSxcclxuICAgICAgcGluZ1RpbWVvdXQ6IHZhbGlkYXRvcnMud3NQaW5nVGltZW91dChzdHJpY3RDaGVjayksXHJcbiAgICAgIHJlY29ubmVjdEludGVydmFsOiB2YWxpZGF0b3JzLndzUmVjb25uZWN0SW50ZXJ2YWwoc3RyaWN0Q2hlY2spLFxyXG4gICAgICByZWNvbm5lY3RBdHRlbXB0czogdmFsaWRhdG9ycy53c1JlY29ubmVjdEF0dGVtcHRzKHN0cmljdENoZWNrKSxcclxuICAgICAgbWVzc2FnZUludGVydmFsOiB2YWxpZGF0b3JzLndzTWVzc2FnZUludGVydmFsKHN0cmljdENoZWNrKSxcclxuICAgICAgZ2F0aGVyQWxsT3B0aW9uczogdmFsaWRhdG9ycy53c0dhdGhlckFsbE9wdGlvbnMoc3RyaWN0Q2hlY2spLFxyXG4gICAgICB1cmw6IHZhbGlkYXRvcnMud3NVcmwoc3RyaWN0Q2hlY2spXHJcbiAgICB9KVxyXG4gICAgLnBhcnRpYWwoKTtcclxuXHJcbi8vIFN0cmljdCBzY2hlbWEgZm9yIHRoZSBjb25maWdcclxuZXhwb3J0IGNvbnN0IFN0cmljdENvbmZpZ1NjaGVtYSA9IHoub2JqZWN0KHtcclxuICByZXF1ZXN0SWQ6IHZhbGlkYXRvcnMucmVxdWVzdElkKCksXHJcbiAgcHVwcGV0ZWVyOiBQdXBwZXRlZXJTY2hlbWEodHJ1ZSksXHJcbiAgaGlnaGNoYXJ0czogSGlnaGNoYXJ0c1NjaGVtYSh0cnVlKSxcclxuICBleHBvcnQ6IEV4cG9ydFNjaGVtYSh0cnVlKSxcclxuICBjdXN0b21Mb2dpYzogQ3VzdG9tTG9naWNTY2hlbWEodHJ1ZSksXHJcbiAgc2VydmVyOiBTZXJ2ZXJTY2hlbWEodHJ1ZSksXHJcbiAgcG9vbDogUG9vbFNjaGVtYSh0cnVlKSxcclxuICBsb2dnaW5nOiBMb2dnaW5nU2NoZW1hKHRydWUpLFxyXG4gIHVpOiBVaVNjaGVtYSh0cnVlKSxcclxuICBvdGhlcjogT3RoZXJTY2hlbWEodHJ1ZSksXHJcbiAgZGVidWc6IERlYnVnU2NoZW1hKHRydWUpLFxyXG4gIHdlYlNvY2tldDogV2ViU29ja2V0U2NoZW1hKHRydWUpXHJcbn0pO1xyXG5cclxuLy8gTG9vc2Ugc2NoZW1hIGZvciB0aGUgY29uZmlnXHJcbmV4cG9ydCBjb25zdCBMb29zZUNvbmZpZ1NjaGVtYSA9IHoub2JqZWN0KHtcclxuICByZXF1ZXN0SWQ6IHZhbGlkYXRvcnMucmVxdWVzdElkKCksXHJcbiAgcHVwcGV0ZWVyOiBQdXBwZXRlZXJTY2hlbWEoZmFsc2UpLFxyXG4gIGhpZ2hjaGFydHM6IEhpZ2hjaGFydHNTY2hlbWEoZmFsc2UpLFxyXG4gIGV4cG9ydDogRXhwb3J0U2NoZW1hKGZhbHNlKSxcclxuICBjdXN0b21Mb2dpYzogQ3VzdG9tTG9naWNTY2hlbWEoZmFsc2UpLFxyXG4gIHNlcnZlcjogU2VydmVyU2NoZW1hKGZhbHNlKSxcclxuICBwb29sOiBQb29sU2NoZW1hKGZhbHNlKSxcclxuICBsb2dnaW5nOiBMb2dnaW5nU2NoZW1hKGZhbHNlKSxcclxuICB1aTogVWlTY2hlbWEoZmFsc2UpLFxyXG4gIG90aGVyOiBPdGhlclNjaGVtYShmYWxzZSksXHJcbiAgZGVidWc6IERlYnVnU2NoZW1hKGZhbHNlKSxcclxuICB3ZWJTb2NrZXQ6IFdlYlNvY2tldFNjaGVtYShmYWxzZSlcclxufSk7XHJcblxyXG4vLyBTY2hlbWEgZm9yIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgY29uZmlnXHJcbmV4cG9ydCBjb25zdCBFbnZTY2hlbWEgPSB6Lm9iamVjdCh7XHJcbiAgLy8gcHVwcGV0ZWVyXHJcbiAgUFVQUEVURUVSX0FSR1M6IHZhbGlkYXRvcnMuYXJncyhmYWxzZSksXHJcblxyXG4gIC8vIGhpZ2hjaGFydHNcclxuICBISUdIQ0hBUlRTX1ZFUlNJT046IHZhbGlkYXRvcnMudmVyc2lvbihmYWxzZSksXHJcbiAgSElHSENIQVJUU19DRE5fVVJMOiB2YWxpZGF0b3JzLmNkblVybChmYWxzZSksXHJcbiAgSElHSENIQVJUU19GT1JDRV9GRVRDSDogdmFsaWRhdG9ycy5mb3JjZUZldGNoKGZhbHNlKSxcclxuICBISUdIQ0hBUlRTX0NBQ0hFX1BBVEg6IHZhbGlkYXRvcnMuY2FjaGVQYXRoKGZhbHNlKSxcclxuICBISUdIQ0hBUlRTX0FETUlOX1RPS0VOOiB2YWxpZGF0b3JzLmFkbWluVG9rZW4oZmFsc2UpLFxyXG4gIEhJR0hDSEFSVFNfQ09SRV9TQ1JJUFRTOiB2YWxpZGF0b3JzLmNvcmVTY3JpcHRzKGZhbHNlKSxcclxuICBISUdIQ0hBUlRTX01PRFVMRV9TQ1JJUFRTOiB2YWxpZGF0b3JzLm1vZHVsZVNjcmlwdHMoZmFsc2UpLFxyXG4gIEhJR0hDSEFSVFNfSU5ESUNBVE9SX1NDUklQVFM6IHZhbGlkYXRvcnMuaW5kaWNhdG9yU2NyaXB0cyhmYWxzZSksXHJcbiAgSElHSENIQVJUU19DVVNUT01fU0NSSVBUUzogdmFsaWRhdG9ycy5jdXN0b21TY3JpcHRzKGZhbHNlKSxcclxuXHJcbiAgLy8gZXhwb3J0XHJcbiAgRVhQT1JUX0lORklMRTogdmFsaWRhdG9ycy5pbmZpbGUoZmFsc2UpLFxyXG4gIEVYUE9SVF9JTlNUUjogdmFsaWRhdG9ycy5pbnN0cigpLFxyXG4gIEVYUE9SVF9PUFRJT05TOiB2YWxpZGF0b3JzLm9wdGlvbnMoKSxcclxuICBFWFBPUlRfU1ZHOiB2YWxpZGF0b3JzLnN2ZygpLFxyXG4gIEVYUE9SVF9CQVRDSDogdmFsaWRhdG9ycy5iYXRjaChmYWxzZSksXHJcbiAgRVhQT1JUX09VVEZJTEU6IHZhbGlkYXRvcnMub3V0ZmlsZShmYWxzZSksXHJcbiAgRVhQT1JUX1RZUEU6IHZhbGlkYXRvcnMudHlwZShmYWxzZSksXHJcbiAgRVhQT1JUX0NPTlNUUjogdmFsaWRhdG9ycy5jb25zdHIoZmFsc2UpLFxyXG4gIEVYUE9SVF9CNjQ6IHZhbGlkYXRvcnMuYjY0KGZhbHNlKSxcclxuICBFWFBPUlRfTk9fRE9XTkxPQUQ6IHZhbGlkYXRvcnMubm9Eb3dubG9hZChmYWxzZSksXHJcbiAgRVhQT1JUX0hFSUdIVDogdmFsaWRhdG9ycy5oZWlnaHQoZmFsc2UpLFxyXG4gIEVYUE9SVF9XSURUSDogdmFsaWRhdG9ycy53aWR0aChmYWxzZSksXHJcbiAgRVhQT1JUX1NDQUxFOiB2YWxpZGF0b3JzLnNjYWxlKGZhbHNlKSxcclxuICBFWFBPUlRfREVGQVVMVF9IRUlHSFQ6IHZhbGlkYXRvcnMuZGVmYXVsdEhlaWdodChmYWxzZSksXHJcbiAgRVhQT1JUX0RFRkFVTFRfV0lEVEg6IHZhbGlkYXRvcnMuZGVmYXVsdFdpZHRoKGZhbHNlKSxcclxuICBFWFBPUlRfREVGQVVMVF9TQ0FMRTogdmFsaWRhdG9ycy5kZWZhdWx0U2NhbGUoZmFsc2UpLFxyXG4gIEVYUE9SVF9HTE9CQUxfT1BUSU9OUzogdmFsaWRhdG9ycy5nbG9iYWxPcHRpb25zKCksXHJcbiAgRVhQT1JUX1RIRU1FX09QVElPTlM6IHZhbGlkYXRvcnMudGhlbWVPcHRpb25zKCksXHJcbiAgRVhQT1JUX1JBU1RFUklaQVRJT05fVElNRU9VVDogdmFsaWRhdG9ycy5yYXN0ZXJpemF0aW9uVGltZW91dChmYWxzZSksXHJcblxyXG4gIC8vIGN1c3RvbVxyXG4gIENVU1RPTV9MT0dJQ19BTExPV19DT0RFX0VYRUNVVElPTjogdmFsaWRhdG9ycy5hbGxvd0NvZGVFeGVjdXRpb24oZmFsc2UpLFxyXG4gIENVU1RPTV9MT0dJQ19BTExPV19GSUxFX1JFU09VUkNFUzogdmFsaWRhdG9ycy5hbGxvd0ZpbGVSZXNvdXJjZXMoZmFsc2UpLFxyXG4gIENVU1RPTV9MT0dJQ19DVVNUT01fQ09ERTogdmFsaWRhdG9ycy5jdXN0b21Db2RlKGZhbHNlKSxcclxuICBDVVNUT01fTE9HSUNfQ0FMTEJBQ0s6IHZhbGlkYXRvcnMuY2FsbGJhY2soZmFsc2UpLFxyXG4gIENVU1RPTV9MT0dJQ19SRVNPVVJDRVM6IHZhbGlkYXRvcnMucmVzb3VyY2VzKGZhbHNlKSxcclxuICBDVVNUT01fTE9HSUNfTE9BRF9DT05GSUc6IHZhbGlkYXRvcnMubG9hZENvbmZpZyhmYWxzZSksXHJcbiAgQ1VTVE9NX0xPR0lDX0NSRUFURV9DT05GSUc6IHZhbGlkYXRvcnMuY3JlYXRlQ29uZmlnKGZhbHNlKSxcclxuXHJcbiAgLy8gc2VydmVyXHJcbiAgU0VSVkVSX0VOQUJMRTogdmFsaWRhdG9ycy5lbmFibGVTZXJ2ZXIoZmFsc2UpLFxyXG4gIFNFUlZFUl9IT1NUOiB2YWxpZGF0b3JzLmhvc3QoZmFsc2UpLFxyXG4gIFNFUlZFUl9QT1JUOiB2YWxpZGF0b3JzLnBvcnQoZmFsc2UpLFxyXG4gIFNFUlZFUl9VUExPQURfTElNSVQ6IHZhbGlkYXRvcnMudXBsb2FkTGltaXQoZmFsc2UpLFxyXG4gIFNFUlZFUl9CRU5DSE1BUktJTkc6IHZhbGlkYXRvcnMuc2VydmVyQmVuY2htYXJraW5nKGZhbHNlKSxcclxuXHJcbiAgLy8gc2VydmVyIHByb3h5XHJcbiAgU0VSVkVSX1BST1hZX0hPU1Q6IHZhbGlkYXRvcnMucHJveHlIb3N0KGZhbHNlKSxcclxuICBTRVJWRVJfUFJPWFlfUE9SVDogdmFsaWRhdG9ycy5wcm94eVBvcnQoZmFsc2UpLFxyXG4gIFNFUlZFUl9QUk9YWV9USU1FT1VUOiB2YWxpZGF0b3JzLnByb3h5VGltZW91dChmYWxzZSksXHJcblxyXG4gIC8vIHNlcnZlciByYXRlIGxpbWl0aW5nXHJcbiAgU0VSVkVSX1JBVEVfTElNSVRJTkdfRU5BQkxFOiB2YWxpZGF0b3JzLmVuYWJsZVJhdGVMaW1pdGluZyhmYWxzZSksXHJcbiAgU0VSVkVSX1JBVEVfTElNSVRJTkdfTUFYX1JFUVVFU1RTOiB2YWxpZGF0b3JzLm1heFJlcXVlc3RzKGZhbHNlKSxcclxuICBTRVJWRVJfUkFURV9MSU1JVElOR19XSU5ET1c6IHZhbGlkYXRvcnMud2luZG93KGZhbHNlKSxcclxuICBTRVJWRVJfUkFURV9MSU1JVElOR19ERUxBWTogdmFsaWRhdG9ycy5kZWxheShmYWxzZSksXHJcbiAgU0VSVkVSX1JBVEVfTElNSVRJTkdfVFJVU1RfUFJPWFk6IHZhbGlkYXRvcnMudHJ1c3RQcm94eShmYWxzZSksXHJcbiAgU0VSVkVSX1JBVEVfTElNSVRJTkdfU0tJUF9LRVk6IHZhbGlkYXRvcnMuc2tpcEtleShmYWxzZSksXHJcbiAgU0VSVkVSX1JBVEVfTElNSVRJTkdfU0tJUF9UT0tFTjogdmFsaWRhdG9ycy5za2lwVG9rZW4oZmFsc2UpLFxyXG5cclxuICAvLyBzZXJ2ZXIgc3NsXHJcbiAgU0VSVkVSX1NTTF9FTkFCTEU6IHZhbGlkYXRvcnMuZW5hYmxlU3NsKGZhbHNlKSxcclxuICBTRVJWRVJfU1NMX0ZPUkNFOiB2YWxpZGF0b3JzLnNzbEZvcmNlKGZhbHNlKSxcclxuICBTRVJWRVJfU1NMX1BPUlQ6IHZhbGlkYXRvcnMuc3NsUG9ydChmYWxzZSksXHJcbiAgU0VSVkVSX1NTTF9DRVJUX1BBVEg6IHZhbGlkYXRvcnMuc3NsQ2VydFBhdGgoZmFsc2UpLFxyXG5cclxuICAvLyBwb29sXHJcbiAgUE9PTF9NSU5fV09SS0VSUzogdmFsaWRhdG9ycy5taW5Xb3JrZXJzKGZhbHNlKSxcclxuICBQT09MX01BWF9XT1JLRVJTOiB2YWxpZGF0b3JzLm1heFdvcmtlcnMoZmFsc2UpLFxyXG4gIFBPT0xfV09SS19MSU1JVDogdmFsaWRhdG9ycy53b3JrTGltaXQoZmFsc2UpLFxyXG4gIFBPT0xfQUNRVUlSRV9USU1FT1VUOiB2YWxpZGF0b3JzLmFjcXVpcmVUaW1lb3V0KGZhbHNlKSxcclxuICBQT09MX0NSRUFURV9USU1FT1VUOiB2YWxpZGF0b3JzLmNyZWF0ZVRpbWVvdXQoZmFsc2UpLFxyXG4gIFBPT0xfREVTVFJPWV9USU1FT1VUOiB2YWxpZGF0b3JzLmRlc3Ryb3lUaW1lb3V0KGZhbHNlKSxcclxuICBQT09MX0lETEVfVElNRU9VVDogdmFsaWRhdG9ycy5pZGxlVGltZW91dChmYWxzZSksXHJcbiAgUE9PTF9DUkVBVEVfUkVUUllfSU5URVJWQUw6IHZhbGlkYXRvcnMuY3JlYXRlUmV0cnlJbnRlcnZhbChmYWxzZSksXHJcbiAgUE9PTF9SRUFQRVJfSU5URVJWQUw6IHZhbGlkYXRvcnMucmVhcGVySW50ZXJ2YWwoZmFsc2UpLFxyXG4gIFBPT0xfQkVOQ0hNQVJLSU5HOiB2YWxpZGF0b3JzLnBvb2xCZW5jaG1hcmtpbmcoZmFsc2UpLFxyXG5cclxuICAvLyBsb2dnaW5nXHJcbiAgTE9HR0lOR19MRVZFTDogdmFsaWRhdG9ycy5sb2dMZXZlbChmYWxzZSksXHJcbiAgTE9HR0lOR19GSUxFOiB2YWxpZGF0b3JzLmxvZ0ZpbGUoZmFsc2UpLFxyXG4gIExPR0dJTkdfREVTVDogdmFsaWRhdG9ycy5sb2dEZXN0KGZhbHNlKSxcclxuICBMT0dHSU5HX1RPX0NPTlNPTEU6IHZhbGlkYXRvcnMubG9nVG9Db25zb2xlKGZhbHNlKSxcclxuICBMT0dHSU5HX1RPX0ZJTEU6IHZhbGlkYXRvcnMubG9nVG9GaWxlKGZhbHNlKSxcclxuXHJcbiAgLy8gdWlcclxuICBVSV9FTkFCTEU6IHZhbGlkYXRvcnMuZW5hYmxlVWkoZmFsc2UpLFxyXG4gIFVJX1JPVVRFOiB2YWxpZGF0b3JzLnVpUm91dGUoZmFsc2UpLFxyXG5cclxuICAvLyBvdGhlclxyXG4gIE9USEVSX05PREVfRU5WOiB2YWxpZGF0b3JzLm5vZGVFbnYoZmFsc2UpLFxyXG4gIE9USEVSX0xJU1RFTl9UT19QUk9DRVNTX0VYSVRTOiB2YWxpZGF0b3JzLmxpc3RlblRvUHJvY2Vzc0V4aXRzKGZhbHNlKSxcclxuICBPVEhFUl9OT19MT0dPOiB2YWxpZGF0b3JzLm5vTG9nbyhmYWxzZSksXHJcbiAgT1RIRVJfSEFSRF9SRVNFVF9QQUdFOiB2YWxpZGF0b3JzLmhhcmRSZXNldFBhZ2UoZmFsc2UpLFxyXG4gIE9USEVSX0JST1dTRVJfU0hFTExfTU9ERTogdmFsaWRhdG9ycy5icm93c2VyU2hlbGxNb2RlKGZhbHNlKSxcclxuICBPVEhFUl9WQUxJREFUSU9OOiB2YWxpZGF0b3JzLnZhbGlkYXRpb24oZmFsc2UpLFxyXG5cclxuICAvLyBkZWJ1Z2dlclxyXG4gIERFQlVHX0VOQUJMRTogdmFsaWRhdG9ycy5lbmFibGVEZWJ1ZyhmYWxzZSksXHJcbiAgREVCVUdfSEVBRExFU1M6IHZhbGlkYXRvcnMuaGVhZGxlc3MoZmFsc2UpLFxyXG4gIERFQlVHX0RFVlRPT0xTOiB2YWxpZGF0b3JzLmRldnRvb2xzKGZhbHNlKSxcclxuICBERUJVR19MSVNURU5fVE9fQ09OU09MRTogdmFsaWRhdG9ycy5saXN0ZW5Ub0NvbnNvbGUoZmFsc2UpLFxyXG4gIERFQlVHX0RVTVBJTzogdmFsaWRhdG9ycy5kdW1waW8oZmFsc2UpLFxyXG4gIERFQlVHX1NMT1dfTU86IHZhbGlkYXRvcnMuc2xvd01vKGZhbHNlKSxcclxuICBERUJVR19ERUJVR0dJTkdfUE9SVDogdmFsaWRhdG9ycy5kZWJ1Z2dpbmdQb3J0KGZhbHNlKSxcclxuXHJcbiAgLy8gd2Vic29ja2V0XHJcbiAgV0VCX1NPQ0tFVF9FTkFCTEU6IHZhbGlkYXRvcnMuZW5hYmxlV3MoZmFsc2UpLFxyXG4gIFdFQl9TT0NLRVRfUkVDT05ORUNUOiB2YWxpZGF0b3JzLndzUmVjb25uZWN0KGZhbHNlKSxcclxuICBXRUJfU09DS0VUX1JFSkVDVF9VTkFVVEhPUklaRUQ6IHZhbGlkYXRvcnMud3NSZWplY3RVbmF1dGhvcml6ZWQoZmFsc2UpLFxyXG4gIFdFQl9TT0NLRVRfUElOR19USU1FT1VUOiB2YWxpZGF0b3JzLndzUGluZ1RpbWVvdXQoZmFsc2UpLFxyXG4gIFdFQl9TT0NLRVRfUkVDT05ORUNUX0lOVEVSVkFMOiB2YWxpZGF0b3JzLndzUmVjb25uZWN0SW50ZXJ2YWwoZmFsc2UpLFxyXG4gIFdFQl9TT0NLRVRfUkVDT05ORUNUX0FUVEVNUFRTOiB2YWxpZGF0b3JzLndzUmVjb25uZWN0QXR0ZW1wdHMoZmFsc2UpLFxyXG4gIFdFQl9TT0NLRVRfTUVTU0FHRV9JTlRFUlZBTDogdmFsaWRhdG9ycy53c01lc3NhZ2VJbnRlcnZhbChmYWxzZSksXHJcbiAgV0VCX1NPQ0tFVF9HQVRIRVJfQUxMX09QVElPTlM6IHZhbGlkYXRvcnMud3NHYXRoZXJBbGxPcHRpb25zKGZhbHNlKSxcclxuICBXRUJfU09DS0VUX1VSTDogdmFsaWRhdG9ycy53c1VybChmYWxzZSksXHJcbiAgV0VCX1NPQ0tFVF9TRUNSRVQ6IHZhbGlkYXRvcnMud3NTZWNyZXQoZmFsc2UpXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIG9wdGlvbnMgdXNpbmcgdGhlIEVudlNjaGVtYS5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHByb2Nlc3MuZW52IC0gVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmcm9tIGVudmlyb25tZW50XHJcbiAqIHZhcmlhYmxlcyBmaWxlIHRvIHZhbGlkYXRlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcGFyc2VkIGFuZCB2YWxpZGF0ZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGVudnMgPSBFbnZTY2hlbWEucGFydGlhbCgpLnBhcnNlKHByb2Nlc3MuZW52KTtcclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB1c2luZyB0aGUgYFN0cmljdENvbmZpZ1NjaGVtYWAuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBzdHJpY3RWYWxpZGF0ZVxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnT3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdmFsaWRhdGUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBwYXJzZWQgYW5kIHZhbGlkYXRlZCBjb25maWd1cmF0aW9uIG9wdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RyaWN0VmFsaWRhdGUoY29uZmlnT3B0aW9ucykge1xyXG4gIHJldHVybiBTdHJpY3RDb25maWdTY2hlbWEucGFydGlhbCgpLnBhcnNlKGNvbmZpZ09wdGlvbnMpO1xyXG59XHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdXNpbmcgdGhlIGBMb29zZUNvbmZpZ1NjaGVtYWAuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBsb29zZVZhbGlkYXRlXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdPcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB2YWxpZGF0ZS5cclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIHBhcnNlZCBhbmQgdmFsaWRhdGVkIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsb29zZVZhbGlkYXRlKGNvbmZpZ09wdGlvbnMpIHtcclxuICByZXR1cm4gTG9vc2VDb25maWdTY2hlbWEucGFydGlhbCgpLnBhcnNlKGNvbmZpZ09wdGlvbnMpO1xyXG59XHJcblxyXG4vKipcclxuICogQ3VzdG9tIGVycm9yIG1hcHBpbmcgZnVuY3Rpb24gZm9yIFpvZCBzY2hlbWEgdmFsaWRhdGlvbi5cclxuICpcclxuICogVGhpcyBmdW5jdGlvbiBjdXN0b21pemVzIHRoZSBlcnJvciBtZXNzYWdlcyBwcm9kdWNlZCBieSBab2Qgc2NoZW1hXHJcbiAqIHZhbGlkYXRpb24sIHByb3ZpZGluZyBtb3JlIHNwZWNpZmljIGFuZCB1c2VyLWZyaWVuZGx5IGZlZWRiYWNrIGJhc2VkIG9uIHRoZVxyXG4gKiBpc3N1ZSB0eXBlIGFuZCBjb250ZXh0LlxyXG4gKlxyXG4gKiBUaGUgZnVuY3Rpb24gbW9kaWZpZXMgdGhlIGVycm9yIG1lc3NhZ2VzIGFzIGZvbGxvd3M6XHJcbiAqXHJcbiAqIC0gRm9yIG1pc3NpbmcgcmVxdWlyZWQgdmFsdWVzICh1bmRlZmluZWQpLCBpdCByZXR1cm5zIGEgbWVzc2FnZSBpbmRpY2F0aW5nXHJcbiAqIHRoYXQgbm8gdmFsdWUgd2FzIHByb3ZpZGVkIGZvciB0aGUgc3BlY2lmaWMgcHJvcGVydHkuXHJcbiAqXHJcbiAqIC0gRm9yIGN1c3RvbSB2YWxpZGF0aW9uIGVycm9ycywgaWYgYSBjdXN0b20gZXJyb3IgbWVzc2FnZSBpcyBwcm92aWRlZCBpbiB0aGVcclxuICogaXNzdWUgcGFyYW1ldGVycywgaXQgaW5jbHVkZXMgdGhpcyBtZXNzYWdlIGFsb25nIHdpdGggdGhlIGludmFsaWQgZGF0YVxyXG4gKiByZWNlaXZlZC5cclxuICpcclxuICogLSBGb3IgYWxsIG90aGVyIGVycm9ycywgaXQgYXBwZW5kcyBwcm9wZXJ0eS1zcGVjaWZpYyBpbmZvcm1hdGlvbiB0byB0aGVcclxuICogZGVmYXVsdCBlcnJvciBtZXNzYWdlIHByb3ZpZGVkIGJ5IFpvZC5cclxuICpcclxuICogQGZ1bmN0aW9uIF9jdXN0b21FcnJvck1hcFxyXG4gKlxyXG4gKiBAcGFyYW0ge3ouWm9kSXNzdWV9IGlzc3VlIC0gVGhlIGlzc3VlIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHZhbGlkYXRpb25cclxuICogZXJyb3IuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0IC0gVGhlIGNvbnRleHQgb2JqZWN0IHByb3ZpZGluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXHJcbiAqIGFib3V0IHRoZSB2YWxpZGF0aW9uIGVycm9yLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgY3VzdG9taXplZCBlcnJvciBtZXNzYWdlLlxyXG4gKi9cclxuZnVuY3Rpb24gX2N1c3RvbUVycm9yTWFwKGlzc3VlLCBjb250ZXh0KSB7XHJcbiAgLy8gR2V0IHRoZSBjaGFpbiBvZiBwcm9wZXJ0aWVzIHdoaWNoIGVycm9yIGRpcmVjdGx5IHJlZmVycyB0b1xyXG4gIGNvbnN0IHByb3BlcnR5TmFtZSA9IGlzc3VlLnBhdGguam9pbignLicpO1xyXG5cclxuICAvLyBDcmVhdGUgdGhlIGZpcnN0IHBhcnQgb2YgdGhlIG1lc3NhZ2UgYWJvdXQgdGhlIHByb3BlcnR5IGluZm9ybWF0aW9uXHJcbiAgY29uc3QgcHJvcGVydHlJbmZvID0gYEludmFsaWQgdmFsdWUgZm9yIHRoZSAke3Byb3BlcnR5TmFtZX1gO1xyXG5cclxuICAvLyBNb2RpZmllZCBtZXNzYWdlIGZvciB0aGUgaW52YWxpZCB0eXBlXHJcbiAgaWYgKGlzc3VlLmNvZGUgPT09IHouWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSkge1xyXG4gICAgLy8gTW9kaWZpZWQgbWVzc2FnZSBmb3IgdGhlIHJlcXVpcmVkIHZhbHVlc1xyXG4gICAgaWYgKGlzc3VlLnJlY2VpdmVkID09PSB6LlpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgbWVzc2FnZTogYCR7cHJvcGVydHlJbmZvfSAtIE5vIHZhbHVlIHdhcyBwcm92aWRlZC5gXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTW9kaWZpZWQgbWVzc2FnZSBmb3IgdGhlIHNwZWNpZmljIGludmFsaWQgdHlwZSB3aGVuIHZhbHVlcyBleGlzdFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbWVzc2FnZTogYCR7cHJvcGVydHlJbmZvfSAtIEludmFsaWQgdHlwZS4gJHtjb250ZXh0LmRlZmF1bHRFcnJvcn0uYFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIE1vZGlmaWVkIG1lc3NhZ2UgZm9yIHRoZSBjdXN0b20gdmFsaWRhdGlvblxyXG4gIGlmIChpc3N1ZS5jb2RlID09PSB6LlpvZElzc3VlQ29kZS5jdXN0b20pIHtcclxuICAgIC8vIElmIHRoZSBjdXN0b20gbWVzc2FnZSBmb3IgZXJyb3IgZXhpc3QsIGluY2x1ZGUgaXRcclxuICAgIGlmIChpc3N1ZS5wYXJhbXM/LmVycm9yTWVzc2FnZSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIG1lc3NhZ2U6IGAke3Byb3BlcnR5SW5mb30gLSAke2lzc3VlLnBhcmFtcz8uZXJyb3JNZXNzYWdlfSwgcmVjZWl2ZWQgJyR7Y29udGV4dC5kYXRhfScuYFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTW9kaWZpZWQgbWVzc2FnZSBmb3IgdGhlIGludmFsaWQgdW5pb24gZXJyb3JcclxuICBpZiAoaXNzdWUuY29kZSA9PT0gei5ab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbikge1xyXG4gICAgLy8gQ3JlYXRlIHRoZSBmaXJzdCBwYXJ0IG9mIHRoZSBtZXNzYWdlIGFib3V0IHRoZSBtdWx0aXBsZSBlcnJvcnNcclxuICAgIGxldCBtZXNzYWdlID0gYE11bHRpcGxlIGVycm9ycyBvY2N1cnJlZCBmb3IgdGhlICR7cHJvcGVydHlOYW1lfTpcXG5gO1xyXG5cclxuICAgIC8vIEN5Y2xlIHRocm91Z2ggYWxsIGVycm9ycyBhbmQgY3JlYXRlIGEgY29ycmVjdCBtZXNzYWdlXHJcbiAgICBpc3N1ZS51bmlvbkVycm9ycy5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xyXG4gICAgICBjb25zdCBpbmRleCA9IHZhbHVlLmlzc3Vlc1swXS5tZXNzYWdlLmluZGV4T2YoJy0nKTtcclxuICAgICAgbWVzc2FnZSArPVxyXG4gICAgICAgIGluZGV4ICE9PSAtMVxyXG4gICAgICAgICAgPyBgJHt2YWx1ZS5pc3N1ZXNbMF0ubWVzc2FnZX1cXG5gLnN1YnN0cmluZyhpbmRleClcclxuICAgICAgICAgIDogYCR7dmFsdWUuaXNzdWVzWzBdLm1lc3NhZ2V9XFxuYDtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFJldHVybiB0aGUgZmluYWwgbWVzc2FnZSBmb3IgdGhlIGludmFsaWQgdW5pb24gZXJyb3JcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG1lc3NhZ2VcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBSZXR1cm4gdGhlIGRlZmF1bHQgZXJyb3IgbWVzc2FnZSwgZXh0ZW5kZWQgYnkgdGhlIGluZm8gYWJvdXQgdGhlIHByb3BlcnR5XHJcbiAgcmV0dXJuIHtcclxuICAgIG1lc3NhZ2U6IGAke3Byb3BlcnR5SW5mb30gLSAke2NvbnRleHQuZGVmYXVsdEVycm9yfS5gXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHZhbGlkYXRvcnMsXHJcbiAgU3RyaWN0Q29uZmlnU2NoZW1hLFxyXG4gIExvb3NlQ29uZmlnU2NoZW1hLFxyXG4gIEVudlNjaGVtYSxcclxuICBlbnZzLFxyXG4gIHN0cmljdFZhbGlkYXRlLFxyXG4gIGxvb3NlVmFsaWRhdGVcclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQSBjdXN0b20gZXJyb3IgY2xhc3MgZm9yIGhhbmRsaW5nIGV4cG9ydC1yZWxhdGVkIGVycm9ycy4gRXh0ZW5kcyB0aGUgbmF0aXZlXHJcbiAqIGBFcnJvcmAgY2xhc3MgdG8gaW5jbHVkZSBhZGRpdGlvbmFsIHByb3BlcnRpZXMgbGlrZSBzdGF0dXMgY29kZSBhbmQgc3RhY2tcclxuICogdHJhY2UgZGV0YWlscy5cclxuICovXHJcbmNsYXNzIEV4cG9ydEVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIGBFeHBvcnRFcnJvcmAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIFRoZSBlcnJvciBtZXNzYWdlIHRvIGJlIGRpc3BsYXllZC5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhdHVzQ29kZSAtIE9wdGlvbmFsIEhUVFAgc3RhdHVzIGNvZGUgYXNzb2NpYXRlZFxyXG4gICAqIHdpdGggdGhlIGVycm9yIChlLmcuLCA0MDAsIDUwMCkuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhdHVzQ29kZSkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGBtZXNzYWdlYCBhbmQgYHN0YWNrTWVzc2FnZWAgd2l0aCBwcm92aWRlZCBtZXNzYWdlXHJcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgdGhpcy5zdGFja01lc3NhZ2UgPSBtZXNzYWdlO1xyXG5cclxuICAgIC8vIFNldCB0aGUgYHN0YXR1c0NvZGVgIGlmIHByb3ZpZGVkXHJcbiAgICBpZiAoc3RhdHVzQ29kZSkge1xyXG4gICAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyBhZGRpdGlvbmFsIGVycm9yIGRldGFpbHMgYmFzZWQgb24gYW4gZXhpc3RpbmcgZXJyb3Igb2JqZWN0LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgLSBBbiBlcnJvciBvYmplY3QgY29udGFpbmluZyBkZXRhaWxzIHRvIHBvcHVsYXRlXHJcbiAgICogdGhlIGBFeHBvcnRFcnJvcmAgaW5zdGFuY2UuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7RXhwb3J0RXJyb3J9IFRoZSB1cGRhdGVkIGluc3RhbmNlIG9mIHRoZSBgRXhwb3J0RXJyb3JgIGNsYXNzLlxyXG4gICAqL1xyXG4gIHNldEVycm9yKGVycm9yKSB7XHJcbiAgICAvLyBTYXZlIHRoZSBwcm92aWRlZCBlcnJvclxyXG4gICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG5cclxuICAgIC8vIFNldCB0aGUgZXJyb3IncyBuYW1lIGlmIHByZXNlbnRcclxuICAgIGlmIChlcnJvci5uYW1lKSB7XHJcbiAgICAgIHRoaXMubmFtZSA9IGVycm9yLm5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2V0IHRoZSBlcnJvcidzIHN0YXR1cyBjb2RlIGlmIHByZXNlbnRcclxuICAgIGlmIChlcnJvci5zdGF0dXNDb2RlKSB7XHJcbiAgICAgIHRoaXMuc3RhdHVzQ29kZSA9IGVycm9yLnN0YXR1c0NvZGU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2V0IHRoZSBlcnJvcidzIHN0YWNrIGFuZCBzdGFjaydzIG1lc3NhZ2UgaWYgcHJlc2VudFxyXG4gICAgaWYgKGVycm9yLnN0YWNrKSB7XHJcbiAgICAgIHRoaXMuc3RhY2tNZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcclxuICAgICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiB1cGRhdGVkIGBFeHBvcnRFcnJvcmAgaW5zdGFuY2VcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXhwb3J0RXJyb3I7XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBUaGlzIG1vZHVsZSBtYW5hZ2VzIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBIaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuICogYnkgbG9hZGluZyBhbmQgbWVyZ2luZyBvcHRpb25zIGZyb20gbXVsdGlwbGUgc291cmNlcywgc3VjaCBhcyB0aGUgZGVmYXVsdFxyXG4gKiBzZXR0aW5ncywgZW52aXJvbm1lbnQgdmFyaWFibGVzLCB1c2VyLXByb3ZpZGVkIG9wdGlvbnMsIGFuZCBjb21tYW5kLWxpbmVcclxuICogYXJndW1lbnRzLiBFbnN1cmVzIHRoZSBnbG9iYWwgb3B0aW9ucyBhcmUgdXAtdG8tZGF0ZSB3aXRoIHRoZSBoaWdoZXN0XHJcbiAqIHByaW9yaXR5IHZhbHVlcy4gUHJvdmlkZXMgZnVuY3Rpb25zIGZvciBhY2Nlc3NpbmcgYW5kIHVwZGF0aW5nIGNvbmZpZ3VyYXRpb24uXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnO1xyXG5cclxuaW1wb3J0IHsgbG9nLCBsb2dXaXRoU3RhY2ssIGxvZ1pvZElzc3VlcyB9IGZyb20gJy4vbG9nZ2VyLmpzJztcclxuaW1wb3J0IHsgZGVlcENvcHksIGdldEFic29sdXRlUGF0aCwgaXNPYmplY3QgfSBmcm9tICcuL3V0aWxzLmpzJztcclxuaW1wb3J0IHtcclxuICBlbnZzLFxyXG4gIGxvb3NlVmFsaWRhdGUsXHJcbiAgc3RyaWN0VmFsaWRhdGUsXHJcbiAgdmFsaWRhdG9yc1xyXG59IGZyb20gJy4vdmFsaWRhdGlvbi5qcyc7XHJcblxyXG5pbXBvcnQgZGVmYXVsdENvbmZpZyBmcm9tICcuL3NjaGVtYXMvY29uZmlnLmpzJztcclxuXHJcbmltcG9ydCBFeHBvcnRFcnJvciBmcm9tICcuL2Vycm9ycy9FeHBvcnRFcnJvci5qcyc7XHJcblxyXG4vLyBTZXRzIHRoZSBnbG9iYWwgb3B0aW9ucyB3aXRoIGluaXRpYWwgdmFsdWVzIGZyb20gdGhlIGRlZmF1bHQgY29uZmlnXHJcbmNvbnN0IGdsb2JhbE9wdGlvbnMgPSBfaW5pdE9wdGlvbnMoZGVmYXVsdENvbmZpZyk7XHJcblxyXG4vLyBQcm9wZXJ0aWVzIG5lc3RpbmcgbGV2ZWwgb2YgYWxsIG9wdGlvbnNcclxuY29uc3QgbmVzdGVkUHJvcHMgPSBfY3JlYXRlTmVzdGVkUHJvcHMoZGVmYXVsdENvbmZpZyk7XHJcblxyXG4vLyBQcm9wZXJ0aWVzIG5hbWVzIHRoYXQgc2hvdWxkIG5vdCBiZSByZWN1cnNpdmVseSBtZXJnZWRcclxuY29uc3QgYWJzb2x1dGVQcm9wcyA9IF9jcmVhdGVBYnNvbHV0ZVByb3BzKGRlZmF1bHRDb25maWcpO1xyXG5cclxuLyoqXHJcbiAqIFJldHJpZXZlcyBhIGNvcHkgb2YgdGhlIGdsb2JhbCBvcHRpb25zIG9iamVjdCBvciBhbiBvcmlnaW5hbCBnbG9iYWwgb3B0aW9uc1xyXG4gKiBvYmplY3QsIGJhc2VkIG9uIHRoZSBgZ2V0Q29weWAgZmxhZy5cclxuICpcclxuICogQGZ1bmN0aW9uIGdldE9wdGlvbnNcclxuICpcclxuICogQHBhcmFtIHtib29sZWFufSBbZ2V0Q29weT10cnVlXSAtIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiBhIGNvcGllZFxyXG4gKiBvYmplY3Qgb2YgdGhlIGdsb2JhbCBvcHRpb25zIChgdHJ1ZWApIG9yIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb3B0aW9uc1xyXG4gKiBvYmplY3QgKGBmYWxzZWApLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgdHJ1ZWAuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IEEgY29weSBvZiB0aGUgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0LCBvciBhIHJlZmVyZW5jZVxyXG4gKiB0byB0aGUgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wdGlvbnMoZ2V0Q29weSA9IHRydWUpIHtcclxuICAvLyBSZXR1cm4gYSBjb3B5IG9yIGFuIG9yaWdpbmFsIGdsb2JhbCBvcHRpb25zIG9iamVjdFxyXG4gIHJldHVybiBnZXRDb3B5ID8gZGVlcENvcHkoZ2xvYmFsT3B0aW9ucykgOiBnbG9iYWxPcHRpb25zO1xyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlcyBhbmQgcmV0dXJucyB0aGUgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0IG9yIGEgY29weSBvZiB0aGUgZ2xvYmFsIG9wdGlvbnNcclxuICogb2JqZWN0LCBiYXNlZCBvbiB0aGUgYGdldENvcHlgIGZsYWcuIFRoZSBgbmV3T3B0aW9uc2Agb2JqZWN0IGNhbiBiZVxyXG4gKiBzdHJpY3RseSB2YWxpZGF0ZWQgZGVwZW5kaW5nIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIGZsYWcuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiB1cGRhdGVPcHRpb25zXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBuZXdPcHRpb25zIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG5ldyBvcHRpb25zIHRvIGJlXHJcbiAqIG1lcmdlZCBpbnRvIHRoZSBnbG9iYWwgb3B0aW9ucy5cclxuICogQHBhcmFtIHtib29sZWFufSBbZ2V0Q29weT1mYWxzZV0gLSBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gbWVyZ2UgdGhlIG5ld1xyXG4gKiBvcHRpb25zIGludG8gYSBjb3B5IG9mIHRoZSBnbG9iYWwgb3B0aW9ucyBvYmplY3QgKGB0cnVlYCkgb3IgZGlyZWN0bHkgaW50b1xyXG4gKiB0aGUgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0IChgZmFsc2VgKS4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cclxuICogQHBhcmFtIHtib29sZWFufSBbc3RyaWN0Q2hlY2s9dHJ1ZV0gLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb25cclxuICogc2hvdWxkIGJlIGFwcGxpZWQuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIHVwZGF0ZWQgb3B0aW9ucyBvYmplY3QsIGVpdGhlciB0aGUgbW9kaWZpZWQgZ2xvYmFsXHJcbiAqIG9wdGlvbnMgb3IgYSBtb2RpZmllZCBjb3B5LCBiYXNlZCBvbiB0aGUgdmFsdWUgb2YgYGdldENvcHlgLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMobmV3T3B0aW9ucywgZ2V0Q29weSA9IGZhbHNlLCBzdHJpY3RDaGVjayA9IHRydWUpIHtcclxuICAvLyBNZXJnZSBuZXcgb3B0aW9ucyB0byB0aGUgZ2xvYmFsIG9wdGlvbnMgb3IgaXRzIGNvcHkgYW5kIHJldHVybiB0aGUgcmVzdWx0XHJcbiAgcmV0dXJuIF9tZXJnZU9wdGlvbnMoXHJcbiAgICAvLyBGaXJzdCwgZ2V0IHRoZSBvcHRpb25zXHJcbiAgICBnZXRPcHRpb25zKGdldENvcHkpLFxyXG4gICAgLy8gTmV4dCwgdmFsaWRhdGUgdGhlIG5ldyBvcHRpb25zXHJcbiAgICB2YWxpZGF0ZU9wdGlvbnMobmV3T3B0aW9ucywgc3RyaWN0Q2hlY2spXHJcbiAgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZXMgYW5kIHJldHVybnMgdGhlIGdsb2JhbCBvcHRpb25zIG9iamVjdCB3aXRoIHZhbHVlcyBwcm92aWRlZCB0aHJvdWdoXHJcbiAqIHRoZSBDTEksIGtlZXBpbmcgdGhlIHByaW5jaXBsZSBvZiBvcHRpb25zIGxvYWQgcHJpb3JpdHkuIFRoZSBmdW5jdGlvbiBhY2NlcHRzXHJcbiAqIGEgYGNsaUFyZ3NgIGFycmF5IGNvbnRhaW5pbmcgYXJndW1lbnRzIGZyb20gdGhlIENMSSwgd2hpY2ggd2lsbCBiZSB2YWxpZGF0ZWRcclxuICogYW5kIGFwcGxpZWQgaWYgcHJvdmlkZWQuXHJcbiAqXHJcbiAqIFRoZSBmdW5jdGlvbiBwcmlvcml0aXplcyB2YWx1ZXMgaW4gdGhlIGZvbGxvd2luZyBvcmRlcjpcclxuICpcclxuICogMS4gVmFsdWVzIGZyb20gdGhlIGNvbW1hbmQgbGluZSBpbnRlcmZhY2UgKENMSSkuXHJcbiAqIDIuIFZhbHVlcyBmcm9tIGEgY3VzdG9tIEpTT04gZmlsZSAobG9hZGVkIGJ5IHRoZSBgLS1sb2FkQ29uZmlnYCBvcHRpb24pLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gc2V0Q2xpT3B0aW9uc1xyXG4gKlxyXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGNsaUFyZ3MgLSBBbiBhcnJheSBvZiBjb21tYW5kIGxpbmUgYXJndW1lbnRzIHVzZWRcclxuICogZm9yIGFkZGl0aW9uYWwgY29uZmlndXJhdGlvbi5cclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIHVwZGF0ZWQgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0LCByZWZsZWN0aW5nIHRoZSBtZXJnZWRcclxuICogY29uZmlndXJhdGlvbiBmcm9tIHNvdXJjZXMgcHJvdmlkZWQgdGhyb3VnaCB0aGUgQ0xJLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldENsaU9wdGlvbnMoY2xpQXJncykge1xyXG4gIC8vIE9ubHkgZm9yIHRoZSBDTEkgdXNhZ2VcclxuICBpZiAoY2xpQXJncyAmJiBBcnJheS5pc0FycmF5KGNsaUFyZ3MpICYmIGNsaUFyZ3MubGVuZ3RoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBHZXQgb3B0aW9ucyBmcm9tIHRoZSBjdXN0b20gSlNPTiBsb2FkZWQgdmlhIHRoZSBgLS1sb2FkQ29uZmlnYFxyXG4gICAgICBjb25zdCBjb25maWdPcHRpb25zID0gX2xvYWRDb25maWdGaWxlKGNsaUFyZ3MpO1xyXG5cclxuICAgICAgLy8gVXBkYXRlIGdsb2JhbCBvcHRpb25zIHdpdGggdmFsaWRhdGVkIHZhbHVlcyBmcm9tIHRoZSBgY29uZmlnT3B0aW9uc2BcclxuICAgICAgdXBkYXRlT3B0aW9ucyhjb25maWdPcHRpb25zKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZygyLCAnW3ZhbGlkYXRpb25dIE5vIG9wdGlvbnMgYWRkZWQgZnJvbSB0aGUgYC0tbG9hZENvbmZpZ2Agb3B0aW9uLicpO1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEdldCBvcHRpb25zIGZyb20gdGhlIENMSVxyXG4gICAgICBjb25zdCBjbGlPcHRpb25zID0gX3BhaXJBcmd1bWVudFZhbHVlKGNsaUFyZ3MpO1xyXG5cclxuICAgICAgLy8gVXBkYXRlIGdsb2JhbCBvcHRpb25zIHdpdGggdmFsaWRhdGVkIHZhbHVlcyBmcm9tIHRoZSBgY2xpT3B0aW9uc2BcclxuICAgICAgdXBkYXRlT3B0aW9ucyhjbGlPcHRpb25zLCBmYWxzZSwgZmFsc2UpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgbG9nKDIsICdbdmFsaWRhdGlvbl0gTm8gb3B0aW9ucyBhZGRlZCBmcm9tIHRoZSBDTEkgYXJndW1lbnRzLicpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUmV0dXJuIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9wdGlvbnNcclxuICByZXR1cm4gZ2V0T3B0aW9ucyhmYWxzZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYXBzIG9sZC1zdHJ1Y3R1cmVkIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyAoUGhhbnRvbUpTLWJhc2VkKSB0byBhIG5ldyBmb3JtYXRcclxuICogKFB1cHBldGVlci1iYXNlZCkuIFRoaXMgZnVuY3Rpb24gY29udmVydHMgZmxhdCwgb2xkLXN0cnVjdHVyZWQgb3B0aW9ucyBpbnRvXHJcbiAqIGEgbmV3LCBuZXN0ZWQgY29uZmlndXJhdGlvbiBmb3JtYXQgYmFzZWQgb24gYSBwcmVkZWZpbmVkIG1hcHBpbmcgcHJvdmlkZWRcclxuICogaW4gdGhlIGBuZXN0ZWRQcm9wc2Agb2JqZWN0LiBUaGUgbmV3IGZvcm1hdCBpcyB1c2VkIGZvciBQdXBwZXRlZXIsIHdoaWxlXHJcbiAqIHRoZSBvbGQgZm9ybWF0IHdhcyB1c2VkIGZvciBQaGFudG9tSlMuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBtYXBUb05ld09wdGlvbnNcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9sZE9wdGlvbnMgLSBUaGUgb2xkLCBmbGF0IGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xyXG4gKiB0byBiZSBjb252ZXJ0ZWQuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IEEgbmV3IG9iamVjdCBjb250YWluaW5nIG9wdGlvbnMgc3RydWN0dXJlZCBhY2NvcmRpbmdcclxuICogdG8gdGhlIG1hcHBpbmcgZGVmaW5lZCBpbiB0aGUgYG5lc3RlZFByb3BzYCBvYmplY3Qgb3IgYW4gZW1wdHkgb2JqZWN0XHJcbiAqIGlmIHRoZSBwcm92aWRlZCBgb2xkT3B0aW9uc2AgaXMgbm90IGEgY29ycmVjdCBvYmplY3QuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbWFwVG9OZXdPcHRpb25zKG9sZE9wdGlvbnMpIHtcclxuICAvLyBBbiBvYmplY3QgZm9yIHRoZSBuZXcgc3RydWN0dXJlZCBvcHRpb25zXHJcbiAgY29uc3QgbmV3T3B0aW9ucyA9IHt9O1xyXG5cclxuICAvLyBDaGVjayBpZiBwcm92aWRlZCB2YWx1ZSBpcyBhIGNvcnJlY3Qgb2JqZWN0XHJcbiAgaWYgKGlzT2JqZWN0KG9sZE9wdGlvbnMpKSB7XHJcbiAgICAvLyBJdGVyYXRlIG92ZXIgZWFjaCBrZXktdmFsdWUgcGFpciBpbiB0aGUgb2xkLXN0cnVjdHVyZWQgb3B0aW9uc1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2xkT3B0aW9ucykpIHtcclxuICAgICAgLy8gSWYgdGhlcmUgaXMgYSBuZXN0ZWQgbWFwcGluZywgc3BsaXQgaXQgaW50byBhIHByb3BlcnRpZXMgY2hhaW5cclxuICAgICAgY29uc3QgcHJvcGVydGllc0NoYWluID0gbmVzdGVkUHJvcHNba2V5XVxyXG4gICAgICAgID8gbmVzdGVkUHJvcHNba2V5XS5zcGxpdCgnLicpXHJcbiAgICAgICAgOiBbXTtcclxuXHJcbiAgICAgIC8vIElmIGl0IGlzIHRoZSBsYXN0IHByb3BlcnR5IGluIHRoZSBjaGFpbiwgYXNzaWduIHRoZSB2YWx1ZSwgb3RoZXJ3aXNlLFxyXG4gICAgICAvLyBjcmVhdGUgb3IgcmV1c2UgdGhlIG5lc3RlZCBvYmplY3RcclxuICAgICAgcHJvcGVydGllc0NoYWluLnJlZHVjZShcclxuICAgICAgICAob2JqLCBwcm9wLCBpbmRleCkgPT5cclxuICAgICAgICAgIChvYmpbcHJvcF0gPVxyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzQ2hhaW4ubGVuZ3RoIC0gMSA9PT0gaW5kZXggPyB2YWx1ZSA6IG9ialtwcm9wXSB8fCB7fSksXHJcbiAgICAgICAgbmV3T3B0aW9uc1xyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBsb2coXHJcbiAgICAgIDIsXHJcbiAgICAgICdbY29uZmlnXSBObyBjb3JyZWN0IG9iamVjdCB3aXRoIG9wdGlvbnMgd2FzIHByb3ZpZGVkLiBSZXR1cm5pbmcgYW4gZW1wdHkgb2JqZWN0LidcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBSZXR1cm4gdGhlIG5ldywgc3RydWN0dXJlZCBvcHRpb25zIG9iamVjdFxyXG4gIHJldHVybiBuZXdPcHRpb25zO1xyXG59XHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIGEgc3BlY2lmaWVkIG9wdGlvbiB1c2luZyB0aGUgY29ycmVzcG9uZGluZyB2YWxpZGF0b3IgZnJvbSB0aGVcclxuICogY29uZmlndXJhdGlvbiBvYmplY3QuIFJldHVybnMgdGhlIG9yaWdpbmFsIG9wdGlvbiBpZiB0aGUgdmFsaWRhdGlvblxyXG4gKiBpcyBkaXNhYmxlZCBnbG9iYWxseS5cclxuICpcclxuICogQGZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIG9wdGlvbiB0byB2YWxpZGF0ZS5cclxuICogQHBhcmFtIHthbnl9IGNvbmZpZ09wdGlvbiAtIFRoZSB2YWx1ZSBvZiB0aGUgb3B0aW9uIHRvIHZhbGlkYXRlLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtzdHJpY3RDaGVjaz10cnVlXSAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvblxyXG4gKiBzaG91bGQgYmUgYXBwbGllZC4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYHRydWVgLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSBUaGUgcGFyc2VkIGFuZCB2YWxpZGF0ZWQgdmFsdWUgb2YgdGhlIG9wdGlvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbihuYW1lLCBjb25maWdPcHRpb24sIHN0cmljdENoZWNrID0gdHJ1ZSkge1xyXG4gIC8vIFJldHVybiB0aGUgb3JpZ2luYWwgb3B0aW9uIGlmIHRoZSB2YWxpZGF0aW9uIGlzIGRpc2FibGVkXHJcbiAgaWYgKCFnZXRPcHRpb25zKCkub3RoZXIudmFsaWRhdGlvbikge1xyXG4gICAgcmV0dXJuIGNvbmZpZ09wdGlvbjtcclxuICB9XHJcblxyXG4gIHRyeSB7XHJcbiAgICAvLyBSZXR1cm4gdmFsaWRhdGVkIG9wdGlvblxyXG4gICAgcmV0dXJuIHZhbGlkYXRvcnNbbmFtZV0oc3RyaWN0Q2hlY2spLnBhcnNlKGNvbmZpZ09wdGlvbik7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIC8vIExvZyBab2QgaXNzdWVzXHJcbiAgICBsb2dab2RJc3N1ZXMoXHJcbiAgICAgIDEsXHJcbiAgICAgIGVycm9yLmlzc3VlcyxcclxuICAgICAgYFt2YWxpZGF0aW9uXSBUaGUgJHtuYW1lfSBvcHRpb24gdmFsaWRhdGlvbiBlcnJvcmBcclxuICAgICk7XHJcblxyXG4gICAgLy8gVGhyb3cgdmFsaWRhdGlvbiBlcnJvclxyXG4gICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICBgW3ZhbGlkYXRpb25dIFRoZSAke25hbWV9IG9wdGlvbiB2YWxpZGF0aW9uIGVycm9yYCxcclxuICAgICAgNDAwXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyB0aGUgcHJvdmlkZWQgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgZXhwb3J0aW5nIHByb2Nlc3MuXHJcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIG9wdGlvbiBpZiB0aGUgdmFsaWRhdGlvbiBpcyBkaXNhYmxlZCBnbG9iYWxseS5cclxuICpcclxuICogQGZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9uc1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnT3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gYmUgdmFsaWRhdGVkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtzdHJpY3RDaGVjaz10cnVlXSAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvblxyXG4gKiBzaG91bGQgYmUgYXBwbGllZC4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYHRydWVgLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcGFyc2VkIGFuZCB2YWxpZGF0ZWQgY29uZmlndXJhdGlvbiBvcHRpb25zIG9iamVjdC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMoY29uZmlnT3B0aW9ucywgc3RyaWN0Q2hlY2sgPSB0cnVlKSB7XHJcbiAgLy8gUmV0dXJuIHRoZSBvcmlnaW5hbCBjb25maWcgaWYgdGhlIHZhbGlkYXRpb24gaXMgZGlzYWJsZWRcclxuICBpZiAoIWdldE9wdGlvbnMoKS5vdGhlci52YWxpZGF0aW9uKSB7XHJcbiAgICByZXR1cm4gY29uZmlnT3B0aW9ucztcclxuICB9XHJcblxyXG4gIHRyeSB7XHJcbiAgICAvLyBSZXR1cm4gdmFsaWRhdGVkIG9wdGlvbnNcclxuICAgIHJldHVybiBzdHJpY3RDaGVja1xyXG4gICAgICA/IHN0cmljdFZhbGlkYXRlKGNvbmZpZ09wdGlvbnMpXHJcbiAgICAgIDogbG9vc2VWYWxpZGF0ZShjb25maWdPcHRpb25zKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgLy8gTG9nIFpvZCBpc3N1ZXNcclxuICAgIGxvZ1pvZElzc3VlcygxLCBlcnJvci5pc3N1ZXMsICdbdmFsaWRhdGlvbl0gT3B0aW9ucyB2YWxpZGF0aW9uIGVycm9yJyk7XHJcblxyXG4gICAgLy8gVGhyb3cgdmFsaWRhdGlvbiBlcnJvclxyXG4gICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKCdbdmFsaWRhdGlvbl0gT3B0aW9ucyB2YWxpZGF0aW9uIGVycm9yJywgNDAwKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMsIHBhcnNlcywgYW5kIGNoZWNrcyBpZiB0aGUgcHJvdmlkZWQgY29uZmlnIGlzIGFsbG93ZWQgc2V0XHJcbiAqIG9mIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBpc0FsbG93ZWRDb25maWdcclxuICpcclxuICogQHBhcmFtIHt1bmtub3dufSBjb25maWcgLSBUaGUgY29uZmlnIHRvIGJlIHZhbGlkYXRlZCBhbmQgcGFyc2VkIGFzIGEgc2V0XHJcbiAqIG9mIG9wdGlvbnMuIE11c3QgYmUgZWl0aGVyIGFuIG9iamVjdCBvciBhIHN0cmluZy5cclxuICogQHBhcmFtIHtib29sZWFufSBbdG9TdHJpbmc9ZmFsc2VdIC0gV2hldGhlciB0byByZXR1cm4gYSBzdHJpbmdpZmllZCB2ZXJzaW9uXHJcbiAqIG9mIHRoZSBwYXJzZWQgY29uZmlnLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFthbGxvd0Z1bmN0aW9ucz1mYWxzZV0gLSBXaGV0aGVyIHRvIGFsbG93IGZ1bmN0aW9uc1xyXG4gKiBpbiB0aGUgcGFyc2VkIGNvbmZpZy4gSWYgYHRydWVgLCBmdW5jdGlvbnMgYXJlIHByZXNlcnZlZC4gT3RoZXJ3aXNlLCB3aGVuXHJcbiAqIGEgZnVuY3Rpb24gaXMgZm91bmQsIGBudWxsYCBpcyByZXR1cm5lZC4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cclxuICpcclxuICogQHJldHVybnMgeyhPYmplY3R8c3RyaW5nfG51bGwpfSBSZXR1cm5zIGEgcGFyc2VkIHNldCBvZiBvcHRpb25zIG9iamVjdCxcclxuICogYSBzdHJpbmdpZmllZCBzZXQgb2Ygb3B0aW9ucyBvYmplY3QgaWYgdGhlIGB0b1N0cmluZ2AgaXMgYHRydWVgLCBhbmQgYG51bGxgXHJcbiAqIGlmIHRoZSBjb25maWcgaXMgbm90IGEgdmFsaWQgc2V0IG9mIG9wdGlvbnMgb3IgcGFyc2luZyBmYWlscy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0FsbG93ZWRDb25maWcoXHJcbiAgY29uZmlnLFxyXG4gIHRvU3RyaW5nID0gZmFsc2UsXHJcbiAgYWxsb3dGdW5jdGlvbnMgPSBmYWxzZVxyXG4pIHtcclxuICB0cnkge1xyXG4gICAgLy8gQWNjZXB0IG9ubHkgb2JqZWN0cyBhbmQgc3RyaW5nc1xyXG4gICAgaWYgKCFpc09iamVjdChjb25maWcpICYmIHR5cGVvZiBjb25maWcgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIC8vIFJldHVybiBgbnVsbGAgaWYgYW55IG90aGVyIHR5cGVcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0IHRoZSBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9yaWdpbmFsIGNvbmZpZ1xyXG4gICAgY29uc3Qgb2JqZWN0Q29uZmlnID1cclxuICAgICAgdHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZydcclxuICAgICAgICA/IGFsbG93RnVuY3Rpb25zXHJcbiAgICAgICAgICA/IGV2YWwoYCgke2NvbmZpZ30pYClcclxuICAgICAgICAgIDogSlNPTi5wYXJzZShjb25maWcpXHJcbiAgICAgICAgOiBjb25maWc7XHJcblxyXG4gICAgLy8gUHJlc2VydmUgb3IgcmVtb3ZlIHBvdGVudGlhbCBmdW5jdGlvbnMgYmFzZWQgb24gdGhlIGBhbGxvd0Z1bmN0aW9uc2AgZmxhZ1xyXG4gICAgY29uc3Qgc3RyaW5naWZpZWRPcHRpb25zID0gX29wdGlvbnNTdHJpbmdpZnkoXHJcbiAgICAgIG9iamVjdENvbmZpZyxcclxuICAgICAgYWxsb3dGdW5jdGlvbnMsXHJcbiAgICAgIGZhbHNlXHJcbiAgICApO1xyXG5cclxuICAgIC8vIFBhcnNlIHRoZSBjb25maWcgdG8gY2hlY2sgaWYgaXQgaXMgdmFsaWQgc2V0IG9mIG9wdGlvbnNcclxuICAgIGNvbnN0IHBhcnNlZE9wdGlvbnMgPSBhbGxvd0Z1bmN0aW9uc1xyXG4gICAgICA/IEpTT04ucGFyc2UoXHJcbiAgICAgICAgICBfb3B0aW9uc1N0cmluZ2lmeShvYmplY3RDb25maWcsIGFsbG93RnVuY3Rpb25zLCB0cnVlKSxcclxuICAgICAgICAgIChfLCB2YWx1ZSkgPT5cclxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5zdGFydHNXaXRoKCdmdW5jdGlvbicpXHJcbiAgICAgICAgICAgICAgPyBldmFsKGAoJHt2YWx1ZX0pYClcclxuICAgICAgICAgICAgICA6IHZhbHVlXHJcbiAgICAgICAgKVxyXG4gICAgICA6IEpTT04ucGFyc2Uoc3RyaW5naWZpZWRPcHRpb25zKTtcclxuXHJcbiAgICAvLyBSZXR1cm4gc3RyaW5naWZpZWQgb3Igb2JqZWN0IG9wdGlvbnMgYmFzZWQgb24gdGhlIGB0b1N0cmluZ2AgZmxhZ1xyXG4gICAgcmV0dXJuIHRvU3RyaW5nID8gc3RyaW5naWZpZWRPcHRpb25zIDogcGFyc2VkT3B0aW9ucztcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgLy8gUmV0dXJuIGBudWxsYCBpZiBwYXJzaW5nIGZhaWxzXHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplcyBhbmQgcmV0dXJucyB0aGUgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0IGJhc2VkIG9uIHRoZSBwcm92aWRlZFxyXG4gKiBjb25maWd1cmF0aW9uLCBzZXR0aW5nIHZhbHVlcyBmcm9tIG5lc3RlZCBwcm9wZXJ0aWVzIHJlY3Vyc2l2ZWx5LlxyXG4gKlxyXG4gKiBUaGUgZnVuY3Rpb24gcHJpb3JpdGl6ZXMgdmFsdWVzIGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6XHJcbiAqXHJcbiAqIDEuIFZhbHVlcyBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcyAoc3BlY2lmaWVkIGluIHRoZSBgLmVudmAgZmlsZSkuXHJcbiAqIDIuIFZhbHVlcyBmcm9tIHRoZSBgLi9saWIvc2NoZW1hcy9jb25maWcuanNgIGZpbGUgKGRlZmF1bHRzKS5cclxuICpcclxuICogQGZ1bmN0aW9uIF9pbml0T3B0aW9uc1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHVzZWQgZm9yIGluaXRpYWxpemluZ1xyXG4gKiB0aGUgZ2xvYmFsIG9wdGlvbnMuIEl0IHNob3VsZCBpbmNsdWRlIG5lc3RlZCBwcm9wZXJ0aWVzIHdpdGggYSBgdmFsdWVgXHJcbiAqIGFuZCBhbiBgZW52TGlua2AgZm9yIGxpbmtpbmcgdG8gZW52aXJvbm1lbnQgdmFyaWFibGVzLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgaW5pdGlhbGl6ZWQgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0LCBwb3B1bGF0ZWQgd2l0aFxyXG4gKiB2YWx1ZXMgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGNvbmZpZ3VyYXRpb24gYW5kIHRoZSBlc3RhYmxpc2hlZCBwcmlvcml0eVxyXG4gKiBvcmRlci5cclxuICovXHJcbmZ1bmN0aW9uIF9pbml0T3B0aW9ucyhjb25maWcpIHtcclxuICAvLyBJbml0IHRoZSBvYmplY3QgZm9yIG9wdGlvbnNcclxuICBjb25zdCBvcHRpb25zID0ge307XHJcblxyXG4gIC8vIFN0YXJ0IGluaXRpYWxpemluZyB0aGUgYG9wdGlvbnNgIG9iamVjdCByZWN1cnNpdmVseVxyXG4gIGZvciAoY29uc3QgW25hbWUsIGl0ZW1dIG9mIE9iamVjdC5lbnRyaWVzKGNvbmZpZykpIHtcclxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaXRlbSwgJ3ZhbHVlJykpIHtcclxuICAgICAgLy8gU2V0IHRoZSBjb3JyZWN0IHZhbHVlIGJhc2VkIG9uIHRoZSBlc3RhYmxpc2hlZCBwcmlvcml0eSBvcmRlclxyXG4gICAgICBpZiAoZW52c1tpdGVtLmVudkxpbmtdICE9PSB1bmRlZmluZWQgJiYgZW52c1tpdGVtLmVudkxpbmtdICE9PSBudWxsKSB7XHJcbiAgICAgICAgLy8gVGhlIGVudmlyb25tZW50IHZhcmlhYmxlcyB2YWx1ZVxyXG4gICAgICAgIG9wdGlvbnNbbmFtZV0gPSBlbnZzW2l0ZW0uZW52TGlua107XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gVGhlIHZhbHVlIGZyb20gdGhlIGNvbmZpZyBmaWxlXHJcbiAgICAgICAgb3B0aW9uc1tuYW1lXSA9IGl0ZW0udmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIENyZWF0ZSBhIGNhdGVnb3J5IG9mIG9wdGlvbnMgaW4gdGhlIGBvcHRpb25zYCBvYmplY3RcclxuICAgICAgb3B0aW9uc1tuYW1lXSA9IF9pbml0T3B0aW9ucyhpdGVtKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJldHVybiB0aGUgY3JlYXRlZCBgb3B0aW9uc2Agb2JqZWN0XHJcbiAgcmV0dXJuIG9wdGlvbnM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWN1cnNpdmVseSBtZXJnZXMgdHdvIHNldHMgb2YgY29uZmlndXJhdGlvbiBvcHRpb25zLCB0YWtpbmcgaW50byBhY2NvdW50XHJcbiAqIHByb3BlcnRpZXMgc3BlY2lmaWVkIGluIHRoZSBgYWJzb2x1dGVQcm9wc2AgYXJyYXkgdGhhdCByZXF1aXJlIGFic29sdXRlXHJcbiAqIG1lcmdpbmcuIFRoZSBgb3JpZ2luYWxPcHRpb25zYCBvYmplY3Qgd2lsbCBiZSBleHRlbmRlZCB3aXRoIG9wdGlvbnMgZnJvbVxyXG4gKiB0aGUgYG5ld09wdGlvbnNgIG9iamVjdC5cclxuICpcclxuICogQGZ1bmN0aW9uIF9tZXJnZU9wdGlvbnNcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9yaWdpbmFsT3B0aW9ucyAtIFRoZSBvcmlnaW5hbCBjb25maWd1cmF0aW9uIG9wdGlvbnMgb2JqZWN0XHJcbiAqIHRvIGJlIGV4dGVuZGVkLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gbmV3T3B0aW9ucyAtIFRoZSBuZXcgY29uZmlndXJhdGlvbiBvcHRpb25zIG9iamVjdCB0byBtZXJnZS5cclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIGV4dGVuZGVkIGBvcmlnaW5hbE9wdGlvbnNgIG9iamVjdC5cclxuICovXHJcbmZ1bmN0aW9uIF9tZXJnZU9wdGlvbnMob3JpZ2luYWxPcHRpb25zLCBuZXdPcHRpb25zKSB7XHJcbiAgLy8gQ2hlY2sgaWYgdGhlIGBvcmlnaW5hbE9wdGlvbnNgIGFuZCBgbmV3T3B0aW9uc2AgYXJlIGNvcnJlY3Qgb2JqZWN0c1xyXG4gIGlmIChpc09iamVjdChvcmlnaW5hbE9wdGlvbnMpICYmIGlzT2JqZWN0KG5ld09wdGlvbnMpKSB7XHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhuZXdPcHRpb25zKSkge1xyXG4gICAgICBvcmlnaW5hbE9wdGlvbnNba2V5XSA9XHJcbiAgICAgICAgaXNPYmplY3QodmFsdWUpICYmXHJcbiAgICAgICAgIWFic29sdXRlUHJvcHMuaW5jbHVkZXMoa2V5KSAmJlxyXG4gICAgICAgIG9yaWdpbmFsT3B0aW9uc1trZXldICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgID8gX21lcmdlT3B0aW9ucyhvcmlnaW5hbE9wdGlvbnNba2V5XSwgdmFsdWUpXHJcbiAgICAgICAgICA6IHZhbHVlICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgPyB2YWx1ZVxyXG4gICAgICAgICAgICA6IG9yaWdpbmFsT3B0aW9uc1trZXldIHx8IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBSZXR1cm4gdGhlIG9yaWdpbmFsIChtb2RpZmllZCBvciBub3QpIG9wdGlvbnNcclxuICByZXR1cm4gb3JpZ2luYWxPcHRpb25zO1xyXG59XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhlIHByb3ZpZGVkIG9wdGlvbnMgb2JqZWN0IHRvIGEgSlNPTiBzdHJpbmcgd2l0aCB0aGUgb3B0aW9uXHJcbiAqIHRvIHByZXNlcnZlIGZ1bmN0aW9ucy4gSW4gb3JkZXIgZm9yIGEgZnVuY3Rpb24gdG8gYmUgcHJlc2VydmVkLCBpdCBuZWVkc1xyXG4gKiB0byBmb2xsb3cgdGhlIGZvcm1hdCBgZnVuY3Rpb24gKC4uLikgey4uLn1gLiBTdWNoIGEgZnVuY3Rpb24gY2FuIGFsc29cclxuICogYmUgc3RyaW5naWZpZWQuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBfb3B0aW9uc1N0cmluZ2lmeVxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIG9iamVjdCB0byBiZSBjb252ZXJ0ZWQgdG8gYSBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWxsb3dGdW5jdGlvbnMgLSBJZiBzZXQgdG8gYHRydWVgLCBmdW5jdGlvbnMgYXJlIHByZXNlcnZlZFxyXG4gKiBpbiB0aGUgb3V0cHV0LiBPdGhlcndpc2UgYW4gZXJyb3IgaXMgdGhyb3duLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmluZ2lmeUZ1bmN0aW9ucyAtIElmIHNldCB0byBgdHJ1ZWAsIGZ1bmN0aW9ucyBhcmUgc2F2ZWRcclxuICogYXMgc3RyaW5ncy4gVGhlIGBhbGxvd0Z1bmN0aW9uc2AgbXVzdCBiZSBzZXQgdG8gYHRydWVgIGFzIHdlbGwgZm9yIHRoaXNcclxuICogdG8gdGFrZSBhbiBlZmZlY3QuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBKU09OLWZvcm1hdHRlZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBvcHRpb25zLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gVGhyb3dzIGFuIGBFcnJvcmAgd2hlbiBmdW5jdGlvbnMgYXJlIG5vdCBhbGxvd2VkIGJ1dCBhcmVcclxuICogZm91bmQgaW4gcHJvdmlkZWQgb3B0aW9ucyBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBfb3B0aW9uc1N0cmluZ2lmeShvcHRpb25zLCBhbGxvd0Z1bmN0aW9ucywgc3RyaW5naWZ5RnVuY3Rpb25zKSB7XHJcbiAgY29uc3QgcmVwbGFjZXJDYWxsYmFjayA9IChfLCB2YWx1ZSkgPT4ge1xyXG4gICAgLy8gVHJpbSBzdHJpbmcgdmFsdWVzXHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24gb3Igc3RyaW5naWZpZWQgZnVuY3Rpb25cclxuICAgIGlmIChcclxuICAgICAgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nIHx8XHJcbiAgICAgICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmXHJcbiAgICAgICAgdmFsdWUuc3RhcnRzV2l0aCgnZnVuY3Rpb24nKSAmJlxyXG4gICAgICAgIHZhbHVlLmVuZHNXaXRoKCd9JykpXHJcbiAgICApIHtcclxuICAgICAgLy8gSWYgdGhlIGBhbGxvd0Z1bmN0aW9uc2AgaXMgc2V0IHRvIGB0cnVlYCwgcHJlc2VydmUgZnVuY3Rpb25zXHJcbiAgICAgIGlmIChhbGxvd0Z1bmN0aW9ucykge1xyXG4gICAgICAgIC8vIEJhc2VkIG9uIHRoZSBgc3RyaW5naWZ5RnVuY3Rpb25zYCBvcHRpb25zLCBzZXQgZnVuY3Rpb24gdmFsdWVzXHJcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeUZ1bmN0aW9uc1xyXG4gICAgICAgICAgPyAvLyBBcyBzdHJpbmdpZmllZCBmdW5jdGlvbnNcclxuICAgICAgICAgICAgYFwiRVhQX0ZVTiR7KHZhbHVlICsgJycpLnJlcGxhY2VBbGwoL1xccysvZywgJyAnKX1FWFBfRlVOXCJgXHJcbiAgICAgICAgICA6IC8vIEFzIGZ1bmN0aW9uc1xyXG4gICAgICAgICAgICBgRVhQX0ZVTiR7KHZhbHVlICsgJycpLnJlcGxhY2VBbGwoL1xccysvZywgJyAnKX1FWFBfRlVOYDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBUaHJvdyBhbiBlcnJvciBvdGhlcndpc2VcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEluIGFsbCBvdGhlciBjYXNlcywgc2ltcGx5IHJldHVybiB0aGUgdmFsdWVcclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9O1xyXG5cclxuICAvLyBTdHJpbmdpZnkgb3B0aW9ucyBhbmQgaWYgcmVxdWlyZWQsIHJlcGxhY2Ugc3BlY2lhbCBmdW5jdGlvbnMgbWFya3NcclxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob3B0aW9ucywgcmVwbGFjZXJDYWxsYmFjaykucmVwbGFjZUFsbChcclxuICAgIHN0cmluZ2lmeUZ1bmN0aW9ucyA/IC9cXFxcXCJFWFBfRlVOfEVYUF9GVU5cXFxcXCIvZyA6IC9cIkVYUF9GVU58RVhQX0ZVTlwiL2csXHJcbiAgICAnJ1xyXG4gICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMb2FkcyBhZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gZnJvbSBhIHNwZWNpZmllZCBmaWxlIHByb3ZpZGVkIHZpYVxyXG4gKiB0aGUgYC0tbG9hZENvbmZpZ2Agb3B0aW9uIGluIHRoZSBjb21tYW5kLWxpbmUgYXJndW1lbnRzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX2xvYWRDb25maWdGaWxlXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gY2xpQXJncyAtIENvbW1hbmQtbGluZSBhcmd1bWVudHMgdG8gc2VhcmNoXHJcbiAqIGZvciB0aGUgYC0tbG9hZENvbmZpZ2Agb3B0aW9uIGFuZCB0aGUgY29ycmVzcG9uZGluZyBmaWxlIHBhdGguXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBhZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gbG9hZGVkIGZyb20gdGhlIHNwZWNpZmllZFxyXG4gKiBmaWxlLCBvciBhbiBlbXB0eSBvYmplY3QgaWYgdGhlIGZpbGUgaXMgbm90IGZvdW5kLCBpbnZhbGlkLCBvciBhbiBlcnJvclxyXG4gKiBvY2N1cnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBfbG9hZENvbmZpZ0ZpbGUoY2xpQXJncykge1xyXG4gIC8vIEdldCB0aGUgYWxsb3cgZmxhZ3MgZm9yIHRoZSBjdXN0b20gbG9naWMgY2hlY2tcclxuICBjb25zdCB7IGFsbG93Q29kZUV4ZWN1dGlvbiwgYWxsb3dGaWxlUmVzb3VyY2VzIH0gPSBnZXRPcHRpb25zKCkuY3VzdG9tTG9naWM7XHJcblxyXG4gIC8vIENoZWNrIGlmIHRoZSBgLS1sb2FkQ29uZmlnYCBvcHRpb24gd2FzIHVzZWRcclxuICBjb25zdCBjb25maWdJbmRleCA9IGNsaUFyZ3MuZmluZEluZGV4KFxyXG4gICAgKGFyZykgPT4gYXJnLnJlcGxhY2UoLy0vZywgJycpID09PSAnbG9hZENvbmZpZydcclxuICApO1xyXG5cclxuICAvLyBHZXQgdGhlIGAtLWxvYWRDb25maWdgIG9wdGlvbiB2YWx1ZVxyXG4gIGNvbnN0IGNvbmZpZ0ZpbGVOYW1lID0gY29uZmlnSW5kZXggPiAtMSAmJiBjbGlBcmdzW2NvbmZpZ0luZGV4ICsgMV07XHJcblxyXG4gIC8vIENoZWNrIGlmIHRoZSBgLS1sb2FkQ29uZmlnYCBpcyBwcmVzZW50IGFuZCBoYXMgYSBjb3JyZWN0IHZhbHVlXHJcbiAgaWYgKGNvbmZpZ0ZpbGVOYW1lICYmIGFsbG93RmlsZVJlc291cmNlcykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gTG9hZCBhbiBvcHRpb25hbCBjdXN0b20gSlNPTiBjb25maWcgZmlsZVxyXG4gICAgICByZXR1cm4gaXNBbGxvd2VkQ29uZmlnKFxyXG4gICAgICAgIHJlYWRGaWxlU3luYyhnZXRBYnNvbHV0ZVBhdGgoY29uZmlnRmlsZU5hbWUpLCAndXRmOCcpLFxyXG4gICAgICAgIGZhbHNlLFxyXG4gICAgICAgIGFsbG93Q29kZUV4ZWN1dGlvblxyXG4gICAgICApO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgbG9nV2l0aFN0YWNrKFxyXG4gICAgICAgIDIsXHJcbiAgICAgICAgZXJyb3IsXHJcbiAgICAgICAgYFtjb25maWddIFVuYWJsZSB0byBsb2FkIHRoZSBjb25maWd1cmF0aW9uIGZyb20gdGhlICR7Y29uZmlnRmlsZU5hbWV9IGZpbGUuYFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTm8gYWRkaXRpb25hbCBvcHRpb25zIHRvIHJldHVyblxyXG4gIHJldHVybiB7fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFBhcnNlcyBjb21tYW5kLWxpbmUgYXJndW1lbnRzIGFuZCBwYWlycyBlYWNoIGFyZ3VtZW50IHdpdGggaXRzIGNvcnJlc3BvbmRpbmdcclxuICogb3B0aW9uIGluIHRoZSBjb25maWd1cmF0aW9uLiBUaGUgdmFsdWVzIGFyZSBzdHJ1Y3R1cmVkIGludG8gYSBuZXN0ZWQgb3B0aW9uc1xyXG4gKiBvYmplY3QsIGJhc2VkIG9uIHByZWRlZmluZWQgbWFwcGluZ3MgaW4gdGhlIGBuZXN0ZWRQcm9wc2Agb2JqZWN0LlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX3BhaXJBcmd1bWVudFZhbHVlXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gY2xpQXJncyAtIEFuIGFycmF5IG9mIGNvbW1hbmQtbGluZSBhcmd1bWVudHNcclxuICogY29udGFpbmluZyBvcHRpb25zIGFuZCB0aGVpciBhc3NvY2lhdGVkIHZhbHVlcy5cclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gQW4gdXBkYXRlZCBvcHRpb25zIG9iamVjdCB3aGVyZSBlYWNoIG9wdGlvbiBmcm9tXHJcbiAqIHRoZSBjb21tYW5kLWxpbmUgaXMgcGFpcmVkIHdpdGggaXRzIHZhbHVlLCBzdHJ1Y3R1cmVkIGludG8gbmVzdGVkIG9iamVjdHNcclxuICogYXMgZGVmaW5lZC5cclxuICovXHJcbmZ1bmN0aW9uIF9wYWlyQXJndW1lbnRWYWx1ZShjbGlBcmdzKSB7XHJcbiAgLy8gQW4gZW1wdHkgb2JqZWN0IHRvIGNvbGxlY3QgYW5kIHN0cnVjdHVyaXplIGRhdGEgZnJvbSB0aGUgYXJnc1xyXG4gIGNvbnN0IGNsaU9wdGlvbnMgPSB7fTtcclxuXHJcbiAgLy8gQ3ljbGUgdGhyb3VnaCBhbGwgQ0xJIGFyZ3MgYW5kIGZpbHRlciB0aGVtXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbGlBcmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCBvcHRpb24gPSBjbGlBcmdzW2ldLnJlcGxhY2UoLy0vZywgJycpO1xyXG5cclxuICAgIC8vIEZpbmQgdGhlIHJpZ2h0IHBsYWNlIGZvciBwcm9wZXJ0eSdzIHZhbHVlXHJcbiAgICBjb25zdCBwcm9wZXJ0aWVzQ2hhaW4gPSBuZXN0ZWRQcm9wc1tvcHRpb25dXHJcbiAgICAgID8gbmVzdGVkUHJvcHNbb3B0aW9uXS5zcGxpdCgnLicpXHJcbiAgICAgIDogW107XHJcblxyXG4gICAgLy8gQ3JlYXRlIG9wdGlvbnMgb2JqZWN0IHdpdGggdmFsdWVzIGZyb20gQ0xJIGZvciBsYXRlciBwYXJzaW5nIGFuZCBtZXJnaW5nXHJcbiAgICBwcm9wZXJ0aWVzQ2hhaW4ucmVkdWNlKChvYmosIHByb3AsIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmIChwcm9wZXJ0aWVzQ2hhaW4ubGVuZ3RoIC0gMSA9PT0gaW5kZXgpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGNsaUFyZ3NbKytpXTtcclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICBsb2coXHJcbiAgICAgICAgICAgIDIsXHJcbiAgICAgICAgICAgIGBbY29uZmlnXSBNaXNzaW5nIHZhbHVlIGZvciB0aGUgQ0xJICctLSR7b3B0aW9ufScgYXJndW1lbnQuIFVzaW5nIHRoZSBkZWZhdWx0IHZhbHVlLmBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9ialtwcm9wXSA9IHZhbHVlIHx8IG51bGw7XHJcbiAgICAgIH0gZWxzZSBpZiAob2JqW3Byb3BdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBvYmpbcHJvcF0gPSB7fTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gb2JqW3Byb3BdO1xyXG4gICAgfSwgY2xpT3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICAvLyBSZXR1cm4gcGFyc2VkIENMSSBvcHRpb25zXHJcbiAgcmV0dXJuIGNsaU9wdGlvbnM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWN1cnNpdmVseSBnZW5lcmF0ZXMgYSBtYXBwaW5nIG9mIG5lc3RlZCBhcmd1bWVudCBjaGFpbnMgZnJvbSBhIG5lc3RlZFxyXG4gKiBjb25maWcgb2JqZWN0LiBUaGlzIGZ1bmN0aW9uIHRyYXZlcnNlcyBhIG5lc3RlZCBvYmplY3QgYW5kIGNyZWF0ZXMgYSBtYXBwaW5nXHJcbiAqIHdoZXJlIGVhY2gga2V5IGlzIGFuIGFyZ3VtZW50IG5hbWUgKGVpdGhlciBmcm9tIGBjbGlOYW1lYCwgYGxlZ2FjeU5hbWVgLFxyXG4gKiBvciB0aGUgb3JpZ2luYWwga2V5KSBhbmQgZWFjaCB2YWx1ZSBpcyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGNoYWluXHJcbiAqIG9mIG5lc3RlZCBwcm9wZXJ0aWVzIGxlYWRpbmcgdG8gdGhhdCBhcmd1bWVudC5cclxuICpcclxuICogQGZ1bmN0aW9uIF9jcmVhdGVOZXN0ZWRQcm9wc1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxyXG4gKiBAcGFyYW0ge09iamVjdH0gW25lc3RlZFByb3BzPXt9XSAtIFRoZSBhY2N1bXVsYXRvciBvYmplY3QgZm9yIHN0b3JpbmdcclxuICogdGhlIHJlc3VsdGluZyBhcmd1bWVudHMgY2hhaW5zLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBhbiBlbXB0eSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvcENoYWluPScnXSAtIFRoZSBjdXJyZW50IGNoYWluIG9mIG5lc3RlZCBwcm9wZXJ0aWVzLFxyXG4gKiB1c2VkIGludGVybmFsbHkgZHVyaW5nIHJlY3Vyc2lvbi4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYW4gZW1wdHkgc3RyaW5nLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgbWFwcGluZyBhcmd1bWVudCBuYW1lcyB0byB0aGVpciBjb3JyZXNwb25kaW5nXHJcbiAqIG5lc3RlZCBwcm9wZXJ0eSBjaGFpbnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBfY3JlYXRlTmVzdGVkUHJvcHMoY29uZmlnLCBuZXN0ZWRQcm9wcyA9IHt9LCBwcm9wQ2hhaW4gPSAnJykge1xyXG4gIE9iamVjdC5rZXlzKGNvbmZpZykuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAvLyBHZXQgdGhlIHNwZWNpZmljIHNlY3Rpb25cclxuICAgIGNvbnN0IGVudHJ5ID0gY29uZmlnW2tleV07XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgc3RpbGwgbW9yZSBkZXB0aCB0byB0cmF2ZXJzZVxyXG4gICAgaWYgKHR5cGVvZiBlbnRyeS52YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgLy8gUmVjdXJzZSBpbnRvIGRlZXBlciBsZXZlbHMgb2YgbmVzdGVkIGFyZ3VtZW50c1xyXG4gICAgICBfY3JlYXRlTmVzdGVkUHJvcHMoZW50cnksIG5lc3RlZFByb3BzLCBgJHtwcm9wQ2hhaW59LiR7a2V5fWApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gQ3JlYXRlIHRoZSBjaGFpbiBvZiBuZXN0ZWQgYXJndW1lbnRzXHJcbiAgICAgIG5lc3RlZFByb3BzW2VudHJ5LmNsaU5hbWUgfHwga2V5XSA9IGAke3Byb3BDaGFpbn0uJHtrZXl9YC5zdWJzdHJpbmcoMSk7XHJcblxyXG4gICAgICAvLyBTdXBwb3J0IGZvciB0aGUgbGVnYWN5LCBQaGFudG9tSlMgcHJvcGVydGllcyBuYW1lc1xyXG4gICAgICBpZiAoZW50cnkubGVnYWN5TmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgbmVzdGVkUHJvcHNbZW50cnkubGVnYWN5TmFtZV0gPSBgJHtwcm9wQ2hhaW59LiR7a2V5fWAuc3Vic3RyaW5nKDEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vIFJldHVybiB0aGUgb2JqZWN0IHdpdGggbmVzdGVkIGFyZ3VtZW50IGNoYWluc1xyXG4gIHJldHVybiBuZXN0ZWRQcm9wcztcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlY3Vyc2l2ZWx5IGdhdGhlcnMgdGhlIG5hbWVzIG9mIHByb3BlcnRpZXMgZnJvbSBhIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXRcclxuICogc2hvdWxkIGJlIHRyZWF0ZWQgYXMgYWJzb2x1dGUgcHJvcGVydGllcy4gVGhlc2UgcHJvcGVydGllcyBoYXZlIHZhbHVlcyB0aGF0XHJcbiAqIGFyZSBvYmplY3RzIGFuZCBkbyBub3QgY29udGFpbiBmdXJ0aGVyIG5lc3RlZCBkZXB0aCB3aGVuIG1lcmdpbmcgYW4gb2JqZWN0XHJcbiAqIGNvbnRhaW5pbmcgdGhlc2Ugb3B0aW9ucy5cclxuICpcclxuICogQGZ1bmN0aW9uIF9jcmVhdGVBYnNvbHV0ZVByb3BzXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QuXHJcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gW2Fic29sdXRlUHJvcHM9W11dIC0gQW4gYXJyYXkgdG8gY29sbGVjdCB0aGUgbmFtZXNcclxuICogb2YgYWJzb2x1dGUgcHJvcGVydGllcy4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYW4gZW1wdHkgYXJyYXkuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtBcnJheTxzdHJpbmc+fSBBbiBhcnJheSBjb250YWluaW5nIHRoZSBuYW1lcyBvZiBhYnNvbHV0ZVxyXG4gKiBwcm9wZXJ0aWVzLlxyXG4gKi9cclxuZnVuY3Rpb24gX2NyZWF0ZUFic29sdXRlUHJvcHMoY29uZmlnLCBhYnNvbHV0ZVByb3BzID0gW10pIHtcclxuICBPYmplY3Qua2V5cyhjb25maWcpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgLy8gR2V0IHRoZSBzcGVjaWZpYyBzZWN0aW9uXHJcbiAgICBjb25zdCBlbnRyeSA9IGNvbmZpZ1trZXldO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIHN0aWxsIG1vcmUgZGVwdGggdG8gdHJhdmVyc2VcclxuICAgIGlmICh0eXBlb2YgZW50cnkudHlwZXMgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIC8vIFJlY3Vyc2UgaW50byBkZWVwZXIgbGV2ZWxzXHJcbiAgICAgIF9jcmVhdGVBYnNvbHV0ZVByb3BzKGVudHJ5LCBhYnNvbHV0ZVByb3BzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIElmIHRoZSBvcHRpb24gY2FuIGJlIGFuIG9iamVjdCwgc2F2ZSBpdHMgdHlwZSBpbiB0aGUgYXJyYXlcclxuICAgICAgaWYgKGVudHJ5LnR5cGVzLmluY2x1ZGVzKCdPYmplY3QnKSkge1xyXG4gICAgICAgIGFic29sdXRlUHJvcHMucHVzaChrZXkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vIFJldHVybiB0aGUgYXJyYXkgd2l0aCB0aGUgbmFtZXMgb2YgYWJzb2x1dGUgcHJvcGVydGllc1xyXG4gIHJldHVybiBhYnNvbHV0ZVByb3BzO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgZ2V0T3B0aW9ucyxcclxuICB1cGRhdGVPcHRpb25zLFxyXG4gIHNldENsaU9wdGlvbnMsXHJcbiAgbWFwVG9OZXdPcHRpb25zLFxyXG4gIHZhbGlkYXRlT3B0aW9uLFxyXG4gIHZhbGlkYXRlT3B0aW9ucyxcclxuICBpc0FsbG93ZWRDb25maWdcclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQG92ZXJ2aWV3IEhUVFAgdXRpbGl0eSBtb2R1bGUgZm9yIGZldGNoaW5nIGFuZCBwb3N0aW5nIGRhdGEuIFN1cHBvcnRzIGJvdGhcclxuICogSFRUUCBhbmQgSFRUUFMgcHJvdG9jb2xzLCBwcm92aWRpbmcgbWV0aG9kcyB0byBtYWtlIEdFVCBhbmQgUE9TVCByZXF1ZXN0c1xyXG4gKiB3aXRoIGN1c3RvbWl6YWJsZSBvcHRpb25zLiBJbmNsdWRlcyBwcm90b2NvbCBkZXRlcm1pbmF0aW9uIGJhc2VkIG9uIFVSTFxyXG4gKiBhbmQgYXVnbWVudHMgcmVzcG9uc2Ugb2JqZWN0cyB3aXRoIGEgJ3RleHQnIHByb3BlcnR5IGZvciBlYXNpZXIgZGF0YSBhY2Nlc3MuXHJcbiAqL1xyXG5cclxuaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XHJcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XHJcblxyXG4vKipcclxuICogU2VuZHMgYSBHRVQgcmVxdWVzdCB0byB0aGUgc3BlY2lmaWVkIFVSTCB1c2luZyBlaXRoZXIgSFRUUCBvciBIVFRQUyBwcm90b2NvbC5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBnZXRcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBVUkwgdG8gZ2V0IGRhdGEgZnJvbS5cclxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0T3B0aW9ucz17fV0gLSBPcHRpb25zIGZvciB0aGUgSFRUUC9IVFRQUyByZXF1ZXN0LlxyXG4gKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBhbiBlbXB0eSBvYmplY3QuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBIVFRQL0hUVFBTIHJlc3BvbnNlXHJcbiAqIG9iamVjdCB3aXRoIGFkZGVkICd0ZXh0JyBwcm9wZXJ0eSBvciByZWplY3Rpbmcgd2l0aCBhbiBlcnJvci5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXQodXJsLCByZXF1ZXN0T3B0aW9ucyA9IHt9KSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIC8vIERlY2lkZSBvbiB0aGUgcHJvdG9jb2xcclxuICAgIF9nZXRQcm90b2NvbE1vZHVsZSh1cmwpXHJcbiAgICAgIC5nZXQodXJsLCByZXF1ZXN0T3B0aW9ucywgKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgbGV0IHJlc3BvbnNlRGF0YSA9ICcnO1xyXG5cclxuICAgICAgICAvLyBBIGNodW5rIG9mIGRhdGEgaGFzIGJlZW4gcmVjZWl2ZWRcclxuICAgICAgICByZXNwb25zZS5vbignZGF0YScsIChjaHVuaykgPT4ge1xyXG4gICAgICAgICAgcmVzcG9uc2VEYXRhICs9IGNodW5rO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBUaGUgd2hvbGUgcmVzcG9uc2UgaGFzIGJlZW4gcmVjZWl2ZWRcclxuICAgICAgICByZXNwb25zZS5vbignZW5kJywgKCkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFyZXNwb25zZURhdGEpIHtcclxuICAgICAgICAgICAgcmVqZWN0KCdOb3RoaW5nIHdhcyBmZXRjaGVkIGZyb20gdGhlIFVSTC4nKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBHZXQgdGhlIGZ1bGwgcmVzdWx0IGFuZCByZXNvbHZlIHRoZSByZXF1ZXN0XHJcbiAgICAgICAgICByZXNwb25zZS50ZXh0ID0gcmVzcG9uc2VEYXRhO1xyXG4gICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcclxuICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNlbmRzIGEgUE9TVCByZXF1ZXN0IHRvIHRoZSBzcGVjaWZpZWQgVVJMIHdpdGggdGhlIHByb3ZpZGVkIEpTT04gYm9keSB1c2luZ1xyXG4gKiBlaXRoZXIgSFRUUCBvciBIVFRQUyBwcm90b2NvbC5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBwb3N0XHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgVVJMIHRvIHNlbmQgdGhlIFBPU1QgcmVxdWVzdCB0by5cclxuICogQHBhcmFtIHtPYmplY3R9IFtib2R5PXt9XSAtIFRoZSBKU09OIGJvZHkgdG8gaW5jbHVkZSBpbiB0aGUgUE9TVCByZXF1ZXN0LlxyXG4gKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBhbiBlbXB0eSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdE9wdGlvbnM9e31dIC0gT3B0aW9ucyBmb3IgdGhlIEhUVFAvSFRUUFMgcmVxdWVzdC5cclxuICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgYW4gZW1wdHkgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgSFRUUC9IVFRQUyByZXNwb25zZVxyXG4gKiBvYmplY3Qgd2l0aCBhZGRlZCAndGV4dCcgcHJvcGVydHkgb3IgcmVqZWN0aW5nIHdpdGggYW4gZXJyb3IuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcG9zdCh1cmwsIGJvZHkgPSB7fSwgcmVxdWVzdE9wdGlvbnMgPSB7fSkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBjb25zdCBkYXRhID0gSlNPTi5zdHJpbmdpZnkoYm9keSk7XHJcblxyXG4gICAgLy8gU2V0IGRlZmF1bHQgaGVhZGVycyBhbmQgbWVyZ2Ugd2l0aCBgcmVxdWVzdE9wdGlvbnNgXHJcbiAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihcclxuICAgICAge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBkYXRhLmxlbmd0aFxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgcmVxdWVzdE9wdGlvbnNcclxuICAgICk7XHJcblxyXG4gICAgLy8gRGVjaWRlIG9uIHRoZSBwcm90b2NvbFxyXG4gICAgY29uc3QgcmVxdWVzdCA9IF9nZXRQcm90b2NvbE1vZHVsZSh1cmwpXHJcbiAgICAgIC5yZXF1ZXN0KHVybCwgb3B0aW9ucywgKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgbGV0IHJlc3BvbnNlRGF0YSA9ICcnO1xyXG5cclxuICAgICAgICAvLyBBIGNodW5rIG9mIGRhdGEgaGFzIGJlZW4gcmVjZWl2ZWRcclxuICAgICAgICByZXNwb25zZS5vbignZGF0YScsIChjaHVuaykgPT4ge1xyXG4gICAgICAgICAgcmVzcG9uc2VEYXRhICs9IGNodW5rO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBUaGUgd2hvbGUgcmVzcG9uc2UgaGFzIGJlZW4gcmVjZWl2ZWRcclxuICAgICAgICByZXNwb25zZS5vbignZW5kJywgKCkgPT4ge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gR2V0IHRoZSBmdWxsIHJlc3VsdCBhbmQgcmVzb2x2ZSB0aGUgcmVxdWVzdFxyXG4gICAgICAgICAgICByZXNwb25zZS50ZXh0ID0gcmVzcG9uc2VEYXRhO1xyXG4gICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcclxuICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyBXcml0ZSB0aGUgcmVxdWVzdCBib2R5IGFuZCBlbmQgdGhlIHJlcXVlc3RcclxuICAgIHJlcXVlc3Qud3JpdGUoZGF0YSk7XHJcbiAgICByZXF1ZXN0LmVuZCgpO1xyXG4gIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgSFRUUCBvciBIVFRQUyBwcm90b2NvbCBtb2R1bGUgYmFzZWQgb24gdGhlIHByb3ZpZGVkIFVSTC5cclxuICpcclxuICogQGZ1bmN0aW9uIF9nZXRQcm90b2NvbE1vZHVsZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIFVSTCB0byBkZXRlcm1pbmUgdGhlIHByb3RvY29sLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgSFRUUCBvciBIVFRQUyBwcm90b2NvbCBtb2R1bGUgKGBodHRwYCBvciBgaHR0cHNgKS5cclxuICovXHJcbmZ1bmN0aW9uIF9nZXRQcm90b2NvbE1vZHVsZSh1cmwpIHtcclxuICByZXR1cm4gdXJsLnN0YXJ0c1dpdGgoJ2h0dHBzJykgPyBodHRwcyA6IGh0dHA7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBnZXQsXHJcbiAgcG9zdFxyXG59O1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNSwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgVGhlIGNhY2hlIG1hbmFnZXIgaXMgcmVzcG9uc2libGUgZm9yIGhhbmRsaW5nIGFuZCBtYW5hZ2luZ1xyXG4gKiB0aGUgSGlnaGNoYXJ0cyBsaWJyYXJ5IGFsb25nIHdpdGggaXRzIGRlcGVuZGVuY2llcy4gSXQgZW5zdXJlcyB0aGF0IHRoZXNlXHJcbiAqIHJlc291cmNlcyBhcmUgc3RvcmVkIGFuZCByZXRyaWV2ZWQgZWZmaWNpZW50bHkgdG8gb3B0aW1pemUgcGVyZm9ybWFuY2VcclxuICogYW5kIHJlZHVjZSByZWR1bmRhbnQgbmV0d29yayByZXF1ZXN0cy4gVGhlIGNhY2hlIGlzIHN0b3JlZCBpbiB0aGUgYC5jYWNoZWBcclxuICogZGlyZWN0b3J5IGJ5IGRlZmF1bHQsIHdoaWNoIHNlcnZlcyBhcyBhIGRlZGljYXRlZCBmb2xkZXIgZm9yIGtlZXBpbmcgY2FjaGVkXHJcbiAqIGZpbGVzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGV4aXN0c1N5bmMsIG1rZGlyU3luYywgcmVhZEZpbGVTeW5jLCB3cml0ZUZpbGVTeW5jIH0gZnJvbSAnZnMnO1xyXG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XHJcblxyXG5pbXBvcnQgeyBIdHRwc1Byb3h5QWdlbnQgfSBmcm9tICdodHRwcy1wcm94eS1hZ2VudCc7XHJcblxyXG5pbXBvcnQgeyBnZXRPcHRpb25zLCB1cGRhdGVPcHRpb25zIH0gZnJvbSAnLi9jb25maWcuanMnO1xyXG5pbXBvcnQgeyBnZXQgfSBmcm9tICcuL2ZldGNoLmpzJztcclxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi9sb2dnZXIuanMnO1xyXG5pbXBvcnQgeyBnZXRBYnNvbHV0ZVBhdGggfSBmcm9tICcuL3V0aWxzLmpzJztcclxuXHJcbmltcG9ydCBFeHBvcnRFcnJvciBmcm9tICcuL2Vycm9ycy9FeHBvcnRFcnJvci5qcyc7XHJcblxyXG4vLyBUaGUgaW5pdGlhbCBjYWNoZSB0ZW1wbGF0ZVxyXG5jb25zdCBjYWNoZSA9IHtcclxuICBjZG5Vcmw6ICdodHRwczovL2NvZGUuaGlnaGNoYXJ0cy5jb20nLFxyXG4gIGFjdGl2ZU1hbmlmZXN0OiB7fSxcclxuICBzb3VyY2VzOiAnJyxcclxuICBoY1ZlcnNpb246ICcnXHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2tzIHRoZSBjYWNoZSBmb3IgSGlnaGNoYXJ0cyBkZXBlbmRlbmNpZXMsIHVwZGF0ZXMgdGhlIGNhY2hlIGlmIG5lZWRlZCxcclxuICogYW5kIGxvYWRzIHRoZSBzb3VyY2VzLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIGNoZWNrQ2FjaGVcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IGhpZ2hjaGFydHNPcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmdcclxuICogYGhpZ2hjaGFydHNgIG9wdGlvbnMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXJ2ZXJQcm94eU9wdGlvbnMtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nXHJcbiAqIGBzZXJ2ZXIucHJveHlgIG9wdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tDYWNoZShoaWdoY2hhcnRzT3B0aW9ucywgc2VydmVyUHJveHlPcHRpb25zKSB7XHJcbiAgdHJ5IHtcclxuICAgIGxldCBmZXRjaGVkTW9kdWxlcztcclxuXHJcbiAgICAvLyBHZXQgdGhlIGNhY2hlIHBhdGhcclxuICAgIGNvbnN0IGNhY2hlUGF0aCA9IGdldENhY2hlUGF0aCgpO1xyXG5cclxuICAgIC8vIFByZXBhcmUgcGF0aHMgdG8gbWFuaWZlc3QgYW5kIHNvdXJjZXMgZnJvbSB0aGUgY2FjaGUgZm9sZGVyXHJcbiAgICBjb25zdCBtYW5pZmVzdFBhdGggPSBqb2luKGNhY2hlUGF0aCwgJ21hbmlmZXN0Lmpzb24nKTtcclxuICAgIGNvbnN0IHNvdXJjZVBhdGggPSBqb2luKGNhY2hlUGF0aCwgJ3NvdXJjZXMuanMnKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIGNhY2hlIGRlc3RpbmF0aW9uIGlmIGl0IGRvZXNuJ3QgZXhpc3QgYWxyZWFkeVxyXG4gICAgIWV4aXN0c1N5bmMoY2FjaGVQYXRoKSAmJiBta2RpclN5bmMoY2FjaGVQYXRoLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcclxuXHJcbiAgICAvLyBGZXRjaCBhbGwgdGhlIHNjcmlwdHMgZWl0aGVyIGlmIHRoZSBgbWFuaWZlc3QuanNvbmAgZG9lcyBub3QgZXhpc3RcclxuICAgIC8vIG9yIGlmIHRoZSBgZm9yY2VGZXRjaGAgb3B0aW9uIGlzIGVuYWJsZWRcclxuICAgIGlmICghZXhpc3RzU3luYyhtYW5pZmVzdFBhdGgpIHx8IGhpZ2hjaGFydHNPcHRpb25zLmZvcmNlRmV0Y2gpIHtcclxuICAgICAgbG9nKDMsICdbY2FjaGVdIEZldGNoaW5nIGFuZCBjYWNoaW5nIEhpZ2hjaGFydHMgZGVwZW5kZW5jaWVzLicpO1xyXG5cclxuICAgICAgLy8gVGhlIGluaXRpYWwgY2FjaGUgdXBkYXRlXHJcbiAgICAgIGZldGNoZWRNb2R1bGVzID0gYXdhaXQgX3VwZGF0ZUNhY2hlKFxyXG4gICAgICAgIGhpZ2hjaGFydHNPcHRpb25zLFxyXG4gICAgICAgIHNlcnZlclByb3h5T3B0aW9ucyxcclxuICAgICAgICBzb3VyY2VQYXRoXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsZXQgcmVxdWVzdFVwZGF0ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgLy8gUmVhZCB0aGUgbWFuaWZlc3QgSlNPTlxyXG4gICAgICBjb25zdCBtYW5pZmVzdCA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKG1hbmlmZXN0UGF0aCksICd1dGY4Jyk7XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiB0aGUgbW9kdWxlcyBpcyBhbiBhcnJheSwgaWYgc28sIHdlIHJld3JpdGUgaXQgdG8gYSBtYXAgdG8gbWFrZVxyXG4gICAgICAvLyBpdCBlYXNpZXIgdG8gcmVzb2x2ZSBtb2R1bGVzXHJcbiAgICAgIGlmIChtYW5pZmVzdC5tb2R1bGVzICYmIEFycmF5LmlzQXJyYXkobWFuaWZlc3QubW9kdWxlcykpIHtcclxuICAgICAgICBjb25zdCBtb2R1bGVNYXAgPSB7fTtcclxuICAgICAgICBtYW5pZmVzdC5tb2R1bGVzLmZvckVhY2goKG0pID0+IChtb2R1bGVNYXBbbV0gPSAxKSk7XHJcbiAgICAgICAgbWFuaWZlc3QubW9kdWxlcyA9IG1vZHVsZU1hcDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gR2V0IHRoZSBhY3R1YWwgbnVtYmVyIG9mIHNjcmlwdHMgdG8gYmUgZmV0Y2hlZFxyXG4gICAgICBjb25zdCB7IGNvcmVTY3JpcHRzLCBtb2R1bGVTY3JpcHRzLCBpbmRpY2F0b3JTY3JpcHRzIH0gPVxyXG4gICAgICAgIGhpZ2hjaGFydHNPcHRpb25zO1xyXG4gICAgICBjb25zdCBudW1iZXJPZk1vZHVsZXMgPVxyXG4gICAgICAgIGNvcmVTY3JpcHRzLmxlbmd0aCArIG1vZHVsZVNjcmlwdHMubGVuZ3RoICsgaW5kaWNhdG9yU2NyaXB0cy5sZW5ndGg7XHJcblxyXG4gICAgICAvLyBDb21wYXJlIHRoZSBsb2FkZWQgaGlnaGNoYXJ0cyBjb25maWcgd2l0aCB0aGUgY29udGVudHMgaW4gY2FjaGUuXHJcbiAgICAgIC8vIElmIHRoZXJlIGFyZSBjaGFuZ2VzLCBmZXRjaCByZXF1ZXN0ZWQgbW9kdWxlcyBhbmQgcHJvZHVjdHMsXHJcbiAgICAgIC8vIGFuZCBiYWtlIHRoZW0gaW50byBhIGdpYW50IGJsb2IuIFNhdmUgdGhlIGJsb2IuXHJcbiAgICAgIGlmIChtYW5pZmVzdC52ZXJzaW9uICE9PSBoaWdoY2hhcnRzT3B0aW9ucy52ZXJzaW9uKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgdGhlIEhpZ2hjaGFydHMgdmVyc2lvblxyXG4gICAgICAgIGxvZyhcclxuICAgICAgICAgIDIsXHJcbiAgICAgICAgICAnW2NhY2hlXSBBIEhpZ2hjaGFydHMgdmVyc2lvbiBtaXNtYXRjaCBpbiB0aGUgY2FjaGUsIG5lZWQgdG8gcmUtZmV0Y2guJ1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmVxdWVzdFVwZGF0ZSA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgT2JqZWN0LmtleXMobWFuaWZlc3QubW9kdWxlcyB8fCB7fSkubGVuZ3RoICE9PSBudW1iZXJPZk1vZHVsZXNcclxuICAgICAgKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgdGhlIG51bWJlciBvZiBtb2R1bGVzXHJcbiAgICAgICAgbG9nKFxyXG4gICAgICAgICAgMixcclxuICAgICAgICAgICdbY2FjaGVdIFRoZSBjYWNoZSBhbmQgdGhlIHJlcXVlc3RlZCBtb2R1bGVzIGRvIG5vdCBtYXRjaCwgbmVlZCB0byByZS1mZXRjaC4nXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXF1ZXN0VXBkYXRlID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBDaGVjayBlYWNoIG1vZHVsZSwgaWYgYW55dGhpbmcgaXMgbWlzc2luZyByZWZldGNoIGV2ZXJ5dGhpbmdcclxuICAgICAgICByZXF1ZXN0VXBkYXRlID0gKG1vZHVsZVNjcmlwdHMgfHwgW10pLnNvbWUoKG1vZHVsZU5hbWUpID0+IHtcclxuICAgICAgICAgIGlmICghbWFuaWZlc3QubW9kdWxlc1ttb2R1bGVOYW1lXSkge1xyXG4gICAgICAgICAgICBsb2coXHJcbiAgICAgICAgICAgICAgMixcclxuICAgICAgICAgICAgICBgW2NhY2hlXSBUaGUgJHttb2R1bGVOYW1lfSBpcyBtaXNzaW5nIGluIHRoZSBjYWNoZSwgbmVlZCB0byByZS1mZXRjaC5gXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBVcGRhdGUgY2FjaGUgaWYgbmVlZGVkXHJcbiAgICAgIGlmIChyZXF1ZXN0VXBkYXRlKSB7XHJcbiAgICAgICAgZmV0Y2hlZE1vZHVsZXMgPSBhd2FpdCBfdXBkYXRlQ2FjaGUoXHJcbiAgICAgICAgICBoaWdoY2hhcnRzT3B0aW9ucyxcclxuICAgICAgICAgIHNlcnZlclByb3h5T3B0aW9ucyxcclxuICAgICAgICAgIHNvdXJjZVBhdGhcclxuICAgICAgICApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxvZygzLCAnW2NhY2hlXSBEZXBlbmRlbmN5IGNhY2hlIGlzIHVwIHRvIGRhdGUsIHByb2NlZWRpbmcuJyk7XHJcblxyXG4gICAgICAgIC8vIExvYWQgdGhlIHNvdXJjZXNcclxuICAgICAgICBjYWNoZS5zb3VyY2VzID0gcmVhZEZpbGVTeW5jKHNvdXJjZVBhdGgsICd1dGY4Jyk7XHJcblxyXG4gICAgICAgIC8vIEdldCBjdXJyZW50IG1vZHVsZXMgbWFwXHJcbiAgICAgICAgZmV0Y2hlZE1vZHVsZXMgPSBtYW5pZmVzdC5tb2R1bGVzO1xyXG5cclxuICAgICAgICAvLyBFeHRyYWN0IGFuZCBzYXZlIHZlcnNpb24gb2YgY3VycmVudGx5IHVzZWQgSGlnaGNoYXJ0c1xyXG4gICAgICAgIGNhY2hlLmhjVmVyc2lvbiA9IF9leHRyYWN0SGNWZXJzaW9uKGNhY2hlLnNvdXJjZXMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRmluYWxseSwgc2F2ZSB0aGUgbmV3IG1hbmlmZXN0LCB3aGljaCBpcyBiYXNpY2FsbHkgb3VyIGN1cnJlbnQgY29uZmlnXHJcbiAgICAvLyBpbiBhIHNsaWdodGx5IGRpZmZlcmVudCBmb3JtYXRcclxuICAgIGF3YWl0IF9zYXZlQ29uZmlnVG9NYW5pZmVzdChoaWdoY2hhcnRzT3B0aW9ucy52ZXJzaW9uLCBmZXRjaGVkTW9kdWxlcyk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgJ1tjYWNoZV0gQ291bGQgbm90IGNvbmZpZ3VyZSBjYWNoZSBhbmQgY3JlYXRlIG9yIHVwZGF0ZSB0aGUgY29uZmlnIG1hbmlmZXN0LicsXHJcbiAgICAgIDUwMFxyXG4gICAgKS5zZXRFcnJvcihlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgdmVyc2lvbiBvZiBIaWdoY2hhcnRzIGZyb20gdGhlIGNhY2hlLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZ2V0SGNWZXJzaW9uXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjYWNoZWQgSGlnaGNoYXJ0cyB2ZXJzaW9uLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEhjVmVyc2lvbigpIHtcclxuICByZXR1cm4gY2FjaGUuaGNWZXJzaW9uO1xyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlcyB0aGUgSGlnaGNoYXJ0cyB2ZXJzaW9uIGluIHRoZSBhcHBsaWVkIGNvbmZpZ3VyYXRpb24gYW5kIGNoZWNrc1xyXG4gKiB0aGUgY2FjaGUgZm9yIHRoZSBzY3JpcHRzIG9mIGEgbmV3IHZlcnNpb24uXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gdXBkYXRlSGNWZXJzaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXdWZXJzaW9uIC0gVGhlIG5ldyBIaWdoY2hhcnRzIHZlcnNpb24gdG8gYmUgYXBwbGllZC5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVIY1ZlcnNpb24obmV3VmVyc2lvbikge1xyXG4gIC8vIFVwZGF0ZSB0byB0aGUgbmV3IHZlcnNpb25cclxuICBjb25zdCBvcHRpb25zID0gdXBkYXRlT3B0aW9ucyh7XHJcbiAgICBoaWdoY2hhcnRzOiB7XHJcbiAgICAgIHZlcnNpb246IG5ld1ZlcnNpb25cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy8gQ2hlY2sgaWYgY2FjaGUgbmVlZHMgdG8gYmUgdXBkYXRlZFxyXG4gIGF3YWl0IGNoZWNrQ2FjaGUob3B0aW9ucy5oaWdoY2hhcnRzLCBvcHRpb25zLnNlcnZlci5wcm94eSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXRyaWV2ZXMgdGhlIGN1cnJlbnQgY2FjaGUgb2JqZWN0LlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZ2V0Q2FjaGVcclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIGNhY2hlIG9iamVjdCBjb250YWluaW5nIHZhcmlvdXMgY2FjaGVkIGRhdGEuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FjaGUoKSB7XHJcbiAgcmV0dXJuIGNhY2hlO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgY2FjaGUgcGF0aCBmb3IgSGlnaGNoYXJ0cy5cclxuICpcclxuICogQGZ1bmN0aW9uIGdldENhY2hlUGF0aFxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgYWJzb2x1dGUgcGF0aCB0byB0aGUgY2FjaGUgZGlyZWN0b3J5IGZvciBIaWdoY2hhcnRzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENhY2hlUGF0aCgpIHtcclxuICByZXR1cm4gZ2V0QWJzb2x1dGVQYXRoKGdldE9wdGlvbnMoKS5oaWdoY2hhcnRzLmNhY2hlUGF0aCwgJ3V0ZjgnKTsgLy8gIzU2MlxyXG59XHJcblxyXG4vKipcclxuICogU2F2ZXMgdGhlIHByb3ZpZGVkIGNvbmZpZ3VyYXRpb24gYW5kIGZldGNoZWQgbW9kdWxlcyB0byB0aGUgY2FjaGUgbWFuaWZlc3RcclxuICogZmlsZS5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBfc2F2ZUNvbmZpZ1RvTWFuaWZlc3RcclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ9IHZlcnNpb24gLSBUaGUgY3VycmVudGx5IHVzZWQgSGlnaGNoYXJ0cyB2ZXJzaW9uLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gW2ZldGNoZWRNb2R1bGVzPXt9XSAtIEFuIG9iamVjdCB3aGljaCB0cmFja3Mgd2hpY2ggbW9kdWxlc1xyXG4gKiBoYXZlIGJlZW4gZmV0Y2hlZC4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYW4gZW1wdHkgb2JqZWN0LlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaWYgYW4gZXJyb3Igb2NjdXJzIHdoaWxlXHJcbiAqIHdyaXRpbmcgdGhlIGNhY2hlIG1hbmlmZXN0LlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX3NhdmVDb25maWdUb01hbmlmZXN0KHZlcnNpb24sIGZldGNoZWRNb2R1bGVzID0ge30pIHtcclxuICAvLyBVcGRhdGUgY2FjaGUgb2JqZWN0IHdpdGggdGhlIGN1cnJlbnQgbW9kdWxlc1xyXG4gIGNhY2hlLmFjdGl2ZU1hbmlmZXN0ID0ge1xyXG4gICAgdmVyc2lvbixcclxuICAgIG1vZHVsZXM6IGZldGNoZWRNb2R1bGVzXHJcbiAgfTtcclxuXHJcbiAgbG9nKDMsICdbY2FjaGVdIFdyaXRpbmcgYSBuZXcgbWFuaWZlc3QuJyk7XHJcbiAgdHJ5IHtcclxuICAgIHdyaXRlRmlsZVN5bmMoXHJcbiAgICAgIGpvaW4oZ2V0Q2FjaGVQYXRoKCksICdtYW5pZmVzdC5qc29uJyksXHJcbiAgICAgIEpTT04uc3RyaW5naWZ5KGNhY2hlLmFjdGl2ZU1hbmlmZXN0KSxcclxuICAgICAgJ3V0ZjgnXHJcbiAgICApO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICdbY2FjaGVdIEVycm9yIHdyaXRpbmcgdGhlIGNhY2hlIG1hbmlmZXN0LicsXHJcbiAgICAgIDUwMFxyXG4gICAgKS5zZXRFcnJvcihlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlcyB0aGUgbG9jYWwgY2FjaGUgd2l0aCBIaWdoY2hhcnRzIHNjcmlwdHMgY29udGVudCBhbmQgaW5mb3JtYXRpb24sXHJcbiAqIGFuZCB1c2VkIEhpZ2hjaGFydHMgdmVyc2lvbi5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBfdXBkYXRlQ2FjaGVcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IGhpZ2hjaGFydHNPcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmdcclxuICogYGhpZ2hjaGFydHNgIG9wdGlvbnMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXJ2ZXJQcm94eU9wdGlvbnMgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbmluZ1xyXG4gKiBgc2VydmVyLnByb3h5YCBvcHRpb25zLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlUGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBzb3VyY2UgZmlsZSBpbiB0aGUgY2FjaGUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIG9iamVjdCByZXByZXNlbnRpbmdcclxuICogdGhlIGZldGNoZWQgbW9kdWxlcy5cclxuICpcclxuICogQHRocm93cyB7RXhwb3J0RXJyb3J9IFRocm93cyBhbiBgRXhwb3J0RXJyb3JgIGlmIHRoZXJlIGlzIGFuIGlzc3VlIHVwZGF0aW5nXHJcbiAqIHRoZSBsb2NhbCBIaWdoY2hhcnRzIGNhY2hlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX3VwZGF0ZUNhY2hlKGhpZ2hjaGFydHNPcHRpb25zLCBzZXJ2ZXJQcm94eU9wdGlvbnMsIHNvdXJjZVBhdGgpIHtcclxuICB0cnkge1xyXG4gICAgLy8gR2V0IEhpZ2hjaGFydHMgdmVyc2lvbiBmb3Igc2NyaXB0c1xyXG4gICAgY29uc3QgaGNWZXJzaW9uID1cclxuICAgICAgaGlnaGNoYXJ0c09wdGlvbnMudmVyc2lvbiA9PT0gJ2xhdGVzdCdcclxuICAgICAgICA/IG51bGxcclxuICAgICAgICA6IGAke2hpZ2hjaGFydHNPcHRpb25zLnZlcnNpb259YDtcclxuXHJcbiAgICBsb2coXHJcbiAgICAgIDMsXHJcbiAgICAgIGBbY2FjaGVdIFVwZGF0aW5nIGNhY2hlIHZlcnNpb24gdG8gSGlnaGNoYXJ0czogJHtoY1ZlcnNpb24gfHwgJ2xhdGVzdCd9LmBcclxuICAgICk7XHJcblxyXG4gICAgLy8gR2V0IHRoZSBDRE4gdXJsIGZvciBzY3JpcHRzXHJcbiAgICBjb25zdCBjZG5VcmwgPSBoaWdoY2hhcnRzT3B0aW9ucy5jZG5VcmwgfHwgY2FjaGUuY2RuVXJsO1xyXG5cclxuICAgIC8vIFByZXBhcmUgb3B0aW9ucyBmb3IgYSByZXF1ZXN0XHJcbiAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IF9jb25maWd1cmVSZXF1ZXN0KHNlcnZlclByb3h5T3B0aW9ucyk7XHJcblxyXG4gICAgLy8gQW4gb2JqZWN0IHRvIHJlY29yZCB3aGljaCBzY3JpcHRzIGFyZSBmZXRjaGVkXHJcbiAgICBjb25zdCBmZXRjaGVkTW9kdWxlcyA9IHt9O1xyXG5cclxuICAgIC8vIEpvaW4gYWxsIGZldGNoZWQgc2NyaXB0cyBhbmQgc2F2ZSBpbiB0aGUgbWFuaWZlc3QncyBzb3VyY2VzXHJcbiAgICBjYWNoZS5zb3VyY2VzID0gKFxyXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgLy8gSGlnaGNoYXJ0cyBjb3JlIHNjcmlwdHMgZmV0Y2hcclxuICAgICAgICAuLi5oaWdoY2hhcnRzT3B0aW9ucy5jb3JlU2NyaXB0cy5tYXAoKGNzKSA9PlxyXG4gICAgICAgICAgX2ZldGNoU2NyaXB0KFxyXG4gICAgICAgICAgICBoY1ZlcnNpb24gPyBgJHtjZG5Vcmx9LyR7aGNWZXJzaW9ufS8ke2NzfWAgOiBgJHtjZG5Vcmx9LyR7Y3N9YCxcclxuICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMsXHJcbiAgICAgICAgICAgIGZldGNoZWRNb2R1bGVzLFxyXG4gICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKSxcclxuICAgICAgICAvLyBIaWdoY2hhcnRzIG1vZHVsZSBzY3JpcHRzIGZldGNoXHJcbiAgICAgICAgLi4uaGlnaGNoYXJ0c09wdGlvbnMubW9kdWxlU2NyaXB0cy5tYXAoKG1zKSA9PlxyXG4gICAgICAgICAgX2ZldGNoU2NyaXB0KFxyXG4gICAgICAgICAgICBtcyA9PT0gJ21hcCdcclxuICAgICAgICAgICAgICA/IGhjVmVyc2lvblxyXG4gICAgICAgICAgICAgICAgPyBgJHtjZG5Vcmx9L21hcHMvJHtoY1ZlcnNpb259L21vZHVsZXMvJHttc31gXHJcbiAgICAgICAgICAgICAgICA6IGAke2NkblVybH0vbWFwcy9tb2R1bGVzLyR7bXN9YFxyXG4gICAgICAgICAgICAgIDogaGNWZXJzaW9uXHJcbiAgICAgICAgICAgICAgICA/IGAke2NkblVybH0vJHtoY1ZlcnNpb259L21vZHVsZXMvJHttc31gXHJcbiAgICAgICAgICAgICAgICA6IGAke2NkblVybH0vbW9kdWxlcy8ke21zfWAsXHJcbiAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zLFxyXG4gICAgICAgICAgICBmZXRjaGVkTW9kdWxlc1xyXG4gICAgICAgICAgKVxyXG4gICAgICAgICksXHJcbiAgICAgICAgLy8gSGlnaGNoYXJ0cyBpbmRpY2F0b3Igc2NyaXB0cyBmZXRjaFxyXG4gICAgICAgIC4uLmhpZ2hjaGFydHNPcHRpb25zLmluZGljYXRvclNjcmlwdHMubWFwKChpcykgPT5cclxuICAgICAgICAgIF9mZXRjaFNjcmlwdChcclxuICAgICAgICAgICAgaGNWZXJzaW9uXHJcbiAgICAgICAgICAgICAgPyBgJHtjZG5Vcmx9L3N0b2NrLyR7aGNWZXJzaW9ufS9pbmRpY2F0b3JzLyR7aXN9YFxyXG4gICAgICAgICAgICAgIDogYCR7Y2RuVXJsfS9zdG9jay9pbmRpY2F0b3JzLyR7aXN9YCxcclxuICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMsXHJcbiAgICAgICAgICAgIGZldGNoZWRNb2R1bGVzXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKSxcclxuICAgICAgICAvLyBDdXN0b20gc2NyaXB0cyBmZXRjaFxyXG4gICAgICAgIC4uLmhpZ2hjaGFydHNPcHRpb25zLmN1c3RvbVNjcmlwdHMubWFwKChjcykgPT5cclxuICAgICAgICAgIF9mZXRjaFNjcmlwdChgJHtjc31gLCByZXF1ZXN0T3B0aW9ucylcclxuICAgICAgICApXHJcbiAgICAgIF0pXHJcbiAgICApLmpvaW4oJztcXG4nKTtcclxuXHJcbiAgICAvLyBFeHRyYWN0IGFuZCBzYXZlIHZlcnNpb24gb2YgY3VycmVudGx5IHVzZWQgSGlnaGNoYXJ0c1xyXG4gICAgY2FjaGUuaGNWZXJzaW9uID0gX2V4dHJhY3RIY1ZlcnNpb24oY2FjaGUuc291cmNlcyk7XHJcblxyXG4gICAgLy8gU2F2ZSB0aGUgZmV0Y2hlZCBtb2R1bGVzIGludG8gY2FjaGVzJyBzb3VyY2UgSlNPTlxyXG4gICAgd3JpdGVGaWxlU3luYyhzb3VyY2VQYXRoLCBjYWNoZS5zb3VyY2VzKTtcclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIGZldGNoZWQgbW9kdWxlc1xyXG4gICAgcmV0dXJuIGZldGNoZWRNb2R1bGVzO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICdbY2FjaGVdIFVuYWJsZSB0byB1cGRhdGUgdGhlIGxvY2FsIEhpZ2hjaGFydHMgY2FjaGUuJyxcclxuICAgICAgNTAwXHJcbiAgICApLnNldEVycm9yKGVycm9yKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGZXRjaGVzIGEgc2luZ2xlIHNjcmlwdCBhbmQgdXBkYXRlcyB0aGUgYGZldGNoZWRNb2R1bGVzYCBhY2NvcmRpbmdseS5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBfZmV0Y2hTY3JpcHRcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHNjcmlwdCAtIEEgcGF0aCB0byBzY3JpcHQgdG8gZ2V0LlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcmVxdWVzdE9wdGlvbnMgLSBBZGRpdGlvbmFsIHJlcXVlc3RzIG9wdGlvbnMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBmZXRjaGVkTW9kdWxlcyAtIEFuIG9iamVjdCB3aGljaCB0cmFja3Mgd2hpY2ggSGlnaGNoYXJ0c1xyXG4gKiBtb2R1bGVzIGhhdmUgYmVlbiBmZXRjaGVkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtzaG91bGRUaHJvd0Vycm9yPWZhbHNlXSAtIEEgZmxhZyB0byBpbmRpY2F0ZSBpZiB0aGUgZXJyb3JcclxuICogc2hvdWxkIGJlIHRocm93bi4gVGhpcyBzaG91bGQgYmUgdXNlZCBvbmx5IGZvciB0aGUgY29yZSBzY3JpcHRzLiBUaGUgZGVmYXVsdFxyXG4gKiB2YWx1ZSBpcyBgZmFsc2VgLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgdGV4dCByZXByZXNlbnRhdGlvblxyXG4gKiBvZiB0aGUgZmV0Y2hlZCBzY3JpcHQuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiB0aGVyZSBpcyBhIHByb2JsZW1cclxuICogd2l0aCBmZXRjaGluZyB0aGUgc2NyaXB0LlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX2ZldGNoU2NyaXB0KFxyXG4gIHNjcmlwdCxcclxuICByZXF1ZXN0T3B0aW9ucyxcclxuICBmZXRjaGVkTW9kdWxlcyxcclxuICBzaG91bGRUaHJvd0Vycm9yID0gZmFsc2VcclxuKSB7XHJcbiAgLy8gR2V0IHJpZCBvZiB0aGUgLmpzIGZyb20gdGhlIGN1c3RvbSBzdHJpbmdzXHJcbiAgaWYgKHNjcmlwdC5lbmRzV2l0aCgnLmpzJykpIHtcclxuICAgIHNjcmlwdCA9IHNjcmlwdC5zdWJzdHJpbmcoMCwgc2NyaXB0Lmxlbmd0aCAtIDMpO1xyXG4gIH1cclxuICBsb2coNCwgYFtjYWNoZV0gRmV0Y2hpbmcgc2NyaXB0IC0gJHtzY3JpcHR9LmpzYCk7XHJcblxyXG4gIC8vIEZldGNoIHRoZSBzY3JpcHRcclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGdldChgJHtzY3JpcHR9LmpzYCwgcmVxdWVzdE9wdGlvbnMpO1xyXG5cclxuICAvLyBJZiBPSywgcmV0dXJuIGl0cyB0ZXh0IHJlcHJlc2VudGF0aW9uXHJcbiAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCAmJiB0eXBlb2YgcmVzcG9uc2UudGV4dCA9PSAnc3RyaW5nJykge1xyXG4gICAgaWYgKGZldGNoZWRNb2R1bGVzKSB7XHJcbiAgICAgIGNvbnN0IG1vZHVsZU5hbWUgPSBfZXh0cmFjdE1vZHVsZU5hbWUoc2NyaXB0KTtcclxuICAgICAgZmV0Y2hlZE1vZHVsZXNbbW9kdWxlTmFtZV0gPSAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3BvbnNlLnRleHQ7XHJcbiAgfVxyXG5cclxuICAvLyBCYXNlZCBvbiB0aGUgYHNob3VsZFRocm93RXJyb3JgIGZsYWcsIGRlY2lkZSBob3cgdG8gc2VydmUgZXJyb3IgbWVzc2FnZVxyXG4gIGlmIChzaG91bGRUaHJvd0Vycm9yKSB7XHJcbiAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgIGBbY2FjaGVdIENvdWxkIG5vdCBmZXRjaCB0aGUgJHtzY3JpcHR9LmpzLiBUaGUgc2NyaXB0IG1pZ2h0IG5vdCBleGlzdCBpbiB0aGUgcmVxdWVzdGVkIHZlcnNpb24gKHN0YXR1cyBjb2RlOiAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9KS5gLFxyXG4gICAgICA0MDRcclxuICAgICkuc2V0RXJyb3IocmVzcG9uc2UpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBsb2coXHJcbiAgICAgIDIsXHJcbiAgICAgIGBbY2FjaGVdIENvdWxkIG5vdCBmZXRjaCB0aGUgJHtzY3JpcHR9LmpzLiBUaGUgc2NyaXB0IG1pZ2h0IG5vdCBleGlzdCBpbiB0aGUgcmVxdWVzdGVkIHZlcnNpb24uYFxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb25maWd1cmVzIGEgcHJveHkgYWdlbnQgZm9yIG91dGdvaW5nIEhUVFAgcmVxdWVzdHMgYmFzZWQgb24gdGhlIHByb3ZpZGVkXHJcbiAqIGBzZXJ2ZXIucHJveHlgIG9wdGlvbnMuIElmIGEgdmFsaWQgYGhvc3RgIGFuZCBgcG9ydGAgYXJlIHNwZWNpZmllZCwgaXQgdHJpZXNcclxuICogdG8gY3JlYXRlIGFuIGBIdHRwc1Byb3h5QWdlbnRgLiBJZiB0aGUgY3JlYXRpb24gZmFpbHMsIGFuIGBFeHBvcnRFcnJvcmBcclxuICogaXMgdGhyb3duLiBJZiBubyBwcm94eSBpcyBjb25maWd1cmVkLCBhbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBfY29uZmlndXJlUmVxdWVzdFxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gc2VydmVyUHJveHlPcHRpb25zLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbmluZ1xyXG4gKiBgc2VydmVyLnByb3h5YCBvcHRpb25zLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVxdWVzdCBvcHRpb25zLCBpbmNsdWRpbmcgdGhlIHByb3h5IGFnZW50IGlmIGNyZWF0ZWQsXHJcbiAqIG9yIGFuIGVtcHR5IG9iamVjdCBpZiBubyBwcm94eSBjb25maWd1cmF0aW9uIGlzIHByb3ZpZGVkLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaWYgdGhlIHByb3h5IGFnZW50IGNyZWF0aW9uXHJcbiAqIGZhaWxzLlxyXG4gKi9cclxuZnVuY3Rpb24gX2NvbmZpZ3VyZVJlcXVlc3Qoc2VydmVyUHJveHlPcHRpb25zKSB7XHJcbiAgLy8gR2V0IHRoZSBgaG9zdGAgYW5kIGBwb3J0YCBvZiB0aGUgcHJveHlcclxuICBjb25zdCBwcm94eUhvc3QgPSBzZXJ2ZXJQcm94eU9wdGlvbnMuaG9zdDtcclxuICBjb25zdCBwcm94eVBvcnQgPSBzZXJ2ZXJQcm94eU9wdGlvbnMucG9ydDtcclxuXHJcbiAgLy8gVHJ5IHRvIGNyZWF0ZSBhIHByb3h5IGFnZW50XHJcbiAgaWYgKHByb3h5SG9zdCAmJiBwcm94eVBvcnQpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIENyZWF0ZSB0aGUgYWdlbnRcclxuICAgICAgY29uc3QgcHJveHlBZ2VudCA9IG5ldyBIdHRwc1Byb3h5QWdlbnQoe1xyXG4gICAgICAgIGhvc3Q6IHByb3h5SG9zdCxcclxuICAgICAgICBwb3J0OiBwcm94eVBvcnRcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBBZGQgdGhlIGFnZW50IHRvIHRoZSByZXF1ZXN0J3Mgb3B0aW9uc1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGFnZW50OiBwcm94eUFnZW50LFxyXG4gICAgICAgIHRpbWVvdXQ6IHNlcnZlclByb3h5T3B0aW9ucy50aW1lb3V0XHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgJ1tjYWNoZV0gQ291bGQgbm90IGNyZWF0ZSBhIFByb3h5IEFnZW50LicsXHJcbiAgICAgICAgNTAwXHJcbiAgICAgICkuc2V0RXJyb3IoZXJyb3IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUmV0dXJuIGFuIGVtcHR5IG9iamVjdCB3aGVuIG5vIHByb3h5IGFnZW50IGlzIGNyZWF0ZWRcclxuICByZXR1cm4ge307XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFeHRyYWN0cyBIaWdoY2hhcnRzIHZlcnNpb24gZnJvbSB0aGUgY2FjaGUncyBzb3VyY2VzIHN0cmluZy5cclxuICpcclxuICogQGZ1bmN0aW9uIF9leHRyYWN0SGNWZXJzaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZVNvdXJjZXMgLSBUaGUgY2FjaGUgc291cmNlcyBvYmplY3QuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBleHRyYWN0ZWQgSGlnaGNoYXJ0cyB2ZXJzaW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gX2V4dHJhY3RIY1ZlcnNpb24oY2FjaGVTb3VyY2VzKSB7XHJcbiAgcmV0dXJuIGNhY2hlU291cmNlc1xyXG4gICAgLnN1YnN0cmluZygwLCBjYWNoZVNvdXJjZXMuaW5kZXhPZignKi8nKSlcclxuICAgIC5yZXBsYWNlKCcvKicsICcnKVxyXG4gICAgLnJlcGxhY2UoJyovJywgJycpXHJcbiAgICAucmVwbGFjZSgvXFxuL2csICcnKVxyXG4gICAgLnRyaW0oKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEV4dHJhY3RzIHRoZSBIaWdoY2hhcnRzIG1vZHVsZSBuYW1lIGJhc2VkIG9uIHRoZSBgc2NyaXB0UGF0aGAgcHJvcGVydHkuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBfZXh0cmFjdE1vZHVsZU5hbWVcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHNjcmlwdFBhdGggLSBUaGUgcGF0aCBvZiB0aGUgc2NyaXB0IGZyb20gd2hpY2ggdGhlIG1vZHVsZVxyXG4gKiBuYW1lIHdpbGwgYmUgZXh0cmFjdGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZXh0cmFjdGVkIG1vZHVsZSBuYW1lLlxyXG4gKi9cclxuZnVuY3Rpb24gX2V4dHJhY3RNb2R1bGVOYW1lKHNjcmlwdFBhdGgpIHtcclxuICByZXR1cm4gc2NyaXB0UGF0aC5yZXBsYWNlKFxyXG4gICAgLyguKilcXC98KC4qKW1vZHVsZXNcXC98c3RvY2tcXC8oLiopaW5kaWNhdG9yc1xcL3xtYXBzXFwvKC4qKW1vZHVsZXNcXC8vZ2ksXHJcbiAgICAnJ1xyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBjaGVja0NhY2hlLFxyXG4gIGdldEhjVmVyc2lvbixcclxuICB1cGRhdGVIY1ZlcnNpb24sXHJcbiAgZ2V0Q2FjaGUsXHJcbiAgZ2V0Q2FjaGVQYXRoXHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBQcm92aWRlcyBtZXRob2RzIGZvciBpbml0aWFsaXppbmcgSGlnaGNoYXJ0cyB3aXRoIGN1c3RvbWl6ZWRcclxuICogYW5pbWF0aW9uIHNldHRpbmdzIGFuZCB0cmlnZ2VyaW5nIHRoZSBjcmVhdGlvbiBvZiBIaWdoY2hhcnRzIGNoYXJ0cyB3aXRoXHJcbiAqIGV4cG9ydC1zcGVjaWZpYyBjb25maWd1cmF0aW9ucyBpbiB0aGUgcGFnZSBjb250ZXh0LiBTdXBwb3J0cyBkeW5hbWljIG9wdGlvblxyXG4gKiBtZXJnaW5nLCBjdXN0b20gbG9naWMgaW5qZWN0aW9uLCBhbmQgY29udHJvbCBvdmVyIHJlbmRlcmluZyBiZWhhdmlvcnMuIFVzZWRcclxuICogYnkgdGhlIFB1cHBldGVlciBwYWdlLlxyXG4gKi9cclxuXHJcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXHJcblxyXG4vKipcclxuICogU2V0dGluZyB0aGUgYEhpZ2hjaGFydHMuYW5pbU9iamVjdGAgZnVuY3Rpb24uIENhbGxlZCB3aGVuIGluaXRpbmcgdGhlIHBhZ2UuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBzZXR1cEhpZ2hjaGFydHNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXR1cEhpZ2hjaGFydHMoKSB7XHJcbiAgSGlnaGNoYXJ0cy5hbmltT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHsgZHVyYXRpb246IDAgfTtcclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyB0aGUgYWN0dWFsIEhpZ2hjaGFydHMgY2hhcnQgb24gYSBwYWdlLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIGNyZWF0ZUNoYXJ0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBleHBvcnRPcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmcgYGV4cG9ydGBcclxuICogb3B0aW9ucy5cclxuICogQHBhcmFtIHtPYmplY3R9IGN1c3RvbUxvZ2ljT3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nXHJcbiAqIGBjdXN0b21Mb2dpY2Agb3B0aW9ucy5cclxuICpcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVDaGFydChleHBvcnRPcHRpb25zLCBjdXN0b21Mb2dpY09wdGlvbnMpIHtcclxuICAvLyBHZXQgcmVxdWlyZWQgZnVuY3Rpb25zXHJcbiAgY29uc3QgeyBnZXRPcHRpb25zLCBzZXRPcHRpb25zLCBtZXJnZSwgd3JhcCB9ID0gSGlnaGNoYXJ0cztcclxuXHJcbiAgLy8gQ3JlYXRlIGEgc2VwYXJhdGUgb2JqZWN0IGZvciBhIHBvdGVudGlhbCBgc2V0T3B0aW9uc2AgdXNhZ2VzIGluIG9yZGVyXHJcbiAgLy8gdG8gcHJldmVudCBmcm9tIHBvbGx1dGluZyBvdGhlciBleHBvcnRzIHRoYXQgY2FuIGhhcHBlbiBvbiB0aGUgc2FtZSBwYWdlXHJcbiAgSGlnaGNoYXJ0cy5zZXRPcHRpb25zT2JqID0gbWVyZ2UoZmFsc2UsIHt9LCBnZXRPcHRpb25zKCkpO1xyXG5cclxuICAvLyBOT1RFOiBJcyB0aGlzIHVzZWQgZm9yIGFueXRoaW5nIHVzZWZ1bD9cclxuICB3aW5kb3cuaXNSZW5kZXJDb21wbGV0ZSA9IGZhbHNlO1xyXG4gIHdyYXAoSGlnaGNoYXJ0cy5DaGFydC5wcm90b3R5cGUsICdpbml0JywgZnVuY3Rpb24gKHByb2NlZWQsIHVzZXJPcHRpb25zLCBjYikge1xyXG4gICAgLy8gT3ZlcnJpZGUgdGhlIGB1c2VyT3B0aW9uc2Agd2l0aCBpbWFnZSBmcmllbmRseSBvcHRpb25zXHJcbiAgICB1c2VyT3B0aW9ucyA9IG1lcmdlKHVzZXJPcHRpb25zLCB7XHJcbiAgICAgIGV4cG9ydGluZzoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgc2VyaWVzOiB7XHJcbiAgICAgICAgICBsYWJlbDoge1xyXG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgLyogRXhwZWN0cyB0b29sdGlwIGluIHRoZSBgdXNlck9wdGlvbnNgIHdoZW4gYGZvckV4cG9ydGAgaXMgdHJ1ZS5cclxuICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vaGlnaGNoYXJ0cy9oaWdoY2hhcnRzL2Jsb2IvM2FkNDMwYTM1M2I4MDU2YjllNzY0YWE0ZTVjZDY4MjhhYTQ3OWRiMi9qcy9wYXJ0cy9DaGFydC5qcyNMMjQxXHJcbiAgICAgICAgKi9cclxuICAgICAgdG9vbHRpcDoge31cclxuICAgIH0pO1xyXG5cclxuICAgICh1c2VyT3B0aW9ucy5zZXJpZXMgfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKHNlcmllcykge1xyXG4gICAgICBzZXJpZXMuYW5pbWF0aW9uID0gZmFsc2U7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBBZGQgZmxhZyB0byBrbm93IGlmIGNoYXJ0IHJlbmRlciBoYXMgYmVlbiBjYWxsZWQuXHJcbiAgICBpZiAoIXdpbmRvdy5vbkhpZ2hjaGFydHNSZW5kZXIpIHtcclxuICAgICAgd2luZG93Lm9uSGlnaGNoYXJ0c1JlbmRlciA9IEhpZ2hjaGFydHMuYWRkRXZlbnQodGhpcywgJ3JlbmRlcicsICgpID0+IHtcclxuICAgICAgICB3aW5kb3cuaXNSZW5kZXJDb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByb2NlZWQuYXBwbHkodGhpcywgW3VzZXJPcHRpb25zLCBjYl0pO1xyXG4gIH0pO1xyXG5cclxuICB3cmFwKEhpZ2hjaGFydHMuU2VyaWVzLnByb3RvdHlwZSwgJ2luaXQnLCBmdW5jdGlvbiAocHJvY2VlZCwgY2hhcnQsIG9wdGlvbnMpIHtcclxuICAgIHByb2NlZWQuYXBwbHkodGhpcywgW2NoYXJ0LCBvcHRpb25zXSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIFNvbWUgbWFuZGF0b3J5IGFkZGl0aW9uYWwgYGNoYXJ0YCBhbmQgYGV4cG9ydGluZ2Agb3B0aW9uc1xyXG4gIGNvbnN0IGFkZGl0aW9uYWxPcHRpb25zID0ge1xyXG4gICAgY2hhcnQ6IHtcclxuICAgICAgLy8gQnkgZGVmYXVsdCBhbmltYXRpb24gaXMgZGlzYWJsZWRcclxuICAgICAgYW5pbWF0aW9uOiBmYWxzZSxcclxuICAgICAgLy8gR2V0IHRoZSByaWdodCBzaXplIHZhbHVlc1xyXG4gICAgICBoZWlnaHQ6IGV4cG9ydE9wdGlvbnMuaGVpZ2h0LFxyXG4gICAgICB3aWR0aDogZXhwb3J0T3B0aW9ucy53aWR0aFxyXG4gICAgfSxcclxuICAgIGV4cG9ydGluZzoge1xyXG4gICAgICAvLyBObyBuZWVkIGZvciB0aGUgZXhwb3J0aW5nIGJ1dHRvblxyXG4gICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIEdldCB0aGUgaW5wdXQgdG8gZXhwb3J0IGZyb20gdGhlIGBpbnN0cmAgb3B0aW9uXHJcbiAgY29uc3QgdXNlck9wdGlvbnMgPSBuZXcgRnVuY3Rpb24oYHJldHVybiAke2V4cG9ydE9wdGlvbnMuaW5zdHJ9YCkoKTtcclxuXHJcbiAgLy8gR2V0IHRoZSBgdGhlbWVPcHRpb25zYCBvcHRpb25cclxuICBjb25zdCB0aGVtZU9wdGlvbnMgPSBuZXcgRnVuY3Rpb24oYHJldHVybiAke2V4cG9ydE9wdGlvbnMudGhlbWVPcHRpb25zfWApKCk7XHJcblxyXG4gIC8vIE1lcmdlIHRoZSBmb2xsb3dpbmcgb3B0aW9ucyBvYmplY3RzIHRvIGNyZWF0ZSBmaW5hbCBvcHRpb25zXHJcbiAgY29uc3QgZmluYWxPcHRpb25zID0gbWVyZ2UoXHJcbiAgICBmYWxzZSxcclxuICAgIHRoZW1lT3B0aW9ucyxcclxuICAgIHVzZXJPcHRpb25zLFxyXG4gICAgLy8gUGxhY2VkIGl0IGhlcmUgaW5zdGVhZCBpbiB0aGUgaW5pdCBiZWNhdXNlIG9mIHRoZSBzaXplIGlzc3Vlc1xyXG4gICAgYWRkaXRpb25hbE9wdGlvbnNcclxuICApO1xyXG5cclxuICAvLyBQcmVwYXJlIHRoZSBgY2FsbGJhY2tgIG9wdGlvblxyXG4gIGNvbnN0IGZpbmFsQ2FsbGJhY2sgPSBjdXN0b21Mb2dpY09wdGlvbnMuY2FsbGJhY2tcclxuICAgID8gbmV3IEZ1bmN0aW9uKGByZXR1cm4gJHtjdXN0b21Mb2dpY09wdGlvbnMuY2FsbGJhY2t9YCkoKVxyXG4gICAgOiBudWxsO1xyXG5cclxuICAvLyBUcmlnZ2VyIHRoZSBgY3VzdG9tQ29kZWAgb3B0aW9uXHJcbiAgaWYgKGN1c3RvbUxvZ2ljT3B0aW9ucy5jdXN0b21Db2RlKSB7XHJcbiAgICBuZXcgRnVuY3Rpb24oJ29wdGlvbnMnLCBjdXN0b21Mb2dpY09wdGlvbnMuY3VzdG9tQ29kZSkodXNlck9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0IHRoZSBgZ2xvYmFsT3B0aW9uc2Agb3B0aW9uXHJcbiAgY29uc3QgZ2xvYmFsT3B0aW9ucyA9IG5ldyBGdW5jdGlvbihgcmV0dXJuICR7ZXhwb3J0T3B0aW9ucy5nbG9iYWxPcHRpb25zfWApKCk7XHJcblxyXG4gIC8vIFNldCB0aGUgZ2xvYmFsIG9wdGlvbnMgaWYgZXhpc3RcclxuICBpZiAoZ2xvYmFsT3B0aW9ucykge1xyXG4gICAgc2V0T3B0aW9ucyhnbG9iYWxPcHRpb25zKTtcclxuICB9XHJcblxyXG4gIC8vIENhbGwgdGhlIGNoYXJ0IGNyZWF0aW9uXHJcbiAgSGlnaGNoYXJ0c1tleHBvcnRPcHRpb25zLmNvbnN0cl0oJ2NvbnRhaW5lcicsIGZpbmFsT3B0aW9ucywgZmluYWxDYWxsYmFjayk7XHJcblxyXG4gIC8vIEdldCBhbGwgaW1hZ2VzIGZyb20gd2l0aGluIHRoZSBjaGFydFxyXG4gIGNvbnN0IGltYWdlcyA9IEFycmF5LmZyb20oXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaGlnaGNoYXJ0cy1jb250YWluZXIgaW1hZ2UnKVxyXG4gICk7XHJcblxyXG4gIC8vIFdhaXQgZm9yIGFsbCBpbWFnZXMgZm9yIDIgc2Vjb25kc1xyXG4gIGF3YWl0IFByb21pc2UucmFjZShbXHJcbiAgICBQcm9taXNlLmFsbChcclxuICAgICAgaW1hZ2VzLm1hcCgoaW1hZ2UpID0+XHJcbiAgICAgICAgaW1hZ2UuY29tcGxldGUgJiYgaW1hZ2UubmF0dXJhbEhlaWdodCAhPT0gMFxyXG4gICAgICAgICAgPyBQcm9taXNlLnJlc29sdmUoKVxyXG4gICAgICAgICAgOiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT5cclxuICAgICAgICAgICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgcmVzb2x2ZSwgeyBvbmNlOiB0cnVlIH0pXHJcbiAgICAgICAgICAgIClcclxuICAgICAgKVxyXG4gICAgKSxcclxuICAgIC8vIFByb2NlZWQgZnVydGhlciBldmVuIGlmIGltYWdlcyBkaWQgbm90IGxvYWRcclxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDIwMDApKVxyXG4gIF0pO1xyXG5cclxuICAvLyBHZXQgdGhlIGN1cnJlbnQgZ2xvYmFsIG9wdGlvbnNcclxuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldE9wdGlvbnMoKTtcclxuXHJcbiAgLy8gQ2xlYXIgaXQganVzdCBpbiBjYXNlIChlLmcuIHRoZSBgc2V0T3B0aW9uc2Agd2FzIHVzZWQgaW4gdGhlIGBjdXN0b21Db2RlYClcclxuICBmb3IgKGNvbnN0IHByb3AgaW4gZGVmYXVsdE9wdGlvbnMpIHtcclxuICAgIGlmICh0eXBlb2YgZGVmYXVsdE9wdGlvbnNbcHJvcF0gIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgZGVsZXRlIGRlZmF1bHRPcHRpb25zW3Byb3BdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gU2V0IHRoZSBkZWZhdWx0IG9wdGlvbnMgYmFja1xyXG4gIHNldE9wdGlvbnMoSGlnaGNoYXJ0cy5zZXRPcHRpb25zT2JqKTtcclxuXHJcbiAgLy8gRW1wdHkgdGhlIGN1c3RvbSBnbG9iYWwgb3B0aW9ucyBvYmplY3RcclxuICBIaWdoY2hhcnRzLnNldE9wdGlvbnNPYmogPSB7fTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHNldHVwSGlnaGNoYXJ0cyxcclxuICBjcmVhdGVDaGFydFxyXG59O1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNSwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgVGhpcyBtb2R1bGUgcHJvdmlkZXMgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBQdXBwZXRlZXIgYnJvd3NlclxyXG4gKiBpbnN0YW5jZSwgY3JlYXRpbmcgYW5kIGNsZWFyaW5nIHBhZ2VzLCBpbmplY3RpbmcgY3VzdG9tIEpTIGFuZCBDU1MgcmVzb3VyY2VzLFxyXG4gKiBhbmQgc2V0dGluZyB1cCBIaWdoY2hhcnRzIGZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIFRoZSBtb2R1bGUgZW5zdXJlc1xyXG4gKiB0aGF0IHRoZSBicm93c2VyIGFuZCBwYWdlcyBhcmUgY29ycmVjdGx5IG1hbmFnZWQgYW5kIGNhbiBoYW5kbGUgZmFpbHVyZXNcclxuICogZHVyaW5nIG9wZXJhdGlvbnMgbGlrZSBsYXVuY2hpbmcgdGhlIGJyb3dzZXIgb3IgY3JlYXRpbmcgbmV3IHBhZ2VzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJztcclxuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xyXG5cclxuaW1wb3J0IHB1cHBldGVlciBmcm9tICdwdXBwZXRlZXInO1xyXG5cclxuaW1wb3J0IHsgZ2V0Q2FjaGVQYXRoIH0gZnJvbSAnLi9jYWNoZS5qcyc7XHJcbmltcG9ydCB7IGdldE9wdGlvbnMgfSBmcm9tICcuL2NvbmZpZy5qcyc7XHJcbmltcG9ydCB7IHNldHVwSGlnaGNoYXJ0cyB9IGZyb20gJy4vaGlnaGNoYXJ0cy5qcyc7XHJcbmltcG9ydCB7IGxvZywgbG9nV2l0aFN0YWNrIH0gZnJvbSAnLi9sb2dnZXIuanMnO1xyXG5pbXBvcnQgeyBfX2Rpcm5hbWUsIGdldEFic29sdXRlUGF0aCB9IGZyb20gJy4vdXRpbHMuanMnO1xyXG5cclxuaW1wb3J0IEV4cG9ydEVycm9yIGZyb20gJy4vZXJyb3JzL0V4cG9ydEVycm9yLmpzJztcclxuXHJcbi8vIEdldCB0aGUgdGVtcGxhdGUgZm9yIHBhZ2VzXHJcbmNvbnN0IHBhZ2VUZW1wbGF0ZSA9IHJlYWRGaWxlU3luYyhcclxuICBqb2luKF9fZGlybmFtZSwgJ3RlbXBsYXRlcycsICd0ZW1wbGF0ZS5odG1sJyksXHJcbiAgJ3V0ZjgnXHJcbik7XHJcblxyXG4vLyBUbyBzYXZlIHRoZSBicm93c2VyXHJcbmxldCBicm93c2VyID0gbnVsbDtcclxuXHJcbi8qKlxyXG4gKiBSZXRyaWV2ZXMgdGhlIGV4aXN0aW5nIFB1cHBldGVlciBicm93c2VyIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZ2V0QnJvd3NlclxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgUHVwcGV0ZWVyIGJyb3dzZXIgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiBubyB2YWxpZCBicm93c2VyXHJcbiAqIGhhcyBiZWVuIGNyZWF0ZWQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnJvd3NlcigpIHtcclxuICBpZiAoIWJyb3dzZXIpIHtcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcignW2Jyb3dzZXJdIE5vIHZhbGlkIGJyb3dzZXIgaGFzIGJlZW4gY3JlYXRlZC4nLCA1MDApO1xyXG4gIH1cclxuICByZXR1cm4gYnJvd3NlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBQdXBwZXRlZXIgYnJvd3NlciBpbnN0YW5jZSB3aXRoIHRoZSBzcGVjaWZpZWQgYXJndW1lbnRzLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJcclxuICpcclxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBwdXBwZXRlZXJBcmdzIC0gQWRkaXRpb25hbCBhcmd1bWVudHMgZm9yIFB1cHBldGVlclxyXG4gKiBicm93c2VyJ3MgbGF1bmNoLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgY3JlYXRlZCBQdXBwZXRlZXJcclxuICogYnJvd3NlciBpbnN0YW5jZS5cclxuICpcclxuICogQHRocm93cyB7RXhwb3J0RXJyb3J9IFRocm93cyBhbiBgRXhwb3J0RXJyb3JgIGlmIG1heCByZXRyaWVzIHRvIG9wZW5cclxuICogYSBicm93c2VyIGluc3RhbmNlIGFyZSByZWFjaGVkLCBvciBpZiBubyBicm93c2VyIGluc3RhbmNlIGlzIGZvdW5kIGFmdGVyXHJcbiAqIHJldHJpZXMuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQnJvd3NlcihwdXBwZXRlZXJBcmdzKSB7XHJcbiAgLy8gR2V0IGBkZWJ1Z2AgYW5kIGBvdGhlcmAgb3B0aW9uc1xyXG4gIGNvbnN0IHsgZGVidWcsIG90aGVyIH0gPSBnZXRPcHRpb25zKCk7XHJcblxyXG4gIC8vIEdldCB0aGUgYGRlYnVnYCBvcHRpb25zXHJcbiAgY29uc3QgeyBlbmFibGU6IGVuYWJsZWREZWJ1ZywgLi4uZGVidWdPcHRpb25zIH0gPSBkZWJ1ZztcclxuXHJcbiAgLy8gTGF1bmNoIG9wdGlvbnMgZm9yIHRoZSBicm93c2VyIGluc3RhbmNlXHJcbiAgY29uc3QgbGF1bmNoT3B0aW9ucyA9IHtcclxuICAgIGhlYWRsZXNzOiBvdGhlci5icm93c2VyU2hlbGxNb2RlID8gJ3NoZWxsJyA6IHRydWUsXHJcbiAgICB1c2VyRGF0YURpcjogJ3RtcCcsXHJcbiAgICBhcmdzOiBwdXBwZXRlZXJBcmdzIHx8IFtdLFxyXG4gICAgaGFuZGxlU0lHSU5UOiBmYWxzZSxcclxuICAgIGhhbmRsZVNJR1RFUk06IGZhbHNlLFxyXG4gICAgaGFuZGxlU0lHSFVQOiBmYWxzZSxcclxuICAgIHdhaXRGb3JJbml0aWFsUGFnZTogZmFsc2UsXHJcbiAgICBkZWZhdWx0Vmlld3BvcnQ6IG51bGwsXHJcbiAgICAuLi4oZW5hYmxlZERlYnVnICYmIGRlYnVnT3B0aW9ucylcclxuICB9O1xyXG5cclxuICAvLyBDcmVhdGUgYSBicm93c2VyXHJcbiAgaWYgKCFicm93c2VyKSB7XHJcbiAgICAvLyBBIGNvdW50ZXIgZm9yIHRoZSBicm93c2VyJ3MgbGF1bmNoIHJldHJpZXNcclxuICAgIGxldCB0cnlDb3VudCA9IDA7XHJcbiAgICBjb25zdCBvcGVuQnJvd3NlciA9IGFzeW5jICgpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBsb2coXHJcbiAgICAgICAgICAzLFxyXG4gICAgICAgICAgYFticm93c2VyXSBBdHRlbXB0aW5nIHRvIGxhdW5jaCBhbmQgZ2V0IGEgYnJvd3NlciBpbnN0YW5jZSAodHJ5ICR7Kyt0cnlDb3VudH0pLmBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBMYXVuY2ggdGhlIGJyb3dzZXJcclxuICAgICAgICBicm93c2VyID0gYXdhaXQgcHVwcGV0ZWVyLmxhdW5jaChsYXVuY2hPcHRpb25zKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBsb2dXaXRoU3RhY2soXHJcbiAgICAgICAgICAxLFxyXG4gICAgICAgICAgZXJyb3IsXHJcbiAgICAgICAgICAnW2Jyb3dzZXJdIEZhaWxlZCB0byBsYXVuY2ggYSBicm93c2VyIGluc3RhbmNlLidcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBSZXRyeSB0byBsYXVuY2ggYnJvd3NlciB1bnRpbCByZWFjaGluZyBtYXggYXR0ZW1wdHNcclxuICAgICAgICBpZiAodHJ5Q291bnQgPCAyNSkge1xyXG4gICAgICAgICAgbG9nKDMsIGBbYnJvd3Nlcl0gUmV0cnkgdG8gb3BlbiBhIGJyb3dzZXIgKCR7dHJ5Q291bnR9IG91dCBvZiAyNSkuYCk7XHJcblxyXG4gICAgICAgICAgLy8gV2FpdCBmb3IgYSA0IHNlY29uZHMgYmVmb3JlIHRyeWluZyBhZ2FpblxyXG4gICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc3BvbnNlKSA9PiBzZXRUaW1lb3V0KHJlc3BvbnNlLCA0MDAwKSk7XHJcbiAgICAgICAgICBhd2FpdCBvcGVuQnJvd3NlcigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gVHJ5IHRvIG9wZW4gYSBicm93c2VyXHJcbiAgICAgIGF3YWl0IG9wZW5Ccm93c2VyKCk7XHJcblxyXG4gICAgICAvLyBTaGVsbCBtb2RlIGluZm9ybVxyXG4gICAgICBpZiAobGF1bmNoT3B0aW9ucy5oZWFkbGVzcyA9PT0gJ3NoZWxsJykge1xyXG4gICAgICAgIGxvZygzLCBgW2Jyb3dzZXJdIExhdW5jaGVkIGJyb3dzZXIgaW4gc2hlbGwgbW9kZS5gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRGVidWcgbW9kZSBpbmZvcm1cclxuICAgICAgaWYgKGVuYWJsZWREZWJ1Zykge1xyXG4gICAgICAgIGxvZygzLCBgW2Jyb3dzZXJdIExhdW5jaGVkIGJyb3dzZXIgaW4gZGVidWcgbW9kZS5gKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgICdbYnJvd3Nlcl0gTWF4aW11bSByZXRyaWVzIHRvIG9wZW4gYSBicm93c2VyIGluc3RhbmNlIHJlYWNoZWQuJyxcclxuICAgICAgICA1MDBcclxuICAgICAgKS5zZXRFcnJvcihlcnJvcik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm8gY29ycmVjdCBicm93c2VyXHJcbiAgICBpZiAoIWJyb3dzZXIpIHtcclxuICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKCdbYnJvd3Nlcl0gQ2Fubm90IGZpbmQgYSBicm93c2VyIHRvIG9wZW4uJywgNTAwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJldHVybiBhIGJyb3dzZXIgaW5zdGFuY2VcclxuICByZXR1cm4gYnJvd3NlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENsb3NlcyB0aGUgUHVwcGV0ZWVyIGJyb3dzZXIgaW5zdGFuY2UgaWYgaXQgaXMgY29ubmVjdGVkLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIGNsb3NlQnJvd3NlclxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsb3NlQnJvd3NlcigpIHtcclxuICAvLyBDbG9zZSB0aGUgYnJvd3NlciB3aGVuIGNvbm5lY3RlZFxyXG4gIGlmIChicm93c2VyICYmIGJyb3dzZXIuY29ubmVjdGVkKSB7XHJcbiAgICBhd2FpdCBicm93c2VyLmNsb3NlKCk7XHJcbiAgfVxyXG4gIGJyb3dzZXIgPSBudWxsO1xyXG4gIGxvZyg0LCAnW2Jyb3dzZXJdIENsb3NlZCB0aGUgYnJvd3Nlci4nKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgUHVwcGV0ZWVyIHBhZ2Ugd2l0aGluIGFuIGV4aXN0aW5nIGJyb3dzZXIgaW5zdGFuY2UuXHJcbiAqIFRoZSBmdW5jdGlvbiBjcmVhdGVzIGEgbmV3IHBhZ2UsIGRpc2FibGVzIGNhY2hpbmcsIHNldHMgY29udGVudCB1c2luZ1xyXG4gKiB0aGUgYF9zZXRQYWdlQ29udGVudCgpYCwgYW5kIHJldHVybnMgdGhlIGNyZWF0ZWQgUHVwcGV0ZWVyIHBhZ2UuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gbmV3UGFnZVxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcG9vbFJlc291cmNlIC0gVGhlIHBvb2wgcmVzb3VyY2UgdGhhdCBjb250YWlucyBgaWRgLFxyXG4gKiBgd29ya0NvdW50YCwgYW5kIGBwYWdlYC5cclxuICpcclxuICogQHRocm93cyB7RXhwb3J0RXJyb3J9IFRocm93cyBhbiBgRXhwb3J0RXJyb3JgIGlmIG5vIHZhbGlkIGJyb3dzZXJcclxuICogaGFzIGJlZW4gY29ubmVjdGVkIG9yIGlmIGEgcGFnZSBpcyBpbnZhbGlkIG9yIGNsb3NlZC5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBuZXdQYWdlKHBvb2xSZXNvdXJjZSkge1xyXG4gIC8vIEVycm9yIGluIGNhc2Ugb2Ygbm8gY29ubmVjdGVkIGJyb3dzZXJcclxuICBpZiAoIWJyb3dzZXIgfHwgIWJyb3dzZXIuY29ubmVjdGVkKSB7XHJcbiAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoYFticm93c2VyXSBCcm93c2VyIGlzIG5vdCB5ZXQgY29ubmVjdGVkLmAsIDUwMCk7XHJcbiAgfVxyXG5cclxuICAvLyBDcmVhdGUgYSBwYWdlXHJcbiAgcG9vbFJlc291cmNlLnBhZ2UgPSBhd2FpdCBicm93c2VyLm5ld1BhZ2UoKTtcclxuXHJcbiAgLy8gRGlzYWJsZSBjYWNoZVxyXG4gIGF3YWl0IHBvb2xSZXNvdXJjZS5wYWdlLnNldENhY2hlRW5hYmxlZChmYWxzZSk7XHJcblxyXG4gIC8vIFNldCB0aGUgY29udGVudFxyXG4gIGF3YWl0IF9zZXRQYWdlQ29udGVudChwb29sUmVzb3VyY2UucGFnZSk7XHJcblxyXG4gIC8vIFNldCBwYWdlIGV2ZW50c1xyXG4gIF9zZXRQYWdlRXZlbnRzKHBvb2xSZXNvdXJjZS5wYWdlKTtcclxuXHJcbiAgLy8gQ2hlY2sgaWYgdGhlIHBhZ2UgaXMgY29ycmVjdGx5IGNyZWF0ZWRcclxuICBpZiAoIXBvb2xSZXNvdXJjZS5wYWdlIHx8IHBvb2xSZXNvdXJjZS5wYWdlLmlzQ2xvc2VkKCkpIHtcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcignW2Jyb3dzZXJdIFRoZSBwYWdlIGlzIGludmFsaWQgb3IgY2xvc2VkLicsIDQwMCk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBjb250ZW50IG9mIGEgUHVwcGV0ZWVyIHBhZ2UgYmFzZWQgb24gdGhlIHNwZWNpZmllZCBtb2RlLiBMb2dzXHJcbiAqIHRocm93biBlcnJvciBpZiBjbGVhcmluZyBvZiBhIHBhZ2UncyBjb250ZW50IGZhaWxzLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIGNsZWFyUGFnZVxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcG9vbFJlc291cmNlIC0gVGhlIHBvb2wgcmVzb3VyY2UgdGhhdCBjb250YWlucyBwYWdlIGFuZCBpZC5cclxuICogQHBhcmFtIHtib29sZWFufSBbaGFyZFJlc2V0PWZhbHNlXSAtIEEgZmxhZyBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIGNsZWFyaW5nXHJcbiAqIHRvIGJlIHBlcmZvcm1lZC4gSWYgYHRydWVgLCBuYXZpZ2F0ZXMgdG8gYGFib3V0OmJsYW5rYCBhbmQgcmVzZXRzIGNvbnRlbnRcclxuICogYW5kIHNjcmlwdHMuIElmIGBmYWxzZWAsIGNsZWFycyB0aGUgYm9keSBjb250ZW50IGJ5IHNldHRpbmcgYSBwcmVkZWZpbmVkIEhUTUxcclxuICogc3RydWN0dXJlLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYHRydWVgIHdoZW4gcGFnZVxyXG4gKiBpcyBjb3JyZWN0bHkgY2xlYXJlZCBhbmQgYGZhbHNlYCB3aGVuIGl0IGlzIG5vdC5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhclBhZ2UocG9vbFJlc291cmNlLCBoYXJkUmVzZXQgPSBmYWxzZSkge1xyXG4gIHRyeSB7XHJcbiAgICBpZiAocG9vbFJlc291cmNlLnBhZ2UgJiYgIXBvb2xSZXNvdXJjZS5wYWdlLmlzQ2xvc2VkKCkpIHtcclxuICAgICAgaWYgKGhhcmRSZXNldCkge1xyXG4gICAgICAgIC8vIE5hdmlnYXRlIHRvIGBhYm91dDpibGFua2BcclxuICAgICAgICBhd2FpdCBwb29sUmVzb3VyY2UucGFnZS5nb3RvKCdhYm91dDpibGFuaycsIHtcclxuICAgICAgICAgIHdhaXRVbnRpbDogJ2RvbWNvbnRlbnRsb2FkZWQnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFNldCB0aGUgY29udGVudCBhbmQgYW5kIHNjcmlwdHMgYWdhaW5cclxuICAgICAgICBhd2FpdCBfc2V0UGFnZUNvbnRlbnQocG9vbFJlc291cmNlLnBhZ2UpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIENsZWFyIGJvZHkgY29udGVudFxyXG4gICAgICAgIGF3YWl0IHBvb2xSZXNvdXJjZS5wYWdlLmV2YWx1YXRlKCgpID0+IHtcclxuICAgICAgICAgIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID1cclxuICAgICAgICAgICAgJzxkaXYgaWQ9XCJjaGFydC1jb250YWluZXJcIj48ZGl2IGlkPVwiY29udGFpbmVyXCI+PC9kaXY+PC9kaXY+JztcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgbG9nV2l0aFN0YWNrKFxyXG4gICAgICAyLFxyXG4gICAgICBlcnJvcixcclxuICAgICAgYFtwb29sXSBQb29sIHJlc291cmNlIFske3Bvb2xSZXNvdXJjZS5pZH1dIC0gQ29udGVudCBvZiB0aGUgcGFnZSBjb3VsZCBub3QgYmUgY2xlYXJlZC5gXHJcbiAgICApO1xyXG5cclxuICAgIC8vIFNldCB0aGUgYHdvcmtMaW1pdGAgdG8gZXhjZWVkZWQgaW4gb3JkZXIgdG8gcmVjcmVhdGUgdGhlIHJlc291cmNlXHJcbiAgICBwb29sUmVzb3VyY2Uud29ya0NvdW50ID0gZ2V0T3B0aW9ucygpLnBvb2wud29ya0xpbWl0ICsgMTtcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcyBjdXN0b20gSlMgYW5kIENTUyByZXNvdXJjZXMgdG8gYSBQdXBwZXRlZXIgcGFnZSBiYXNlZCBvbiB0aGUgc3BlY2lmaWVkXHJcbiAqIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gYWRkUGFnZVJlc291cmNlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcGFnZSAtIFRoZSBQdXBwZXRlZXIgcGFnZSBvYmplY3QgdG8gd2hpY2ggcmVzb3VyY2VzIHdpbGxcclxuICogYmUgYWRkZWQuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdXN0b21Mb2dpY09wdGlvbnMgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbmluZ1xyXG4gKiBgY3VzdG9tTG9naWNgIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5PE9iamVjdD4+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhcnJheVxyXG4gKiBvZiBpbmplY3RlZCByZXNvdXJjZXMuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkUGFnZVJlc291cmNlcyhwYWdlLCBjdXN0b21Mb2dpY09wdGlvbnMpIHtcclxuICAvLyBJbmplY3RlZCByZXNvdXJjZXMgYXJyYXlcclxuICBjb25zdCBpbmplY3RlZFJlc291cmNlcyA9IFtdO1xyXG5cclxuICAvLyBVc2UgdGhlIGNvbnRlbnQgb2YgdGhlIGByZXNvdXJjZXNgXHJcbiAgY29uc3QgcmVzb3VyY2VzID0gY3VzdG9tTG9naWNPcHRpb25zLnJlc291cmNlcztcclxuICBpZiAocmVzb3VyY2VzKSB7XHJcbiAgICBjb25zdCBpbmplY3RlZEpzID0gW107XHJcblxyXG4gICAgLy8gTG9hZCBjdXN0b20gSlMgY29kZVxyXG4gICAgaWYgKHJlc291cmNlcy5qcykge1xyXG4gICAgICBpbmplY3RlZEpzLnB1c2goe1xyXG4gICAgICAgIGNvbnRlbnQ6IHJlc291cmNlcy5qc1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBMb2FkIHNjcmlwdHMgZnJvbSBhbGwgY3VzdG9tIGZpbGVzXHJcbiAgICBpZiAocmVzb3VyY2VzLmZpbGVzKSB7XHJcbiAgICAgIGZvciAoY29uc3QgZmlsZSBvZiByZXNvdXJjZXMuZmlsZXMpIHtcclxuICAgICAgICBjb25zdCBpc0xvY2FsID0gZmlsZS5zdGFydHNXaXRoKCdodHRwJykgPyBmYWxzZSA6IHRydWU7XHJcblxyXG4gICAgICAgIC8vIEFkZCBlYWNoIGN1c3RvbSBzY3JpcHQgZnJvbSByZXNvdXJjZXMnIGZpbGVzXHJcbiAgICAgICAgaW5qZWN0ZWRKcy5wdXNoKFxyXG4gICAgICAgICAgaXNMb2NhbFxyXG4gICAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHJlYWRGaWxlU3luYyhnZXRBYnNvbHV0ZVBhdGgoZmlsZSksICd1dGY4JylcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDoge1xyXG4gICAgICAgICAgICAgICAgdXJsOiBmaWxlXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBUaGUgYWN0dWFsIGluamVjdGlvbiBvZiBjb2xsZWN0ZWQgc2NyaXB0c1xyXG4gICAgZm9yIChjb25zdCBqc1Jlc291cmNlIG9mIGluamVjdGVkSnMpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBpbmplY3RlZFJlc291cmNlcy5wdXNoKGF3YWl0IHBhZ2UuYWRkU2NyaXB0VGFnKGpzUmVzb3VyY2UpKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBsb2dXaXRoU3RhY2soMiwgZXJyb3IsIGBbYnJvd3Nlcl0gVGhlIEpTIHJlc291cmNlIGNhbm5vdCBiZSBsb2FkZWQuYCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGluamVjdGVkSnMubGVuZ3RoID0gMDtcclxuXHJcbiAgICAvLyBMb2FkIENTU1xyXG4gICAgY29uc3QgaW5qZWN0ZWRDc3MgPSBbXTtcclxuICAgIGlmIChyZXNvdXJjZXMuY3NzKSB7XHJcbiAgICAgIGNvbnN0IGNzc0ltcG9ydHMgPSByZXNvdXJjZXMuY3NzLm1hdGNoKC9AaW1wb3J0XFxzKihbXjtdKik7L2cpO1xyXG4gICAgICBpZiAoY3NzSW1wb3J0cykge1xyXG4gICAgICAgIC8vIEhhbmRsZSBjc3Mgc2VjdGlvblxyXG4gICAgICAgIGZvciAobGV0IGNzc0ltcG9ydFBhdGggb2YgY3NzSW1wb3J0cykge1xyXG4gICAgICAgICAgaWYgKGNzc0ltcG9ydFBhdGgpIHtcclxuICAgICAgICAgICAgY3NzSW1wb3J0UGF0aCA9IGNzc0ltcG9ydFBhdGhcclxuICAgICAgICAgICAgICAucmVwbGFjZSgndXJsKCcsICcnKVxyXG4gICAgICAgICAgICAgIC5yZXBsYWNlKCdAaW1wb3J0JywgJycpXHJcbiAgICAgICAgICAgICAgLnJlcGxhY2UoL1wiL2csICcnKVxyXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csICcnKVxyXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC87LywgJycpXHJcbiAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcKS9nLCAnJylcclxuICAgICAgICAgICAgICAudHJpbSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGVhY2ggY3VzdG9tIGNzcyBmcm9tIHJlc291cmNlc1xyXG4gICAgICAgICAgICBpZiAoY3NzSW1wb3J0UGF0aC5zdGFydHNXaXRoKCdodHRwJykpIHtcclxuICAgICAgICAgICAgICBpbmplY3RlZENzcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHVybDogY3NzSW1wb3J0UGF0aFxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1c3RvbUxvZ2ljT3B0aW9ucy5hbGxvd0ZpbGVSZXNvdXJjZXMpIHtcclxuICAgICAgICAgICAgICBpbmplY3RlZENzcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHBhdGg6IGdldEFic29sdXRlUGF0aChjc3NJbXBvcnRQYXRoKVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBUaGUgcmVzdCBvZiB0aGUgQ1NTIHNlY3Rpb24gd2lsbCBiZSBjb250ZW50IGJ5IG5vd1xyXG4gICAgICBpbmplY3RlZENzcy5wdXNoKHtcclxuICAgICAgICBjb250ZW50OiByZXNvdXJjZXMuY3NzLnJlcGxhY2UoL0BpbXBvcnRcXHMqKFteO10qKTsvZywgJycpIHx8ICcgJ1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFRoZSBhY3R1YWwgaW5qZWN0aW9uIG9mIGNvbGxlY3RlZCBDU1NcclxuICAgICAgZm9yIChjb25zdCBjc3NSZXNvdXJjZSBvZiBpbmplY3RlZENzcykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBpbmplY3RlZFJlc291cmNlcy5wdXNoKGF3YWl0IHBhZ2UuYWRkU3R5bGVUYWcoY3NzUmVzb3VyY2UpKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgbG9nV2l0aFN0YWNrKFxyXG4gICAgICAgICAgICAyLFxyXG4gICAgICAgICAgICBlcnJvcixcclxuICAgICAgICAgICAgYFticm93c2VyXSBUaGUgQ1NTIHJlc291cmNlIGNhbm5vdCBiZSBsb2FkZWQuYFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaW5qZWN0ZWRDc3MubGVuZ3RoID0gMDtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGluamVjdGVkUmVzb3VyY2VzO1xyXG59XHJcblxyXG4vKipcclxuICogQ2xlYXJzIG91dCBhbGwgc3RhdGUgc2V0IG9uIHRoZSBwYWdlIHdpdGggYGFkZFNjcmlwdFRhZ2AgYW5kIGBhZGRTdHlsZVRhZ2AuXHJcbiAqIFJlbW92ZXMgaW5qZWN0ZWQgcmVzb3VyY2VzIGFuZCByZXNldHMgQ1NTIGFuZCBzY3JpcHQgdGFncyBvbiB0aGUgcGFnZS5cclxuICogQWRkaXRpb25hbGx5LCBpdCBkZXN0cm95cyBwcmV2aW91c2x5IGV4aXN0aW5nIGNoYXJ0cy5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBjbGVhclBhZ2VSZXNvdXJjZXNcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHBhZ2UgLSBUaGUgUHVwcGV0ZWVyIHBhZ2Ugb2JqZWN0IGZyb20gd2hpY2ggcmVzb3VyY2VzIHdpbGxcclxuICogYmUgY2xlYXJlZC5cclxuICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBpbmplY3RlZFJlc291cmNlcyAtIEFycmF5IG9mIGluamVjdGVkIHJlc291cmNlc1xyXG4gKiB0byBiZSBjbGVhcmVkLlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsZWFyUGFnZVJlc291cmNlcyhwYWdlLCBpbmplY3RlZFJlc291cmNlcykge1xyXG4gIHRyeSB7XHJcbiAgICBmb3IgKGNvbnN0IHJlc291cmNlIG9mIGluamVjdGVkUmVzb3VyY2VzKSB7XHJcbiAgICAgIGF3YWl0IHJlc291cmNlLmRpc3Bvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEZXN0cm95IG9sZCBjaGFydHMgYWZ0ZXIgZXhwb3J0IGlzIGRvbmUgYW5kIHJlc2V0IGFsbCBDU1MgYW5kIHNjcmlwdCB0YWdzXHJcbiAgICBhd2FpdCBwYWdlLmV2YWx1YXRlKCgpID0+IHtcclxuICAgICAgLy8gV2UgYXJlIG5vdCBndWFyYW50ZWVkIHRoYXQgSGlnaGNoYXJ0cyBpcyBsb2FkZWQsIHdoZW4gZG9pbmcgU1ZHIGV4cG9ydHNcclxuICAgICAgaWYgKHR5cGVvZiBIaWdoY2hhcnRzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxyXG4gICAgICAgIGNvbnN0IG9sZENoYXJ0cyA9IEhpZ2hjaGFydHMuY2hhcnRzO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBpbiBhbnkgYWxyZWFkeSBleGlzdGluZyBjaGFydHNcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvbGRDaGFydHMpICYmIG9sZENoYXJ0cy5sZW5ndGgpIHtcclxuICAgICAgICAgIC8vIERlc3Ryb3kgb2xkIGNoYXJ0c1xyXG4gICAgICAgICAgZm9yIChjb25zdCBvbGRDaGFydCBvZiBvbGRDaGFydHMpIHtcclxuICAgICAgICAgICAgb2xkQ2hhcnQgJiYgb2xkQ2hhcnQuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgICAgICAgICAgSGlnaGNoYXJ0cy5jaGFydHMuc2hpZnQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxyXG4gICAgICBjb25zdCBbLi4uc2NyaXB0c1RvUmVtb3ZlXSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICAgIGNvbnN0IFssIC4uLnN0eWxlc1RvUmVtb3ZlXSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzdHlsZScpO1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgICAgY29uc3QgWy4uLmxpbmtzVG9SZW1vdmVdID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2xpbmsnKTtcclxuXHJcbiAgICAgIC8vIFJlbW92ZSB0YWdzXHJcbiAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBbXHJcbiAgICAgICAgLi4uc2NyaXB0c1RvUmVtb3ZlLFxyXG4gICAgICAgIC4uLnN0eWxlc1RvUmVtb3ZlLFxyXG4gICAgICAgIC4uLmxpbmtzVG9SZW1vdmVcclxuICAgICAgXSkge1xyXG4gICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBsb2dXaXRoU3RhY2soMiwgZXJyb3IsIGBbYnJvd3Nlcl0gQ291bGQgbm90IGNsZWFyIHBhZ2UncyByZXNvdXJjZXMuYCk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogU2V0cyB0aGUgY29udGVudCBmb3IgYSBQdXBwZXRlZXIgcGFnZSB1c2luZyBhIHByZWRlZmluZWQgdGVtcGxhdGVcclxuICogYW5kIGFkZGl0aW9uYWwgc2NyaXB0cy5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBfc2V0UGFnZUNvbnRlbnRcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHBhZ2UgLSBUaGUgUHVwcGV0ZWVyIHBhZ2Ugb2JqZWN0IHRvIHdoaWNoIHRoZSBjb250ZW50XHJcbiAqIGlzIGJlaW5nIHNldC5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIF9zZXRQYWdlQ29udGVudChwYWdlKSB7XHJcbiAgLy8gU2V0IHRoZSBpbml0aWFsIHBhZ2UgY29udGVudFxyXG4gIGF3YWl0IHBhZ2Uuc2V0Q29udGVudChwYWdlVGVtcGxhdGUsIHsgd2FpdFVudGlsOiAnZG9tY29udGVudGxvYWRlZCcgfSk7XHJcblxyXG4gIC8vIEFkZCBhbGwgcmVnaXN0ZXJlZCBIaWdjaGFydHMgc2NyaXB0cywgcXVpdGUgZGVtYW5kaW5nXHJcbiAgYXdhaXQgcGFnZS5hZGRTY3JpcHRUYWcoeyBwYXRoOiBqb2luKGdldENhY2hlUGF0aCgpLCAnc291cmNlcy5qcycpIH0pO1xyXG5cclxuICAvLyBTZXQgdGhlIGluaXRpYWwgYGFuaW1PYmplY3RgIGZvciBIaWdoY2hhcnRzXHJcbiAgYXdhaXQgcGFnZS5ldmFsdWF0ZShzZXR1cEhpZ2hjaGFydHMpO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IGV2ZW50cyAobGlrZSBgcGFnZWVycm9yYCBhbmQgYGNvbnNvbGVgKSBmb3IgYSBQdXBwZXRlZXIgcGFnZSBpbiBvcmRlclxyXG4gKiB0byBjYXRjaCBhbmQgZGlzcGxheSBlcnJvcnMgYW5kIGNvbnNvbGUgbG9ncyBmcm9tIHRoZSB3aW5kb3cgY29udGV4dC5cclxuICpcclxuICogQGZ1bmN0aW9uIF9zZXRQYWdlRXZlbnRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWdlIC0gVGhlIFB1cHBldGVlciBwYWdlIG9iamVjdCB0byB3aGljaCB0aGUgbGlzdGVuZXJzXHJcbiAqIGFyZSBiZWluZyBzZXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBfc2V0UGFnZUV2ZW50cyhwYWdlKSB7XHJcbiAgLy8gR2V0IGBkZWJ1Z2Agb3B0aW9uc1xyXG4gIGNvbnN0IHsgZGVidWcgfSA9IGdldE9wdGlvbnMoKTtcclxuXHJcbiAgLy8gU2V0IHRoZSBgcGFnZWVycm9yYCBsaXN0ZW5lclxyXG4gIHBhZ2Uub24oJ3BhZ2VlcnJvcicsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIEl0IHdvdWxkIHNlZW0gbGlrZSB0aGlzIG1heSBmaXJlIGF0IHRoZSBzYW1lIHRpbWUgb3Igc2hvcnRseSBiZWZvcmVcclxuICAgIC8vIGEgcGFnZSBpcyBjbG9zZWQuXHJcbiAgICBpZiAocGFnZS5pc0Nsb3NlZCgpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy8gU2V0IHRoZSBgY29uc29sZWAgbGlzdGVuZXIsIGlmIG5lZWRlZFxyXG4gIGlmIChkZWJ1Zy5lbmFibGUgJiYgZGVidWcubGlzdGVuVG9Db25zb2xlKSB7XHJcbiAgICBwYWdlLm9uKCdjb25zb2xlJywgKG1lc3NhZ2UpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coYFtkZWJ1Z10gJHttZXNzYWdlLnRleHQoKX1gKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGdldEJyb3dzZXIsXHJcbiAgY3JlYXRlQnJvd3NlcixcclxuICBjbG9zZUJyb3dzZXIsXHJcbiAgbmV3UGFnZSxcclxuICBjbGVhclBhZ2UsXHJcbiAgYWRkUGFnZVJlc291cmNlcyxcclxuICBjbGVhclBhZ2VSZXNvdXJjZXNcclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogVGhlIENTUyB0byBiZSB1c2VkIG9uIHRoZSBleHBvcnRlZCBwYWdlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgQ1NTIGNvbmZpZ3VyYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCAoKSA9PiBgXHJcblxyXG5odG1sLCBib2R5IHtcclxuICBtYXJnaW46IDA7XHJcbiAgcGFkZGluZzogMDtcclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcblxyXG4jdGFibGUtZGl2LCAjc2xpZGVycywgI2RhdGF0YWJsZSwgI2NvbnRyb2xzLCAubGQtcm93IHtcclxuICBkaXNwbGF5OiBub25lO1xyXG4gIGhlaWdodDogMDtcclxufVxyXG5cclxuI2NoYXJ0LWNvbnRhaW5lciB7XHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICBtYXJnaW46IDA7XHJcbiAgb3ZlcmZsb3c6IGF1dG87XHJcbiAgZm9udC1zaXplOiAwO1xyXG59XHJcblxyXG4jY2hhcnQtY29udGFpbmVyID4gZmlndXJlLCBkaXYge1xyXG4gIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcclxuICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbmA7XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IGNzc1RlbXBsYXRlIGZyb20gJy4vY3NzLmpzJztcclxuXHJcbi8qKlxyXG4gKiBUaGUgU1ZHIHRlbXBsYXRlIHRvIHVzZSB3aGVuIGxvYWRpbmcgU1ZHIGNvbnRlbnQgdG8gYmUgZXhwb3J0ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdmcgLSBUaGUgU1ZHIGlucHV0IGNvbnRlbnQgdG8gYmUgZXhwb3J0ZWQuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBTVkcgdGVtcGxhdGUuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCAoc3ZnKSA9PiBgXHJcbjwhRE9DVFlQRSBodG1sPlxyXG48aHRtbCBsYW5nPSdlbi1VUyc+XHJcbiAgPGhlYWQ+XHJcbiAgICA8bWV0YSBodHRwLWVxdWl2PVwiQ29udGVudC1UeXBlXCIgY29udGVudD1cInRleHQvaHRtbDsgY2hhcnNldD11dGYtOFwiPlxyXG4gICAgPHRpdGxlPkhpZ2hjaGFydHMgRXhwb3J0PC90aXRsZT5cclxuICA8L2hlYWQ+XHJcbiAgPHN0eWxlPlxyXG4gICAgJHtjc3NUZW1wbGF0ZSgpfVxyXG4gIDwvc3R5bGU+XHJcbiAgPGJvZHk+XHJcbiAgICA8ZGl2IGlkPVwiY2hhcnQtY29udGFpbmVyXCI+XHJcbiAgICAgICR7c3ZnfVxyXG4gICAgPC9kaXY+XHJcbiAgPC9ib2R5PlxyXG48L2h0bWw+XHJcblxyXG5gO1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNSwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgVGhpcyBtb2R1bGUgaGFuZGxlcyBjaGFydCBleHBvcnQgZnVuY3Rpb25hbGl0eSB1c2luZyBQdXBwZXRlZXIuXHJcbiAqIEl0IHN1cHBvcnRzIGV4cG9ydGluZyBjaGFydHMgYXMgU1ZHLCBQTkcsIEpQRUcsIGFuZCBQREYgZm9ybWF0cy4gVGhlIG1vZHVsZVxyXG4gKiBtYW5hZ2VzIHBhZ2UgcmVzb3VyY2VzLCBzZXRzIHVwIHRoZSBleHBvcnQgZW52aXJvbm1lbnQsIGFuZCBwcm9jZXNzZXMgY2hhcnRcclxuICogY29uZmlndXJhdGlvbnMgb3IgU1ZHIGlucHV0cyBmb3IgcmVuZGVyaW5nLiBFeHBvcnRzIHRvIGEgY2hhcnQgZnJvbSBhIHBhZ2VcclxuICogdXNpbmcgUHVwcGV0ZWVyLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGFkZFBhZ2VSZXNvdXJjZXMsIGNsZWFyUGFnZVJlc291cmNlcyB9IGZyb20gJy4vYnJvd3Nlci5qcyc7XHJcbmltcG9ydCB7IGNyZWF0ZUNoYXJ0IH0gZnJvbSAnLi9oaWdoY2hhcnRzLmpzJztcclxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi9sb2dnZXIuanMnO1xyXG5cclxuaW1wb3J0IHN2Z1RlbXBsYXRlIGZyb20gJy4uL3RlbXBsYXRlcy9zdmdFeHBvcnQvc3ZnRXhwb3J0LmpzJztcclxuXHJcbmltcG9ydCBFeHBvcnRFcnJvciBmcm9tICcuL2Vycm9ycy9FeHBvcnRFcnJvci5qcyc7XHJcblxyXG4vKipcclxuICogRXhwb3J0cyB0byBhIGNoYXJ0IGZyb20gYSBwYWdlIHVzaW5nIFB1cHBldGVlci5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBwdXBwZXRlZXJFeHBvcnRcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHBhZ2UgLSBQdXBwZXRlZXIgcGFnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBleHBvcnRPcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmcgYGV4cG9ydGBcclxuICogb3B0aW9ucy5cclxuICogQHBhcmFtIHtPYmplY3R9IGN1c3RvbUxvZ2ljT3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nXHJcbiAqIGBjdXN0b21Mb2dpY2Agb3B0aW9ucy5cclxuICpcclxuICogQHJldHVybnMge1Byb21pc2U8KHN0cmluZ3xCdWZmZXJ8RXhwb3J0RXJyb3IpPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXNcclxuICogdG8gdGhlIGV4cG9ydGVkIGRhdGEgb3IgcmVqZWN0aW5nIHdpdGggYW4gYEV4cG9ydEVycm9yYC5cclxuICpcclxuICogQHRocm93cyB7RXhwb3J0RXJyb3J9IFRocm93cyBhbiBgRXhwb3J0RXJyb3JgIGlmIGV4cG9ydCB0byBhbiB1bnN1cHBvcnRlZFxyXG4gKiBvdXRwdXQgZm9ybWF0IG9jY3Vycy5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwdXBwZXRlZXJFeHBvcnQocGFnZSwgZXhwb3J0T3B0aW9ucywgY3VzdG9tTG9naWNPcHRpb25zKSB7XHJcbiAgLy8gSW5qZWN0ZWQgcmVzb3VyY2VzIGFycmF5IChhZGRpdGlvbmFsIEpTIGFuZCBDU1MpXHJcbiAgY29uc3QgaW5qZWN0ZWRSZXNvdXJjZXMgPSBbXTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGxldCBpc1NWRyA9IGZhbHNlO1xyXG5cclxuICAgIC8vIERlY2lkZSBvbiB0aGUgZXhwb3J0IG1ldGhvZFxyXG4gICAgaWYgKGV4cG9ydE9wdGlvbnMuc3ZnKSB7XHJcbiAgICAgIGxvZyg0LCAnW2V4cG9ydF0gVHJlYXRpbmcgYXMgU1ZHIGlucHV0LicpO1xyXG5cclxuICAgICAgLy8gSWYgdGhlIGB0eXBlYCBpcyBhbHNvIFNWRywgcmV0dXJuIHRoZSBpbnB1dFxyXG4gICAgICBpZiAoZXhwb3J0T3B0aW9ucy50eXBlID09PSAnc3ZnJykge1xyXG4gICAgICAgIHJldHVybiBleHBvcnRPcHRpb25zLnN2ZztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTWFyayBhcyBTVkcgZXhwb3J0IGZvciB0aGUgbGF0ZXIgc2l6ZSBjb3JyZWN0aW9uc1xyXG4gICAgICBpc1NWRyA9IHRydWU7XHJcblxyXG4gICAgICAvLyBTVkcgZXhwb3J0XHJcbiAgICAgIGF3YWl0IHBhZ2Uuc2V0Q29udGVudChzdmdUZW1wbGF0ZShleHBvcnRPcHRpb25zLnN2ZyksIHtcclxuICAgICAgICB3YWl0VW50aWw6ICdkb21jb250ZW50bG9hZGVkJ1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxvZyg0LCAnW2V4cG9ydF0gVHJlYXRpbmcgYXMgSlNPTiBjb25maWcuJyk7XHJcblxyXG4gICAgICAvLyBPcHRpb25zIGV4cG9ydFxyXG4gICAgICBhd2FpdCBwYWdlLmV2YWx1YXRlKGNyZWF0ZUNoYXJ0LCBleHBvcnRPcHRpb25zLCBjdXN0b21Mb2dpY09wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEtlZXBzIHRyYWNrIG9mIGFsbCByZXNvdXJjZXMgYWRkZWQgb24gdGhlIHBhZ2Ugd2l0aCBhZGRYWFhUYWcuIGV0Y1xyXG4gICAgLy8gSXQncyBWSVRBTCB0aGF0IGFsbCBhZGRlZCByZXNvdXJjZXMgZW5kcyB1cCBoZXJlIHNvIHdlIGNhbiBjbGVhciB0aGluZ3NcclxuICAgIC8vIG91dCB3aGVuIGRvaW5nIGEgbmV3IGV4cG9ydCBpbiB0aGUgc2FtZSBwYWdlIVxyXG4gICAgaW5qZWN0ZWRSZXNvdXJjZXMucHVzaChcclxuICAgICAgLi4uKGF3YWl0IGFkZFBhZ2VSZXNvdXJjZXMocGFnZSwgY3VzdG9tTG9naWNPcHRpb25zKSlcclxuICAgICk7XHJcblxyXG4gICAgLy8gR2V0IHRoZSByZWFsIGNoYXJ0IHNpemUgYW5kIHNldCB0aGUgem9vbSBhY2NvcmRpbmdseVxyXG4gICAgY29uc3Qgc2l6ZSA9IGF3YWl0IF9nZXRDaGFydFNpemUocGFnZSwgaXNTVkcsIGV4cG9ydE9wdGlvbnMuc2NhbGUpO1xyXG5cclxuICAgIC8vIEdldCB0aGUgY2xpcCByZWdpb24gZm9yIHRoZSBwYWdlXHJcbiAgICBjb25zdCB7IHgsIHkgfSA9IGF3YWl0IF9nZXRDbGlwUmVnaW9uKHBhZ2UpO1xyXG5cclxuICAgIC8vIFNldCBmaW5hbCBgaGVpZ2h0YCBmb3Igdmlld3BvcnRcclxuICAgIGNvbnN0IHZpZXdwb3J0SGVpZ2h0ID0gTWF0aC5hYnMoXHJcbiAgICAgIE1hdGguY2VpbChzaXplLmNoYXJ0SGVpZ2h0IHx8IGV4cG9ydE9wdGlvbnMuaGVpZ2h0KVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBTZXQgZmluYWwgYHdpZHRoYCBmb3Igdmlld3BvcnRcclxuICAgIGNvbnN0IHZpZXdwb3J0V2lkdGggPSBNYXRoLmFicyhcclxuICAgICAgTWF0aC5jZWlsKHNpemUuY2hhcnRXaWR0aCB8fCBleHBvcnRPcHRpb25zLndpZHRoKVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGZpbmFsIHZpZXdwb3J0IG5vdyB0aGF0IHdlIGhhdmUgdGhlIHJlYWwgaGVpZ2h0XHJcbiAgICBhd2FpdCBwYWdlLnNldFZpZXdwb3J0KHtcclxuICAgICAgaGVpZ2h0OiB2aWV3cG9ydEhlaWdodCxcclxuICAgICAgd2lkdGg6IHZpZXdwb3J0V2lkdGgsXHJcbiAgICAgIGRldmljZVNjYWxlRmFjdG9yOiBpc1NWRyA/IDEgOiBwYXJzZUZsb2F0KGV4cG9ydE9wdGlvbnMuc2NhbGUpXHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgcmVzdWx0O1xyXG4gICAgLy8gUmFzdGVyaXphdGlvbiBwcm9jZXNzXHJcbiAgICBzd2l0Y2ggKGV4cG9ydE9wdGlvbnMudHlwZSkge1xyXG4gICAgICBjYXNlICdzdmcnOlxyXG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IF9jcmVhdGVTVkcocGFnZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3BuZyc6XHJcbiAgICAgIGNhc2UgJ2pwZWcnOlxyXG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IF9jcmVhdGVJbWFnZShcclxuICAgICAgICAgIHBhZ2UsXHJcbiAgICAgICAgICBleHBvcnRPcHRpb25zLnR5cGUsXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHdpZHRoOiB2aWV3cG9ydFdpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHZpZXdwb3J0SGVpZ2h0LFxyXG4gICAgICAgICAgICB4LFxyXG4gICAgICAgICAgICB5XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZXhwb3J0T3B0aW9ucy5yYXN0ZXJpemF0aW9uVGltZW91dFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3BkZic6XHJcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgX2NyZWF0ZVBERihcclxuICAgICAgICAgIHBhZ2UsXHJcbiAgICAgICAgICB2aWV3cG9ydEhlaWdodCxcclxuICAgICAgICAgIHZpZXdwb3J0V2lkdGgsXHJcbiAgICAgICAgICBleHBvcnRPcHRpb25zLnJhc3Rlcml6YXRpb25UaW1lb3V0XHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgICBgW2V4cG9ydF0gVW5zdXBwb3J0ZWQgb3V0cHV0IGZvcm1hdDogJHtleHBvcnRPcHRpb25zLnR5cGV9LmAsXHJcbiAgICAgICAgICA0MDBcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENsZWFyIHByZXZpb3VzbHkgaW5qZWN0ZWQgSlMgYW5kIENTUyByZXNvdXJjZXNcclxuICAgIGF3YWl0IGNsZWFyUGFnZVJlc291cmNlcyhwYWdlLCBpbmplY3RlZFJlc291cmNlcyk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBhd2FpdCBjbGVhclBhZ2VSZXNvdXJjZXMocGFnZSwgaW5qZWN0ZWRSZXNvdXJjZXMpO1xyXG4gICAgcmV0dXJuIGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHJpZXZlcyB0aGUgY2xpcHBpbmcgcmVnaW9uIGNvb3JkaW5hdGVzIG9mIHRoZSBzcGVjaWZpZWQgcGFnZSBlbGVtZW50XHJcbiAqIHdpdGggdGhlICdjaGFydC1jb250YWluZXInIGlkLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIF9nZXRDbGlwUmVnaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWdlIC0gUHVwcGV0ZWVyIHBhZ2Ugb2JqZWN0LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBvYmplY3QgY29udGFpbmluZ1xyXG4gKiBgeGAsIGB5YCwgYHdpZHRoYCwgYW5kIGBoZWlnaHRgIHByb3BlcnRpZXMuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfZ2V0Q2xpcFJlZ2lvbihwYWdlKSB7XHJcbiAgcmV0dXJuIHBhZ2UuJGV2YWwoJyNjaGFydC1jb250YWluZXInLCAoZWxlbWVudCkgPT4ge1xyXG4gICAgY29uc3QgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeCxcclxuICAgICAgeSxcclxuICAgICAgd2lkdGgsXHJcbiAgICAgIGhlaWdodDogTWF0aC50cnVuYyhoZWlnaHQgPiAxID8gaGVpZ2h0IDogNTAwKVxyXG4gICAgfTtcclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHJpZXZlcyB0aGUgcmVhbCBjaGFydCBkaW1lbnNpb25zIGZyb20gYSBQdXBwZXRlZXIgcGFnZS4gVGhlIGZ1bmN0aW9uXHJcbiAqIGJlaGF2ZXMgZGlmZmVyZW50bHkgYmFzZWQgb24gd2hldGhlciB0aGUgZXhwb3J0IHR5cGUgaXMgU1ZHIG9yIGFub3RoZXJcclxuICogZm9ybWF0LlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIF9nZXRDaGFydFNpemVcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHBhZ2UgLSBQdXBwZXRlZXIgcGFnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTVkcgLSBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGNoYXJ0IGJlaW5nIHByb2Nlc3NlZFxyXG4gKiBpcyBhbiBTVkcgb3IgYW5vdGhlciBmb3JtYXQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZSAtIFRoZSBzY2FsZSBmYWN0b3IgdG8gYmUgYXBwbGllZCB0byB0aGUgY2hhcnRcclxuICogZGltZW5zaW9ucy5cclxuICpcclxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gb2JqZWN0IGNvbnRhaW5pbmdcclxuICogdGhlIGFjdHVhbCBoZWlnaHQgYW5kIHdpZHRoIG9mIHRoZSBjaGFydCBhZnRlciBzY2FsaW5nLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX2dldENoYXJ0U2l6ZShwYWdlLCBpc1NWRywgc2NhbGUpIHtcclxuICAvLyBUcmlnZ2VyIGFwcHJvcHJpYXRlIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBgaXNTdmdgIGZsYWcgdG8gZ2V0IGNoYXJ0IHNpemVcclxuICByZXR1cm4gaXNTVkdcclxuICAgID8gYXdhaXQgcGFnZS5ldmFsdWF0ZSgoc2NhbGUpID0+IHtcclxuICAgICAgICBjb25zdCBzdmdFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAgICcjY2hhcnQtY29udGFpbmVyIHN2ZzpmaXJzdC1vZi10eXBlJ1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIEdldCB0aGUgdmFsdWVzIGNvcnJlY3RseSBzY2FsZWRcclxuICAgICAgICBjb25zdCBjaGFydEhlaWdodCA9IHN2Z0VsZW1lbnQuaGVpZ2h0LmJhc2VWYWwudmFsdWUgKiBzY2FsZTtcclxuICAgICAgICBjb25zdCBjaGFydFdpZHRoID0gc3ZnRWxlbWVudC53aWR0aC5iYXNlVmFsLnZhbHVlICogc2NhbGU7XHJcblxyXG4gICAgICAgIC8vIEluIGNhc2Ugb2YgU1ZHIHRoZSB6b29tIG11c3QgYmUgc2V0IGRpcmVjdGx5IGZvciBib2R5IGFzIHNjYWxlXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS56b29tID0gc2NhbGU7XHJcblxyXG4gICAgICAgIC8vIFNldCB0aGUgbWFyZ2luIHRvIDBweFxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUubWFyZ2luID0gJzBweCc7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBjaGFydEhlaWdodCxcclxuICAgICAgICAgIGNoYXJ0V2lkdGhcclxuICAgICAgICB9O1xyXG4gICAgICB9LCBwYXJzZUZsb2F0KHNjYWxlKSlcclxuICAgIDogYXdhaXQgcGFnZS5ldmFsdWF0ZSgoKSA9PiB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICAgICAgY29uc3QgeyBjaGFydEhlaWdodCwgY2hhcnRXaWR0aCB9ID0gd2luZG93LkhpZ2hjaGFydHMuY2hhcnRzWzBdO1xyXG5cclxuICAgICAgICAvLyBObyBuZWVkIGZvciBzdWNoIHNjYWxlIG1hbmlwdWxhdGlvbiBpbiBjYXNlIG9mIG90aGVyIHR5cGVzXHJcbiAgICAgICAgLy8gb2YgZXhwb3J0cy4gUmVzZXQgdGhlIHpvb20gZm9yIG90aGVyIGV4cG9ydHMgdGhhbiB0byBTVkdzXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS56b29tID0gMTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGNoYXJ0SGVpZ2h0LFxyXG4gICAgICAgICAgY2hhcnRXaWR0aFxyXG4gICAgICAgIH07XHJcbiAgICAgIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhbiBTVkcgYnkgZXZhbHVhdGluZyB0aGUgYG91dGVySFRNTGAgb2YgdGhlIGZpcnN0ICdzdmcnIGVsZW1lbnRcclxuICogaW5zaWRlIGFuIGVsZW1lbnQgd2l0aCB0aGUgaWQgJ2NvbnRhaW5lcicuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gX2NyZWF0ZVNWR1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcGFnZSAtIFB1cHBldGVlciBwYWdlIG9iamVjdC5cclxuICpcclxuICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIFNWRyBzdHJpbmcuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfY3JlYXRlU1ZHKHBhZ2UpIHtcclxuICByZXR1cm4gcGFnZS4kZXZhbChcclxuICAgICcjY29udGFpbmVyIHN2ZzpmaXJzdC1vZi10eXBlJyxcclxuICAgIChlbGVtZW50KSA9PiBlbGVtZW50Lm91dGVySFRNTFxyXG4gICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIGltYWdlIHVzaW5nIFB1cHBldGVlcidzIHBhZ2UgYHNjcmVlbnNob3RgIGZ1bmN0aW9uYWxpdHkgd2l0aFxyXG4gKiBzcGVjaWZpZWQgb3B0aW9ucy5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBfY3JlYXRlSW1hZ2VcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHBhZ2UgLSBQdXBwZXRlZXIgcGFnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gSW1hZ2UgdHlwZS5cclxuICogQHBhcmFtIHtPYmplY3R9IGNsaXAgLSBDbGlwcGluZyByZWdpb24gY29vcmRpbmF0ZXMuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSByYXN0ZXJpemF0aW9uVGltZW91dCAtIFRpbWVvdXQgZm9yIHJhc3Rlcml6YXRpb25cclxuICogaW4gbWlsbGlzZWNvbmRzLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxCdWZmZXI+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgaW1hZ2UgYnVmZmVyXHJcbiAqIG9yIHJlamVjdGluZyB3aXRoIGFuIGBFeHBvcnRFcnJvcmAgZm9yIHRpbWVvdXQuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfY3JlYXRlSW1hZ2UocGFnZSwgdHlwZSwgY2xpcCwgcmFzdGVyaXphdGlvblRpbWVvdXQpIHtcclxuICByZXR1cm4gUHJvbWlzZS5yYWNlKFtcclxuICAgIHBhZ2Uuc2NyZWVuc2hvdCh7XHJcbiAgICAgIHR5cGUsXHJcbiAgICAgIGNsaXAsXHJcbiAgICAgIGVuY29kaW5nOiAnYmFzZTY0JyxcclxuICAgICAgZnVsbFBhZ2U6IGZhbHNlLFxyXG4gICAgICBvcHRpbWl6ZUZvclNwZWVkOiB0cnVlLFxyXG4gICAgICBjYXB0dXJlQmV5b25kVmlld3BvcnQ6IHRydWUsXHJcbiAgICAgIC4uLih0eXBlICE9PSAncG5nJyA/IHsgcXVhbGl0eTogODAgfSA6IHt9KSxcclxuICAgICAgLy8gQWx3YXlzIHJlbmRlciBvbiBhIHRyYW5zcGFyZW50IHBhZ2UgaWYgdGhlIGV4cGVjdGVkIHR5cGUgZm9ybWF0IGlzIFBOR1xyXG4gICAgICBvbWl0QmFja2dyb3VuZDogdHlwZSA9PSAncG5nJyAvLyAjNDQ3LCAjNDYzXHJcbiAgICB9KSxcclxuICAgIG5ldyBQcm9taXNlKChfcmVzb2x2ZSwgcmVqZWN0KSA9PlxyXG4gICAgICBzZXRUaW1lb3V0KFxyXG4gICAgICAgICgpID0+IHJlamVjdChuZXcgRXhwb3J0RXJyb3IoJ1Jhc3Rlcml6YXRpb24gdGltZW91dCcsIDQwOCkpLFxyXG4gICAgICAgIHJhc3Rlcml6YXRpb25UaW1lb3V0IHx8IDE1MDBcclxuICAgICAgKVxyXG4gICAgKVxyXG4gIF0pO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIFBERiB1c2luZyBQdXBwZXRlZXIncyBwYWdlIGBwZGZgIGZ1bmN0aW9uYWxpdHkgd2l0aCBzcGVjaWZpZWRcclxuICogb3B0aW9ucy5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBfY3JlYXRlUERGXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWdlIC0gUHVwcGV0ZWVyIHBhZ2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gUERGIGhlaWdodC5cclxuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gUERGIHdpZHRoLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gcmFzdGVyaXphdGlvblRpbWVvdXQgLSBUaW1lb3V0IGZvciByYXN0ZXJpemF0aW9uXHJcbiAqIGluIG1pbGxpc2Vjb25kcy5cclxuICpcclxuICogQHJldHVybnMge1Byb21pc2U8QnVmZmVyPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIFBERiBidWZmZXIuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfY3JlYXRlUERGKHBhZ2UsIGhlaWdodCwgd2lkdGgsIHJhc3Rlcml6YXRpb25UaW1lb3V0KSB7XHJcbiAgYXdhaXQgcGFnZS5lbXVsYXRlTWVkaWFUeXBlKCdzY3JlZW4nKTtcclxuICByZXR1cm4gcGFnZS5wZGYoe1xyXG4gICAgLy8gVGhpcyB3aWxsIHJlbW92ZSBhbiBleHRyYSBlbXB0eSBwYWdlIGluIFBERiBleHBvcnRzXHJcbiAgICBoZWlnaHQ6IGhlaWdodCArIDEsXHJcbiAgICB3aWR0aCxcclxuICAgIGVuY29kaW5nOiAnYmFzZTY0JyxcclxuICAgIHRpbWVvdXQ6IHJhc3Rlcml6YXRpb25UaW1lb3V0IHx8IDE1MDBcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHB1cHBldGVlckV4cG9ydFxyXG59O1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNSwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgVGhpcyBtb2R1bGUgcHJvdmlkZXMgYSB3b3JrZXIgcG9vbCBpbXBsZW1lbnRhdGlvbiBmb3IgbWFuYWdpbmdcclxuICogdGhlIGJyb3dzZXIgaW5zdGFuY2UgYW5kIHBhZ2VzLCBzcGVjaWZpY2FsbHkgZGVzaWduZWQgZm9yIHVzZSB3aXRoXHJcbiAqIHRoZSBIaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXIuIEl0IG9wdGltaXplcyByZXNvdXJjZXMgdXNhZ2UgYW5kIHBlcmZvcm1hbmNlXHJcbiAqIGJ5IG1haW50YWluaW5nIGEgcG9vbCBvZiB3b3JrZXJzIHRoYXQgY2FuIGhhbmRsZSBjb25jdXJyZW50IGV4cG9ydCB0YXNrc1xyXG4gKiB1c2luZyBQdXBwZXRlZXIuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgUG9vbCB9IGZyb20gJ3Rhcm4nO1xyXG5pbXBvcnQgeyB2NCBhcyB1dWlkIH0gZnJvbSAndXVpZCc7XHJcblxyXG5pbXBvcnQgeyBjbGVhclBhZ2UsIGNyZWF0ZUJyb3dzZXIsIGNsb3NlQnJvd3NlciwgbmV3UGFnZSB9IGZyb20gJy4vYnJvd3Nlci5qcyc7XHJcbmltcG9ydCB7IHB1cHBldGVlckV4cG9ydCB9IGZyb20gJy4vZXhwb3J0LmpzJztcclxuaW1wb3J0IHsgbG9nLCBsb2dXaXRoU3RhY2sgfSBmcm9tICcuL2xvZ2dlci5qcyc7XHJcbmltcG9ydCB7IGdldE5ld0RhdGVUaW1lLCBtZWFzdXJlVGltZSB9IGZyb20gJy4vdXRpbHMuanMnO1xyXG5cclxuaW1wb3J0IEV4cG9ydEVycm9yIGZyb20gJy4vZXJyb3JzL0V4cG9ydEVycm9yLmpzJztcclxuXHJcbi8vIFRoZSBwb29sIGluc3RhbmNlXHJcbmxldCBwb29sID0gbnVsbDtcclxuXHJcbi8vIFBvb2wgc3RhdGlzdGljc1xyXG5jb25zdCBwb29sU3RhdHMgPSB7XHJcbiAgZXhwb3J0c0F0dGVtcHRlZDogMCxcclxuICBleHBvcnRzUGVyZm9ybWVkOiAwLFxyXG4gIGV4cG9ydHNEcm9wcGVkOiAwLFxyXG4gIGV4cG9ydHNGcm9tU3ZnOiAwLFxyXG4gIGV4cG9ydHNGcm9tT3B0aW9uczogMCxcclxuICBleHBvcnRzRnJvbVN2Z0F0dGVtcHRzOiAwLFxyXG4gIGV4cG9ydHNGcm9tT3B0aW9uc0F0dGVtcHRzOiAwLFxyXG4gIHRpbWVTcGVudDogMCxcclxuICB0aW1lU3BlbnRBdmVyYWdlOiAwXHJcbn07XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZXMgdGhlIGV4cG9ydCBwb29sIHdpdGggdGhlIHByb3ZpZGVkIGNvbmZpZ3VyYXRpb24sIGNyZWF0aW5nXHJcbiAqIGEgYnJvd3NlciBpbnN0YW5jZSBhbmQgc2V0dGluZyB1cCB3b3JrZXIgcmVzb3VyY2VzLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIGluaXRQb29sXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb29sT3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nIGBwb29sYFxyXG4gKiBvcHRpb25zLlxyXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IHB1cHBldGVlckFyZ3MgLSBBZGRpdGlvbmFsIGFyZ3VtZW50cyBmb3IgUHVwcGV0ZWVyXHJcbiAqIGxhdW5jaC5cclxuICpcclxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGVuZGluZyB0aGUgZnVuY3Rpb25cclxuICogZXhlY3V0aW9uIHdoZW4gYW4gYWxyZWFkeSBpbml0aWFsaXplZCBwb29sIG9mIHJlc291cmNlcyBpcyBmb3VuZC5cclxuICpcclxuICogQHRocm93cyB7RXhwb3J0RXJyb3J9IFRocm93cyBhbiBgRXhwb3J0RXJyb3JgIGlmIGNvdWxkIG5vdCBjcmVhdGUgdGhlIHBvb2xcclxuICogb2Ygd29ya2Vycy5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0UG9vbChwb29sT3B0aW9ucywgcHVwcGV0ZWVyQXJncykge1xyXG4gIC8vIENyZWF0ZSBhIGJyb3dzZXIgaW5zdGFuY2Ugd2l0aCB0aGUgcHVwcGV0ZWVyIGFyZ3VtZW50c1xyXG4gIGF3YWl0IGNyZWF0ZUJyb3dzZXIocHVwcGV0ZWVyQXJncyk7XHJcblxyXG4gIHRyeSB7XHJcbiAgICBsb2coXHJcbiAgICAgIDMsXHJcbiAgICAgIGBbcG9vbF0gSW5pdGlhbGl6aW5nIHBvb2wgd2l0aCB3b3JrZXJzOiBtaW4gJHtwb29sT3B0aW9ucy5taW5Xb3JrZXJzfSwgbWF4ICR7cG9vbE9wdGlvbnMubWF4V29ya2Vyc30uYFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAocG9vbCkge1xyXG4gICAgICBsb2coXHJcbiAgICAgICAgNCxcclxuICAgICAgICAnW3Bvb2xdIEFscmVhZHkgaW5pdGlhbGl6ZWQsIHBsZWFzZSBraWxsIGl0IGJlZm9yZSBjcmVhdGluZyBhIG5ldyBvbmUuJ1xyXG4gICAgICApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gS2VlcCBhbiBleWUgb24gYSBjb3JyZWN0IG1pbiBhbmQgbWF4IHdvcmtlcnMgbnVtYmVyXHJcbiAgICBpZiAocG9vbE9wdGlvbnMubWluV29ya2VycyA+IHBvb2xPcHRpb25zLm1heFdvcmtlcnMpIHtcclxuICAgICAgcG9vbE9wdGlvbnMubWluV29ya2VycyA9IHBvb2xPcHRpb25zLm1heFdvcmtlcnM7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgcG9vbCBhbG9uZyB3aXRoIGEgbWluaW1hbCBudW1iZXIgb2YgcmVzb3VyY2VzXHJcbiAgICBwb29sID0gbmV3IFBvb2woe1xyXG4gICAgICAvLyBHZXQgdGhlIGBjcmVhdGVgLCBgdmFsaWRhdGVgLCBhbmQgYGRlc3Ryb3lgIGZ1bmN0aW9uc1xyXG4gICAgICAuLi5fZmFjdG9yeShwb29sT3B0aW9ucyksXHJcbiAgICAgIG1pbjogcG9vbE9wdGlvbnMubWluV29ya2VycyxcclxuICAgICAgbWF4OiBwb29sT3B0aW9ucy5tYXhXb3JrZXJzLFxyXG4gICAgICBhY3F1aXJlVGltZW91dE1pbGxpczogcG9vbE9wdGlvbnMuYWNxdWlyZVRpbWVvdXQsXHJcbiAgICAgIGNyZWF0ZVRpbWVvdXRNaWxsaXM6IHBvb2xPcHRpb25zLmNyZWF0ZVRpbWVvdXQsXHJcbiAgICAgIGRlc3Ryb3lUaW1lb3V0TWlsbGlzOiBwb29sT3B0aW9ucy5kZXN0cm95VGltZW91dCxcclxuICAgICAgaWRsZVRpbWVvdXRNaWxsaXM6IHBvb2xPcHRpb25zLmlkbGVUaW1lb3V0LFxyXG4gICAgICBjcmVhdGVSZXRyeUludGVydmFsTWlsbGlzOiBwb29sT3B0aW9ucy5jcmVhdGVSZXRyeUludGVydmFsLFxyXG4gICAgICByZWFwSW50ZXJ2YWxNaWxsaXM6IHBvb2xPcHRpb25zLnJlYXBlckludGVydmFsLFxyXG4gICAgICBwcm9wYWdhdGVDcmVhdGVFcnJvcjogZmFsc2VcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFNldCBldmVudHNcclxuICAgIHBvb2wub24oJ3JlbGVhc2UnLCBhc3luYyAocmVzb3VyY2UpID0+IHtcclxuICAgICAgLy8gQ2xlYXIgcGFnZVxyXG4gICAgICBjb25zdCBjbGVhclN0YXR1cyA9IGF3YWl0IGNsZWFyUGFnZShyZXNvdXJjZSwgZmFsc2UpO1xyXG4gICAgICBsb2coXHJcbiAgICAgICAgNCxcclxuICAgICAgICBgW3Bvb2xdIFBvb2wgcmVzb3VyY2UgWyR7cmVzb3VyY2UuaWR9XSAtIFJlbGVhc2luZyBhIHdvcmtlci4gQ2xlYXIgcGFnZSBzdGF0dXM6ICR7Y2xlYXJTdGF0dXN9LmBcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHBvb2wub24oJ2Rlc3Ryb3lTdWNjZXNzJywgKF9ldmVudElkLCByZXNvdXJjZSkgPT4ge1xyXG4gICAgICBsb2coXHJcbiAgICAgICAgNCxcclxuICAgICAgICBgW3Bvb2xdIFBvb2wgcmVzb3VyY2UgWyR7cmVzb3VyY2UuaWR9XSAtIERlc3Ryb3llZCBhIHdvcmtlciBzdWNjZXNzZnVsbHkuYFxyXG4gICAgICApO1xyXG4gICAgICByZXNvdXJjZS5wYWdlID0gbnVsbDtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGluaXRpYWxSZXNvdXJjZXMgPSBbXTtcclxuICAgIC8vIENyZWF0ZSBhbiBpbml0aWFsIG51bWJlciBvZiByZXNvdXJjZXNcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9vbE9wdGlvbnMubWluV29ya2VyczsgaSsrKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBhd2FpdCBwb29sLmFjcXVpcmUoKS5wcm9taXNlO1xyXG4gICAgICAgIGluaXRpYWxSZXNvdXJjZXMucHVzaChyZXNvdXJjZSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgbG9nV2l0aFN0YWNrKDIsIGVycm9yLCAnW3Bvb2xdIENvdWxkIG5vdCBjcmVhdGUgYW4gaW5pdGlhbCByZXNvdXJjZS4nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbGVhc2UgdGhlIGluaXRpYWwgbnVtYmVyIG9mIHJlc291cmNlcyBiYWNrIHRvIHRoZSBwb29sXHJcbiAgICBpbml0aWFsUmVzb3VyY2VzLmZvckVhY2goKHJlc291cmNlKSA9PiB7XHJcbiAgICAgIHBvb2wucmVsZWFzZShyZXNvdXJjZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBsb2coXHJcbiAgICAgIDMsXHJcbiAgICAgIGBbcG9vbF0gVGhlIHBvb2wgaXMgcmVhZHkke2luaXRpYWxSZXNvdXJjZXMubGVuZ3RoID8gYCB3aXRoICR7aW5pdGlhbFJlc291cmNlcy5sZW5ndGh9IGluaXRpYWwgcmVzb3VyY2VzIHdhaXRpbmcuYCA6ICcuJ31gXHJcbiAgICApO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICdbcG9vbF0gQ291bGQgbm90IGNvbmZpZ3VyZSBhbmQgY3JlYXRlIHRoZSBwb29sIG9mIHdvcmtlcnMuJyxcclxuICAgICAgNTAwXHJcbiAgICApLnNldEVycm9yKGVycm9yKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUZXJtaW5hdGVzIGFsbCB3b3JrZXJzIGluIHRoZSBwb29sLCBkZXN0cm95cyB0aGUgcG9vbCwgYW5kIGNsb3NlcyB0aGUgYnJvd3NlclxyXG4gKiBpbnN0YW5jZS5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBraWxsUG9vbFxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSBhbGwgd29ya2VycyBhcmVcclxuICogdGVybWluYXRlZCwgdGhlIHBvb2wgaXMgZGVzdHJveWVkLCBhbmQgdGhlIGJyb3dzZXIgaXMgc3VjY2Vzc2Z1bGx5IGNsb3NlZC5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBraWxsUG9vbCgpIHtcclxuICBsb2coMywgJ1twb29sXSBLaWxsaW5nIHBvb2wgd2l0aCBhbGwgd29ya2VycyBhbmQgY2xvc2luZyBicm93c2VyLicpO1xyXG5cclxuICAvLyBJZiBzdGlsbCBhbGl2ZSwgZGVzdHJveSB0aGUgcG9vbCBvZiBwYWdlcyBiZWZvcmUgY2xvc2luZyBhIGJyb3dzZXJcclxuICBpZiAocG9vbCkge1xyXG4gICAgLy8gRnJlZSB1cCBub3QgcmVsZWFzZWQgd29ya2Vyc1xyXG4gICAgZm9yIChjb25zdCB3b3JrZXIgb2YgcG9vbC51c2VkKSB7XHJcbiAgICAgIHBvb2wucmVsZWFzZSh3b3JrZXIucmVzb3VyY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERlc3Ryb3kgdGhlIHBvb2wgaWYgaXQgaXMgc3RpbGwgYXZhaWxhYmxlXHJcbiAgICBpZiAoIXBvb2wuZGVzdHJveWVkKSB7XHJcbiAgICAgIGF3YWl0IHBvb2wuZGVzdHJveSgpO1xyXG4gICAgICBsb2coNCwgJ1twb29sXSBEZXN0cm95ZWQgdGhlIHBvb2wgb2YgcmVzb3VyY2VzLicpO1xyXG4gICAgfVxyXG4gICAgcG9vbCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvLyBDbG9zZSB0aGUgYnJvd3NlciBpbnN0YW5jZVxyXG4gIGF3YWl0IGNsb3NlQnJvd3NlcigpO1xyXG59XHJcblxyXG4vKipcclxuICogUHJvY2Vzc2VzIHRoZSBleHBvcnQgd29yayB1c2luZyBhIHdvcmtlciBmcm9tIHRoZSBwb29sLiBBY3F1aXJlcyBhIHdvcmtlclxyXG4gKiBoYW5kbGUgZnJvbSB0aGUgcG9vbCwgcGVyZm9ybXMgdGhlIGV4cG9ydCB1c2luZyBwdXBwZXRlZXIsIGFuZCByZWxlYXNlc1xyXG4gKiB0aGUgd29ya2VyIGhhbmRsZSBiYWNrIHRvIHRoZSBwb29sLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIHBvc3RXb3JrXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmcgY29tcGxldGUgc2V0XHJcbiAqIG9mIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBleHBvcnQgcmVzdWx0XHJcbiAqIGFuZCBvcHRpb25zLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaWYgYW4gZXJyb3Igb2NjdXJzIGR1cmluZ1xyXG4gKiB0aGUgZXhwb3J0IHByb2Nlc3MuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcG9zdFdvcmsob3B0aW9ucykge1xyXG4gIGxldCB3b3JrZXJIYW5kbGU7XHJcblxyXG4gIHRyeSB7XHJcbiAgICBsb2coNCwgJ1twb29sXSBXb3JrIHJlY2VpdmVkLCBzdGFydGluZyB0byBwcm9jZXNzLicpO1xyXG5cclxuICAgIC8vIEFuIGV4cG9ydCBhdHRlbXB0IGNvdW50ZWRcclxuICAgICsrcG9vbFN0YXRzLmV4cG9ydHNBdHRlbXB0ZWQ7XHJcblxyXG4gICAgLy8gRGlzcGxheSB0aGUgcG9vbCBpbmZvcm1hdGlvbiBpZiBuZWVkZWRcclxuICAgIGlmIChvcHRpb25zLnBvb2wuYmVuY2htYXJraW5nKSB7XHJcbiAgICAgIF9nZXRQb29sSW5mbygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRocm93IGFuIGVycm9yIGluIGNhc2Ugb2YgbGFja2luZyB0aGUgcG9vbCBpbnN0YW5jZVxyXG4gICAgaWYgKCFwb29sKSB7XHJcbiAgICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgICAnW3Bvb2xdIFdvcmsgcmVjZWl2ZWQsIGJ1dCBwb29sIGhhcyBub3QgYmVlbiBzdGFydGVkLicsXHJcbiAgICAgICAgNTAwXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhlIGFjcXVpcmUgY291bnRlclxyXG4gICAgY29uc3QgYWNxdWlyZUNvdW50ZXIgPSBtZWFzdXJlVGltZSgpO1xyXG5cclxuICAgIC8vIFRyeSB0byBhY3F1aXJlIHRoZSB3b3JrZXIgYWxvbmcgd2l0aCB0aGUgaWQsIHdvcmtzIGNvdW50IGFuZCBwYWdlXHJcbiAgICB0cnkge1xyXG4gICAgICBsb2coNCwgJ1twb29sXSBBY3F1aXJpbmcgYSB3b3JrZXIgaGFuZGxlLicpO1xyXG5cclxuICAgICAgLy8gQWNxdWlyZSBhIHBvb2wgcmVzb3VyY2VcclxuICAgICAgd29ya2VySGFuZGxlID0gYXdhaXQgcG9vbC5hY3F1aXJlKCkucHJvbWlzZTtcclxuXHJcbiAgICAgIC8vIENoZWNrIHRoZSBwYWdlIGFjcXVpcmUgdGltZVxyXG4gICAgICBpZiAob3B0aW9ucy5zZXJ2ZXIuYmVuY2htYXJraW5nKSB7XHJcbiAgICAgICAgbG9nKFxyXG4gICAgICAgICAgNSxcclxuICAgICAgICAgIGBbYmVuY2htYXJrXSAke29wdGlvbnMucmVxdWVzdElkID8gYFJlcXVlc3QgWyR7b3B0aW9ucy5yZXF1ZXN0SWR9XSAtIGAgOiAnJ31gLFxyXG4gICAgICAgICAgYEFjcXVpcmluZyBhIHdvcmtlciBoYW5kbGUgdG9vayAke2FjcXVpcmVDb3VudGVyKCl9bXMuYFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgICBgW3Bvb2xdICR7XHJcbiAgICAgICAgICBvcHRpb25zLnJlcXVlc3RJZCA/IGBSZXF1ZXN0IFske29wdGlvbnMucmVxdWVzdElkfV0gLSBgIDogJydcclxuICAgICAgICB9RXJyb3IgZW5jb3VudGVyZWQgd2hlbiBhY3F1aXJpbmcgYW4gYXZhaWxhYmxlIGVudHJ5OiAke2FjcXVpcmVDb3VudGVyKCl9bXMuYCxcclxuICAgICAgICA0MDBcclxuICAgICAgKS5zZXRFcnJvcihlcnJvcik7XHJcbiAgICB9XHJcbiAgICBsb2coNCwgJ1twb29sXSBBY3F1aXJlZCBhIHdvcmtlciBoYW5kbGUuJyk7XHJcblxyXG4gICAgaWYgKCF3b3JrZXJIYW5kbGUucGFnZSkge1xyXG4gICAgICAvLyBTZXQgdGhlIGB3b3JrTGltaXRgIHRvIGV4Y2VlZGVkIGluIG9yZGVyIHRvIHJlY3JlYXRlIHRoZSByZXNvdXJjZVxyXG4gICAgICB3b3JrZXJIYW5kbGUud29ya0NvdW50ID0gb3B0aW9ucy5wb29sLndvcmtMaW1pdCArIDE7XHJcbiAgICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgICAnW3Bvb2xdIFJlc29sdmVkIHdvcmtlciBwYWdlIGlzIGludmFsaWQ6IHRoZSBwb29sIHNldHVwIGlzIHdvbmt5LicsXHJcbiAgICAgICAgNDAwXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9nKFxyXG4gICAgICA0LFxyXG4gICAgICBgW3Bvb2xdIFBvb2wgcmVzb3VyY2UgWyR7d29ya2VySGFuZGxlLmlkfV0gLSBTdGFydGluZyB3b3JrIG9uIHRoaXMgcG9vbCBlbnRyeS5gXHJcbiAgICApO1xyXG5cclxuICAgIC8vIFN0YXJ0IG1lYXN1cmluZyBleHBvcnQgdGltZVxyXG4gICAgY29uc3QgZXhwb3J0Q291bnRlciA9IG1lYXN1cmVUaW1lKCk7XHJcblxyXG4gICAgLy8gUGVyZm9ybSBhbiBleHBvcnQgb24gYSBwdXBwZXRlZXIgbGV2ZWxcclxuICAgIGNvbnN0IGV4cG9ydFJlc3VsdCA9IGF3YWl0IHB1cHBldGVlckV4cG9ydChcclxuICAgICAgd29ya2VySGFuZGxlLnBhZ2UsXHJcbiAgICAgIG9wdGlvbnMuZXhwb3J0LFxyXG4gICAgICBvcHRpb25zLmN1c3RvbUxvZ2ljXHJcbiAgICApO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIGl0J3MgYW4gZXJyb3JcclxuICAgIGlmIChleHBvcnRSZXN1bHQgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAvLyBOT1RFOlxyXG4gICAgICAvLyBJZiB0aGVyZSdzIGEgcmFzdGVyaXphdGlvbiB0aW1lb3V0LCB3ZSB3YW50IG5lZWQgdG8gZmx1c2ggdGhlIHBhZ2UuXHJcbiAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGUgcGFnZSBtYXkgYmUgaW4gYSBzdGF0ZSB3aGVyZSBpdCdzIHdhaXRpbmcgZm9yXHJcbiAgICAgIC8vIHRoZSBzY3JlZW5zaG90IHRvIGZpbmlzaCBldmVuIHRob3VnaCB0aGUgdGltZW91dCBoYXMgb2NjdXJlZC5cclxuICAgICAgLy8gV2hpY2ggb2YgY291cnNlIGNhdXNlcyBhIGxvdCBvZiBpc3N1ZXMgd2l0aCB0aGUgZXZlbnQgc3lzdGVtLFxyXG4gICAgICAvLyBhbmQgcGFnZSBjb25zaXN0ZW5jeS5cclxuICAgICAgLy9cclxuICAgICAgLy8gT25seSBgcGFnZS5zY3JlZW5zaG90YCB3aWxsIHRocm93IHRoaXMsIHRpbWVvdXRzIGZvciBQREYncyBhcmVcclxuICAgICAgLy8gaGFuZGxlZCBieSB0aGUgYHBhZ2UucGRmYCBmdW5jdGlvbiBpdHNlbGYuXHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIC4uLnllcywgdGhpcyBpcyB1Z2x5LlxyXG4gICAgICBpZiAoZXhwb3J0UmVzdWx0Lm1lc3NhZ2UgPT09ICdSYXN0ZXJpemF0aW9uIHRpbWVvdXQnKSB7XHJcbiAgICAgICAgLy8gU2V0IHRoZSBgd29ya0xpbWl0YCB0byBleGNlZWRlZCBpbiBvcmRlciB0byByZWNyZWF0ZSB0aGUgcmVzb3VyY2VcclxuICAgICAgICB3b3JrZXJIYW5kbGUud29ya0NvdW50ID0gb3B0aW9ucy5wb29sLndvcmtMaW1pdCArIDE7XHJcbiAgICAgICAgd29ya2VySGFuZGxlLnBhZ2UgPSBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgZXhwb3J0UmVzdWx0Lm5hbWUgPT09ICdUaW1lb3V0RXJyb3InIHx8XHJcbiAgICAgICAgZXhwb3J0UmVzdWx0Lm1lc3NhZ2UgPT09ICdSYXN0ZXJpemF0aW9uIHRpbWVvdXQnXHJcbiAgICAgICkge1xyXG4gICAgICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgICAgIGBbcG9vbF0gJHtcclxuICAgICAgICAgICAgb3B0aW9ucy5yZXF1ZXN0SWQgPyBgUmVxdWVzdCBbJHtvcHRpb25zLnJlcXVlc3RJZH1dIC0gYCA6ICcnXHJcbiAgICAgICAgICB9UmFzdGVyaXphdGlvbiB0aW1lb3V0OiB5b3VyIGNoYXJ0IG1heSBiZSB0b28gY29tcGxleCBvciBsYXJnZSwgYW5kIGZhaWxlZCB0byByZW5kZXIgd2l0aGluIHRoZSBhbGxvdHRlZCB0aW1lLmBcclxuICAgICAgICApLnNldEVycm9yKGV4cG9ydFJlc3VsdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgICAgYFtwb29sXSAke1xyXG4gICAgICAgICAgICBvcHRpb25zLnJlcXVlc3RJZCA/IGBSZXF1ZXN0IFske29wdGlvbnMucmVxdWVzdElkfV0gLSBgIDogJydcclxuICAgICAgICAgIH1FcnJvciBlbmNvdW50ZXJlZCBkdXJpbmcgZXhwb3J0OiAke2V4cG9ydENvdW50ZXIoKX1tcy5gXHJcbiAgICAgICAgKS5zZXRFcnJvcihleHBvcnRSZXN1bHQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgdGhlIFB1cHBldGVlciBleHBvcnQgdGltZVxyXG4gICAgaWYgKG9wdGlvbnMuc2VydmVyLmJlbmNobWFya2luZykge1xyXG4gICAgICBsb2coXHJcbiAgICAgICAgNSxcclxuICAgICAgICBgW2JlbmNobWFya10gJHtvcHRpb25zLnJlcXVlc3RJZCA/IGBSZXF1ZXN0IFske29wdGlvbnMucmVxdWVzdElkfV0gLSBgIDogJyd9YCxcclxuICAgICAgICBgRXhwb3J0aW5nIGEgY2hhcnQgc3VjZXNzZnVsbHkgdG9vayAke2V4cG9ydENvdW50ZXIoKX1tcy5gXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVsZWFzZSB0aGUgcmVzb3VyY2UgYmFjayB0byB0aGUgcG9vbFxyXG4gICAgcG9vbC5yZWxlYXNlKHdvcmtlckhhbmRsZSk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHN0YXRpc3RpY3NcclxuICAgIHBvb2xTdGF0cy50aW1lU3BlbnQgKz0gZXhwb3J0Q291bnRlcigpO1xyXG4gICAgcG9vbFN0YXRzLnRpbWVTcGVudEF2ZXJhZ2UgPVxyXG4gICAgICBwb29sU3RhdHMudGltZVNwZW50IC8gKytwb29sU3RhdHMuZXhwb3J0c1BlcmZvcm1lZDtcclxuXHJcbiAgICBsb2coNCwgYFtwb29sXSBXb3JrIGNvbXBsZXRlZCBpbiAke2V4cG9ydENvdW50ZXIoKX1tcy5gKTtcclxuXHJcbiAgICAvLyBPdGhlcndpc2UgcmV0dXJuIGFuIG9iamVjdCB3aXRoIHRoZSByZXN1bHQgYW5kIG9wdGlvbnNcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlc3VsdDogZXhwb3J0UmVzdWx0LFxyXG4gICAgICBvcHRpb25zXHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICArK3Bvb2xTdGF0cy5leHBvcnRzRHJvcHBlZDtcclxuXHJcbiAgICAvLyBUcnkgdG8gcmVsZWFzZSB0aGUgd29ya2VyLCBpZiBpdCBleGlzdHNcclxuICAgIGlmICh3b3JrZXJIYW5kbGUpIHtcclxuICAgICAgcG9vbC5yZWxlYXNlKHdvcmtlckhhbmRsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmV0cmlldmVzIHRoZSBjdXJyZW50IHBvb2wgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBnZXRQb29sXHJcbiAqXHJcbiAqIEByZXR1cm5zIHsoT2JqZWN0fG51bGwpfSBUaGUgY3VycmVudCBwb29sIGluc3RhbmNlIGlmIGluaXRpYWxpemVkLCBvciBgbnVsbGBcclxuICogaWYgdGhlIHBvb2wgaGFzIG5vdCBiZWVuIGNyZWF0ZWQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UG9vbCgpIHtcclxuICByZXR1cm4gcG9vbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIHN0YXRpc3RpYyBvZiBhIHBvb2wgaW5zdGFjZSBhYm91dCBleHBvcnRzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZ2V0UG9vbFN0YXRzXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBjdXJyZW50IHBvb2wgc3RhdGlzdGljcy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQb29sU3RhdHMoKSB7XHJcbiAgcmV0dXJuIHBvb2xTdGF0cztcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHJpZXZlcyBwb29sIGluZm9ybWF0aW9uIGluIEpTT04gZm9ybWF0LCBpbmNsdWRpbmcgbWluaW11bSBhbmQgbWF4aW11bVxyXG4gKiB3b3JrZXJzLCBhdmFpbGFibGUgd29ya2Vycywgd29ya2VycyBpbiB1c2UsIGFuZCBwZW5kaW5nIGFjcXVpcmUgcmVxdWVzdHMuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBnZXRQb29sSW5mb0pTT05cclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gUG9vbCBpbmZvcm1hdGlvbiBpbiBKU09OIGZvcm1hdC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQb29sSW5mb0pTT04oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIG1pbjogcG9vbC5taW4sXHJcbiAgICBtYXg6IHBvb2wubWF4LFxyXG4gICAgdXNlZDogcG9vbC5udW1Vc2VkKCksXHJcbiAgICBhdmFpbGFibGU6IHBvb2wubnVtRnJlZSgpLFxyXG4gICAgYWxsQ3JlYXRlZDogcG9vbC5udW1Vc2VkKCkgKyBwb29sLm51bUZyZWUoKSxcclxuICAgIHBlbmRpbmdBY3F1aXJlczogcG9vbC5udW1QZW5kaW5nQWNxdWlyZXMoKSxcclxuICAgIHBlbmRpbmdDcmVhdGVzOiBwb29sLm51bVBlbmRpbmdDcmVhdGVzKCksXHJcbiAgICBwZW5kaW5nVmFsaWRhdGlvbnM6IHBvb2wubnVtUGVuZGluZ1ZhbGlkYXRpb25zKCksXHJcbiAgICBwZW5kaW5nRGVzdHJveXM6IHBvb2wucGVuZGluZ0Rlc3Ryb3lzLmxlbmd0aCxcclxuICAgIGFic29sdXRlQWxsOlxyXG4gICAgICBwb29sLm51bVVzZWQoKSArXHJcbiAgICAgIHBvb2wubnVtRnJlZSgpICtcclxuICAgICAgcG9vbC5udW1QZW5kaW5nQWNxdWlyZXMoKSArXHJcbiAgICAgIHBvb2wubnVtUGVuZGluZ0NyZWF0ZXMoKSArXHJcbiAgICAgIHBvb2wubnVtUGVuZGluZ1ZhbGlkYXRpb25zKCkgK1xyXG4gICAgICBwb29sLnBlbmRpbmdEZXN0cm95cy5sZW5ndGhcclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogTG9ncyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgcG9vbCwgaW5jbHVkaW5nIHRoZSBtaW5pbXVtXHJcbiAqIGFuZCBtYXhpbXVtIHdvcmtlcnMsIGF2YWlsYWJsZSB3b3JrZXJzLCB3b3JrZXJzIGluIHVzZSwgYW5kIHBlbmRpbmcgYWNxdWlyZVxyXG4gKiByZXF1ZXN0cy5cclxuICpcclxuICogQGZ1bmN0aW9uIF9nZXRQb29sSW5mb1xyXG4gKi9cclxuZnVuY3Rpb24gX2dldFBvb2xJbmZvKCkge1xyXG4gIGNvbnN0IHtcclxuICAgIG1pbixcclxuICAgIG1heCxcclxuICAgIHVzZWQsXHJcbiAgICBhdmFpbGFibGUsXHJcbiAgICBhbGxDcmVhdGVkLFxyXG4gICAgcGVuZGluZ0FjcXVpcmVzLFxyXG4gICAgcGVuZGluZ0NyZWF0ZXMsXHJcbiAgICBwZW5kaW5nVmFsaWRhdGlvbnMsXHJcbiAgICBwZW5kaW5nRGVzdHJveXMsXHJcbiAgICBhYnNvbHV0ZUFsbFxyXG4gIH0gPSBnZXRQb29sSW5mb0pTT04oKTtcclxuXHJcbiAgbG9nKDUsIGBbcG9vbF0gVGhlIG1pbmltdW0gbnVtYmVyIG9mIHJlc291cmNlcyBhbGxvd2VkIGJ5IHBvb2w6ICR7bWlufS5gKTtcclxuICBsb2coNSwgYFtwb29sXSBUaGUgbWF4aW11bSBudW1iZXIgb2YgcmVzb3VyY2VzIGFsbG93ZWQgYnkgcG9vbDogJHttYXh9LmApO1xyXG4gIGxvZyg1LCBgW3Bvb2xdIFRoZSBudW1iZXIgb2YgdXNlZCByZXNvdXJjZXM6ICR7dXNlZH0uYCk7XHJcbiAgbG9nKDUsIGBbcG9vbF0gVGhlIG51bWJlciBvZiBmcmVlIHJlc291cmNlczogJHthdmFpbGFibGV9LmApO1xyXG4gIGxvZyhcclxuICAgIDUsXHJcbiAgICBgW3Bvb2xdIFRoZSBudW1iZXIgb2YgYWxsIGNyZWF0ZWQgKHVzZWQgYW5kIGZyZWUpIHJlc291cmNlczogJHthbGxDcmVhdGVkfS5gXHJcbiAgKTtcclxuICBsb2coXHJcbiAgICA1LFxyXG4gICAgYFtwb29sXSBUaGUgbnVtYmVyIG9mIHJlc291cmNlcyB3YWl0aW5nIHRvIGJlIGFjcXVpcmVkOiAke3BlbmRpbmdBY3F1aXJlc30uYFxyXG4gICk7XHJcbiAgbG9nKFxyXG4gICAgNSxcclxuICAgIGBbcG9vbF0gVGhlIG51bWJlciBvZiByZXNvdXJjZXMgd2FpdGluZyB0byBiZSBjcmVhdGVkOiAke3BlbmRpbmdDcmVhdGVzfS5gXHJcbiAgKTtcclxuICBsb2coXHJcbiAgICA1LFxyXG4gICAgYFtwb29sXSBUaGUgbnVtYmVyIG9mIHJlc291cmNlcyB3YWl0aW5nIHRvIGJlIHZhbGlkYXRlZDogJHtwZW5kaW5nVmFsaWRhdGlvbnN9LmBcclxuICApO1xyXG4gIGxvZyhcclxuICAgIDUsXHJcbiAgICBgW3Bvb2xdIFRoZSBudW1iZXIgb2YgcmVzb3VyY2VzIHdhaXRpbmcgdG8gYmUgZGVzdHJveWVkOiAke3BlbmRpbmdEZXN0cm95c30uYFxyXG4gICk7XHJcbiAgbG9nKDUsIGBbcG9vbF0gVGhlIG51bWJlciBvZiBhbGwgcmVzb3VyY2VzOiAke2Fic29sdXRlQWxsfS5gKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZhY3RvcnkgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGBjcmVhdGVgLCBgdmFsaWRhdGVgLCBgZGVzdHJveWBcclxuICogZnVuY3Rpb25zIGZvciB0aGUgcG9vbCBpbnN0YW5jZS5cclxuICpcclxuICogQGZ1bmN0aW9uIF9mYWN0b3J5XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb29sT3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nIGBwb29sYFxyXG4gKiBvcHRpb25zLlxyXG4gKi9cclxuZnVuY3Rpb24gX2ZhY3RvcnkocG9vbE9wdGlvbnMpIHtcclxuICByZXR1cm4ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHdvcmtlciBwYWdlIGZvciB0aGUgZXhwb3J0IHBvb2wuXHJcbiAgICAgKlxyXG4gICAgICogQGFzeW5jXHJcbiAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gb2JqZWN0XHJcbiAgICAgKiBjb250YWluaW5nIHRoZSB3b3JrZXIgSUQsIGEgcmVmZXJlbmNlIHRvIHRoZSBicm93c2VyIHBhZ2UsIGFuZCBpbml0aWFsXHJcbiAgICAgKiB3b3JrIGNvdW50LlxyXG4gICAgICpcclxuICAgICAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiB0aGVyZSBpcyBhbiBlcnJvciBkdXJpbmdcclxuICAgICAqIHRoZSBjcmVhdGlvbiBvZiB0aGUgbmV3IHBhZ2UuXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZTogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAvLyBJbml0IHRoZSByZXNvdXJjZSB3aXRoIHVuaXF1ZSBpZCBhbmQgd29yayBjb3VudFxyXG4gICAgICBjb25zdCBwb29sUmVzb3VyY2UgPSB7XHJcbiAgICAgICAgaWQ6IHV1aWQoKSxcclxuICAgICAgICAvLyBUcnkgdG8gZGlzdHJpYnV0ZSB0aGUgaW5pdGlhbCB3b3JrIGNvdW50XHJcbiAgICAgICAgd29ya0NvdW50OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAocG9vbE9wdGlvbnMud29ya0xpbWl0IC8gMikpXHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIFN0YXJ0IG1lYXN1cmluZyBhIHBhZ2UgY3JlYXRpb24gdGltZVxyXG4gICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IGdldE5ld0RhdGVUaW1lKCk7XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBwYWdlXHJcbiAgICAgICAgYXdhaXQgbmV3UGFnZShwb29sUmVzb3VyY2UpO1xyXG5cclxuICAgICAgICAvLyBNZWFzdXJlIHRoZSB0aW1lIG9mIGZ1bGwgY3JlYXRpb24gYW5kIGNvbmZpZ3VyYXRpb24gb2YgYSBwYWdlXHJcbiAgICAgICAgbG9nKFxyXG4gICAgICAgICAgMyxcclxuICAgICAgICAgIGBbcG9vbF0gUG9vbCByZXNvdXJjZSBbJHtwb29sUmVzb3VyY2UuaWR9XSAtIFN1Y2Nlc3NmdWxseSBjcmVhdGVkIGEgd29ya2VyLCB0b29rICR7XHJcbiAgICAgICAgICAgIGdldE5ld0RhdGVUaW1lKCkgLSBzdGFydERhdGVcclxuICAgICAgICAgIH1tcy5gXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIHJlYWR5IHBvb2wgcmVzb3VyY2VcclxuICAgICAgICByZXR1cm4gcG9vbFJlc291cmNlO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGxvZyhcclxuICAgICAgICAgIDMsXHJcbiAgICAgICAgICBgW3Bvb2xdIFBvb2wgcmVzb3VyY2UgWyR7cG9vbFJlc291cmNlLmlkfV0gLSBFcnJvciBlbmNvdW50ZXJlZCB3aGVuIGNyZWF0aW5nIGEgbmV3IHBhZ2UuYFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZXMgYSB3b3JrZXIgcGFnZSBpbiB0aGUgZXhwb3J0IHBvb2wsIGNoZWNraW5nIGlmIGl0IGhhcyBleGNlZWRlZFxyXG4gICAgICogdGhlIHdvcmsgbGltaXQuXHJcbiAgICAgKlxyXG4gICAgICogQGFzeW5jXHJcbiAgICAgKiBAZnVuY3Rpb24gdmFsaWRhdGVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9vbFJlc291cmNlIC0gVGhlIGhhbmRsZSB0byB0aGUgd29ya2VyLCBjb250YWluaW5nXHJcbiAgICAgKiB0aGUgd29ya2VyJ3MgSUQsIGEgcmVmZXJlbmNlIHRvIHRoZSBicm93c2VyIHBhZ2UsIGFuZCB3b3JrIGNvdW50LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0cnVlIGlmIHRoZSB3b3JrZXJcclxuICAgICAqIGlzIHZhbGlkIGFuZCB3aXRoaW4gdGhlIHdvcmsgbGltaXQ7IG90aGVyd2lzZSwgdG8gZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIHZhbGlkYXRlOiBhc3luYyAocG9vbFJlc291cmNlKSA9PiB7XHJcbiAgICAgIC8vIE5PVEU6XHJcbiAgICAgIC8vIEluIGNlcnRhaW4gY2FzZXMgYWNxdWlyaW5nIHRocm93cyBhIGBUYXJnZXRDbG9zZUVycm9yYCwgd2hpY2ggbWF5XHJcbiAgICAgIC8vIGJlIGNhdXNlZCBieSB0d28gdGhpbmdzOlxyXG4gICAgICAvLyAtIFRoZSBwYWdlIGlzIGNsb3NlZCBhbmQgYXR0ZW1wdGVkIHRvIGJlIHJldXNlZC5cclxuICAgICAgLy8gLSBMb3N0IGNvbnRhY3Qgd2l0aCB0aGUgYnJvd3Nlci5cclxuICAgICAgLy9cclxuICAgICAgLy8gV2hhdCB3ZSdyZSBzZWVpbmcgaW4gbG9ncyBpcyB0aGF0IHN1Y2Nlc3NpdmUgZXhwb3J0cyB0eXBpY2FsbHlcclxuICAgICAgLy8gc3VjY2VlZHMsIGFuZCB0aGUgc2VydmVyIHJlY292ZXJzLCBpbmRpY2F0aW5nIHRoYXQgaXQncyBsaWtlbHlcclxuICAgICAgLy8gdGhlIGZpcnN0IGNhc2UuIFRoaXMgaXMgYW4gYXR0ZW1wdCBhdCBhbGxpZXZhdGluZyB0aGUgaXNzdWUgYnlcclxuICAgICAgLy8gc2ltcGx5IG5vdCB2YWxpZGF0aW5nIHRoZSB3b3JrZXIgaWYgdGhlIHBhZ2UgaXMgbnVsbCBvciBjbG9zZWQuXHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIFRoZSBhY3R1YWwgcmVzdWx0IGZyb20gd2hlbiB0aGlzIGhhcHBlbmVkLCB3YXMgdGhhdCBhIHdvcmtlciB3b3VsZFxyXG4gICAgICAvLyBiZSBjb21wbGV0ZWx5IGxvY2tlZCwgc3RvcHBpbmcgaXQgZnJvbSBiZWluZyBhY3F1aXJlZCB1bnRpbFxyXG4gICAgICAvLyBpdHMgd29yayBjb3VudCByZWFjaGVkIHRoZSBsaW1pdC5cclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBgcGFnZWAgaXMgdmFsaWRcclxuICAgICAgaWYgKCFwb29sUmVzb3VyY2UucGFnZSkge1xyXG4gICAgICAgIGxvZyhcclxuICAgICAgICAgIDMsXHJcbiAgICAgICAgICBgW3Bvb2xdIFBvb2wgcmVzb3VyY2UgWyR7cG9vbFJlc291cmNlLmlkfV0gLSBWYWxpZGF0aW9uIGZhaWxlZCAobm8gdmFsaWQgcGFnZSBpcyBmb3VuZCkuYFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiB0aGUgYHBhZ2VgIGlzIGNsb3NlZFxyXG4gICAgICBpZiAocG9vbFJlc291cmNlLnBhZ2UuaXNDbG9zZWQoKSkge1xyXG4gICAgICAgIGxvZyhcclxuICAgICAgICAgIDMsXHJcbiAgICAgICAgICBgW3Bvb2xdIFBvb2wgcmVzb3VyY2UgWyR7cG9vbFJlc291cmNlLmlkfV0gLSBWYWxpZGF0aW9uIGZhaWxlZCAocGFnZSBpcyBjbG9zZWQgb3IgaW52YWxpZCkuYFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiB0aGUgYG1haW5GcmFtZWAgaXMgZGV0YWNoZWRcclxuICAgICAgaWYgKHBvb2xSZXNvdXJjZS5wYWdlLm1haW5GcmFtZSgpLmRldGFjaGVkKSB7XHJcbiAgICAgICAgbG9nKFxyXG4gICAgICAgICAgMyxcclxuICAgICAgICAgIGBbcG9vbF0gUG9vbCByZXNvdXJjZSBbJHtwb29sUmVzb3VyY2UuaWR9XSAtIFZhbGlkYXRpb24gZmFpbGVkIChwYWdlJ3MgZnJhbWUgaXMgZGV0YWNoZWQpLmBcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGB3b3JrTGltaXRgIGlzIGV4Y2VlZGVkXHJcbiAgICAgIGlmIChcclxuICAgICAgICBwb29sT3B0aW9ucy53b3JrTGltaXQgJiZcclxuICAgICAgICArK3Bvb2xSZXNvdXJjZS53b3JrQ291bnQgPiBwb29sT3B0aW9ucy53b3JrTGltaXRcclxuICAgICAgKSB7XHJcbiAgICAgICAgbG9nKFxyXG4gICAgICAgICAgMyxcclxuICAgICAgICAgIGBbcG9vbF0gUG9vbCByZXNvdXJjZSBbJHtwb29sUmVzb3VyY2UuaWR9XSAtIFZhbGlkYXRpb24gZmFpbGVkIChleGNlZWRlZCB0aGUgJHtwb29sT3B0aW9ucy53b3JrTGltaXR9IHdvcmtzIHBlciByZXNvdXJjZSBsaW1pdCkuYFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBUaGUgYHBvb2xSZXNvdXJjZWAgaXMgdmFsaWRhdGVkXHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlc3Ryb3lzIGEgd29ya2VyIGVudHJ5IGluIHRoZSBleHBvcnQgcG9vbCwgY2xvc2luZyBpdHMgYXNzb2NpYXRlZCBwYWdlLlxyXG4gICAgICpcclxuICAgICAqIEBhc3luY1xyXG4gICAgICogQGZ1bmN0aW9uIGRlc3Ryb3lcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9vbFJlc291cmNlIC0gVGhlIGhhbmRsZSB0byB0aGUgd29ya2VyLCBjb250YWluaW5nXHJcbiAgICAgKiB0aGUgd29ya2VyJ3MgSUQsIGEgcmVmZXJlbmNlIHRvIHRoZSBicm93c2VyIHBhZ2UsIGFuZCB3b3JrIGNvdW50LlxyXG4gICAgICovXHJcbiAgICBkZXN0cm95OiBhc3luYyAocG9vbFJlc291cmNlKSA9PiB7XHJcbiAgICAgIGxvZyhcclxuICAgICAgICAzLFxyXG4gICAgICAgIGBbcG9vbF0gUG9vbCByZXNvdXJjZSBbJHtwb29sUmVzb3VyY2UuaWR9XSAtIERlc3Ryb3lpbmcgYSB3b3JrZXIuYFxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKHBvb2xSZXNvdXJjZS5wYWdlICYmICFwb29sUmVzb3VyY2UucGFnZS5pc0Nsb3NlZCgpKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIC8vIFJlbW92ZSBhbGwgYXR0YWNoZWQgZXZlbnQgbGlzdGVuZXJzIGZyb20gdGhlIHJlc291cmNlXHJcbiAgICAgICAgICBwb29sUmVzb3VyY2UucGFnZS5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3BhZ2VlcnJvcicpO1xyXG4gICAgICAgICAgcG9vbFJlc291cmNlLnBhZ2UucmVtb3ZlQWxsTGlzdGVuZXJzKCdjb25zb2xlJyk7XHJcbiAgICAgICAgICBwb29sUmVzb3VyY2UucGFnZS5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2ZyYW1lZGV0YWNoZWQnKTtcclxuXHJcbiAgICAgICAgICAvLyBXZSBuZWVkIHRvIHdhaXQgYXJvdW5kIGZvciB0aGlzXHJcbiAgICAgICAgICBhd2FpdCBwb29sUmVzb3VyY2UucGFnZS5jbG9zZSgpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICBsb2coXHJcbiAgICAgICAgICAgIDMsXHJcbiAgICAgICAgICAgIGBbcG9vbF0gUG9vbCByZXNvdXJjZSBbJHtwb29sUmVzb3VyY2UuaWR9XSAtIFBhZ2UgY291bGQgbm90IGJlIGNsb3NlZCB1cG9uIGRlc3Ryb3lpbmcuYFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBpbml0UG9vbCxcclxuICBraWxsUG9vbCxcclxuICBwb3N0V29yayxcclxuICBnZXRQb29sLFxyXG4gIGdldFBvb2xTdGF0cyxcclxuICBnZXRQb29sSW5mb0pTT05cclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQG92ZXJ2aWV3IFVzZWQgdG8gc2FuaXRpemUgdGhlIHN0cmluZ3MgY29taW5nIGZyb20gdGhlIGV4cG9ydGluZyBtb2R1bGVcclxuICogdG8gcHJldmVudCBYU1MgYXR0YWNrcyAod2l0aCB0aGUgRE9NUHVyaWZ5IGxpYnJhcnkpLlxyXG4gKi9cclxuXHJcbmltcG9ydCBET01QdXJpZnkgZnJvbSAnZG9tcHVyaWZ5JztcclxuaW1wb3J0IHsgSlNET00gfSBmcm9tICdqc2RvbSc7XHJcblxyXG4vKipcclxuICogU2FuaXRpemVzIGEgZ2l2ZW4gSFRNTCBzdHJpbmcgYnkgcmVtb3ZpbmcgPHNjcmlwdD4gdGFncy4gVGhpcyBmdW5jdGlvbiB1c2VzXHJcbiAqIGEgcmVndWxhciBleHByZXNzaW9uIHRvIGZpbmQgYW5kIHJlbW92ZSBhbGwgb2NjdXJyZW5jZXMgb2YgPHNjcmlwdD48L3NjcmlwdD5cclxuICogdGFncyBhbmQgYW55IGNvbnRlbnQgd2l0aGluIHRoZW0uXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBzYW5pdGl6ZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgLSBUaGUgSFRNTCBzdHJpbmcgdG8gYmUgc2FuaXRpemVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgc2FuaXRpemVkIEhUTUwgc3RyaW5nLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplKGlucHV0KSB7XHJcbiAgLy8gR2V0IHRoZSB2aXJ0dWFsIERPTVxyXG4gIGNvbnN0IHdpbmRvdyA9IG5ldyBKU0RPTSgnJykud2luZG93O1xyXG5cclxuICAvLyBDcmVhdGUgYSBwdXJpZnlpbmcgaW5zdGFuY2VcclxuICBjb25zdCBwdXJpZnkgPSBET01QdXJpZnkod2luZG93KTtcclxuXHJcbiAgLy8gUmV0dXJuIHNhbml0aXplZCBpbnB1dCwgYWxsb3dpbmcgZm9yIHRoZSBgZm9yZWlnbk9iamVjdGAgZWxlbWVudHNcclxuICByZXR1cm4gcHVyaWZ5LnNhbml0aXplKGlucHV0LCB7IEFERF9UQUdTOiBbJ2ZvcmVpZ25PYmplY3QnXSB9KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHNhbml0aXplXHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBUaGlzIG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbnMgdGhhdCBwcmVwYXJlIGZvciB0aGUgZXhwb3J0aW5nXHJcbiAqIGNoYXJ0cyBpbnRvIHZhcmlvdXMgaW1hZ2Ugb3V0cHV0IGZvcm1hdHMgc3VjaCBhcyBKUEVHLCBQTkcsIFBERiwgYW5kIFNWR3MuXHJcbiAqIEl0IHN1cHBvcnRzIHNpbmdsZSBhbmQgYmF0Y2ggZXhwb3J0IG9wZXJhdGlvbnMgYW5kIGFsbG93cyBjdXN0b21pemF0aW9uXHJcbiAqIHRocm91Z2ggb3B0aW9ucyBwYXNzZWQgZnJvbSBjb25maWd1cmF0aW9ucyBvciBBUElzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IHJlYWRGaWxlU3luYywgd3JpdGVGaWxlU3luYyB9IGZyb20gJ2ZzJztcclxuXHJcbmltcG9ydCB7IGlzQWxsb3dlZENvbmZpZywgdXBkYXRlT3B0aW9ucywgdmFsaWRhdGVPcHRpb24gfSBmcm9tICcuL2NvbmZpZy5qcyc7XHJcbmltcG9ydCB7IGxvZywgbG9nV2l0aFN0YWNrIH0gZnJvbSAnLi9sb2dnZXIuanMnO1xyXG5pbXBvcnQgeyBnZXRQb29sU3RhdHMsIGtpbGxQb29sLCBwb3N0V29yayB9IGZyb20gJy4vcG9vbC5qcyc7XHJcbmltcG9ydCB7IHNhbml0aXplIH0gZnJvbSAnLi9zYW5pdGl6ZS5qcyc7XHJcbmltcG9ydCB7IGdldEFic29sdXRlUGF0aCwgZ2V0QmFzZTY0LCBpc09iamVjdCwgcm91bmROdW1iZXIgfSBmcm9tICcuL3V0aWxzLmpzJztcclxuXHJcbmltcG9ydCBFeHBvcnRFcnJvciBmcm9tICcuL2Vycm9ycy9FeHBvcnRFcnJvci5qcyc7XHJcblxyXG4vLyBUaGUgZ2xvYmFsIGZsYWcgZm9yIHRoZSBjb2RlIGV4ZWN1dGlvbiBwZXJtaXNzaW9uXHJcbmxldCBhbGxvd0NvZGVFeGVjdXRpb24gPSBmYWxzZTtcclxuXHJcbi8qKlxyXG4gKiBTdGFydHMgYSBzaW5nbGUgZXhwb3J0IHByb2Nlc3MgYmFzZWQgb24gdGhlIHNwZWNpZmllZCBvcHRpb25zIGFuZCBzYXZlc1xyXG4gKiB0aGUgcmVzdWx0aW5nIGltYWdlIHRvIHRoZSBwcm92aWRlZCBvdXRwdXQgZmlsZS5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBzaW5nbGVFeHBvcnRcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgYG9wdGlvbnNgIG9iamVjdCwgd2hpY2ggc2hvdWxkIGluY2x1ZGUgc2V0dGluZ3NcclxuICogZnJvbSB0aGUgYGV4cG9ydGAgYW5kIGBjdXN0b21Mb2dpY2Agc2VjdGlvbnMuIEl0IGNhbiBiZSBhIHBhcnRpYWwgb3IgY29tcGxldGVcclxuICogc2V0IG9mIG9wdGlvbnMgZnJvbSB0aGVzZSBzZWN0aW9ucy4gVGhlIG9iamVjdCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lXHJcbiAqIG9mIHRoZSBmb2xsb3dpbmcgYGV4cG9ydGAgcHJvcGVydGllczogYGluZmlsZWAsIGBpbnN0cmAsIGBvcHRpb25zYCwgb3IgYHN2Z2BcclxuICogdG8gZ2VuZXJhdGUgYSB2YWxpZCBpbWFnZS5cclxuICpcclxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uY2UgdGhlIHNpbmdsZSBleHBvcnRcclxuICogcHJvY2VzcyBpcyBjb21wbGV0ZWQuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiBhbiBlcnJvciBvY2N1cnMgZHVyaW5nXHJcbiAqIHRoZSBzaW5nbGUgZXhwb3J0IHByb2Nlc3MuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2luZ2xlRXhwb3J0KG9wdGlvbnMpIHtcclxuICAvLyBDaGVjayBpZiB0aGUgZXhwb3J0IG1ha2VzIHNlbnNlXHJcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5leHBvcnQpIHtcclxuICAgIC8vIFBlcmZvcm0gYW4gZXhwb3J0XHJcbiAgICBhd2FpdCBzdGFydEV4cG9ydChcclxuICAgICAgeyBleHBvcnQ6IG9wdGlvbnMuZXhwb3J0LCBjdXN0b21Mb2dpYzogb3B0aW9ucy5jdXN0b21Mb2dpYyB9LFxyXG4gICAgICBhc3luYyAoZXJyb3IsIGRhdGEpID0+IHtcclxuICAgICAgICAvLyBFeGl0IHByb2Nlc3Mgd2hlbiBlcnJvciBleGlzdHNcclxuICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBgYjY0YCwgYG91dGZpbGVgLCBhbmQgYHR5cGVgIGZvciBhIGNoYXJ0XHJcbiAgICAgICAgY29uc3QgeyBiNjQsIG91dGZpbGUsIHR5cGUgfSA9IGRhdGEub3B0aW9ucy5leHBvcnQ7XHJcblxyXG4gICAgICAgIC8vIFNhdmUgdGhlIHJlc3VsdFxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBpZiAoYjY0KSB7XHJcbiAgICAgICAgICAgIC8vIEFzIGEgQmFzZTY0IHN0cmluZyB0byBhIHR4dCBmaWxlXHJcbiAgICAgICAgICAgIHdyaXRlRmlsZVN5bmMoXHJcbiAgICAgICAgICAgICAgYCR7b3V0ZmlsZS5zcGxpdCgnLicpLnNoaWZ0KCkgfHwgJ2NoYXJ0J30udHh0YCxcclxuICAgICAgICAgICAgICBnZXRCYXNlNjQoZGF0YS5yZXN1bHQsIHR5cGUpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBBcyBhIGNvcnJlY3QgaW1hZ2UgZm9ybWF0XHJcbiAgICAgICAgICAgIHdyaXRlRmlsZVN5bmMoXHJcbiAgICAgICAgICAgICAgb3V0ZmlsZSB8fCBgY2hhcnQuJHt0eXBlfWAsXHJcbiAgICAgICAgICAgICAgdHlwZSAhPT0gJ3N2ZycgPyBCdWZmZXIuZnJvbShkYXRhLnJlc3VsdCwgJ2Jhc2U2NCcpIDogZGF0YS5yZXN1bHRcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgICAgICAnW2NoYXJ0XSBFcnJvciB3aGlsZSBzYXZpbmcgYSBjaGFydC4nLFxyXG4gICAgICAgICAgICA1MDBcclxuICAgICAgICAgICkuc2V0RXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gS2lsbCBwb29sIGFuZCBjbG9zZSBicm93c2VyIGFmdGVyIGZpbmlzaGluZyBzaW5nbGUgZXhwb3J0XHJcbiAgICAgICAgYXdhaXQga2lsbFBvb2woKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAnW2NoYXJ0XSBObyBleHBlY3RlZCBgZXhwb3J0YCBvcHRpb25zIHdlcmUgZm91bmQuIFBsZWFzZSBwcm92aWRlIG9uZSBvZiB0aGUgZm9sbG93aW5nIG9wdGlvbnM6IGBpbmZpbGVgLCBgaW5zdHJgLCBgb3B0aW9uc2AsIG9yIGBzdmdgIHRvIGdlbmVyYXRlIGEgdmFsaWQgaW1hZ2UuJyxcclxuICAgICAgNDAwXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFN0YXJ0cyBhIGJhdGNoIGV4cG9ydCBwcm9jZXNzIGZvciBtdWx0aXBsZSBjaGFydHMgYmFzZWQgb24gaW5mb3JtYXRpb25cclxuICogcHJvdmlkZWQgaW4gdGhlIGBiYXRjaGAgb3B0aW9uLiBUaGUgYGJhdGNoYCBpcyBhIHN0cmluZyBpbiB0aGUgZm9sbG93aW5nXHJcbiAqIGZvcm1hdDogXCJpbmZpbGUxLmpzb249b3V0ZmlsZTEucG5nO2luZmlsZTIuanNvbj1vdXRmaWxlMi5wbmc7Li4uXCIuIFJlc3VsdHNcclxuICogYXJlIHNhdmVkIHRvIHRoZSBzcGVjaWZpZWQgb3V0cHV0IGZpbGVzLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIGJhdGNoRXhwb3J0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIGBvcHRpb25zYCBvYmplY3QsIHdoaWNoIHNob3VsZCBpbmNsdWRlIHNldHRpbmdzXHJcbiAqIGZyb20gdGhlIGBleHBvcnRgIGFuZCBgY3VzdG9tTG9naWNgIHNlY3Rpb25zLiBJdCBjYW4gYmUgYSBwYXJ0aWFsIG9yIGNvbXBsZXRlXHJcbiAqIHNldCBvZiBvcHRpb25zIGZyb20gdGhlc2Ugc2VjdGlvbnMuIEl0IG11c3QgY29udGFpbiB0aGUgYGJhdGNoYCBvcHRpb24gZnJvbVxyXG4gKiB0aGUgYGV4cG9ydGAgc2VjdGlvbiB0byBnZW5lcmF0ZSB2YWxpZCBpbWFnZXMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyBvbmNlIHRoZSBiYXRjaCBleHBvcnRcclxuICogcHJvY2Vzc2VzIGFyZSBjb21wbGV0ZWQuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiBhbiBlcnJvciBvY2N1cnMgZHVyaW5nXHJcbiAqIGFueSBvZiB0aGUgYmF0Y2ggZXhwb3J0IHByb2Nlc3MuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYmF0Y2hFeHBvcnQob3B0aW9ucykge1xyXG4gIC8vIENoZWNrIGlmIHRoZSBleHBvcnQgbWFrZXMgc2Vuc2VcclxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmV4cG9ydCAmJiBvcHRpb25zLmV4cG9ydC5iYXRjaCkge1xyXG4gICAgLy8gQW4gYXJyYXkgZm9yIGNvbGxlY3RpbmcgYmF0Y2ggZXhwb3J0c1xyXG4gICAgY29uc3QgYmF0Y2hGdW5jdGlvbnMgPSBbXTtcclxuXHJcbiAgICAvLyBTcGxpdCBhbmQgcGFpciB0aGUgYGJhdGNoYCBhcmd1bWVudHNcclxuICAgIGZvciAobGV0IHBhaXIgb2Ygb3B0aW9ucy5leHBvcnQuYmF0Y2guc3BsaXQoJzsnKSB8fCBbXSkge1xyXG4gICAgICBwYWlyID0gcGFpci5zcGxpdCgnPScpO1xyXG4gICAgICBpZiAocGFpci5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICBiYXRjaEZ1bmN0aW9ucy5wdXNoKFxyXG4gICAgICAgICAgc3RhcnRFeHBvcnQoXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBleHBvcnQ6IHtcclxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMuZXhwb3J0LFxyXG4gICAgICAgICAgICAgICAgaW5maWxlOiBwYWlyWzBdLFxyXG4gICAgICAgICAgICAgICAgb3V0ZmlsZTogcGFpclsxXVxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgY3VzdG9tTG9naWM6IG9wdGlvbnMuY3VzdG9tTG9naWNcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKGVycm9yLCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgLy8gRXhpdCBwcm9jZXNzIHdoZW4gZXJyb3IgZXhpc3RzXHJcbiAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIC8vIEdldCB0aGUgYGI2NGAsIGBvdXRmaWxlYCwgYW5kIGB0eXBlYCBmb3IgYSBjaGFydFxyXG4gICAgICAgICAgICAgIGNvbnN0IHsgYjY0LCBvdXRmaWxlLCB0eXBlIH0gPSBkYXRhLm9wdGlvbnMuZXhwb3J0O1xyXG5cclxuICAgICAgICAgICAgICAvLyBTYXZlIHRoZSByZXN1bHRcclxuICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGI2NCkge1xyXG4gICAgICAgICAgICAgICAgICAvLyBBcyBhIEJhc2U2NCBzdHJpbmcgdG8gYSB0eHQgZmlsZVxyXG4gICAgICAgICAgICAgICAgICB3cml0ZUZpbGVTeW5jKFxyXG4gICAgICAgICAgICAgICAgICAgIGAke291dGZpbGUuc3BsaXQoJy4nKS5zaGlmdCgpIHx8ICdjaGFydCd9LnR4dGAsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0QmFzZTY0KGRhdGEucmVzdWx0LCB0eXBlKVxyXG4gICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgLy8gQXMgYSBjb3JyZWN0IGltYWdlIGZvcm1hdFxyXG4gICAgICAgICAgICAgICAgICB3cml0ZUZpbGVTeW5jKFxyXG4gICAgICAgICAgICAgICAgICAgIG91dGZpbGUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSAhPT0gJ3N2ZydcclxuICAgICAgICAgICAgICAgICAgICAgID8gQnVmZmVyLmZyb20oZGF0YS5yZXN1bHQsICdiYXNlNjQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgOiBkYXRhLnJlc3VsdFxyXG4gICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICdbY2hhcnRdIEVycm9yIHdoaWxlIHNhdmluZyBhIGNoYXJ0LicsXHJcbiAgICAgICAgICAgICAgICAgIDUwMFxyXG4gICAgICAgICAgICAgICAgKS5zZXRFcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsb2coMiwgJ1tjaGFydF0gTm8gY29ycmVjdCBwYWlyIGZvdW5kIGZvciB0aGUgYmF0Y2ggZXhwb3J0LicpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQXdhaXQgYWxsIGV4cG9ydHMgYXJlIGRvbmVcclxuICAgIGNvbnN0IGJhdGNoUmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsU2V0dGxlZChiYXRjaEZ1bmN0aW9ucyk7XHJcblxyXG4gICAgLy8gS2lsbCBwb29sIGFuZCBjbG9zZSBicm93c2VyIGFmdGVyIGZpbmlzaGluZyBiYXRjaCBleHBvcnRcclxuICAgIGF3YWl0IGtpbGxQb29sKCk7XHJcblxyXG4gICAgLy8gTG9nIGVycm9ycyBpZiBmb3VuZFxyXG4gICAgYmF0Y2hSZXN1bHRzLmZvckVhY2goKHJlc3VsdCwgaW5kZXgpID0+IHtcclxuICAgICAgLy8gTG9nIHRoZSBlcnJvciB3aXRoIHN0YWNrIGFib3V0IHRoZSBzcGVjaWZpYyBiYXRjaCBleHBvcnRcclxuICAgICAgaWYgKHJlc3VsdC5yZWFzb24pIHtcclxuICAgICAgICBsb2dXaXRoU3RhY2soXHJcbiAgICAgICAgICAxLFxyXG4gICAgICAgICAgcmVzdWx0LnJlYXNvbixcclxuICAgICAgICAgIGBbY2hhcnRdIEJhdGNoIGV4cG9ydCBudW1iZXIgJHtpbmRleCArIDF9IGNvdWxkIG5vdCBiZSBjb3JyZWN0bHkgY29tcGxldGVkLmBcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAnW2NoYXJ0XSBObyBleHBlY3RlZCBgZXhwb3J0YCBvcHRpb25zIHdlcmUgZm91bmQuIFBsZWFzZSBwcm92aWRlIHRoZSBgYmF0Y2hgIG9wdGlvbiB0byBnZW5lcmF0ZSB2YWxpZCBpbWFnZXMuJyxcclxuICAgICAgNDAwXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFN0YXJ0cyBhbiBleHBvcnQgcHJvY2Vzcy4gVGhlIGBpbWFnZU9wdGlvbnNgIHBhcmFtZXRlciBpcyBhbiBvYmplY3QgdGhhdFxyXG4gKiBzaG91bGQgaW5jbHVkZSBzZXR0aW5ncyBmcm9tIHRoZSBgZXhwb3J0YCBhbmQgYGN1c3RvbUxvZ2ljYCBzZWN0aW9ucy4gSXQgY2FuXHJcbiAqIGJlIGEgcGFydGlhbCBvciBjb21wbGV0ZSBzZXQgb2Ygb3B0aW9ucyBmcm9tIHRoZXNlIHNlY3Rpb25zLiBJZiBwYXJ0aWFsXHJcbiAqIG9wdGlvbnMgYXJlIHByb3ZpZGVkLCBtaXNzaW5nIHZhbHVlcyB3aWxsIGJlIG1lcmdlZCB3aXRoIHRoZSBjdXJyZW50IGdsb2JhbFxyXG4gKiBvcHRpb25zLlxyXG4gKlxyXG4gKiBUaGUgYGVuZENhbGxiYWNrYCBmdW5jdGlvbiBpcyBpbnZva2VkIHVwb24gdGhlIGNvbXBsZXRpb24gb2YgdGhlIGV4cG9ydCxcclxuICogZWl0aGVyIHN1Y2Nlc3NmdWxseSBvciB3aXRoIGFuIGVycm9yLiBUaGUgYGVycm9yYCBvYmplY3QgaXMgcHJvdmlkZWRcclxuICogYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCBhbmQgdGhlIGBkYXRhYCBvYmplY3QgaXMgdGhlIHNlY29uZCwgY29udGFpbmluZ1xyXG4gKiB0aGUgQmFzZTY0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjaGFydCBpbiB0aGUgYHJlc3VsdGAgcHJvcGVydHlcclxuICogYW5kIHRoZSBjb21wbGV0ZSBzZXQgb2Ygb3B0aW9ucyBpbiB0aGUgYG9wdGlvbnNgIHByb3BlcnR5LlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIHN0YXJ0RXhwb3J0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZU9wdGlvbnMgLSBUaGUgYGltYWdlT3B0aW9uc2Agb2JqZWN0LCB3aGljaCBzaG91bGRcclxuICogaW5jbHVkZSBzZXR0aW5ncyBmcm9tIHRoZSBgZXhwb3J0YCBhbmQgYGN1c3RvbUxvZ2ljYCBzZWN0aW9ucy4gSXQgY2FuXHJcbiAqIGJlIGEgcGFydGlhbCBvciBjb21wbGV0ZSBzZXQgb2Ygb3B0aW9ucyBmcm9tIHRoZXNlIHNlY3Rpb25zLiBJZiB0aGUgcHJvdmlkZWRcclxuICogb3B0aW9ucyBhcmUgcGFydGlhbCwgbWlzc2luZyB2YWx1ZXMgd2lsbCBiZSBtZXJnZWQgd2l0aCB0aGUgY3VycmVudCBnbG9iYWxcclxuICogb3B0aW9ucy5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5kQ2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgaW52b2tlZCB1cG9uXHJcbiAqIGZpbmFsaXppbmcgdGhlIGV4cG9ydCBwcm9jZXNzIG9yIHVwb24gZW5jb3VudGVyaW5nIGFuIGVycm9yLiBUaGUgZmlyc3RcclxuICogYXJndW1lbnQgaXMgdGhlIGBlcnJvcmAgb2JqZWN0LCBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCBpcyB0aGUgYGRhdGFgIG9iamVjdCxcclxuICogd2hpY2ggaW5jbHVkZXMgdGhlIEJhc2U2NCByZXByZXNlbnRhdGlvbiBvZiB0aGUgY2hhcnQgaW4gdGhlIGByZXN1bHRgXHJcbiAqIHByb3BlcnR5IGFuZCB0aGUgZnVsbCBzZXQgb2Ygb3B0aW9ucyBpbiB0aGUgYG9wdGlvbnNgIHByb3BlcnR5LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCByZXR1cm4gYSB2YWx1ZSBkaXJlY3RseS5cclxuICogSW5zdGVhZCwgaXQgY29tbXVuaWNhdGVzIHJlc3VsdHMgdmlhIHRoZSBgZW5kQ2FsbGJhY2tgLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaWYgdGhlcmUgaXMgYSBwcm9ibGVtIHdpdGhcclxuICogcHJvY2Vzc2luZyBpbnB1dCBvZiBhbnkgdHlwZS4gVGhlIGVycm9yIGlzIHBhc3NlZCBpbnRvIHRoZSBgZW5kQ2FsbGJhY2tgXHJcbiAqIGZ1bmN0aW9uIGFuZCBwcm9jZXNzZWQgdGhlcmUuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRFeHBvcnQoaW1hZ2VPcHRpb25zLCBlbmRDYWxsYmFjaykge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBDaGVjayBpZiBwcm92aWRlZCBvcHRpb25zIGFyZSBpbiBhbiBvYmplY3RcclxuICAgIGlmICghaXNPYmplY3QoaW1hZ2VPcHRpb25zKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgJ1tjaGFydF0gSW5jb3JyZWN0IHZhbHVlIG9mIHRoZSBwcm92aWRlZCBgaW1hZ2VPcHRpb25zYC4gTmVlZHMgdG8gYmUgYW4gb2JqZWN0LicsXHJcbiAgICAgICAgNDAwXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWVyZ2UgYWRkaXRpb25hbCBvcHRpb25zIHRvIHRoZSBjb3B5IG9mIHRoZSBpbnN0YW5jZSBvcHRpb25zXHJcbiAgICBjb25zdCBvcHRpb25zID0gdXBkYXRlT3B0aW9ucyhcclxuICAgICAge1xyXG4gICAgICAgIGV4cG9ydDogaW1hZ2VPcHRpb25zLmV4cG9ydCxcclxuICAgICAgICBjdXN0b21Mb2dpYzogaW1hZ2VPcHRpb25zLmN1c3RvbUxvZ2ljXHJcbiAgICAgIH0sXHJcbiAgICAgIHRydWVcclxuICAgICk7XHJcblxyXG4gICAgLy8gR2V0IHRoZSBgZXhwb3J0YCBvcHRpb25zXHJcbiAgICBjb25zdCBleHBvcnRPcHRpb25zID0gb3B0aW9ucy5leHBvcnQ7XHJcblxyXG4gICAgLy8gU3RhcnRpbmcgZXhwb3J0aW5nIHByb2Nlc3MgbWVzc2FnZVxyXG4gICAgbG9nKDQsICdbY2hhcnRdIFN0YXJ0aW5nIHRoZSBleHBvcnRpbmcgcHJvY2Vzcy4nKTtcclxuXHJcbiAgICAvLyBFeHBvcnQgdXNpbmcgb3B0aW9ucyBmcm9tIHRoZSBmaWxlIGFzIGFuIGlucHV0XHJcbiAgICBpZiAoZXhwb3J0T3B0aW9ucy5pbmZpbGUgIT09IG51bGwpIHtcclxuICAgICAgbG9nKDQsICdbY2hhcnRdIEF0dGVtcHRpbmcgdG8gZXhwb3J0IGZyb20gYSBmaWxlIGlucHV0LicpO1xyXG5cclxuICAgICAgbGV0IGZpbGVDb250ZW50O1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIFRyeSB0byByZWFkIHRoZSBmaWxlIHRvIGdldCB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uXHJcbiAgICAgICAgZmlsZUNvbnRlbnQgPSByZWFkRmlsZVN5bmMoXHJcbiAgICAgICAgICBnZXRBYnNvbHV0ZVBhdGgoZXhwb3J0T3B0aW9ucy5pbmZpbGUpLFxyXG4gICAgICAgICAgJ3V0ZjgnXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgICAnW2NoYXJ0XSBFcnJvciBsb2FkaW5nIGNvbnRlbnQgZnJvbSBhIGZpbGUgaW5wdXQuJyxcclxuICAgICAgICAgIDQwMFxyXG4gICAgICAgICkuc2V0RXJyb3IoZXJyb3IpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayB0aGUgZmlsZSdzIGV4dGVuc2lvblxyXG4gICAgICBpZiAoZXhwb3J0T3B0aW9ucy5pbmZpbGUuZW5kc1dpdGgoJy5zdmcnKSkge1xyXG4gICAgICAgIC8vIFNldCB0byB0aGUgYHN2Z2Agb3B0aW9uXHJcbiAgICAgICAgZXhwb3J0T3B0aW9ucy5zdmcgPSB2YWxpZGF0ZU9wdGlvbignc3ZnJywgZmlsZUNvbnRlbnQpO1xyXG4gICAgICB9IGVsc2UgaWYgKGV4cG9ydE9wdGlvbnMuaW5maWxlLmVuZHNXaXRoKCcuanNvbicpKSB7XHJcbiAgICAgICAgLy8gU2V0IHRvIHRoZSBgaW5zdHJgIG9wdGlvblxyXG4gICAgICAgIGV4cG9ydE9wdGlvbnMuaW5zdHIgPSB2YWxpZGF0ZU9wdGlvbignaW5zdHInLCBmaWxlQ29udGVudCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgICAgJ1tjaGFydF0gSW5jb3JyZWN0IHZhbHVlIG9mIHRoZSBgaW5maWxlYCBvcHRpb24uJyxcclxuICAgICAgICAgIDQwMFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBFeHBvcnQgdXNpbmcgU1ZHIGFzIGFuIGlucHV0XHJcbiAgICBpZiAoZXhwb3J0T3B0aW9ucy5zdmcgIT09IG51bGwpIHtcclxuICAgICAgbG9nKDQsICdbY2hhcnRdIEF0dGVtcHRpbmcgdG8gZXhwb3J0IGZyb20gYW4gU1ZHIGlucHV0LicpO1xyXG5cclxuICAgICAgLy8gU1ZHIGV4cG9ydHMgYXR0ZW1wdHMgY291bnRlclxyXG4gICAgICArK2dldFBvb2xTdGF0cygpLmV4cG9ydHNGcm9tU3ZnQXR0ZW1wdHM7XHJcblxyXG4gICAgICAvLyBFeHBvcnQgZnJvbSBhbiBTVkcgc3RyaW5nXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IF9leHBvcnRGcm9tU3ZnKFxyXG4gICAgICAgIHNhbml0aXplKGV4cG9ydE9wdGlvbnMuc3ZnKSwgLy8gIzIwOVxyXG4gICAgICAgIG9wdGlvbnNcclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIFNWRyBleHBvcnRzIGNvdW50ZXJcclxuICAgICAgKytnZXRQb29sU3RhdHMoKS5leHBvcnRzRnJvbVN2ZztcclxuXHJcbiAgICAgIC8vIFBhc3MgU1ZHIGV4cG9ydCByZXN1bHQgdG8gdGhlIGVuZCBjYWxsYmFja1xyXG4gICAgICByZXR1cm4gZW5kQ2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFeHBvcnQgdXNpbmcgb3B0aW9ucyBhcyBhbiBpbnB1dFxyXG4gICAgaWYgKGV4cG9ydE9wdGlvbnMuaW5zdHIgIT09IG51bGwgfHwgZXhwb3J0T3B0aW9ucy5vcHRpb25zICE9PSBudWxsKSB7XHJcbiAgICAgIGxvZyg0LCAnW2NoYXJ0XSBBdHRlbXB0aW5nIHRvIGV4cG9ydCBmcm9tIG9wdGlvbnMgaW5wdXQuJyk7XHJcblxyXG4gICAgICAvLyBPcHRpb25zIGV4cG9ydHMgYXR0ZW1wdHMgY291bnRlclxyXG4gICAgICArK2dldFBvb2xTdGF0cygpLmV4cG9ydHNGcm9tT3B0aW9uc0F0dGVtcHRzO1xyXG5cclxuICAgICAgLy8gRXhwb3J0IGZyb20gb3B0aW9uc1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBfZXhwb3J0RnJvbU9wdGlvbnMoXHJcbiAgICAgICAgZXhwb3J0T3B0aW9ucy5pbnN0ciB8fCBleHBvcnRPcHRpb25zLm9wdGlvbnMsXHJcbiAgICAgICAgb3B0aW9uc1xyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gT3B0aW9ucyBleHBvcnRzIGNvdW50ZXJcclxuICAgICAgKytnZXRQb29sU3RhdHMoKS5leHBvcnRzRnJvbU9wdGlvbnM7XHJcblxyXG4gICAgICAvLyBQYXNzIG9wdGlvbnMgZXhwb3J0IHJlc3VsdCB0byB0aGUgZW5kIGNhbGxiYWNrXHJcbiAgICAgIHJldHVybiBlbmRDYWxsYmFjayhudWxsLCByZXN1bHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vIGlucHV0IHNwZWNpZmllZCwgcGFzcyBhbiBlcnJvciBtZXNzYWdlIHRvIHRoZSBjYWxsYmFja1xyXG4gICAgcmV0dXJuIGVuZENhbGxiYWNrKFxyXG4gICAgICBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgYFtjaGFydF0gTm8gdmFsaWQgaW5wdXQgc3BlY2lmaWVkLiBDaGVjayBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzIGlzIGNvcnJlY3RseSBzZXQ6ICdpbmZpbGUnLCAnaW5zdHInLCAnb3B0aW9ucycsIG9yICdzdmcnLmAsXHJcbiAgICAgICAgNDAwXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJldHVybiBlbmRDYWxsYmFjayhlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmV0cmlldmVzIGFuZCByZXR1cm5zIHRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgY29kZSBleGVjdXRpb24gcGVybWlzc2lvbi5cclxuICpcclxuICogQGZ1bmN0aW9uIGdldEFsbG93Q29kZUV4ZWN1dGlvblxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVGhlIHZhbHVlIG9mIHRoZSBnbG9iYWwgYGFsbG93Q29kZUV4ZWN1dGlvbmAgb3B0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbG93Q29kZUV4ZWN1dGlvbigpIHtcclxuICByZXR1cm4gYWxsb3dDb2RlRXhlY3V0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0cyB0aGUgY29kZSBleGVjdXRpb24gcGVybWlzc2lvbiBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgYm9vbGVhbiB2YWx1ZS5cclxuICpcclxuICogQGZ1bmN0aW9uIHNldEFsbG93Q29kZUV4ZWN1dGlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIC0gVGhlIGJvb2xlYW4gdmFsdWUgdG8gYmUgYXNzaWduZWQgdG8gdGhlIGdsb2JhbFxyXG4gKiBgYWxsb3dDb2RlRXhlY3V0aW9uYCBvcHRpb24uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0QWxsb3dDb2RlRXhlY3V0aW9uKHZhbHVlKSB7XHJcbiAgYWxsb3dDb2RlRXhlY3V0aW9uID0gdmFsdWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFeHBvcnRzIGZyb20gYW4gU1ZHIGJhc2VkIGlucHV0IHdpdGggdGhlIHByb3ZpZGVkIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gX2V4cG9ydEZyb21TdmdcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0VG9FeHBvcnQgLSBUaGUgU1ZHIGJhc2VkIGlucHV0IHRvIGJlIGV4cG9ydGVkLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nIGNvbXBsZXRlIHNldFxyXG4gKiBvZiBvcHRpb25zLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx1bmtub3duPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSByZXN1bHQgb2YgdGhlIGV4cG9ydFxyXG4gKiBwcm9jZXNzLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaWYgdGhlcmUgaXMgbm90IGEgY29ycmVjdCBTVkdcclxuICogaW5wdXQuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfZXhwb3J0RnJvbVN2ZyhpbnB1dFRvRXhwb3J0LCBvcHRpb25zKSB7XHJcbiAgLy8gQ2hlY2sgaWYgaXQgaXMgU1ZHXHJcbiAgaWYgKFxyXG4gICAgdHlwZW9mIGlucHV0VG9FeHBvcnQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAoaW5wdXRUb0V4cG9ydC5pbmRleE9mKCc8c3ZnJykgPj0gMCB8fCBpbnB1dFRvRXhwb3J0LmluZGV4T2YoJzw/eG1sJykgPj0gMClcclxuICApIHtcclxuICAgIGxvZyg0LCAnW2NoYXJ0XSBQYXJzaW5nIGlucHV0IGFzIFNWRy4nKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGV4cG9ydCBpbnB1dCBhcyBTVkdcclxuICAgIG9wdGlvbnMuZXhwb3J0LnN2ZyA9IGlucHV0VG9FeHBvcnQ7XHJcblxyXG4gICAgLy8gUmVzZXQgdGhlIHJlc3Qgb2YgdGhlIGV4cG9ydCBpbnB1dCBvcHRpb25zXHJcbiAgICBvcHRpb25zLmV4cG9ydC5vcHRpb25zID0gbnVsbDtcclxuICAgIG9wdGlvbnMuZXhwb3J0Lmluc3RyID0gbnVsbDtcclxuXHJcbiAgICAvLyBDYWxsIHRoZSBmdW5jdGlvbiB3aXRoIGFuIFNWRyBzdHJpbmcgYXMgYW4gZXhwb3J0IGlucHV0XHJcbiAgICByZXR1cm4gX3ByZXBhcmVFeHBvcnQob3B0aW9ucyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcignW2NoYXJ0XSBOb3QgYSBjb3JyZWN0IFNWRyBpbnB1dC4nLCA0MDApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEV4cG9ydHMgZnJvbSBhbiBvcHRpb25zIGJhc2VkIGlucHV0IHdpdGggdGhlIHByb3ZpZGVkIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gX2V4cG9ydEZyb21PcHRpb25zXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dFRvRXhwb3J0IC0gVGhlIG9wdGlvbnMgYmFzZWQgaW5wdXQgdG8gYmUgZXhwb3J0ZWQuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmcgY29tcGxldGUgc2V0XHJcbiAqIG9mIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPHVua25vd24+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIHJlc3VsdCBvZiB0aGUgZXhwb3J0XHJcbiAqIHByb2Nlc3MuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiB0aGVyZSBpcyBub3QgYSBjb3JyZWN0XHJcbiAqIGNoYXJ0IG9wdGlvbnMgaW5wdXQuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfZXhwb3J0RnJvbU9wdGlvbnMoaW5wdXRUb0V4cG9ydCwgb3B0aW9ucykge1xyXG4gIGxvZyg0LCAnW2NoYXJ0XSBQYXJzaW5nIGlucHV0IGZyb20gb3B0aW9ucy4nKTtcclxuXHJcbiAgLy8gVHJ5IHRvIGNoZWNrLCB2YWxpZGF0ZSBhbmQgcGFyc2UgdG8gc3RyaW5naWZpZWQgb3B0aW9uc1xyXG4gIGNvbnN0IHN0cmluZ2lmaWVkT3B0aW9ucyA9IGlzQWxsb3dlZENvbmZpZyhcclxuICAgIGlucHV0VG9FeHBvcnQsXHJcbiAgICB0cnVlLFxyXG4gICAgb3B0aW9ucy5jdXN0b21Mb2dpYy5hbGxvd0NvZGVFeGVjdXRpb25cclxuICApO1xyXG5cclxuICAvLyBDaGVjayBpZiBhIGNvcnJlY3Qgc3RyaW5naWZpZWQgb3B0aW9uc1xyXG4gIGlmIChcclxuICAgIHN0cmluZ2lmaWVkT3B0aW9ucyA9PT0gbnVsbCB8fFxyXG4gICAgdHlwZW9mIHN0cmluZ2lmaWVkT3B0aW9ucyAhPT0gJ3N0cmluZycgfHxcclxuICAgICFzdHJpbmdpZmllZE9wdGlvbnMuc3RhcnRzV2l0aCgneycpIHx8XHJcbiAgICAhc3RyaW5naWZpZWRPcHRpb25zLmVuZHNXaXRoKCd9JylcclxuICApIHtcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgJ1tjaGFydF0gSW52YWxpZCBjb25maWd1cmF0aW9uIHByb3ZpZGVkIC0gT25seSBvcHRpb25zIGNvbmZpZ3VyYXRpb25zIGFuZCBTVkcgYXJlIGFsbG93ZWQgZm9yIHRoaXMgc2VydmVyLiBJZiB0aGlzIGlzIHlvdXIgc2VydmVyLCBKYXZhU2NyaXB0IGN1c3RvbSBjb2RlIGNhbiBiZSBlbmFibGVkIGJ5IHN0YXJ0aW5nIHRoZSBzZXJ2ZXIgd2l0aCB0aGUgYGFsbG93Q29kZUV4ZWN1dGlvbmAgb3B0aW9ucyBzZXQgdG8gdHJ1ZS4nLFxyXG4gICAgICA0MDNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBTZXQgdGhlIGV4cG9ydCBpbnB1dCBhcyBhIHN0cmluZ2lmaWVkIGNoYXJ0IG9wdGlvbnNcclxuICBvcHRpb25zLmV4cG9ydC5pbnN0ciA9IHN0cmluZ2lmaWVkT3B0aW9ucztcclxuXHJcbiAgLy8gUmVzZXQgdGhlIHJlc3Qgb2YgdGhlIGV4cG9ydCBpbnB1dCBvcHRpb25zXHJcbiAgb3B0aW9ucy5leHBvcnQub3B0aW9ucyA9IG51bGw7XHJcbiAgb3B0aW9ucy5leHBvcnQuc3ZnID0gbnVsbDtcclxuXHJcbiAgLy8gQ2FsbCB0aGUgZnVuY3Rpb24gd2l0aCBhIHN0cmluZ2lmaWVkIGNoYXJ0IG9wdGlvbnNcclxuICByZXR1cm4gX3ByZXBhcmVFeHBvcnQob3B0aW9ucyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGdW5jdGlvbiBmb3IgZmluYWxpemluZyBvcHRpb25zIGFuZCBjb25maWd1cmF0aW9ucyBiZWZvcmUgZXhwb3J0LlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIF9wcmVwYXJlRXhwb3J0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmcgY29tcGxldGUgc2V0XHJcbiAqIG9mIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPHVua25vd24+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIHJlc3VsdCBvZiB0aGUgZXhwb3J0XHJcbiAqIHByb2Nlc3MuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfcHJlcGFyZUV4cG9ydChvcHRpb25zKSB7XHJcbiAgLy8gR2V0IHRoZSBgZXhwb3J0YCBhbmQgYGN1c3RvbUxvZ2ljYCBvcHRpb25zXHJcbiAgY29uc3QgeyBleHBvcnQ6IGV4cG9ydE9wdGlvbnMsIGN1c3RvbUxvZ2ljOiBjdXN0b21Mb2dpY09wdGlvbnMgfSA9IG9wdGlvbnM7XHJcblxyXG4gIC8vIFByZXBhcmUgdGhlIGBjb25zdHJgIG9wdGlvblxyXG4gIGV4cG9ydE9wdGlvbnMuY29uc3RyID0gX2ZpeENvbnN0cihleHBvcnRPcHRpb25zLmNvbnN0cik7XHJcblxyXG4gIC8vIFByZXBhcmUgdGhlIGB0eXBlYCBvcHRpb25cclxuICBleHBvcnRPcHRpb25zLnR5cGUgPSBfZml4VHlwZShleHBvcnRPcHRpb25zLnR5cGUsIGV4cG9ydE9wdGlvbnMub3V0ZmlsZSk7XHJcblxyXG4gIC8vIFByZXBhcmUgdGhlIGBvdXRmaWxlYCBvcHRpb25cclxuICBleHBvcnRPcHRpb25zLm91dGZpbGUgPSBfZml4T3V0ZmlsZShcclxuICAgIGV4cG9ydE9wdGlvbnMudHlwZSxcclxuICAgIGV4cG9ydE9wdGlvbnMub3V0ZmlsZVxyXG4gICk7XHJcblxyXG4gIC8vIE5vdGlmeSBhYm91dCB0aGUgY3VzdG9tIGxvZ2ljIHVzYWdlIHN0YXR1c1xyXG4gIGxvZyhcclxuICAgIDMsXHJcbiAgICBgW2NoYXJ0XSBUaGUgY3VzdG9tIGxvZ2ljIGlzICR7Y3VzdG9tTG9naWNPcHRpb25zLmFsbG93Q29kZUV4ZWN1dGlvbiA/ICdhbGxvd2VkJyA6ICdkaXNhbGxvd2VkJ30uYFxyXG4gICk7XHJcblxyXG4gIC8vIFByZXBhcmUgdGhlIGBjdXN0b21Db2RlYCwgYGNhbGxiYWNrYCwgYW5kIGByZXNvdXJjZXNgIG9wdGlvbnNcclxuICBfaGFuZGxlQ3VzdG9tTG9naWMoY3VzdG9tTG9naWNPcHRpb25zKTtcclxuXHJcbiAgLy8gUHJlcGFyZSB0aGUgYGdsb2JhbE9wdGlvbnNgIGFuZCBgdGhlbWVPcHRpb25zYCBvcHRpb25zXHJcbiAgX2hhbmRsZUdsb2JhbEFuZFRoZW1lKGV4cG9ydE9wdGlvbnMsIGN1c3RvbUxvZ2ljT3B0aW9ucyk7XHJcblxyXG4gIC8vIFByZXBhcmUgdGhlIGBoZWlnaHRgLCBgd2lkdGhgLCBhbmQgYHNjYWxlYCBvcHRpb25zXHJcbiAgX2hhbmRsZVNpemUoZXhwb3J0T3B0aW9ucyk7XHJcblxyXG4gIC8vIENoZWNrIGlmIHRoZSBpbWFnZSBvcHRpb25zIG9iamVjdCBkb2VzIG5vdCBleGNlZWQgdGhlIHNpemUgbGltaXRcclxuICBfY2hlY2tEYXRhU2l6ZSh7IGV4cG9ydDogZXhwb3J0T3B0aW9ucywgY3VzdG9tTG9naWM6IGN1c3RvbUxvZ2ljT3B0aW9ucyB9KTtcclxuXHJcbiAgLy8gUG9zdCB0aGUgd29yayB0byB0aGUgcG9vbFxyXG4gIHJldHVybiBwb3N0V29yayhvcHRpb25zKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgYWRqdXN0aW5nIHRoZSBjb25zdHJ1Y3RvciBuYW1lIGJ5IHRyYW5zZm9ybWluZyBhbmQgbm9ybWFsaXppbmdcclxuICogaXQgYmFzZWQgb24gY29tbW9uIGNoYXJ0IHR5cGVzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX2ZpeENvbnN0clxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gY29uc3RyIC0gVGhlIG9yaWdpbmFsIGNvbnN0cnVjdG9yIG5hbWUgdG8gYmUgYWRqdXN0ZWQuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb3JyZWN0ZWQgY29uc3RydWN0b3IgbmFtZSwgb3IgJ2NoYXJ0JyBpZiB0aGUgaW5wdXRcclxuICogaXMgbm90IHJlY29nbml6ZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBfZml4Q29uc3RyKGNvbnN0cikge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBGaXggdGhlIGNvbnN0cnVjdG9yIGJ5IGxvd2VyaW5nIGNhc2luZ1xyXG4gICAgY29uc3QgZml4ZWRDb25zdHIgPSBgJHtjb25zdHIudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdjaGFydCcsICcnKX1DaGFydGA7XHJcblxyXG4gICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSByZXN1bHQgaXMganVzdCAnQ2hhcnQnXHJcbiAgICBpZiAoZml4ZWRDb25zdHIgPT09ICdDaGFydCcpIHtcclxuICAgICAgZml4ZWRDb25zdHIudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIGNvcnJlY3RlZCBjb25zdHJ1Y3Rvciwgb3RoZXJ3aXNlIGRlZmF1bHQgdG8gJ2NoYXJ0J1xyXG4gICAgcmV0dXJuIFsnY2hhcnQnLCAnc3RvY2tDaGFydCcsICdtYXBDaGFydCcsICdnYW50dENoYXJ0J10uaW5jbHVkZXMoXHJcbiAgICAgIGZpeGVkQ29uc3RyXHJcbiAgICApXHJcbiAgICAgID8gZml4ZWRDb25zdHJcclxuICAgICAgOiAnY2hhcnQnO1xyXG4gIH0gY2F0Y2gge1xyXG4gICAgLy8gRGVmYXVsdCB0byAnY2hhcnQnIGluIGNhc2Ugb2YgYW55IGVycm9yXHJcbiAgICByZXR1cm4gJ2NoYXJ0JztcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIGZpeGluZyB0aGUgb3V0ZmlsZSBiYXNlZCBvbiBwcm92aWRlZCB0eXBlLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX2ZpeE91dGZpbGVcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgb3JpZ2luYWwgZXhwb3J0IHR5cGUuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRmaWxlIC0gVGhlIGZpbGUgcGF0aCBvciBuYW1lLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29ycmVjdGVkIG91dGZpbGUsIG9yICdjaGFydC5wbmcnIGlmIHRoZSBpbnB1dFxyXG4gKiBpcyBub3QgcmVjb2duaXplZC5cclxuICovXHJcbmZ1bmN0aW9uIF9maXhPdXRmaWxlKHR5cGUsIG91dGZpbGUpIHtcclxuICAvLyBHZXQgdGhlIGZpbGUgbmFtZSBmcm9tIHRoZSBgb3V0ZmlsZWAgb3B0aW9uXHJcbiAgY29uc3QgZmlsZU5hbWUgPSBnZXRBYnNvbHV0ZVBhdGgob3V0ZmlsZSB8fCAnY2hhcnQnKVxyXG4gICAgLnNwbGl0KCcuJylcclxuICAgIC5zaGlmdCgpO1xyXG5cclxuICAvLyBSZXR1cm4gYSBjb3JyZWN0IG91dGZpbGVcclxuICByZXR1cm4gYCR7ZmlsZU5hbWV9LiR7dHlwZSB8fCAncG5nJ31gO1xyXG59XHJcblxyXG4vKipcclxuICogSGFuZGxlcyBmaXhpbmcgdGhlIGV4cG9ydCB0eXBlIGJhc2VkIG9uIE1JTUUgdHlwZXMgYW5kIGZpbGUgZXh0ZW5zaW9ucy5cclxuICpcclxuICogQGZ1bmN0aW9uIF9maXhUeXBlXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIG9yaWdpbmFsIGV4cG9ydCB0eXBlLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gW291dGZpbGU9bnVsbF0gLSBUaGUgZmlsZSBwYXRoIG9yIG5hbWUuIFRoZSBkZWZhdWx0IHZhbHVlXHJcbiAqIGlzIGBudWxsYC5cclxuICpcclxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvcnJlY3RlZCBleHBvcnQgdHlwZSwgb3IgJ3BuZycgaWYgdGhlIGlucHV0XHJcbiAqIGlzIG5vdCByZWNvZ25pemVkLlxyXG4gKi9cclxuZnVuY3Rpb24gX2ZpeFR5cGUodHlwZSwgb3V0ZmlsZSA9IG51bGwpIHtcclxuICAvLyBNSU1FIHR5cGVzXHJcbiAgY29uc3QgbWltZVR5cGVzID0ge1xyXG4gICAgJ2ltYWdlL3BuZyc6ICdwbmcnLFxyXG4gICAgJ2ltYWdlL2pwZWcnOiAnanBlZycsXHJcbiAgICAnYXBwbGljYXRpb24vcGRmJzogJ3BkZicsXHJcbiAgICAnaW1hZ2Uvc3ZnK3htbCc6ICdzdmcnXHJcbiAgfTtcclxuXHJcbiAgLy8gR2V0IGZvcm1hdHNcclxuICBjb25zdCBmb3JtYXRzID0gT2JqZWN0LnZhbHVlcyhtaW1lVHlwZXMpO1xyXG5cclxuICAvLyBDaGVjayBpZiB0eXBlIGFuZCBvdXRmaWxlJ3MgZXh0ZW5zaW9ucyBhcmUgdGhlIHNhbWVcclxuICBpZiAob3V0ZmlsZSkge1xyXG4gICAgY29uc3Qgb3V0VHlwZSA9IG91dGZpbGUuc3BsaXQoJy4nKS5wb3AoKTtcclxuXHJcbiAgICAvLyBTdXBwb3J0IHRoZSBKUEcgdHlwZVxyXG4gICAgaWYgKG91dFR5cGUgPT09ICdqcGcnKSB7XHJcbiAgICAgIHR5cGUgPSAnanBlZyc7XHJcbiAgICB9IGVsc2UgaWYgKGZvcm1hdHMuaW5jbHVkZXMob3V0VHlwZSkgJiYgdHlwZSAhPT0gb3V0VHlwZSkge1xyXG4gICAgICB0eXBlID0gb3V0VHlwZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJldHVybiBhIGNvcnJlY3QgdHlwZVxyXG4gIHJldHVybiBtaW1lVHlwZXNbdHlwZV0gfHwgZm9ybWF0cy5maW5kKCh0KSA9PiB0ID09PSB0eXBlKSB8fCAncG5nJztcclxufVxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZSBjYWxjdWxhdGluZyB0aGUgYGhlaWdodGAsIGB3aWR0aGAgYW5kIGBzY2FsZWAgZm9yIGNoYXJ0IGV4cG9ydHMgYmFzZWRcclxuICogb24gdGhlIHByb3ZpZGVkIGV4cG9ydCBvcHRpb25zLlxyXG4gKlxyXG4gKiBUaGUgZnVuY3Rpb24gcHJpb3JpdGl6ZXMgdmFsdWVzIGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6XHJcbiAqXHJcbiAqIDEuIFRoZSBgaGVpZ2h0YCwgYHdpZHRoYCwgYHNjYWxlYCBmcm9tIHRoZSBgZXhwb3J0T3B0aW9uc2AuXHJcbiAqIDIuIE9wdGlvbnMgZnJvbSB0aGUgY2hhcnQgY29uZmlndXJhdGlvbiAoZnJvbSBgZXhwb3J0aW5nYCBhbmQgYGNoYXJ0YCkuXHJcbiAqIDMuIE9wdGlvbnMgZnJvbSB0aGUgZ2xvYmFsIG9wdGlvbnMgKGZyb20gYGV4cG9ydGluZ2AgYW5kIGBjaGFydGApLlxyXG4gKiA0LiBPcHRpb25zIGZyb20gdGhlIHRoZW1lIG9wdGlvbnMgKGZyb20gYGV4cG9ydGluZ2AgYW5kIGBjaGFydGAgc2VjdGlvbnMpLlxyXG4gKiA1LiBGYWxsYmFjayBkZWZhdWx0IHZhbHVlcyAoYGhlaWdodCA9IDQwMGAsIGB3aWR0aCA9IDYwMGAsIGBzY2FsZSA9IDFgKS5cclxuICpcclxuICogQGZ1bmN0aW9uIF9oYW5kbGVTaXplXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBleHBvcnRPcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmcgYGV4cG9ydGBcclxuICogb3B0aW9ucy5cclxuICovXHJcbmZ1bmN0aW9uIF9oYW5kbGVTaXplKGV4cG9ydE9wdGlvbnMpIHtcclxuICAvLyBDaGVjayB0aGUgYG9wdGlvbnNgIGFuZCBgaW5zdHJgIGZvciBjaGFydCBhbmQgZXhwb3J0aW5nIHNlY3Rpb25zXHJcbiAgY29uc3QgeyBjaGFydDogb3B0aW9uc0NoYXJ0LCBleHBvcnRpbmc6IG9wdGlvbnNFeHBvcnRpbmcgfSA9XHJcbiAgICBpc0FsbG93ZWRDb25maWcoZXhwb3J0T3B0aW9ucy5pbnN0cikgfHwgZmFsc2U7XHJcblxyXG4gIC8vIENoZWNrIHRoZSBgZ2xvYmFsT3B0aW9uc2AgZm9yIGNoYXJ0IGFuZCBleHBvcnRpbmcgc2VjdGlvbnNcclxuICBjb25zdCB7IGNoYXJ0OiBnbG9iYWxPcHRpb25zQ2hhcnQsIGV4cG9ydGluZzogZ2xvYmFsT3B0aW9uc0V4cG9ydGluZyB9ID1cclxuICAgIGlzQWxsb3dlZENvbmZpZyhleHBvcnRPcHRpb25zLmdsb2JhbE9wdGlvbnMpIHx8IGZhbHNlO1xyXG5cclxuICAvLyBDaGVjayB0aGUgYHRoZW1lT3B0aW9uc2AgZm9yIGNoYXJ0IGFuZCBleHBvcnRpbmcgc2VjdGlvbnNcclxuICBjb25zdCB7IGNoYXJ0OiB0aGVtZU9wdGlvbnNDaGFydCwgZXhwb3J0aW5nOiB0aGVtZU9wdGlvbnNFeHBvcnRpbmcgfSA9XHJcbiAgICBpc0FsbG93ZWRDb25maWcoZXhwb3J0T3B0aW9ucy50aGVtZU9wdGlvbnMpIHx8IGZhbHNlO1xyXG5cclxuICAvLyBGaW5kIHRoZSBgaGVpZ2h0YCB2YWx1ZVxyXG4gIGNvbnN0IGhlaWdodCA9XHJcbiAgICBleHBvcnRPcHRpb25zLmhlaWdodCB8fFxyXG4gICAgb3B0aW9uc0V4cG9ydGluZz8uc291cmNlSGVpZ2h0IHx8XHJcbiAgICBvcHRpb25zQ2hhcnQ/LmhlaWdodCB8fFxyXG4gICAgZ2xvYmFsT3B0aW9uc0V4cG9ydGluZz8uc291cmNlSGVpZ2h0IHx8XHJcbiAgICBnbG9iYWxPcHRpb25zQ2hhcnQ/LmhlaWdodCB8fFxyXG4gICAgdGhlbWVPcHRpb25zRXhwb3J0aW5nPy5zb3VyY2VIZWlnaHQgfHxcclxuICAgIHRoZW1lT3B0aW9uc0NoYXJ0Py5oZWlnaHQgfHxcclxuICAgIGV4cG9ydE9wdGlvbnMuZGVmYXVsdEhlaWdodCB8fFxyXG4gICAgNDAwO1xyXG5cclxuICAvLyBGaW5kIHRoZSBgd2lkdGhgIHZhbHVlXHJcbiAgY29uc3Qgd2lkdGggPVxyXG4gICAgZXhwb3J0T3B0aW9ucy53aWR0aCB8fFxyXG4gICAgb3B0aW9uc0V4cG9ydGluZz8uc291cmNlV2lkdGggfHxcclxuICAgIG9wdGlvbnNDaGFydD8ud2lkdGggfHxcclxuICAgIGdsb2JhbE9wdGlvbnNFeHBvcnRpbmc/LnNvdXJjZVdpZHRoIHx8XHJcbiAgICBnbG9iYWxPcHRpb25zQ2hhcnQ/LndpZHRoIHx8XHJcbiAgICB0aGVtZU9wdGlvbnNFeHBvcnRpbmc/LnNvdXJjZVdpZHRoIHx8XHJcbiAgICB0aGVtZU9wdGlvbnNDaGFydD8ud2lkdGggfHxcclxuICAgIGV4cG9ydE9wdGlvbnMuZGVmYXVsdFdpZHRoIHx8XHJcbiAgICA2MDA7XHJcblxyXG4gIC8vIEZpbmQgdGhlIGBzY2FsZWAgdmFsdWU6XHJcbiAgLy8gLSBDYW5ub3QgYmUgbG93ZXIgdGhhbiAwLjFcclxuICAvLyAtIENhbm5vdCBiZSBoaWdoZXIgdGhhbiA1LjBcclxuICAvLyAtIE11c3QgYmUgcm91bmRlZCB0byAyIGRlY2ltYWwgcGxhY2VzIChlLmcuIDAuMjMyMzQgLT4gMC4yMylcclxuICBjb25zdCBzY2FsZSA9IHJvdW5kTnVtYmVyKFxyXG4gICAgTWF0aC5tYXgoXHJcbiAgICAgIDAuMSxcclxuICAgICAgTWF0aC5taW4oXHJcbiAgICAgICAgZXhwb3J0T3B0aW9ucy5zY2FsZSB8fFxyXG4gICAgICAgICAgb3B0aW9uc0V4cG9ydGluZz8uc2NhbGUgfHxcclxuICAgICAgICAgIGdsb2JhbE9wdGlvbnNFeHBvcnRpbmc/LnNjYWxlIHx8XHJcbiAgICAgICAgICB0aGVtZU9wdGlvbnNFeHBvcnRpbmc/LnNjYWxlIHx8XHJcbiAgICAgICAgICBleHBvcnRPcHRpb25zLmRlZmF1bHRTY2FsZSB8fFxyXG4gICAgICAgICAgMSxcclxuICAgICAgICA1LjBcclxuICAgICAgKVxyXG4gICAgKSxcclxuICAgIDJcclxuICApO1xyXG5cclxuICAvLyBVcGRhdGUgYGhlaWdodGAsIGB3aWR0aGAsIGFuZCBgc2NhbGVgIGluZm9ybWF0aW9uIGluIHRoZSBgZXhwb3J0YCBvcHRpb25zXHJcbiAgZXhwb3J0T3B0aW9ucy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgZXhwb3J0T3B0aW9ucy53aWR0aCA9IHdpZHRoO1xyXG4gIGV4cG9ydE9wdGlvbnMuc2NhbGUgPSBzY2FsZTtcclxuXHJcbiAgLy8gR2V0IHJpZCBvZiBwb3RlbnRpYWwgYHB4YCBhbmQgYCVgXHJcbiAgZm9yIChsZXQgcGFyYW0gb2YgWydoZWlnaHQnLCAnd2lkdGgnLCAnc2NhbGUnXSkge1xyXG4gICAgaWYgKHR5cGVvZiBleHBvcnRPcHRpb25zW3BhcmFtXSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgZXhwb3J0T3B0aW9uc1twYXJhbV0gPSArZXhwb3J0T3B0aW9uc1twYXJhbV0ucmVwbGFjZSgvcHh8JS9naSwgJycpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgdGhlIGV4ZWN1dGlvbiBvZiBjdXN0b20gbG9naWMgb3B0aW9ucywgaW5jbHVkaW5nIGxvYWRpbmcgYHJlc291cmNlc2AsXHJcbiAqIGBjdXN0b21Db2RlYCwgYW5kIGBjYWxsYmFja2AuIElmIGNvZGUgZXhlY3V0aW9uIGlzIGFsbG93ZWQsIGl0IHByb2Nlc3Nlc1xyXG4gKiB0aGUgY3VzdG9tIGxvZ2ljIG9wdGlvbnMgYWNjb3JkaW5nbHkuIElmIGNvZGUgZXhlY3V0aW9uIGlzIG5vdCBhbGxvd2VkLFxyXG4gKiBpdCBkaXNhYmxlcyB0aGUgdXNhZ2Ugb2YgcmVzb3VyY2VzLCBjdXN0b20gY29kZSBhbmQgY2FsbGJhY2suXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBfaGFuZGxlQ3VzdG9tTG9naWNcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IGN1c3RvbUxvZ2ljT3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nXHJcbiAqIGBjdXN0b21Mb2dpY2Agb3B0aW9ucy5cclxuICpcclxuICogQHRocm93cyB7RXhwb3J0RXJyb3J9IFRocm93cyBhbiBgRXhwb3J0RXJyb3JgIGlmIGNvZGUgZXhlY3V0aW9uXHJcbiAqIGlzIG5vdCBhbGxvd2VkIGJ1dCBjdXN0b20gbG9naWMgb3B0aW9ucyBhcmUgc3RpbGwgcHJvdmlkZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBfaGFuZGxlQ3VzdG9tTG9naWMoY3VzdG9tTG9naWNPcHRpb25zKSB7XHJcbiAgLy8gSW4gY2FzZSBvZiBhbGxvd2luZyBjb2RlIGV4ZWN1dGlvblxyXG4gIGlmIChjdXN0b21Mb2dpY09wdGlvbnMuYWxsb3dDb2RlRXhlY3V0aW9uKSB7XHJcbiAgICAvLyBQcm9jZXNzIHRoZSBgcmVzb3VyY2VzYCBvcHRpb25cclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIFRyeSB0byBoYW5kbGUgcmVzb3VyY2VzXHJcbiAgICAgIGN1c3RvbUxvZ2ljT3B0aW9ucy5yZXNvdXJjZXMgPSBfaGFuZGxlUmVzb3VyY2VzKFxyXG4gICAgICAgIGN1c3RvbUxvZ2ljT3B0aW9ucy5yZXNvdXJjZXMsXHJcbiAgICAgICAgY3VzdG9tTG9naWNPcHRpb25zLmFsbG93RmlsZVJlc291cmNlcyxcclxuICAgICAgICB0cnVlXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBWYWxpZGF0ZSBvcHRpb25cclxuICAgICAgY3VzdG9tTG9naWNPcHRpb25zLnJlc291cmNlcyA9IHZhbGlkYXRlT3B0aW9uKFxyXG4gICAgICAgICdyZXNvdXJjZXMnLFxyXG4gICAgICAgIGN1c3RvbUxvZ2ljT3B0aW9ucy5yZXNvdXJjZXNcclxuICAgICAgKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZygyLCAnW2NoYXJ0XSBUaGUgYHJlc291cmNlc2AgY2Fubm90IGJlIGxvYWRlZC4nKTtcclxuXHJcbiAgICAgIC8vIEluIGNhc2Ugb2YgYW4gZXJyb3IsIHNldCB0aGUgb3B0aW9uIHdpdGggbnVsbFxyXG4gICAgICBjdXN0b21Mb2dpY09wdGlvbnMucmVzb3VyY2VzID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQcm9jZXNzIHRoZSBgY3VzdG9tQ29kZWAgb3B0aW9uXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBUcnkgdG8gbG9hZCBjdXN0b20gY29kZSBhbmQgd3JhcCBhcm91bmQgaXQgaW4gYSBzZWxmIGludm9raW5nIGZ1bmN0aW9uXHJcbiAgICAgIGN1c3RvbUxvZ2ljT3B0aW9ucy5jdXN0b21Db2RlID0gX2hhbmRsZUN1c3RvbUNvZGUoXHJcbiAgICAgICAgY3VzdG9tTG9naWNPcHRpb25zLmN1c3RvbUNvZGUsXHJcbiAgICAgICAgY3VzdG9tTG9naWNPcHRpb25zLmFsbG93RmlsZVJlc291cmNlc1xyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gVmFsaWRhdGUgdGhlIG9wdGlvblxyXG4gICAgICBjdXN0b21Mb2dpY09wdGlvbnMuY3VzdG9tQ29kZSA9IHZhbGlkYXRlT3B0aW9uKFxyXG4gICAgICAgICdjdXN0b21Db2RlJyxcclxuICAgICAgICBjdXN0b21Mb2dpY09wdGlvbnMuY3VzdG9tQ29kZVxyXG4gICAgICApO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgbG9nV2l0aFN0YWNrKDIsIGVycm9yLCAnW2NoYXJ0XSBUaGUgYGN1c3RvbUNvZGVgIGNhbm5vdCBiZSBsb2FkZWQuJyk7XHJcblxyXG4gICAgICAvLyBJbiBjYXNlIG9mIGFuIGVycm9yLCBzZXQgdGhlIG9wdGlvbiB3aXRoIG51bGxcclxuICAgICAgY3VzdG9tTG9naWNPcHRpb25zLmN1c3RvbUNvZGUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFByb2Nlc3MgdGhlIGBjYWxsYmFja2Agb3B0aW9uXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBUcnkgdG8gbG9hZCBjYWxsYmFjayBmdW5jdGlvblxyXG4gICAgICBjdXN0b21Mb2dpY09wdGlvbnMuY2FsbGJhY2sgPSBfaGFuZGxlQ3VzdG9tQ29kZShcclxuICAgICAgICBjdXN0b21Mb2dpY09wdGlvbnMuY2FsbGJhY2ssXHJcbiAgICAgICAgY3VzdG9tTG9naWNPcHRpb25zLmFsbG93RmlsZVJlc291cmNlcyxcclxuICAgICAgICB0cnVlXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBWYWxpZGF0ZSB0aGUgb3B0aW9uXHJcbiAgICAgIGN1c3RvbUxvZ2ljT3B0aW9ucy5jYWxsYmFjayA9IHZhbGlkYXRlT3B0aW9uKFxyXG4gICAgICAgICdjYWxsYmFjaycsXHJcbiAgICAgICAgY3VzdG9tTG9naWNPcHRpb25zLmNhbGxiYWNrXHJcbiAgICAgICk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBsb2dXaXRoU3RhY2soMiwgZXJyb3IsICdbY2hhcnRdIFRoZSBgY2FsbGJhY2tgIGNhbm5vdCBiZSBsb2FkZWQuJyk7XHJcblxyXG4gICAgICAvLyBJbiBjYXNlIG9mIGFuIGVycm9yLCBzZXQgdGhlIG9wdGlvbiB3aXRoIG51bGxcclxuICAgICAgY3VzdG9tTG9naWNPcHRpb25zLmNhbGxiYWNrID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyB0aGUgYGN1c3RvbUNvZGVgIHByZXNlbnRcclxuICAgIGlmIChbbnVsbCwgdW5kZWZpbmVkXS5pbmNsdWRlcyhjdXN0b21Mb2dpY09wdGlvbnMuY3VzdG9tQ29kZSkpIHtcclxuICAgICAgbG9nKDMsICdbY2hhcnRdIE5vIHZhbHVlIGZvciB0aGUgYGN1c3RvbUNvZGVgIG9wdGlvbiBmb3VuZC4nKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyB0aGUgYGNhbGxiYWNrYCBwcmVzZW50XHJcbiAgICBpZiAoW251bGwsIHVuZGVmaW5lZF0uaW5jbHVkZXMoY3VzdG9tTG9naWNPcHRpb25zLmNhbGxiYWNrKSkge1xyXG4gICAgICBsb2coMywgJ1tjaGFydF0gTm8gdmFsdWUgZm9yIHRoZSBgY2FsbGJhY2tgIG9wdGlvbiBmb3VuZC4nKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyB0aGUgYHJlc291cmNlc2AgcHJlc2VudFxyXG4gICAgaWYgKFtudWxsLCB1bmRlZmluZWRdLmluY2x1ZGVzKGN1c3RvbUxvZ2ljT3B0aW9ucy5yZXNvdXJjZXMpKSB7XHJcbiAgICAgIGxvZygzLCAnW2NoYXJ0XSBObyB2YWx1ZSBmb3IgdGhlIGByZXNvdXJjZXNgIG9wdGlvbiBmb3VuZC4nKTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgLy8gSWYgdGhlIGBhbGxvd0NvZGVFeGVjdXRpb25gIGZsYWcgaXMgc2V0IHRvIGZhbHNlLCB3ZSBzaG91bGQgcmVmdXNlXHJcbiAgICAvLyB0aGUgdXNhZ2Ugb2YgdGhlIGBjYWxsYmFja2AsIGByZXNvdXJjZXNgLCBhbmQgYGN1c3RvbUNvZGVgIG9wdGlvbnMuXHJcbiAgICAvLyBBZGRpdGlvbmFsbHksIHRoZSB3b3JrZXIgd2lsbCByZWZ1c2UgdG8gcnVuIGFyYml0cmFyeSBKYXZhU2NyaXB0LlxyXG4gICAgaWYgKFxyXG4gICAgICBjdXN0b21Mb2dpY09wdGlvbnMuY2FsbGJhY2sgfHxcclxuICAgICAgY3VzdG9tTG9naWNPcHRpb25zLnJlc291cmNlcyB8fFxyXG4gICAgICBjdXN0b21Mb2dpY09wdGlvbnMuY3VzdG9tQ29kZVxyXG4gICAgKSB7XHJcbiAgICAgIC8vIFJlc2V0IGFsbCBjdXN0b20gY29kZSBvcHRpb25zXHJcbiAgICAgIGN1c3RvbUxvZ2ljT3B0aW9ucy5jYWxsYmFjayA9IG51bGw7XHJcbiAgICAgIGN1c3RvbUxvZ2ljT3B0aW9ucy5yZXNvdXJjZXMgPSBudWxsO1xyXG4gICAgICBjdXN0b21Mb2dpY09wdGlvbnMuY3VzdG9tQ29kZSA9IG51bGw7XHJcblxyXG4gICAgICAvLyBTZW5kIGEgbWVzc2FnZSBzYXlpbmcgdGhhdCB0aGUgZXhwb3J0ZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGVzZSBzZXR0aW5nc1xyXG4gICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgYFtjaGFydF0gVGhlICdjYWxsYmFjaycsICdyZXNvdXJjZXMnLCBhbmQgJ2N1c3RvbUNvZGUnIG9wdGlvbnMgaGF2ZSBiZWVuIGRpc2FibGVkIGZvciB0aGlzIHNlcnZlci5gLFxyXG4gICAgICAgIDQwM1xyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgYW5kIHZhbGlkYXRlcyByZXNvdXJjZXMgZnJvbSB0aGUgYHJlc291cmNlc2Agb3B0aW9uIGZvciBleHBvcnQuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBfaGFuZGxlUmVzb3VyY2VzXHJcbiAqXHJcbiAqIEBwYXJhbSB7KE9iamVjdHxzdHJpbmd8bnVsbCl9IFtyZXNvdXJjZXM9bnVsbF0gLSBUaGUgcmVzb3VyY2VzIHRvIGJlIGhhbmRsZWQuXHJcbiAqIENhbiBiZSBlaXRoZXIgYSBKU09OIG9iamVjdCwgc3RyaW5naWZpZWQgSlNPTiwgYSBwYXRoIHRvIGEgSlNPTiBmaWxlLFxyXG4gKiBvciBudWxsLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgbnVsbGAuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWxsb3dGaWxlUmVzb3VyY2VzIC0gQSBmbGFnIGluZGljYXRpbmcgd2hldGhlciBsb2FkaW5nXHJcbiAqIHJlc291cmNlcyBmcm9tIGZpbGVzIGlzIGFsbG93ZWQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWxsb3dDb2RlRXhlY3V0aW9uIC0gQSBmbGFnIGluZGljYXRpbmcgd2hldGhlciBjb2RlXHJcbiAqIGV4ZWN1dGlvbiBpcyBhbGxvd2VkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7KE9iamVjdHxudWxsKX0gVGhlIGhhbmRsZWQgcmVzb3VyY2VzIG9yIG51bGwgaWYgbm8gdmFsaWQgcmVzb3VyY2VzXHJcbiAqIGFyZSBmb3VuZC5cclxuICovXHJcbmZ1bmN0aW9uIF9oYW5kbGVSZXNvdXJjZXMoXHJcbiAgcmVzb3VyY2VzID0gbnVsbCxcclxuICBhbGxvd0ZpbGVSZXNvdXJjZXMsXHJcbiAgYWxsb3dDb2RlRXhlY3V0aW9uXHJcbikge1xyXG4gIGxldCBoYW5kbGVkUmVzb3VyY2VzID0gcmVzb3VyY2VzO1xyXG5cclxuICAvLyBJZiBubyByZXNvdXJjZXMgZm91bmQsIHRyeSB0byBsb2FkIHRoZSBkZWZhdWx0IHJlc291cmNlc1xyXG4gIGlmICghaGFuZGxlZFJlc291cmNlcykge1xyXG4gICAgcmVzb3VyY2VzID0gJ3Jlc291cmNlcy5qc29uJztcclxuICB9XHJcblxyXG4gIC8vIExpc3Qgb2YgYWxsb3dlZCBzZWN0aW9ucyBpbiB0aGUgcmVzb3VyY2VzIEpTT05cclxuICBjb25zdCBhbGxvd2VkUHJvcHMgPSBbJ2pzJywgJ2NzcycsICdmaWxlcyddO1xyXG5cclxuICAvLyBBIGZsYWcgdGhhdCBkZWNpZGVzIGJhc2VkIHRvIHJldHVybiByZXNvdXJjZXMgb3IgYG51bGxgXHJcbiAgbGV0IGNvcnJlY3RSZXNvdXJjZXMgPSBmYWxzZTtcclxuXHJcbiAgLy8gVHJ5IHRvIGxvYWQgcmVzb3VyY2VzIGZyb20gYSBmaWxlXHJcbiAgaWYgKFxyXG4gICAgYWxsb3dGaWxlUmVzb3VyY2VzICYmXHJcbiAgICB0eXBlb2YgcmVzb3VyY2VzID09PSAnc3RyaW5nJyAmJlxyXG4gICAgcmVzb3VyY2VzLmVuZHNXaXRoKCcuanNvbicpXHJcbiAgKSB7XHJcbiAgICBoYW5kbGVkUmVzb3VyY2VzID0gaXNBbGxvd2VkQ29uZmlnKFxyXG4gICAgICByZWFkRmlsZVN5bmMoZ2V0QWJzb2x1dGVQYXRoKHJlc291cmNlcyksICd1dGY4JyksXHJcbiAgICAgIGZhbHNlLFxyXG4gICAgICBhbGxvd0NvZGVFeGVjdXRpb25cclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIFRyeSB0byBnZXQgSlNPTlxyXG4gICAgaGFuZGxlZFJlc291cmNlcyA9IGlzQWxsb3dlZENvbmZpZyhyZXNvdXJjZXMsIGZhbHNlLCBhbGxvd0NvZGVFeGVjdXRpb24pO1xyXG5cclxuICAgIC8vIEdldCByaWQgb2YgdGhlIGZpbGVzIHNlY3Rpb25cclxuICAgIGlmIChoYW5kbGVkUmVzb3VyY2VzICYmICFhbGxvd0ZpbGVSZXNvdXJjZXMpIHtcclxuICAgICAgZGVsZXRlIGhhbmRsZWRSZXNvdXJjZXMuZmlsZXM7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBGaWx0ZXIgZnJvbSB1bm5lY2Vzc2FyeSBwcm9wZXJ0aWVzXHJcbiAgZm9yIChjb25zdCBwcm9wTmFtZSBpbiBoYW5kbGVkUmVzb3VyY2VzKSB7XHJcbiAgICBpZiAoIWFsbG93ZWRQcm9wcy5pbmNsdWRlcyhwcm9wTmFtZSkpIHtcclxuICAgICAgZGVsZXRlIGhhbmRsZWRSZXNvdXJjZXNbcHJvcE5hbWVdO1xyXG4gICAgfSBlbHNlIGlmICghY29ycmVjdFJlc291cmNlcykge1xyXG4gICAgICBjb3JyZWN0UmVzb3VyY2VzID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIENoZWNrIGlmIGF0IGxlYXN0IG9uZSBvZiBhbGxvd2VkIHByb3BlcnRpZXMgaXMgcHJlc2VudFxyXG4gIGlmICghY29ycmVjdFJlc291cmNlcykge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICAvLyBIYW5kbGUgZmlsZXMgc2VjdGlvblxyXG4gIGlmIChoYW5kbGVkUmVzb3VyY2VzLmZpbGVzKSB7XHJcbiAgICBoYW5kbGVkUmVzb3VyY2VzLmZpbGVzID0gaGFuZGxlZFJlc291cmNlcy5maWxlcy5tYXAoKGl0ZW0pID0+IGl0ZW0udHJpbSgpKTtcclxuICAgIGlmICghaGFuZGxlZFJlc291cmNlcy5maWxlcyB8fCBoYW5kbGVkUmVzb3VyY2VzLmZpbGVzLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgIGRlbGV0ZSBoYW5kbGVkUmVzb3VyY2VzLmZpbGVzO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUmV0dXJuIHJlc291cmNlc1xyXG4gIHJldHVybiBoYW5kbGVkUmVzb3VyY2VzO1xyXG59XHJcblxyXG4vKipcclxuICogSGFuZGxlcyBjdXN0b20gY29kZSB0byBleGVjdXRlIGl0IHNhZmVseS5cclxuICpcclxuICogQGZ1bmN0aW9uIF9oYW5kbGVDdXN0b21Db2RlXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjdXN0b21Db2RlIC0gVGhlIGN1c3RvbSBjb2RlIHRvIGJlIHdyYXBwZWQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWxsb3dGaWxlUmVzb3VyY2VzIC0gRmxhZyB0byBhbGxvdyBsb2FkaW5nIGNvZGUgZnJvbSBhIGZpbGUuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzQ2FsbGJhY2s9ZmFsc2VdIC0gRmxhZyB0aGF0IGluZGljYXRlcyB0aGUgcmV0dXJuZWQgY29kZVxyXG4gKiBtdXN0IGJlIGluIGEgY2FsbGJhY2sgZm9ybWF0LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7KHN0cmluZ3xudWxsKX0gVGhlIHdyYXBwZWQgY3VzdG9tIGNvZGUgb3IgbnVsbCBpZiB3cmFwcGluZyBmYWlscy5cclxuICovXHJcbmZ1bmN0aW9uIF9oYW5kbGVDdXN0b21Db2RlKGN1c3RvbUNvZGUsIGFsbG93RmlsZVJlc291cmNlcywgaXNDYWxsYmFjayA9IGZhbHNlKSB7XHJcbiAgaWYgKGN1c3RvbUNvZGUgJiYgdHlwZW9mIGN1c3RvbUNvZGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICBjdXN0b21Db2RlID0gY3VzdG9tQ29kZS50cmltKCk7XHJcblxyXG4gICAgaWYgKGN1c3RvbUNvZGUuZW5kc1dpdGgoJy5qcycpKSB7XHJcbiAgICAgIC8vIExvYWQgYSBmaWxlIGlmIHRoZSBmaWxlIHJlc291cmNlcyBhcmUgYWxsb3dlZFxyXG4gICAgICByZXR1cm4gYWxsb3dGaWxlUmVzb3VyY2VzXHJcbiAgICAgICAgPyBfaGFuZGxlQ3VzdG9tQ29kZShcclxuICAgICAgICAgICAgcmVhZEZpbGVTeW5jKGdldEFic29sdXRlUGF0aChjdXN0b21Db2RlKSwgJ3V0ZjgnKSxcclxuICAgICAgICAgICAgYWxsb3dGaWxlUmVzb3VyY2VzLFxyXG4gICAgICAgICAgICBpc0NhbGxiYWNrXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgOiBudWxsO1xyXG4gICAgfSBlbHNlIGlmIChcclxuICAgICAgIWlzQ2FsbGJhY2sgJiZcclxuICAgICAgKGN1c3RvbUNvZGUuc3RhcnRzV2l0aCgnZnVuY3Rpb24oKScpIHx8XHJcbiAgICAgICAgY3VzdG9tQ29kZS5zdGFydHNXaXRoKCdmdW5jdGlvbiAoKScpIHx8XHJcbiAgICAgICAgY3VzdG9tQ29kZS5zdGFydHNXaXRoKCcoKT0+JykgfHxcclxuICAgICAgICBjdXN0b21Db2RlLnN0YXJ0c1dpdGgoJygpID0+JykpXHJcbiAgICApIHtcclxuICAgICAgLy8gVHJlYXQgYSBmdW5jdGlvbiBhcyBhIHNlbGYtaW52b2tpbmcgZXhwcmVzc2lvblxyXG4gICAgICByZXR1cm4gYCgke2N1c3RvbUNvZGV9KSgpYDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBPciByZXR1cm4gYXMgYSBzdHJpbmdpZmllZCBjb2RlXHJcbiAgICByZXR1cm4gY3VzdG9tQ29kZS5yZXBsYWNlKC87JC8sICcnKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIHRoZSBsb2FkaW5nIGFuZCB2YWxpZGF0aW9uIG9mIHRoZSBgZ2xvYmFsT3B0aW9uc2AgYW5kIGB0aGVtZU9wdGlvbnNgXHJcbiAqIGluIHRoZSBleHBvcnQgb3B0aW9ucy4gSWYgdGhlIG9wdGlvbiBpcyBhIHN0cmluZyBhbmQgcmVmZXJlbmNlcyBhIEpTT04gZmlsZVxyXG4gKiAod2hlbiB0aGUgYGFsbG93RmlsZVJlc291cmNlc2AgaXMgYHRydWVgKSwgaXQgcmVhZHMgYW5kIHBhcnNlcyB0aGUgZmlsZS5cclxuICogT3RoZXJ3aXNlLCBpdCBhdHRlbXB0cyB0byBwYXJzZSB0aGUgc3RyaW5nIG9yIG9iamVjdCBhcyBKU09OLiBJZiBhbnkgZXJyb3JzXHJcbiAqIG9jY3VyIGR1cmluZyB0aGlzIHByb2Nlc3MsIHRoZSBvcHRpb24gaXMgc2V0IHRvIGBudWxsYC4gSWYgdGhlcmUgaXMgYW4gZXJyb3JcclxuICogbG9hZGluZyBvciBwYXJzaW5nIHRoZSBgZ2xvYmFsT3B0aW9uc2Agb3IgYHRoZW1lT3B0aW9uc2AsIHRoZSBlcnJvciBpcyBsb2dnZWRcclxuICogYW5kIHRoZSBvcHRpb24gaXMgc2V0IHRvIGBudWxsYC5cclxuICpcclxuICogQGZ1bmN0aW9uIF9oYW5kbGVHbG9iYWxBbmRUaGVtZVxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gZXhwb3J0T3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nIGBleHBvcnRgXHJcbiAqIG9wdGlvbnMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdXN0b21Mb2dpY09wdGlvbnMgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbmluZ1xyXG4gKiBgY3VzdG9tTG9naWNgIG9wdGlvbnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBfaGFuZGxlR2xvYmFsQW5kVGhlbWUoZXhwb3J0T3B0aW9ucywgY3VzdG9tTG9naWNPcHRpb25zKSB7XHJcbiAgLy8gR2V0IHRoZSBgYWxsb3dGaWxlUmVzb3VyY2VzYCBhbmQgYGFsbG93Q29kZUV4ZWN1dGlvbmAgZmxhZ3NcclxuICBjb25zdCB7IGFsbG93RmlsZVJlc291cmNlcywgYWxsb3dDb2RlRXhlY3V0aW9uIH0gPSBjdXN0b21Mb2dpY09wdGlvbnM7XHJcblxyXG4gIC8vIENoZWNrIHRoZSBgZ2xvYmFsT3B0aW9uc2AgYW5kIGB0aGVtZU9wdGlvbnNgIG9wdGlvbnNcclxuICBbJ2dsb2JhbE9wdGlvbnMnLCAndGhlbWVPcHRpb25zJ10uZm9yRWFjaCgob3B0aW9uc05hbWUpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBvcHRpb24gZXhpc3RzXHJcbiAgICAgIGlmIChleHBvcnRPcHRpb25zW29wdGlvbnNOYW1lXSkge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIGl0IGlzIGEgc3RyaW5nIGFuZCBhIGZpbGUgbmFtZSB3aXRoIHRoZSBgLmpzb25gIGV4dGVuc2lvblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGFsbG93RmlsZVJlc291cmNlcyAmJlxyXG4gICAgICAgICAgdHlwZW9mIGV4cG9ydE9wdGlvbnNbb3B0aW9uc05hbWVdID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgZXhwb3J0T3B0aW9uc1tvcHRpb25zTmFtZV0uZW5kc1dpdGgoJy5qc29uJylcclxuICAgICAgICApIHtcclxuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBmaWxlIGNvbnRlbnQgY2FuIGJlIGEgY29uZmlnLCBhbmQgc2F2ZSBpdCBhcyBhIHN0cmluZ1xyXG4gICAgICAgICAgZXhwb3J0T3B0aW9uc1tvcHRpb25zTmFtZV0gPSBpc0FsbG93ZWRDb25maWcoXHJcbiAgICAgICAgICAgIHJlYWRGaWxlU3luYyhnZXRBYnNvbHV0ZVBhdGgoZXhwb3J0T3B0aW9uc1tvcHRpb25zTmFtZV0pLCAndXRmOCcpLFxyXG4gICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICBhbGxvd0NvZGVFeGVjdXRpb25cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSB2YWx1ZSBjYW4gYmUgYSBjb25maWcsIGFuZCBzYXZlIGl0IGFzIGEgc3RyaW5nXHJcbiAgICAgICAgICBleHBvcnRPcHRpb25zW29wdGlvbnNOYW1lXSA9IGlzQWxsb3dlZENvbmZpZyhcclxuICAgICAgICAgICAgZXhwb3J0T3B0aW9uc1tvcHRpb25zTmFtZV0sXHJcbiAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgIGFsbG93Q29kZUV4ZWN1dGlvblxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFZhbGlkYXRlIHRoZSBvcHRpb25cclxuICAgICAgICBleHBvcnRPcHRpb25zW29wdGlvbnNOYW1lXSA9IHZhbGlkYXRlT3B0aW9uKFxyXG4gICAgICAgICAgb3B0aW9uc05hbWUsXHJcbiAgICAgICAgICBleHBvcnRPcHRpb25zW29wdGlvbnNOYW1lXVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZ1dpdGhTdGFjayhcclxuICAgICAgICAyLFxyXG4gICAgICAgIGVycm9yLFxyXG4gICAgICAgIGBbY2hhcnRdIFRoZSBcXGAke29wdGlvbnNOYW1lfVxcYCBjYW5ub3QgYmUgbG9hZGVkLmBcclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIEluIGNhc2Ugb2YgYW4gZXJyb3IsIHNldCB0aGUgb3B0aW9uIHdpdGggbnVsbFxyXG4gICAgICBleHBvcnRPcHRpb25zW29wdGlvbnNOYW1lXSA9IG51bGw7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vIENoZWNrIGlmIHRoZXJlIGlzIHRoZSBgZ2xvYmFsT3B0aW9uc2AgcHJlc2VudFxyXG4gIGlmIChbbnVsbCwgdW5kZWZpbmVkXS5pbmNsdWRlcyhleHBvcnRPcHRpb25zLmdsb2JhbE9wdGlvbnMpKSB7XHJcbiAgICBsb2coMywgJ1tjaGFydF0gTm8gdmFsdWUgZm9yIHRoZSBgZ2xvYmFsT3B0aW9uc2Agb3B0aW9uIGZvdW5kLicpO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgdGhlIGB0aGVtZU9wdGlvbnNgIHByZXNlbnRcclxuICBpZiAoW251bGwsIHVuZGVmaW5lZF0uaW5jbHVkZXMoZXhwb3J0T3B0aW9ucy50aGVtZU9wdGlvbnMpKSB7XHJcbiAgICBsb2coMywgJ1tjaGFydF0gTm8gdmFsdWUgZm9yIHRoZSBgdGhlbWVPcHRpb25zYCBvcHRpb24gZm91bmQuJyk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoZSBzaXplIG9mIHRoZSBkYXRhIGZvciB0aGUgZXhwb3J0IHByb2Nlc3MgYWdhaW5zdCBhIGZpeGVkIGxpbWl0XHJcbiAqIG9mIDEwME1CLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX2NoZWNrRGF0YVNpemVcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IGltYWdlT3B0aW9ucyAtIFRoZSBkYXRhIG9iamVjdCwgd2hpY2ggaW5jbHVkZXMgb3B0aW9ucyBmcm9tXHJcbiAqIHRoZSBgZXhwb3J0YCBhbmQgYGN1c3RvbUxvZ2ljYCBzZWN0aW9ucyBhbmQgd2lsbCBiZSBzZW50IHRvIGEgUHVwcGV0ZWVyIHBhZ2UuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiB0aGUgc2l6ZSBvZiB0aGUgZGF0YSBmb3JcclxuICogdGhlIGV4cG9ydCBwcm9jZXNzIG9iamVjdCBleGNlZWRzIHRoZSAxMDBNQiBsaW1pdC5cclxuICovXHJcbmZ1bmN0aW9uIF9jaGVja0RhdGFTaXplKGltYWdlT3B0aW9ucykge1xyXG4gIC8vIFNldCB0aGUgZml4ZWQgZGF0YSBsaW1pdCAoMTAwTUIpIGZvciB0aGUgZGV2LXRvb2xzIHByb3RvY29sXHJcbiAgY29uc3QgZGF0YUxpbWl0ID0gMTAwICogMTAyNCAqIDEwMjQ7XHJcblxyXG4gIC8vIEdldCB0aGUgc2l6ZSBvZiB0aGUgZGF0YVxyXG4gIGNvbnN0IHRvdGFsU2l6ZSA9IEJ1ZmZlci5ieXRlTGVuZ3RoKEpTT04uc3RyaW5naWZ5KGltYWdlT3B0aW9ucyksICd1dGYtOCcpO1xyXG5cclxuICAvLyBMb2cgdGhlIHNpemUgaW4gTUJcclxuICBsb2coXHJcbiAgICAzLFxyXG4gICAgYFtjaGFydF0gVGhlIGN1cnJlbnQgdG90YWwgc2l6ZSBvZiB0aGUgZGF0YSBmb3IgdGhlIGV4cG9ydCBwcm9jZXNzIGlzIGFyb3VuZCAkeyhcclxuICAgICAgdG90YWxTaXplIC9cclxuICAgICAgKDEwMjQgKiAxMDI0KVxyXG4gICAgKS50b0ZpeGVkKDIpfU1CLmBcclxuICApO1xyXG5cclxuICAvLyBDaGVjayB0aGUgc2l6ZSBvZiBkYXRhIGJlZm9yZSBwYXNzaW5nIHRvIGEgcGFnZVxyXG4gIGlmICh0b3RhbFNpemUgPj0gZGF0YUxpbWl0KSB7XHJcbiAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgIGBbY2hhcnRdIFRoZSBkYXRhIGZvciB0aGUgZXhwb3J0IHByb2Nlc3MgZXhjZWVkcyAxMDBNQiBsaW1pdC5gXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHNpbmdsZUV4cG9ydCxcclxuICBiYXRjaEV4cG9ydCxcclxuICBzdGFydEV4cG9ydCxcclxuICBnZXRBbGxvd0NvZGVFeGVjdXRpb24sXHJcbiAgc2V0QWxsb3dDb2RlRXhlY3V0aW9uXHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBUaGlzIG1vZHVsZSBwcm92aWRlcyB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgaW50ZXJ2YWxzXHJcbiAqIGFuZCB0aW1lb3V0cyBpbiBhIGNlbnRyYWxpemVkIG1hbm5lci4gSXQgbWFpbnRhaW5zIGEgcmVnaXN0cnkgb2YgYWxsIGFjdGl2ZVxyXG4gKiB0aW1lcnMgYW5kIGFsbG93cyBmb3IgdGhlaXIgZWZmaWNpZW50IGNsZWFudXAgd2hlbiBuZWVkZWQgdG8gYXZvaWQgcG90ZW50aWFsXHJcbiAqIG1lbW9yeSBsZWFrcywgdW5pbnRlbmRlZCBiZWhhdmlvciBvciBhIHByb2Nlc3MgZnJvbSBiZWluZyBzdG9wcGVkLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4vbG9nZ2VyLmpzJztcclxuXHJcbi8vIEFycmF5IHRoYXQgY29udGFpbnMgaWRzIG9mIGFsbCBvbmdvaW5nIGludGVydmFscyBhbmQgdGltZW91dHNcclxuY29uc3QgdGltZXJJZHMgPSBbXTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGlkIG9mIHRoZSBgc2V0SW50ZXJ2YWxgIG9yIGBzZXRUaW1lb3V0YCBhbmQgdG8gdGhlIGB0aW1lcklkc2AgYXJyYXkuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBhZGRUaW1lclxyXG4gKlxyXG4gKiBAcGFyYW0ge05vZGVKUy5UaW1lb3V0fSBpZCAtIElkIG9mIGFuIGludGVydmFsIG9yIGEgdGltZW91dC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRUaW1lcihpZCkge1xyXG4gIHRpbWVySWRzLnB1c2goaWQpO1xyXG59XHJcblxyXG4vKipcclxuICogQ2xlYXJzIGFsbCBvZiBvbmdvaW5nIGludGVydmFscyBhbmQgdGltZW91dHMgYnkgaWRzIGdhdGhlcmVkXHJcbiAqIGluIHRoZSBgdGltZXJJZHNgIGFycmF5LlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gY2xlYXJBbGxUaW1lcnNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhckFsbFRpbWVycygpIHtcclxuICBsb2coNCwgYFt0aW1lcl0gQ2xlYXJpbmcgYWxsIHJlZ2lzdGVyZWQgaW50ZXJ2YWxzIGFuZCB0aW1lb3V0cy5gKTtcclxuICBmb3IgKGNvbnN0IGlkIG9mIHRpbWVySWRzKSB7XHJcbiAgICBjbGVhckludGVydmFsKGlkKTtcclxuICAgIGNsZWFyVGltZW91dChpZCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgYWRkVGltZXIsXHJcbiAgY2xlYXJBbGxUaW1lcnNcclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjQsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQG92ZXJ2aWV3IE1hbmFnZXMgYW5kIGZpbHRlcnMgdGVsZW1ldHJ5IGRhdGEgZm9yIGNoYXJ0IHJlcXVlc3RzXHJcbiAqIGluIHRoZSBIaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXIuIFRoZSBtb2R1bGUgcmVhZHMgY2hhcnQgb3B0aW9ucywgZmlsdGVycyB0aGVtXHJcbiAqIGJhc2VkIG9uIGEgcHJlZGVmaW5lZCB0ZW1wbGF0ZSwgYW5kIHN0b3JlcyB0ZWxlbWV0cnkgaW5mb3JtYXRpb24sIHN1Y2hcclxuICogYXMgdGhlIHRpbWUgb2YgdGhlIHJlcXVlc3QgYW5kIHRoZSBudW1iZXIgb2YgcmVxdWVzdHMgbWFkZS4gVXRpbGl6ZXMgZmlsZVxyXG4gKiByZWFkaW5nIHRvIGxvYWQgYSBKU09OIHNjaGVtYSB0ZW1wbGF0ZSBhbmQgcHJvdmlkZXMgZnVuY3Rpb25zIGZvciBwcmVwYXJpbmdcclxuICogdGVsZW1ldHJ5IGRhdGEgYW5kIGZpbHRlcmluZyBjaGFydCBvcHRpb25zIGJhc2VkIG9uIGFsbG93ZWQgcHJvcGVydGllcy5cclxuICovXHJcblxyXG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7XHJcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcclxuXHJcbmltcG9ydCB7IGdldE9wdGlvbnMgfSBmcm9tICcuL2NvbmZpZy5qcyc7XHJcbmltcG9ydCB7IF9fZGlybmFtZSB9IGZyb20gJy4vdXRpbHMuanMnO1xyXG5cclxuLy8gR2V0IHRoZSB0ZWxlbWV0cnkgdGVtcGxhdGVcclxuY29uc3QgdGVsZW1ldHJ5VGVtcGxhdGUgPSBKU09OLnBhcnNlKFxyXG4gIHJlYWRGaWxlU3luYyhqb2luKF9fZGlybmFtZSwgJ2xpYicsICdzY2hlbWFzJywgJ3RlbGVtZXRyeS5qc29uJykpXHJcbik7XHJcblxyXG4vLyBQb3NzaWJsZSBwcm9wZXJ0aWVzIGluIGFuIGFycmF5XHJcbmNvbnN0IG9wdGlvbnNJbkFycmF5ID0gWydzZXJpZXMnLCAneEF4aXMnLCAneUF4aXMnLCAnekF4aXMnXTtcclxuXHJcbi8vIFRoZSBvYmplY3Qgd2l0aCB0ZWxlbWV0cnkgZGF0YSBjb2xsZWN0ZWRcclxuZXhwb3J0IGNvbnN0IHRlbGVtZXRyeURhdGEgPSB7XHJcbiAgdGltZU9mU2VudDogbnVsbCxcclxuICBsYXN0U2VudDogbnVsbCxcclxuICBvcHRpb25zUGVyUmVxdWVzdDoge30sXHJcbiAgbnVtYmVyT2ZSZXF1ZXN0czogMFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFByZXBhcmVzIGFuZCBzdG9yZXMgdGVsZW1ldHJ5IGRhdGEgZm9yIGEgZ2l2ZW4gcmVxdWVzdCBiYXNlZCBvbiB0aGUgY2hhcnRcclxuICogb3B0aW9ucy4gSWYgYGdhdGhlckFsbE9wdGlvbnNgIGlzIHRydWUsIGFsbCBjaGFydCBvcHRpb25zIGFyZSBzdG9yZWQuXHJcbiAqIE90aGVyd2lzZSwgb25seSB0aGUgZmlsdGVyZWQgb3B0aW9ucyBhcmUgc3RvcmVkLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gcHJlcGFyZVRlbGVtZXRyeVxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gY2hhcnRPcHRpb25zIC0gVGhlIGNoYXJ0IG9wdGlvbnMgdG8gYmUgc3RvcmVkIG9yIGZpbHRlcmVkLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdElkIC0gVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgY3VycmVudCByZXF1ZXN0LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVUZWxlbWV0cnkoY2hhcnRPcHRpb25zLCByZXF1ZXN0SWQpIHtcclxuICAvLyBTYXZlIHRoZSBmaWx0ZXJlZCBvciBhYnNvbHV0ZSBvcHRpb25zIHVuZGVyIHRoZSByZXF1ZXN0J3MgaWRcclxuICB0ZWxlbWV0cnlEYXRhLm9wdGlvbnNQZXJSZXF1ZXN0W3JlcXVlc3RJZF0gPSBnZXRPcHRpb25zKCkud2ViU29ja2V0XHJcbiAgICAuZ2F0aGVyQWxsT3B0aW9uc1xyXG4gICAgPyBjaGFydE9wdGlvbnNcclxuICAgIDogX2ZpbHRlckRhdGEodGVsZW1ldHJ5VGVtcGxhdGUsIGNoYXJ0T3B0aW9ucyk7XHJcblxyXG4gIC8vIEluY3JlbWVudCByZXF1ZXN0cyBjb3VudGVyXHJcbiAgdGVsZW1ldHJ5RGF0YS5udW1iZXJPZlJlcXVlc3RzKys7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWN1cnNpdmVseSBmaWx0ZXJzIGNoYXJ0IG9wdGlvbnMgYmFzZWQgb24gYSBnaXZlbiB0ZW1wbGF0ZSwgcmV0dXJuaW5nIG9ubHlcclxuICogdGhlIG5lY2Vzc2FyeSBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX2ZpbHRlckRhdGFcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHRlbXBsYXRlIC0gVGhlIHRlbXBsYXRlIGRlZmluaW5nIHRoZSBhbGxvd2VkIHByb3BlcnRpZXMgZm9yXHJcbiAqIHRoZSBvcHRpb25zLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBjaGFydCBvcHRpb25zIHRvIGJlIGZpbHRlcmVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZmlsdGVyZWQgY2hhcnQgb3B0aW9ucyBjb250YWluaW5nIG9ubHkgdGhlIGFsbG93ZWRcclxuICogcHJvcGVydGllcy5cclxuICovXHJcbmZ1bmN0aW9uIF9maWx0ZXJEYXRhKHRlbXBsYXRlLCBvcHRpb25zKSB7XHJcbiAgY29uc3QgZmlsdGVyZWRPYmplY3QgPSB7fTtcclxuXHJcbiAgLy8gQ3ljbGUgdGhyb3VnaCBhbGxvd2VkIHByb3BldGllc1xyXG4gIGZvciAoY29uc3QgW3RlbXBsYXRlS2V5LCB0ZW1wbGF0ZVZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0ZW1wbGF0ZSkpIHtcclxuICAgIC8vIENoZWNrIGlmIHRoZSBzZWN0aW9uIGV4aXN0c1xyXG4gICAgaWYgKG9wdGlvbnNbdGVtcGxhdGVLZXldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyB0aGUgZmluYWwgbGV2ZWwgb2YgaW5kZW50IGluIHRoZSB0ZW1wbGF0ZVxyXG4gICAgICBpZiAodGVtcGxhdGVWYWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgIC8vIENoZWNrIGlmIGl0IGlzIGFuIGFycmF5XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9uc1t0ZW1wbGF0ZUtleV0pKSB7XHJcbiAgICAgICAgICAvLyBBbmQgaWYgaXQgY29udGFpbnMgYWxsb3dlZCBwcm9wZXJ0aWVzXHJcbiAgICAgICAgICBpZiAob3B0aW9uc0luQXJyYXkuaW5jbHVkZXModGVtcGxhdGVLZXkpKSB7XHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhbiBhcnJheVxyXG4gICAgICAgICAgICBmaWx0ZXJlZE9iamVjdFt0ZW1wbGF0ZUtleV0gPSBbXTtcclxuICAgICAgICAgICAgLy8gSWYgc28sIGN5Y2xlIHRocm91Z2ggYWxsIG9mIHRoZW1cclxuICAgICAgICAgICAgZm9yIChjb25zdCBbaW5kZXgsIG9wdGlvbnNWYWx1ZV0gb2Ygb3B0aW9uc1tcclxuICAgICAgICAgICAgICB0ZW1wbGF0ZUtleVxyXG4gICAgICAgICAgICBdLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgIGZpbHRlcmVkT2JqZWN0W3RlbXBsYXRlS2V5XVtpbmRleF0gPSBfZmlsdGVyRGF0YShcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVmFsdWUsXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zVmFsdWVcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBPdGhlcndpc2UsIGdldCBvbmx5IHRoZSBmaXJzdCBlbGVtZW50XHJcbiAgICAgICAgICAgIGZpbHRlcmVkT2JqZWN0W3RlbXBsYXRlS2V5XSA9IF9maWx0ZXJEYXRhKFxyXG4gICAgICAgICAgICAgIHRlbXBsYXRlVmFsdWUsXHJcbiAgICAgICAgICAgICAgb3B0aW9uc1t0ZW1wbGF0ZUtleV1bMF1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZmlsdGVyZWRPYmplY3RbdGVtcGxhdGVLZXldID0gX2ZpbHRlckRhdGEoXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVmFsdWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnNbdGVtcGxhdGVLZXldXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBSZXR1cm4gdGhlIG9wdGlvblxyXG4gICAgICAgIGZpbHRlcmVkT2JqZWN0W3RlbXBsYXRlS2V5XSA9IG9wdGlvbnNbdGVtcGxhdGVLZXldO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBSZXR1cm4gdGhlIG9iamVjdFxyXG4gIHJldHVybiBmaWx0ZXJlZE9iamVjdDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHRlbGVtZXRyeURhdGEsXHJcbiAgcHJlcGFyZVRlbGVtZXRyeVxyXG59O1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNCwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgTWFuYWdlcyBXZWJTb2NrZXQgY29ubmVjdGlvbnMgYW5kIGludGVyYWN0aW9ucyBmb3IgdGhlIEhpZ2hjaGFydHNcclxuICogRXhwb3J0IFNlcnZlci4gU3VwcG9ydHMgY2xpZW50IHJlY29ubmVjdGlvbiwgbWVzc2FnZSBzZW5kaW5nLCBhbmQgdGVsZW1ldHJ5XHJcbiAqIGRhdGEgdHJhbnNtaXNzaW9uLlxyXG4gKi9cclxuXHJcbmltcG9ydCBqd3QgZnJvbSAnanNvbndlYnRva2VuJztcclxuaW1wb3J0IHsgdjQgYXMgdXVpZCB9IGZyb20gJ3V1aWQnO1xyXG5pbXBvcnQgV2ViU29ja2V0IGZyb20gJ3dzJztcclxuXHJcbmltcG9ydCB7IGdldE9wdGlvbnMgfSBmcm9tICcuLi9jb25maWcuanMnO1xyXG5pbXBvcnQgeyBsb2csIGxvZ1dpdGhTdGFjayB9IGZyb20gJy4uL2xvZ2dlci5qcyc7XHJcbmltcG9ydCB7IHRlbGVtZXRyeURhdGEgfSBmcm9tICcuLi90ZWxlbWV0cnkuanMnO1xyXG5pbXBvcnQgeyBhZGRUaW1lciB9IGZyb20gJy4uL3RpbWVyLmpzJztcclxuaW1wb3J0IHsgZ2V0TmV3RGF0ZSB9IGZyb20gJy4uL3V0aWxzLmpzJztcclxuaW1wb3J0IHsgZW52cyB9IGZyb20gJy4uL3ZhbGlkYXRpb24uanMnO1xyXG5cclxuLy8gV2ViU29ja2V0IGNsaWVudHMgbWFwXHJcbmNvbnN0IHdlYlNvY2tldENsaWVudHMgPSBuZXcgTWFwKCk7XHJcblxyXG4vLyBXZWJTb2NrZXQgb3B0aW9uc1xyXG5sZXQgd2ViU29ja2V0T3B0aW9ucztcclxuXHJcbi8vIFdlYlNvY2tldCBtZXNzYWdlIHNlbmRpbmcgaW50ZXJ2YWxcclxubGV0IG1lc3NhZ2VJbnRlcnZhbCA9IG51bGw7XHJcblxyXG4vKipcclxuICogSW5pdCBXZWJTb2NrZXQgY2xpZW50IGFuZCBjb25uZWN0aW9uIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiB3ZWJTb2NrZXRJbml0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBhZGRyZXNzIC0gT2JqZWN0IHRoYXQgY29udGFpbnMsIGFkZHJlc3MgYW5kIHBvcnQgb2YgZW5hYmxlZFxyXG4gKiBIVFRQIG9yIEhUVFBTIHNlcnZlci5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB3ZWJTb2NrZXRJbml0KGFkZHJlc3MpIHtcclxuICB3ZWJTb2NrZXRPcHRpb25zID0gZ2V0T3B0aW9ucygpLndlYlNvY2tldDtcclxuICBpZiAod2ViU29ja2V0T3B0aW9ucy5lbmFibGUgPT09IHRydWUpIHtcclxuICAgIC8vIEdldCB0aGUgc2VjcmV0IGRpcmVjdGx5IGZyb20gZW52c1xyXG4gICAgY29uc3Qgd2ViU29ja2V0U2VjcmV0ID0gZW52cy5XRUJfU09DS0VUX1NFQ1JFVDtcclxuXHJcbiAgICAvLyBPcHRpb25zIGZvciB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb25cclxuICAgIGNvbnN0IGNvbm5lY3Rpb25PcHRpb25zID0ge1xyXG4gICAgICByZWplY3RVbmF1dGhvcml6ZWQ6IHdlYlNvY2tldE9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgLy8gU2V0IGFuIGFjY2VzcyB0b2tlblxyXG4gICAgICAgIGF1dGg6IGp3dC5zaWduKHsgc3VjY2VzczogJ3N1Y2Nlc3MnIH0sIHdlYlNvY2tldFNlY3JldCwge1xyXG4gICAgICAgICAgYWxnb3JpdGhtOiAnSFMyNTYnXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgLy8gU2VuZCB0aGUgc2VydmVyIGFkZHJlc3MgaW4gYSBjdXN0b20gaGVhZGVyXHJcbiAgICAgICAgJ1gtU2VydmVyLUFkZHJlc3MnOiBgJHthZGRyZXNzLnByb3RvY29sfTovLyR7XHJcbiAgICAgICAgICBbJzo6JywgJzAuMC4wLjAnXS5pbmNsdWRlcyhhZGRyZXNzLmFkZHJlc3MpXHJcbiAgICAgICAgICAgID8gJ2xvY2FsaG9zdCdcclxuICAgICAgICAgICAgOiBhZGRyZXNzLmFkZHJlc3NcclxuICAgICAgICB9OiR7YWRkcmVzcy5wb3J0fWBcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBPcHRpb25zIGZvciB0aGUgV2ViU29ja2V0IGNsaWVudFxyXG4gICAgY29uc3QgY2xpZW50T3B0aW9ucyA9IHtcclxuICAgICAgaWQ6IHV1aWQoKSxcclxuICAgICAgcmVjb25uZWN0OiB3ZWJTb2NrZXRPcHRpb25zLnJlY29ubmVjdCxcclxuICAgICAgcmVjb25uZWN0SW50ZXJ2YWxNczogd2ViU29ja2V0T3B0aW9ucy5yZWNvbm5lY3RJbnRlcnZhbCxcclxuICAgICAgcmVjb25uZWN0VHJ5OiAwLFxyXG4gICAgICByZWNvbm5lY3RJbnRlcnZhbDogbnVsbCxcclxuICAgICAgcGluZ1RpbWVvdXQ6IG51bGxcclxuICAgIH07XHJcblxyXG4gICAgLy8gU3RhcnQgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uXHJcbiAgICBjb25uZWN0KHdlYlNvY2tldE9wdGlvbnMudXJsLCBjb25uZWN0aW9uT3B0aW9ucywgY2xpZW50T3B0aW9ucyk7XHJcblxyXG4gICAgLy8gU3RhcnQgdGhlIFdlYlNvY2tldCBtZXNzYWdlIHNlbmRpbmcgaW50ZXJ2YWwsIGlmIGVuYWJsZWRcclxuICAgIGlmICh3ZWJTb2NrZXRPcHRpb25zLm1lc3NhZ2VJbnRlcnZhbCA+IDApIHtcclxuICAgICAgX3NlbmRpbmdNZXNzYWdlSW50ZXJ2YWwod2ViU29ja2V0T3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBXZWJTb2NrZXQgY2xpZW50IGFuZCBjb25uZWN0cyB0byBXZWJTb2NrZXQgc2VydmVyIG9uIGEgcHJvdmlkZWQgdXJsLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gY29ubmVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gd2ViU29ja2V0VXJsIC0gVGhlIFdlYlNvY2tldCBzZXJ2ZXIncyBVUkwuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25uZWN0aW9uT3B0aW9ucyAtIE9wdGlvbnMgZm9yIFdlYlNvY2tldCBjb25uZWN0aW9uLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gY2xpZW50T3B0aW9ucyAtIE9wdGlvbnMgZm9yIFdlYlNvY2tldCBjbGllbnQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29ubmVjdCh3ZWJTb2NrZXRVcmwsIGNvbm5lY3Rpb25PcHRpb25zLCBjbGllbnRPcHRpb25zKSB7XHJcbiAgLy8gVHJ5IHRvIGNvbm5lY3QgdG8gaW5kaWNhdGVkIFdlYlNvY2tldCBzZXJ2ZXJcclxuICBsZXQgd2ViU29ja2V0Q2xpZW50ID0gbmV3IFdlYlNvY2tldCh3ZWJTb2NrZXRVcmwsIGNvbm5lY3Rpb25PcHRpb25zKTtcclxuXHJcbiAgLy8gT3BlbiBldmVudFxyXG4gIHdlYlNvY2tldENsaWVudC5vbignb3BlbicsICgpID0+IHtcclxuICAgIC8vIE5vdCBuZWVkIGZvciB0aGUgcmVjb25uZWN0IGludGVydmFsIGFueW1vcmVcclxuICAgIGNsZWFySW50ZXJ2YWwoY2xpZW50T3B0aW9ucy5yZWNvbm5lY3RJbnRlcnZhbCk7XHJcblxyXG4gICAgLy8gU2F2ZSB0aGUgY2xpZW50IHVuZGVyIGl0cyBpZFxyXG4gICAgd2ViU29ja2V0Q2xpZW50cy5zZXQoY2xpZW50T3B0aW9ucy5pZCwgd2ViU29ja2V0Q2xpZW50KTtcclxuXHJcbiAgICAvLyBMb2cgYSBzdWNjZXNzIG1lc3NhZ2VcclxuICAgIGxvZyhcclxuICAgICAgMyxcclxuICAgICAgYFt3ZWJzb2NrZXRdIFdlYlNvY2tldDogJHtjbGllbnRPcHRpb25zLmlkfSAtIENvbm5lY3RlZCB0byBzZXJ2ZXI6ICR7d2ViU29ja2V0VXJsfS5gXHJcbiAgICApO1xyXG4gIH0pO1xyXG5cclxuICAvLyBDbG9zZSBldmVudCB3aGVyZSBwaW5nIHRpbWVvdXQgaXMgY2xlYXJlZFxyXG4gIHdlYlNvY2tldENsaWVudC5vbignY2xvc2UnLCAoY29kZSkgPT4ge1xyXG4gICAgbG9nKFxyXG4gICAgICAzLFxyXG4gICAgICAnW3dlYnNvY2tldF0nLFxyXG4gICAgICBgV2ViU29ja2V0OiAke2NsaWVudE9wdGlvbnMuaWR9IC0gRGlzY29ubmVjdGVkIGZyb20gc2VydmVyOiAke3dlYlNvY2tldFVybH0gd2l0aCBjb2RlOiAke2NvZGV9LmBcclxuICAgICk7XHJcblxyXG4gICAgLy8gU3RvcCB0aGUgaGVhcnRiZWF0IG1lY2hhbmlzbVxyXG4gICAgY2xlYXJUaW1lb3V0KGNsaWVudE9wdGlvbnMucGluZ1RpbWVvdXQpO1xyXG5cclxuICAgIC8vIFJlbW92ZWQgY2xpZW50IGlmIGV4aXN0c1xyXG4gICAgd2ViU29ja2V0Q2xpZW50cy5kZWxldGUoY2xpZW50T3B0aW9ucy5pZCk7XHJcbiAgICB3ZWJTb2NrZXRDbGllbnQgPSBudWxsO1xyXG5cclxuICAgIC8vIFRyeSB0byByZWNvbm5lY3Qgd2hlbiBlbmFibGVkIGFuZCBpZiBub3QgYWxyZWFkeSBhdHRlbXB0aW5nIHRvIGRvIHNvXHJcbiAgICBfcmVjb25uZWN0KHdlYlNvY2tldFVybCwgY29ubmVjdGlvbk9wdGlvbnMsIGNsaWVudE9wdGlvbnMpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBFcnJvciBldmVudFxyXG4gIHdlYlNvY2tldENsaWVudC5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcclxuICAgIGxvZ1dpdGhTdGFjayhcclxuICAgICAgMSxcclxuICAgICAgZXJyb3IsXHJcbiAgICAgIGBbd2Vic29ja2V0XSBXZWJTb2NrZXQ6ICR7Y2xpZW50T3B0aW9ucy5pZH0gLSBFcnJvciBvY2N1cmVkLmBcclxuICAgICk7XHJcblxyXG4gICAgLy8gQmxvY2sgdGhlIHJlY29ubmVjdCBtZWNoYW5pc20gd2hlbiBnZXR0aW5nIDQwMyBvciBzZWxmLXNpZ25lZCBjZXJ0aWZpY2F0ZVxyXG4gICAgLy8gZXJyb3IgY29kZVxyXG4gICAgaWYgKFxyXG4gICAgICBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCc0MDMnKSB8fFxyXG4gICAgICBlcnJvci5jb2RlID09PSAnREVQVEhfWkVST19TRUxGX1NJR05FRF9DRVJUJ1xyXG4gICAgKSB7XHJcbiAgICAgIGNsaWVudE9wdGlvbnMucmVjb25uZWN0ID0gZmFsc2U7XHJcbiAgICAgIGNsaWVudE9wdGlvbnMucmVjb25uZWN0VHJ5ID0gd2ViU29ja2V0T3B0aW9ucy5yZWNvbm5lY3RBdHRlbXB0cztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE9yIHNldCB0aGUgb3B0aW9uIGFjY29yZGluZ2x5XHJcbiAgICAgIGNsaWVudE9wdGlvbnMucmVjb25uZWN0ID0gd2ViU29ja2V0T3B0aW9ucy5yZWNvbm5lY3Q7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vIE1lc3NhZ2UgZXZlbnRcclxuICB3ZWJTb2NrZXRDbGllbnQub24oJ21lc3NhZ2UnLCAobWVzc2FnZSkgPT4ge1xyXG4gICAgbG9nKFxyXG4gICAgICAzLFxyXG4gICAgICBgW3dlYnNvY2tldF0gV2ViU29ja2V0OiAke2NsaWVudE9wdGlvbnMuaWR9IC0gRGF0YSByZWNlaXZlZDogJHttZXNzYWdlfWBcclxuICAgICk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIFRoZSAncGluZycgZXZlbnQgZnJvbSBhIFdlYlNvY2tldCBjb25uZWN0aW9uIHdpdGggdGhlIGhlYWx0aCBjaGVja1xyXG4gIC8vIGFuZCB0ZXJtaW5hdGlvbiBsb2dpY1xyXG4gIHdlYlNvY2tldENsaWVudC5vbigncGluZycsICgpID0+IHtcclxuICAgIGxvZyhcclxuICAgICAgMyxcclxuICAgICAgYFt3ZWJzb2NrZXRdIFdlYlNvY2tldDogJHtjbGllbnRPcHRpb25zLmlkfSAtIFJlY2VpdmVkIFBJTkcgZnJvbSBzZXJ2ZXI6ICR7d2ViU29ja2V0VXJsfS5gXHJcbiAgICApO1xyXG5cclxuICAgIC8vIE9ubHkgd2hlbiBwaW5nIHRpbWVvdXQgaXMgbm90IGRpc2FibGVkXHJcbiAgICBpZiAod2ViU29ja2V0T3B0aW9ucy5waW5nVGltZW91dCA+IDApIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KGNsaWVudE9wdGlvbnMucGluZ1RpbWVvdXQpO1xyXG4gICAgICBjbGllbnRPcHRpb25zLnBpbmdUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgLy8gVGVybWluYXRlIHRoZSBjbGllbnQgY29ubmVjdGlvblxyXG4gICAgICAgIHdlYlNvY2tldENsaWVudC50ZXJtaW5hdGUoKTtcclxuXHJcbiAgICAgICAgLy8gVHJ5IHRvIHJlY29ubmVjdCB3aGVuIGVuYWJsZWQgYW5kIGlmIG5vdCBhbHJlYWR5IGF0dGVtcHRpbmcgdG8gZG8gc29cclxuICAgICAgICBfcmVjb25uZWN0KHdlYlNvY2tldFVybCwgY29ubmVjdGlvbk9wdGlvbnMsIGNsaWVudE9wdGlvbnMpO1xyXG4gICAgICB9LCB3ZWJTb2NrZXRPcHRpb25zLnBpbmdUaW1lb3V0KTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldHMgbWFwIG9mIGN1cnJlbnQgV2ViU29ja2V0IGNsaWVudHMuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBnZXRDbGllbnRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSB1dWlkIG9mIFdlYlNvY2tldCBjbGllbnQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2xpZW50cyhpZCkge1xyXG4gIHJldHVybiBpZCA/IHdlYlNvY2tldENsaWVudHMuZ2V0KGlkKSA6IHdlYlNvY2tldENsaWVudHMudmFsdWVzKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUZXJtaW5hdGVzIGFsbCBXZWJTb2NrZXQgY2xpZW50cyBhbmQgY2xlYXIgdGhlIHdlYlNvY2tldENsaWVudHMgbWFwLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gdGVybWluYXRlQ2xpZW50c1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRlcm1pbmF0ZUNsaWVudHMoKSB7XHJcbiAgZm9yIChjb25zdCBjbGllbnQgb2Ygd2ViU29ja2V0Q2xpZW50cy52YWx1ZXMoKSkge1xyXG4gICAgY2xpZW50LnRlcm1pbmF0ZSgpO1xyXG4gIH1cclxuICB3ZWJTb2NrZXRDbGllbnRzLmNsZWFyKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXRzIHVwIGFuIGludGVydmFsIHRvIHNlbmQgbWVzc2FnZXMgdGhyb3VnaCBhIFdlYlNvY2tldCBjb25uZWN0aW9uXHJcbiAqIGF0IGEgc3BlY2lmaWVkIGludGVydmFsLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX3NlbmRpbmdNZXNzYWdlSW50ZXJ2YWxcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHdlYlNvY2tldE9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBfc2VuZGluZ01lc3NhZ2VJbnRlcnZhbCh3ZWJTb2NrZXRPcHRpb25zKSB7XHJcbiAgLy8gU2V0IHRoZSBzZW5kaW5nIG1lc3NhZ2UgaW50ZXJ2YWxcclxuICBtZXNzYWdlSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBHZXQgdGhlIGZpcnN0IFdlYlNvY2tldCBjbGllbnRcclxuICAgICAgY29uc3Qgd2ViU29ja2V0Q2xpZW50ID0gZ2V0Q2xpZW50cygpLm5leHQoKS52YWx1ZTtcclxuXHJcbiAgICAgIC8vIExvZyBpbmZvIGFib3V0IG1lc3NhZ2Ugc2VuZGluZyBwcm9jZXNzXHJcbiAgICAgIGxvZygzLCBgW3dlYnNvY2tldF0gV2ViU29ja2V0IG1lc3NhZ2Ugc2VuZGluZyBxdWV1ZS5gKTtcclxuXHJcbiAgICAgIC8vIElmIHRoZSBjbGllbnQgaXMgZm91bmQsIG9wZW4gYW5kIHRoZXJlIGlzIGRhdGEgdG8gc2VuZFxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgd2ViU29ja2V0Q2xpZW50ICYmXHJcbiAgICAgICAgd2ViU29ja2V0Q2xpZW50LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOICYmXHJcbiAgICAgICAgT2JqZWN0LmtleXModGVsZW1ldHJ5RGF0YS5vcHRpb25zUGVyUmVxdWVzdCkubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgIHRlbGVtZXRyeURhdGEubnVtYmVyT2ZSZXF1ZXN0cyA+IDBcclxuICAgICAgKSB7XHJcbiAgICAgICAgLy8gTG9nIGluZm8gYWJvdXQgbWVzc2FnZSBzZW5kaW5nIHByb2Nlc3NcclxuICAgICAgICBsb2coMywgYFt3ZWJzb2NrZXRdIFNlbmRpbmcgZGF0YSB0aHJvdWdoIGEgV2ViU29ja2V0IGNvbm5lY3Rpb24uYCk7XHJcblxyXG4gICAgICAgIC8vIFNldCB0aGUgZGF0ZXNcclxuICAgICAgICBjb25zdCBjdXJyZW50RGF0ZSA9IGdldE5ld0RhdGUoKTtcclxuICAgICAgICB0ZWxlbWV0cnlEYXRhLmxhc3RTZW50ID0gdGVsZW1ldHJ5RGF0YS50aW1lT2ZTZW50IHx8IGN1cnJlbnREYXRlO1xyXG4gICAgICAgIHRlbGVtZXRyeURhdGEudGltZU9mU2VudCA9IGN1cnJlbnREYXRlO1xyXG5cclxuICAgICAgICAvLyBTZW5kIHRocm91Z2ggdGhlIFdlYlNvY2tldFxyXG4gICAgICAgIHdlYlNvY2tldENsaWVudC5zZW5kKEpTT04uc3RyaW5naWZ5KHRlbGVtZXRyeURhdGEpKTtcclxuXHJcbiAgICAgICAgLy8gQ2xlYXIgdGhlIHJlcXVlc3RzIG51bWJlciBhbmQgZGF0YSBiZWZvcmUgY29sbGVjdGluZyBhIG5ldyBvbmVcclxuICAgICAgICB0ZWxlbWV0cnlEYXRhLm51bWJlck9mUmVxdWVzdHMgPSAwO1xyXG4gICAgICAgIHRlbGVtZXRyeURhdGEub3B0aW9uc1BlclJlcXVlc3QgPSB7fTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgbG9nV2l0aFN0YWNrKFxyXG4gICAgICAgIDEsXHJcbiAgICAgICAgZXJyb3IsXHJcbiAgICAgICAgYFt3ZWJzb2NrZXRdIENvdWxkIG5vdCBzZW5kIGRhdGEgdGhyb3VnaCBXZWJTb2NrZXQuYFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0sIHdlYlNvY2tldE9wdGlvbnMubWVzc2FnZUludGVydmFsKTtcclxuXHJcbiAgLy8gUmVnaXN0ZXIgaW50ZXJ2YWwgZm9yIHRoZSBsYXRlciBjbGVhcmluZ1xyXG4gIGFkZFRpbWVyKG1lc3NhZ2VJbnRlcnZhbCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWNvbm5lY3RzIHRvIFdlYlNvY2tldCBzZXJ2ZXIgb24gYSBwcm92aWRlZCB1cmwuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBfcmVjb25uZWN0XHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB3ZWJTb2NrZXRVcmwgLSBUaGUgV2ViU29ja2V0IHNlcnZlcidzIFVSTC5cclxuICogQHBhcmFtIHtPYmplY3R9IGNvbm5lY3Rpb25PcHRpb25zIC0gT3B0aW9ucyBmb3IgV2ViU29ja2V0IGNvbm5lY3Rpb24uXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjbGllbnRPcHRpb25zIC0gT3B0aW9ucyBmb3IgV2ViU29ja2V0IGNsaWVudC5cclxuICovXHJcbmZ1bmN0aW9uIF9yZWNvbm5lY3Qod2ViU29ja2V0VXJsLCBjb25uZWN0aW9uT3B0aW9ucywgY2xpZW50T3B0aW9ucykge1xyXG4gIGlmIChcclxuICAgIGNsaWVudE9wdGlvbnMucmVjb25uZWN0ICYmXHJcbiAgICBjbGllbnRPcHRpb25zLnJlY29ubmVjdEludGVydmFsTXMgPiAwICYmXHJcbiAgICAhY2xpZW50T3B0aW9ucy5yZWNvbm5lY3RJbnRlcnZhbFxyXG4gICkge1xyXG4gICAgLy8gU3RhcnQgdGhlIHJlY29ubmVjdCBpbnRlcnZhbFxyXG4gICAgY2xpZW50T3B0aW9ucy5yZWNvbm5lY3RJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgaWYgKGNsaWVudE9wdGlvbnMucmVjb25uZWN0VHJ5IDwgd2ViU29ja2V0T3B0aW9ucy5yZWNvbm5lY3RBdHRlbXB0cykge1xyXG4gICAgICAgIGxvZyhcclxuICAgICAgICAgIDMsXHJcbiAgICAgICAgICBgW3dlYnNvY2tldF0gV2ViU29ja2V0OiAke2NsaWVudE9wdGlvbnMuaWR9IC0gQXR0ZW1wdCAkeysrY2xpZW50T3B0aW9ucy5yZWNvbm5lY3RUcnl9IG9mICR7d2ViU29ja2V0T3B0aW9ucy5yZWNvbm5lY3RBdHRlbXB0c30gdG8gcmVjb25uZWN0IHRvIHNlcnZlcjogJHt3ZWJTb2NrZXRVcmx9LmBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25uZWN0KHdlYlNvY2tldFVybCwgY29ubmVjdGlvbk9wdGlvbnMsIGNsaWVudE9wdGlvbnMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNsaWVudE9wdGlvbnMucmVjb25uZWN0ID0gZmFsc2U7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbChjbGllbnRPcHRpb25zLnJlY29ubmVjdEludGVydmFsKTtcclxuICAgICAgICBsb2coXHJcbiAgICAgICAgICAyLFxyXG4gICAgICAgICAgYFt3ZWJzb2NrZXRdIFdlYlNvY2tldDogJHtjbGllbnRPcHRpb25zLmlkfSAtIENvdWxkIG5vdCByZWNvbm5lY3QgdG8gc2VydmVyOiAke3dlYlNvY2tldFVybH0uYFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH0sIHdlYlNvY2tldE9wdGlvbnMucmVjb25uZWN0SW50ZXJ2YWwpO1xyXG5cclxuICAgIC8vIFJlZ2lzdGVyIGludGVydmFsIGZvciB0aGUgbGF0ZXIgY2xlYXJpbmdcclxuICAgIGFkZFRpbWVyKGNsaWVudE9wdGlvbnMucmVjb25uZWN0SW50ZXJ2YWwpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHdlYlNvY2tldEluaXQsXHJcbiAgY29ubmVjdCxcclxuICBnZXRDbGllbnRzLFxyXG4gIHRlcm1pbmF0ZUNsaWVudHNcclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQG92ZXJ2aWV3IFByb3ZpZGVzIG1pZGRsZXdhcmUgZnVuY3Rpb25zIGZvciBsb2dnaW5nIGVycm9ycyB3aXRoIHN0YWNrIHRyYWNlc1xyXG4gKiBhbmQgaGFuZGxpbmcgZXJyb3IgcmVzcG9uc2VzIGluIGFuIEV4cHJlc3MgYXBwbGljYXRpb24uXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgZ2V0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbmZpZy5qcyc7XHJcbmltcG9ydCB7IGxvZ1dpdGhTdGFjayB9IGZyb20gJy4uLy4uL2xvZ2dlci5qcyc7XHJcblxyXG4vKipcclxuICogTWlkZGxld2FyZSBmb3IgbG9nZ2luZyBlcnJvcnMgd2l0aCBzdGFjayB0cmFjZSBhbmQgaGFuZGxpbmcgZXJyb3IgcmVzcG9uc2UuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBsb2dFcnJvck1pZGRsZXdhcmVcclxuICpcclxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgLSBUaGUgZXJyb3Igb2JqZWN0LlxyXG4gKiBAcGFyYW0ge0V4cHJlc3MuUmVxdWVzdH0gcmVxdWVzdCAtIFRoZSBFeHByZXNzIHJlcXVlc3Qgb2JqZWN0LlxyXG4gKiBAcGFyYW0ge0V4cHJlc3MuUmVzcG9uc2V9IHJlc3BvbnNlIC0gVGhlIEV4cHJlc3MgcmVzcG9uc2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0IC0gVGhlIG5leHQgbWlkZGxld2FyZSBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybnMge3VuZGVmaW5lZH0gVGhlIGNhbGwgdG8gdGhlIG5leHQgbWlkZGxld2FyZSBmdW5jdGlvbiB3aXRoXHJcbiAqIHRoZSBwYXNzZWQgZXJyb3IuXHJcbiAqL1xyXG5mdW5jdGlvbiBsb2dFcnJvck1pZGRsZXdhcmUoZXJyb3IsIHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0KSB7XHJcbiAgLy8gRGlzcGxheSB0aGUgZXJyb3Igd2l0aCBzdGFjayBpbiBhIGNvcnJlY3QgZm9ybWF0XHJcbiAgbG9nV2l0aFN0YWNrKDEsIGVycm9yKTtcclxuXHJcbiAgLy8gRGVsZXRlIHRoZSBzdGFjayBmb3IgdGhlIGVudmlyb25tZW50IG90aGVyIHRoYW4gdGhlIGRldmVsb3BtZW50XHJcbiAgaWYgKGdldE9wdGlvbnMoKS5vdGhlci5ub2RlRW52ICE9PSAnZGV2ZWxvcG1lbnQnKSB7XHJcbiAgICBkZWxldGUgZXJyb3Iuc3RhY2s7XHJcbiAgfVxyXG5cclxuICAvLyBDYWxsIHRoZSBgcmV0dXJuRXJyb3JNaWRkbGV3YXJlYCBtaWRkbGV3YXJlXHJcbiAgcmV0dXJuIG5leHQoZXJyb3IpO1xyXG59XHJcblxyXG4vKipcclxuICogTWlkZGxld2FyZSBmb3IgcmV0dXJuaW5nIGVycm9yIHJlc3BvbnNlLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gcmV0dXJuRXJyb3JNaWRkbGV3YXJlXHJcbiAqXHJcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIC0gVGhlIGVycm9yIG9iamVjdC5cclxuICogQHBhcmFtIHtFeHByZXNzLlJlcXVlc3R9IHJlcXVlc3QgLSBUaGUgRXhwcmVzcyByZXF1ZXN0IG9iamVjdC5cclxuICogQHBhcmFtIHtFeHByZXNzLlJlc3BvbnNlfSByZXNwb25zZSAtIFRoZSBFeHByZXNzIHJlc3BvbnNlIG9iamVjdC5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dCAtIFRoZSBuZXh0IG1pZGRsZXdhcmUgZnVuY3Rpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiByZXR1cm5FcnJvck1pZGRsZXdhcmUoZXJyb3IsIHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0KSB7XHJcbiAgLy8gR2F0aGVyIGFsbCByZXF1aWVkIGluZm9ybWF0aW9uIGZvciB0aGUgcmVzcG9uc2VcclxuICBjb25zdCB7IG1lc3NhZ2UsIHN0YWNrIH0gPSBlcnJvcjtcclxuXHJcbiAgLy8gVXNlIHRoZSBlcnJvcidzIHN0YXR1cyBjb2RlIG9yIHRoZSBkZWZhdWx0IDQwMFxyXG4gIGNvbnN0IHN0YXR1c0NvZGUgPSBlcnJvci5zdGF0dXNDb2RlIHx8IDQwMDtcclxuXHJcbiAgLy8gU2V0IGFuZCByZXR1cm4gcmVzcG9uc2VcclxuICByZXNwb25zZS5zdGF0dXMoc3RhdHVzQ29kZSkuanNvbih7IHN0YXR1c0NvZGUsIG1lc3NhZ2UsIHN0YWNrIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcyB0aGUgZXJyb3IgbWlkZGxld2FyZXMgdG8gdGhlIHBhc3NlZCBleHByZXNzIGFwcCBpbnN0YW5jZS5cclxuICpcclxuICogQHBhcmFtIHtFeHByZXNzfSBhcHAgLSBUaGUgRXhwcmVzcyBhcHAgaW5zdGFuY2UuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlcnJvck1pZGRsZXdhcmUoYXBwKSB7XHJcbiAgLy8gQWRkIGxvZyBlcnJvciBtaWRkbGV3YXJlXHJcbiAgYXBwLnVzZShsb2dFcnJvck1pZGRsZXdhcmUpO1xyXG5cclxuICAvLyBBZGQgc2V0IHN0YXR1cyBhbmQgcmV0dXJuIGVycm9yIG1pZGRsZXdhcmVcclxuICBhcHAudXNlKHJldHVybkVycm9yTWlkZGxld2FyZSk7XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQG92ZXJ2aWV3IFByb3ZpZGVzIG1pZGRsZXdhcmUgZnVuY3Rpb25zIGZvciBjb25maWd1cmluZyBhbmQgZW5hYmxpbmcgcmF0ZVxyXG4gKiBsaW1pdGluZyBpbiBhbiBFeHByZXNzIGFwcGxpY2F0aW9uLlxyXG4gKi9cclxuXHJcbmltcG9ydCByYXRlTGltaXQgZnJvbSAnZXhwcmVzcy1yYXRlLWxpbWl0JztcclxuXHJcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4uLy4uL2xvZ2dlci5qcyc7XHJcblxyXG5pbXBvcnQgRXhwb3J0RXJyb3IgZnJvbSAnLi4vLi4vZXJyb3JzL0V4cG9ydEVycm9yLmpzJztcclxuXHJcbi8qKlxyXG4gKiBNaWRkbGV3YXJlIGZvciBlbmFibGluZyByYXRlIGxpbWl0aW5nIG9uIHRoZSBzcGVjaWZpZWQgRXhwcmVzcyBhcHAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RXhwcmVzc30gYXBwIC0gVGhlIEV4cHJlc3MgYXBwIGluc3RhbmNlLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcmF0ZUxpbWl0aW5nT3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nXHJcbiAqIGByYXRlTGltaXRpbmdgIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiBjb3VsZCBub3QgY29uZmlndXJlIGFuZCBzZXRcclxuICogdGhlIHJhdGUgbGltaXRpbmcgb3B0aW9ucy5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJhdGVMaW1pdGluZ01pZGRsZXdhcmUoYXBwLCByYXRlTGltaXRpbmdPcHRpb25zKSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIENoZWNrIGlmIHRoZSByYXRlIGxpbWl0aW5nIGlzIGVuYWJsZWQgYW5kIHRoZSBhcHAgZXhpc3RzXHJcbiAgICBpZiAoYXBwICYmIHJhdGVMaW1pdGluZ09wdGlvbnMuZW5hYmxlKSB7XHJcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPVxyXG4gICAgICAgICdUb28gbWFueSByZXF1ZXN0cywgeW91IGhhdmUgYmVlbiByYXRlIGxpbWl0ZWQuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJztcclxuXHJcbiAgICAgIC8vIE9wdGlvbnMgZm9yIHRoZSByYXRlIGxpbWl0ZXJcclxuICAgICAgY29uc3QgcmF0ZU9wdGlvbnMgPSB7XHJcbiAgICAgICAgd2luZG93OiByYXRlTGltaXRpbmdPcHRpb25zLndpbmRvdyB8fCAxLFxyXG4gICAgICAgIG1heFJlcXVlc3RzOiByYXRlTGltaXRpbmdPcHRpb25zLm1heFJlcXVlc3RzIHx8IDMwLFxyXG4gICAgICAgIGRlbGF5OiByYXRlTGltaXRpbmdPcHRpb25zLmRlbGF5IHx8IDAsXHJcbiAgICAgICAgdHJ1c3RQcm94eTogcmF0ZUxpbWl0aW5nT3B0aW9ucy50cnVzdFByb3h5IHx8IGZhbHNlLFxyXG4gICAgICAgIHNraXBLZXk6IHJhdGVMaW1pdGluZ09wdGlvbnMuc2tpcEtleSB8fCBudWxsLFxyXG4gICAgICAgIHNraXBUb2tlbjogcmF0ZUxpbWl0aW5nT3B0aW9ucy5za2lwVG9rZW4gfHwgbnVsbFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gU2V0IGlmIGJlaGluZCBhIHByb3h5XHJcbiAgICAgIGlmIChyYXRlT3B0aW9ucy50cnVzdFByb3h5KSB7XHJcbiAgICAgICAgYXBwLmVuYWJsZSgndHJ1c3QgcHJveHknKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ3JlYXRlIGEgbGltaXRlclxyXG4gICAgICBjb25zdCBsaW1pdGVyID0gcmF0ZUxpbWl0KHtcclxuICAgICAgICAvLyBUaW1lIGZyYW1lIGZvciB3aGljaCByZXF1ZXN0cyBhcmUgY2hlY2tlZCBhbmQgcmVtZW1iZXJlZFxyXG4gICAgICAgIHdpbmRvd01zOiByYXRlT3B0aW9ucy53aW5kb3cgKiA2MCAqIDEwMDAsXHJcbiAgICAgICAgLy8gTGltaXQgZWFjaCBJUCB0byAxMDAgcmVxdWVzdHMgcGVyIGB3aW5kb3dNc2BcclxuICAgICAgICBsaW1pdDogcmF0ZU9wdGlvbnMubWF4UmVxdWVzdHMsXHJcbiAgICAgICAgLy8gRGlzYWJsZSBkZWxheWluZywgZnVsbCBzcGVlZCB1bnRpbCB0aGUgbWF4IGxpbWl0IGlzIHJlYWNoZWRcclxuICAgICAgICBkZWxheU1zOiByYXRlT3B0aW9ucy5kZWxheSxcclxuICAgICAgICBoYW5kbGVyOiAocmVxdWVzdCwgcmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgIHJlc3BvbnNlLmZvcm1hdCh7XHJcbiAgICAgICAgICAgIGpzb246ICgpID0+IHtcclxuICAgICAgICAgICAgICByZXNwb25zZS5zdGF0dXMoNDI5KS5zZW5kKHsgbWVzc2FnZSB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJlc3BvbnNlLnN0YXR1cyg0MjkpLnNlbmQobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2tpcDogKHJlcXVlc3QpID0+IHtcclxuICAgICAgICAgIC8vIEFsbG93IGJ5cGFzc2luZyB0aGUgbGltaXRlciBpZiBhIHZhbGlkIGtleS90b2tlbiBoYXMgYmVlbiBzZW50XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHJhdGVPcHRpb25zLnNraXBLZXkgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgcmF0ZU9wdGlvbnMuc2tpcFRva2VuICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIHJlcXVlc3QucXVlcnkua2V5ID09PSByYXRlT3B0aW9ucy5za2lwS2V5ICYmXHJcbiAgICAgICAgICAgIHJlcXVlc3QucXVlcnkuYWNjZXNzX3Rva2VuID09PSByYXRlT3B0aW9ucy5za2lwVG9rZW5cclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICBsb2coNCwgJ1tyYXRlIGxpbWl0aW5nXSBTa2lwcGluZyByYXRlIGxpbWl0ZXIuJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBVc2UgYSBsaW1pdGVyIGFzIGEgbWlkZGxld2FyZVxyXG4gICAgICBhcHAudXNlKGxpbWl0ZXIpO1xyXG5cclxuICAgICAgbG9nKFxyXG4gICAgICAgIDMsXHJcbiAgICAgICAgYFtyYXRlIGxpbWl0aW5nXSBFbmFibGVkIHJhdGUgbGltaXRpbmcgd2l0aCAke3JhdGVPcHRpb25zLm1heFJlcXVlc3RzfSByZXF1ZXN0cyBwZXIgJHtyYXRlT3B0aW9ucy53aW5kb3d9IG1pbnV0ZSBmb3IgZWFjaCBJUCwgdHJ1c3RpbmcgcHJveHk6ICR7cmF0ZU9wdGlvbnMudHJ1c3RQcm94eX0uYFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICdbcmF0ZSBsaW1pdGluZ10gQ291bGQgbm90IGNvbmZpZ3VyZSBhbmQgc2V0IHRoZSByYXRlIGxpbWl0aW5nIG9wdGlvbnMuJyxcclxuICAgICAgNTAwXHJcbiAgICApLnNldEVycm9yKGVycm9yKTtcclxuICB9XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQG92ZXJ2aWV3IFByb3ZpZGVzIG1pZGRsZXdhcmUgZnVuY3Rpb25zIGZvciB2YWxpZGF0aW5nIGluY29taW5nIEhUVFAgcmVxdWVzdHNcclxuICogaW4gYW4gRXhwcmVzcyBhcHBsaWNhdGlvbi4gVGhpcyBtb2R1bGUgZW5zdXJlcyB0aGF0IHJlcXVlc3RzIGNvbnRhaW5cclxuICogYXBwcm9wcmlhdGUgY29udGVudCB0eXBlcyBhbmQgdmFsaWQgcmVxdWVzdCBib2RpZXMsIGluY2x1ZGluZyBwcm9wZXIgSlNPTlxyXG4gKiBzdHJ1Y3R1cmVzIGFuZCBjaGFydCBkYXRhIGZvciBleHBvcnRzLiBJdCBjaGVja3MgZm9yIHBvdGVudGlhbCBpc3N1ZXMgc3VjaFxyXG4gKiBhcyBtaXNzaW5nIG9yIG1hbGZvcm1lZCBkYXRhLCBwcml2YXRlIHJhbmdlIFVSTHMgaW4gU1ZHIHBheWxvYWRzLCBhbmQgYWxsb3dzXHJcbiAqIGZvciBmbGV4aWJsZSBvcHRpb25zIHZhbGlkYXRpb24uIFRoZSBtaWRkbGV3YXJlIGxvZ3MgZGV0YWlsZWQgaW5mb3JtYXRpb25cclxuICogYW5kIGhhbmRsZXMgZXJyb3JzIHJlbGF0ZWQgdG8gaW5jb3JyZWN0IHBheWxvYWRzLCBjaGFydCBkYXRhLCBhbmQgcHJpdmF0ZSBVUkxcclxuICogdXNhZ2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgdjQgYXMgdXVpZCB9IGZyb20gJ3V1aWQnO1xyXG5cclxuaW1wb3J0IHsgZ2V0QWxsb3dDb2RlRXhlY3V0aW9uIH0gZnJvbSAnLi4vLi4vY2hhcnQuanMnO1xyXG5pbXBvcnQgeyBpc0FsbG93ZWRDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcuanMnO1xyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuLi8uLi9sb2dnZXIuanMnO1xyXG5pbXBvcnQgeyBpc09iamVjdEVtcHR5LCBpc1ByaXZhdGVSYW5nZVVybEZvdW5kIH0gZnJvbSAnLi4vLi4vdXRpbHMuanMnO1xyXG5cclxuaW1wb3J0IEV4cG9ydEVycm9yIGZyb20gJy4uLy4uL2Vycm9ycy9FeHBvcnRFcnJvci5qcyc7XHJcblxyXG4vKipcclxuICogTWlkZGxld2FyZSBmb3IgdmFsaWRhdGluZyB0aGUgY29udGVudC10eXBlIGhlYWRlci5cclxuICpcclxuICogQGZ1bmN0aW9uIGNvbnRlbnRUeXBlTWlkZGxld2FyZVxyXG4gKlxyXG4gKiBAcGFyYW0ge0V4cHJlc3MuUmVxdWVzdH0gcmVxdWVzdCAtIFRoZSBFeHByZXNzIHJlcXVlc3Qgb2JqZWN0LlxyXG4gKiBAcGFyYW0ge0V4cHJlc3MuUmVzcG9uc2V9IHJlc3BvbnNlIC0gVGhlIEV4cHJlc3MgcmVzcG9uc2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0IC0gVGhlIG5leHQgbWlkZGxld2FyZSBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybnMge3VuZGVmaW5lZH0gVGhlIGNhbGwgdG8gdGhlIG5leHQgbWlkZGxld2FyZSBmdW5jdGlvbi5cclxuICpcclxuICogQHRocm93cyB7RXhwb3J0RXJyb3J9IFRocm93cyBhbiBgRXhwb3J0RXJyb3JgIGlmIHRoZSBjb250ZW50LXR5cGVcclxuICogaXMgbm90IGNvcnJlY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBjb250ZW50VHlwZU1pZGRsZXdhcmUocmVxdWVzdCwgcmVzcG9uc2UsIG5leHQpIHtcclxuICB0cnkge1xyXG4gICAgLy8gR2V0IHRoZSBjb250ZW50IHR5cGUgaGVhZGVyXHJcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlcXVlc3QuaGVhZGVyc1snY29udGVudC10eXBlJ10gfHwgJyc7XHJcblxyXG4gICAgLy8gQWxsb3cgb25seSBKU09OLCBVUkwtZW5jb2RlZCBhbmQgZm9ybSBkYXRhIHdpdGhvdXQgZmlsZXMgdHlwZXMgb2YgZGF0YVxyXG4gICAgaWYgKFxyXG4gICAgICAhY29udGVudFR5cGUuaW5jbHVkZXMoJ2FwcGxpY2F0aW9uL2pzb24nKSAmJlxyXG4gICAgICAhY29udGVudFR5cGUuaW5jbHVkZXMoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpICYmXHJcbiAgICAgICFjb250ZW50VHlwZS5pbmNsdWRlcygnbXVsdGlwYXJ0L2Zvcm0tZGF0YScpXHJcbiAgICApIHtcclxuICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgICdbdmFsaWRhdGlvbl0gQ29udGVudC1UeXBlIG11c3QgYmUgYXBwbGljYXRpb24vanNvbiwgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkLCBvciBtdWx0aXBhcnQvZm9ybS1kYXRhLicsXHJcbiAgICAgICAgNDE1XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsbCB0aGUgYHJlcXVlc3RCb2R5TWlkZGxld2FyZWAgbWlkZGxld2FyZVxyXG4gICAgcmV0dXJuIG5leHQoKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgcmV0dXJuIG5leHQoZXJyb3IpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIE1pZGRsZXdhcmUgZm9yIHZhbGlkYXRpbmcgdGhlIHJlcXVlc3QncyBib2R5LlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gcmVxdWVzdEJvZHlNaWRkbGV3YXJlXHJcbiAqXHJcbiAqIEBwYXJhbSB7RXhwcmVzcy5SZXF1ZXN0fSByZXF1ZXN0IC0gVGhlIEV4cHJlc3MgcmVxdWVzdCBvYmplY3QuXHJcbiAqIEBwYXJhbSB7RXhwcmVzcy5SZXNwb25zZX0gcmVzcG9uc2UgLSBUaGUgRXhwcmVzcyByZXNwb25zZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHQgLSBUaGUgbmV4dCBtaWRkbGV3YXJlIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfSBUaGUgY2FsbCB0byB0aGUgbmV4dCBtaWRkbGV3YXJlIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaWYgdGhlIGJvZHkgaXMgbm90IGNvcnJlY3QuXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiB0aGUgY2hhcnQgZGF0YSBmcm9tIHRoZSBib2R5XHJcbiAqIGlzIG5vdCBjb3JyZWN0LlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaW4gY2FzZSBvZiB0aGUgcHJpdmF0ZSByYW5nZVxyXG4gKiB1cmwgZXJyb3IuXHJcbiAqL1xyXG5mdW5jdGlvbiByZXF1ZXN0Qm9keU1pZGRsZXdhcmUocmVxdWVzdCwgcmVzcG9uc2UsIG5leHQpIHtcclxuICB0cnkge1xyXG4gICAgLy8gR2V0IHRoZSByZXF1ZXN0IGJvZHlcclxuICAgIGNvbnN0IGJvZHkgPSByZXF1ZXN0LmJvZHk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgdW5pcXVlIElEIGZvciBhIHJlcXVlc3RcclxuICAgIGNvbnN0IHJlcXVlc3RJZCA9IHV1aWQoKTtcclxuXHJcbiAgICAvLyBUaHJvdyBhbiBlcnJvciBpZiB0aGVyZSBpcyBubyBjb3JyZWN0IGJvZHlcclxuICAgIGlmICghYm9keSB8fCBpc09iamVjdEVtcHR5KGJvZHkpKSB7XHJcbiAgICAgIGxvZyhcclxuICAgICAgICAyLFxyXG4gICAgICAgIGBbdmFsaWRhdGlvbl0gUmVxdWVzdCBbJHtyZXF1ZXN0SWR9XSAtIFRoZSByZXF1ZXN0IGZyb20gJHtcclxuICAgICAgICAgIHJlcXVlc3QuaGVhZGVyc1sneC1mb3J3YXJkZWQtZm9yJ10gfHwgcmVxdWVzdC5jb25uZWN0aW9uLnJlbW90ZUFkZHJlc3NcclxuICAgICAgICB9IHdhcyBpbmNvcnJlY3QuIFJlY2VpdmVkIHBheWxvYWQgaXMgZW1wdHkuYFxyXG4gICAgICApO1xyXG5cclxuICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgIGBbdmFsaWRhdGlvbl0gUmVxdWVzdCBbJHtyZXF1ZXN0SWR9XSAtIFRoZSByZXF1ZXN0IGJvZHkgaXMgcmVxdWlyZWQuIFBsZWFzZSBlbnN1cmUgdGhhdCB5b3VyIENvbnRlbnQtVHlwZSBoZWFkZXIgaXMgY29ycmVjdC4gQWNjZXB0ZWQgdHlwZXMgYXJlICdhcHBsaWNhdGlvbi9qc29uJyBhbmQgJ211bHRpcGFydC9mb3JtLWRhdGEnLmAsXHJcbiAgICAgICAgNDAwXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0IHRoZSBgYWxsb3dDb2RlRXhlY3V0aW9uYCBvcHRpb24gZm9yIHRoZSBzZXJ2ZXJcclxuICAgIGNvbnN0IGFsbG93Q29kZUV4ZWN1dGlvbiA9IGdldEFsbG93Q29kZUV4ZWN1dGlvbigpO1xyXG5cclxuICAgIC8vIEZpbmQgYSBjb3JyZWN0IGNoYXJ0IG9wdGlvbnNcclxuICAgIGNvbnN0IGluc3RyID0gaXNBbGxvd2VkQ29uZmlnKFxyXG4gICAgICAvLyBVc2Ugb25lIG9mIHRoZSBiZWxvd1xyXG4gICAgICBib2R5Lmluc3RyIHx8IGJvZHkub3B0aW9ucyB8fCBib2R5LmluZmlsZSB8fCBib2R5LmRhdGEsXHJcbiAgICAgIC8vIFN0cmluZ2lmeSBvcHRpb25zXHJcbiAgICAgIHRydWUsXHJcbiAgICAgIC8vIEFsbG93IG9yIGRpc2FsbG93IGZ1bmN0aW9uc1xyXG4gICAgICBhbGxvd0NvZGVFeGVjdXRpb25cclxuICAgICk7XHJcblxyXG4gICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgdGhlcmUgaXMgbm8gY29ycmVjdCBjaGFydCBkYXRhXHJcbiAgICBpZiAoaW5zdHIgPT09IG51bGwgJiYgIWJvZHkuc3ZnKSB7XHJcbiAgICAgIGxvZyhcclxuICAgICAgICAyLFxyXG4gICAgICAgIGBbdmFsaWRhdGlvbl0gUmVxdWVzdCBbJHtyZXF1ZXN0SWR9XSAtIFRoZSByZXF1ZXN0IGZyb20gJHtcclxuICAgICAgICAgIHJlcXVlc3QuaGVhZGVyc1sneC1mb3J3YXJkZWQtZm9yJ10gfHwgcmVxdWVzdC5jb25uZWN0aW9uLnJlbW90ZUFkZHJlc3NcclxuICAgICAgICB9IHdhcyBpbmNvcnJlY3QuIFJlY2VpdmVkIHBheWxvYWQgaXMgbWlzc2luZyBjb3JyZWN0IGNoYXJ0IGRhdGEgZm9yIGV4cG9ydDogJHtKU09OLnN0cmluZ2lmeShib2R5KX0uYFxyXG4gICAgICApO1xyXG5cclxuICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgIGBbdmFsaWRhdGlvbl0gUmVxdWVzdCBbJHtyZXF1ZXN0SWR9XSAtIE5vIGNvcnJlY3QgY2hhcnQgZGF0YSBmb3VuZC4gRW5zdXJlIHRoYXQgeW91IGFyZSB1c2luZyBlaXRoZXIgYXBwbGljYXRpb24vanNvbiBvciBtdWx0aXBhcnQvZm9ybS1kYXRhIGhlYWRlcnMuIElmIHNlbmRpbmcgSlNPTiwgbWFrZSBzdXJlIHRoZSBjaGFydCBkYXRhIGlzIGluIHRoZSAnaW5maWxlJywgJ29wdGlvbnMnLCBvciAnZGF0YScgYXR0cmlidXRlLiBJZiBzZW5kaW5nIFNWRywgZW5zdXJlIGl0IGlzIGluIHRoZSAnc3ZnJyBhdHRyaWJ1dGUuYCxcclxuICAgICAgICA0MDBcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUaHJvdyBhbiBlcnJvciBpZiB0ZXN0IG9mIHhsaW5rOmhyZWYgZWxlbWVudHMgZnJvbSBwYXlsb2FkJ3MgU1ZHIGZhaWxzXHJcbiAgICBpZiAoYm9keS5zdmcgJiYgaXNQcml2YXRlUmFuZ2VVcmxGb3VuZChib2R5LnN2ZykpIHtcclxuICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgIGBbdmFsaWRhdGlvbl0gUmVxdWVzdCBbJHtyZXF1ZXN0SWR9XSAtIFNWRyBwb3RlbnRpYWxseSBjb250YWluIGF0IGxlYXN0IG9uZSBmb3JiaWRkZW4gVVJMIGluICd4bGluazpocmVmJyBlbGVtZW50LiBQbGVhc2UgcmV2aWV3IHRoZSBTVkcgY29udGVudCBhbmQgZW5zdXJlIHRoYXQgYWxsIHJlZmVyZW5jZWQgVVJMcyBjb21wbHkgd2l0aCBzZWN1cml0eSBwb2xpY2llcy5gLFxyXG4gICAgICAgIDQwMFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCBhbmQgcHJlLXZhbGlkYXRlIHRoZSBvcHRpb25zIGFuZCBzdG9yZSB0aGVtIGluIHRoZSByZXF1ZXN0XHJcbiAgICByZXF1ZXN0LnZhbGlkYXRlZE9wdGlvbnMgPSB7XHJcbiAgICAgIC8vIFNldCB0aGUgY3JlYXRlZCBJRCBhcyBhIGByZXF1ZXN0SWRgIHByb3BlcnR5IGluIHRoZSBvcHRpb25zXHJcbiAgICAgIHJlcXVlc3RJZCxcclxuICAgICAgZXhwb3J0OiB7XHJcbiAgICAgICAgaW5zdHIsXHJcbiAgICAgICAgc3ZnOiBib2R5LnN2ZyxcclxuICAgICAgICBvdXRmaWxlOlxyXG4gICAgICAgICAgYm9keS5vdXRmaWxlIHx8XHJcbiAgICAgICAgICBgJHtyZXF1ZXN0LnBhcmFtcy5maWxlbmFtZSB8fCAnY2hhcnQnfS4ke2JvZHkudHlwZSB8fCAncG5nJ31gLFxyXG4gICAgICAgIHR5cGU6IGJvZHkudHlwZSxcclxuICAgICAgICBjb25zdHI6IGJvZHkuY29uc3RyLFxyXG4gICAgICAgIGI2NDogYm9keS5iNjQsXHJcbiAgICAgICAgbm9Eb3dubG9hZDogYm9keS5ub0Rvd25sb2FkLFxyXG4gICAgICAgIGhlaWdodDogYm9keS5oZWlnaHQsXHJcbiAgICAgICAgd2lkdGg6IGJvZHkud2lkdGgsXHJcbiAgICAgICAgc2NhbGU6IGJvZHkuc2NhbGUsXHJcbiAgICAgICAgZ2xvYmFsT3B0aW9uczogaXNBbGxvd2VkQ29uZmlnKFxyXG4gICAgICAgICAgYm9keS5nbG9iYWxPcHRpb25zLFxyXG4gICAgICAgICAgdHJ1ZSxcclxuICAgICAgICAgIGFsbG93Q29kZUV4ZWN1dGlvblxyXG4gICAgICAgICksXHJcbiAgICAgICAgdGhlbWVPcHRpb25zOiBpc0FsbG93ZWRDb25maWcoXHJcbiAgICAgICAgICBib2R5LnRoZW1lT3B0aW9ucyxcclxuICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICBhbGxvd0NvZGVFeGVjdXRpb25cclxuICAgICAgICApXHJcbiAgICAgIH0sXHJcbiAgICAgIGN1c3RvbUxvZ2ljOiB7XHJcbiAgICAgICAgYWxsb3dDb2RlRXhlY3V0aW9uLFxyXG4gICAgICAgIGFsbG93RmlsZVJlc291cmNlczogZmFsc2UsXHJcbiAgICAgICAgY3VzdG9tQ29kZTogYm9keS5jdXN0b21Db2RlLFxyXG4gICAgICAgIGNhbGxiYWNrOiBib2R5LmNhbGxiYWNrLFxyXG4gICAgICAgIHJlc291cmNlczogaXNBbGxvd2VkQ29uZmlnKGJvZHkucmVzb3VyY2VzLCB0cnVlLCBhbGxvd0NvZGVFeGVjdXRpb24pXHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gQ2FsbCB0aGUgbmV4dCBtaWRkbGV3YXJlXHJcbiAgICByZXR1cm4gbmV4dCgpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICByZXR1cm4gbmV4dChlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQWRkcyB0aGUgdmFsaWRhdGlvbiBtaWRkbGV3YXJlcyB0byB0aGUgcGFzc2VkIGV4cHJlc3MgYXBwIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0V4cHJlc3N9IGFwcCAtIFRoZSBFeHByZXNzIGFwcCBpbnN0YW5jZS5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZhbGlkYXRpb25NaWRkbGV3YXJlKGFwcCkge1xyXG4gIC8vIEFkZCBjb250ZW50IHR5cGUgdmFsaWRhdGlvbiBtaWRkbGV3YXJlXHJcbiAgYXBwLnBvc3QoWycvJywgJy86ZmlsZW5hbWUnXSwgY29udGVudFR5cGVNaWRkbGV3YXJlKTtcclxuXHJcbiAgLy8gQWRkIHJlcXVlc3QgYm9keSByZXF1ZXN0IHZhbGlkYXRpb24gbWlkZGxld2FyZVxyXG4gIGFwcC5wb3N0KFsnLycsICcvOmZpbGVuYW1lJ10sIHJlcXVlc3RCb2R5TWlkZGxld2FyZSk7XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQG92ZXJ2aWV3IERlZmluZXMgdGhlIGV4cG9ydCByb3V0ZXMgYW5kIGxvZ2ljIGZvciBoYW5kbGluZyBjaGFydCBleHBvcnRcclxuICogcmVxdWVzdHMgaW4gYW4gRXhwcmVzcyBzZXJ2ZXIuIFRoaXMgbW9kdWxlIHByb2Nlc3NlcyBpbmNvbWluZyByZXF1ZXN0c1xyXG4gKiB0byBleHBvcnQgY2hhcnRzIGluIHZhcmlvdXMgZm9ybWF0cyAoZS5nLiBKUEVHLCBQTkcsIFBERiwgU1ZHKS4gSXQgaW50ZWdyYXRlc1xyXG4gKiB3aXRoIEhpZ2hjaGFydHMnIGNvcmUgZnVuY3Rpb25hbGl0aWVzIGFuZCBzdXBwb3J0cyBib3RoIGltbWVkaWF0ZSBkb3dubG9hZFxyXG4gKiByZXNwb25zZXMgYW5kIEJhc2U2NC1lbmNvZGVkIGNvbnRlbnQgcmV0dXJucy4gVGhlIGNvZGUgYWxzbyBmZWF0dXJlc1xyXG4gKiBiZW5jaG1hcmtpbmcgZm9yIHBlcmZvcm1hbmNlIG1vbml0b3JpbmcuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgc3RhcnRFeHBvcnQgfSBmcm9tICcuLi8uLi9jaGFydC5qcyc7XHJcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4uLy4uL2xvZ2dlci5qcyc7XHJcbmltcG9ydCB7IHByZXBhcmVUZWxlbWV0cnkgfSBmcm9tICcuLi8uLi90ZWxlbWV0cnkuanMnO1xyXG5pbXBvcnQgeyBnZXRCYXNlNjQsIG1lYXN1cmVUaW1lIH0gZnJvbSAnLi4vLi4vdXRpbHMuanMnO1xyXG5cclxuaW1wb3J0IEV4cG9ydEVycm9yIGZyb20gJy4uLy4uL2Vycm9ycy9FeHBvcnRFcnJvci5qcyc7XHJcblxyXG4vLyBSZXZlcnNlZCBNSU1FIHR5cGVzXHJcbmNvbnN0IHJldmVyc2VkTWltZSA9IHtcclxuICBwbmc6ICdpbWFnZS9wbmcnLFxyXG4gIGpwZWc6ICdpbWFnZS9qcGVnJyxcclxuICBnaWY6ICdpbWFnZS9naWYnLFxyXG4gIHBkZjogJ2FwcGxpY2F0aW9uL3BkZicsXHJcbiAgc3ZnOiAnaW1hZ2Uvc3ZnK3htbCdcclxufTtcclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIHRoZSBleHBvcnQgcmVxdWVzdHMgZnJvbSB0aGUgY2xpZW50LlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIHJlcXVlc3RFeHBvcnRcclxuICpcclxuICogQHBhcmFtIHtFeHByZXNzLlJlcXVlc3R9IHJlcXVlc3QgLSBUaGUgRXhwcmVzcyByZXF1ZXN0IG9iamVjdC5cclxuICogQHBhcmFtIHtFeHByZXNzLlJlc3BvbnNlfSByZXNwb25zZSAtIFRoZSBFeHByZXNzIHJlc3BvbnNlIG9iamVjdC5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dCAtIFRoZSBuZXh0IG1pZGRsZXdhcmUgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyBvbmNlIHRoZSBleHBvcnQgcHJvY2Vzc1xyXG4gKiBpcyBjb21wbGV0ZS5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHJlcXVlc3RFeHBvcnQocmVxdWVzdCwgcmVzcG9uc2UsIG5leHQpIHtcclxuICB0cnkge1xyXG4gICAgLy8gU3RhcnQgY291bnRpbmcgdGltZSBmb3IgYSByZXF1ZXN0XHJcbiAgICBjb25zdCByZXF1ZXN0Q291bnRlciA9IG1lYXN1cmVUaW1lKCk7XHJcblxyXG4gICAgLy8gSW4gY2FzZSB0aGUgY29ubmVjdGlvbiBpcyBjbG9zZWQsIGZvcmNlIHRvIGFib3J0IGZ1cnRoZXIgYWN0aW9uc1xyXG4gICAgbGV0IGNvbm5lY3Rpb25BYm9ydGVkID0gZmFsc2U7XHJcbiAgICByZXF1ZXN0LnNvY2tldC5vbignY2xvc2UnLCAoaGFkRXJyb3JzKSA9PiB7XHJcbiAgICAgIGlmIChoYWRFcnJvcnMpIHtcclxuICAgICAgICBjb25uZWN0aW9uQWJvcnRlZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEdldCB0aGUgb3B0aW9ucyBwcmV2aW91c2x5IHZhbGlkYXRlZCBpbiB0aGUgdmFsaWRhdGlvbiBtaWRkbGV3YXJlXHJcbiAgICBjb25zdCBvcHRpb25zID0gcmVxdWVzdC52YWxpZGF0ZWRPcHRpb25zO1xyXG5cclxuICAgIC8vIEdldCB0aGUgcmVxdWVzdCBpZFxyXG4gICAgY29uc3QgcmVxdWVzdElkID0gb3B0aW9ucy5yZXF1ZXN0SWQ7XHJcblxyXG4gICAgLy8gSW5mbyBhYm91dCBhbiBpbmNvbWluZyByZXF1ZXN0IHdpdGggY29ycmVjdCBkYXRhXHJcbiAgICBsb2coNCwgYFtleHBvcnRdIFJlcXVlc3QgWyR7cmVxdWVzdElkfV0gLSBHb3QgYW4gaW5jb21pbmcgSFRUUCByZXF1ZXN0LmApO1xyXG5cclxuICAgIC8vIFN0YXJ0IHRoZSBleHBvcnQgcHJvY2Vzc1xyXG4gICAgYXdhaXQgc3RhcnRFeHBvcnQob3B0aW9ucywgKGVycm9yLCBkYXRhKSA9PiB7XHJcbiAgICAgIC8vIFJlbW92ZSB0aGUgY2xvc2UgZXZlbnQgZnJvbSB0aGUgc29ja2V0XHJcbiAgICAgIHJlcXVlc3Quc29ja2V0LnJlbW92ZUFsbExpc3RlbmVycygnY2xvc2UnKTtcclxuXHJcbiAgICAgIC8vIElmIHRoZSBjb25uZWN0aW9uIHdhcyBjbG9zZWQsIGRvIG5vdGhpbmdcclxuICAgICAgaWYgKGNvbm5lY3Rpb25BYm9ydGVkKSB7XHJcbiAgICAgICAgbG9nKFxyXG4gICAgICAgICAgMyxcclxuICAgICAgICAgIGBbZXhwb3J0XSBSZXF1ZXN0IFske3JlcXVlc3RJZH1dIC0gVGhlIGNsaWVudCBjbG9zZWQgdGhlIGNvbm5lY3Rpb24gYmVmb3JlIHRoZSBjaGFydCBmaW5pc2hlZCBwcm9jZXNzaW5nLmBcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSWYgZXJyb3IsIGxvZyBpdCBhbmQgc2VuZCBpdCB0byB0aGUgZXJyb3IgbWlkZGxld2FyZVxyXG4gICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSWYgZGF0YSBpcyBtaXNzaW5nLCBsb2cgdGhlIG1lc3NhZ2UgYW5kIHNlbmQgaXQgdG8gdGhlIGVycm9yIG1pZGRsZXdhcmVcclxuICAgICAgaWYgKCFkYXRhIHx8ICFkYXRhLnJlc3VsdCkge1xyXG4gICAgICAgIGxvZyhcclxuICAgICAgICAgIDIsXHJcbiAgICAgICAgICBgW2V4cG9ydF0gUmVxdWVzdCBbJHtyZXF1ZXN0SWR9XSAtIFJlcXVlc3QgZnJvbSAke1xyXG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnNbJ3gtZm9yd2FyZGVkLWZvciddIHx8XHJcbiAgICAgICAgICAgIHJlcXVlc3QuY29ubmVjdGlvbi5yZW1vdGVBZGRyZXNzXHJcbiAgICAgICAgICB9IHdhcyBpbmNvcnJlY3QuIFJlY2VpdmVkIHJlc3VsdCBpcyAke2RhdGEucmVzdWx0fS5gXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgICAgYFtleHBvcnRdIFJlcXVlc3QgWyR7cmVxdWVzdElkfV0gLSBVbmV4cGVjdGVkIHJldHVybiBvZiB0aGUgZXhwb3J0IHJlc3VsdCBmcm9tIHRoZSBjaGFydCBnZW5lcmF0aW9uLiBQbGVhc2UgY2hlY2sgeW91ciByZXF1ZXN0IGRhdGEuYCxcclxuICAgICAgICAgIDQwMFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFRlbGVtZXRyeSBvbmx5IGZvciB0aGUgb3B0aW9ucyBiYXNlZCByZXF1ZXN0XHJcbiAgICAgIGlmICghb3B0aW9ucy5leHBvcnQuc3ZnKSB7XHJcbiAgICAgICAgLy8gUHJlcGFyZSBhbmQgc2VuZCB0aGUgb3B0aW9ucyB0aHJvdWdoIHRoZSBXZWJTb2NrZXRcclxuICAgICAgICBwcmVwYXJlVGVsZW1ldHJ5KG9wdGlvbnMuZXhwb3J0Lm9wdGlvbnMsIG9wdGlvbnMucGF5bG9hZC5yZXF1ZXN0SWQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBSZXR1cm4gdGhlIHJlc3VsdCBpbiBhbiBhcHByb3ByaWF0ZSBmb3JtYXRcclxuICAgICAgaWYgKGRhdGEucmVzdWx0KSB7XHJcbiAgICAgICAgbG9nKFxyXG4gICAgICAgICAgMyxcclxuICAgICAgICAgIGBbZXhwb3J0XSBSZXF1ZXN0IFske3JlcXVlc3RJZH1dIC0gVGhlIHdob2xlIGV4cG9ydGluZyBwcm9jZXNzIHRvb2sgJHtyZXF1ZXN0Q291bnRlcigpfW1zLmBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIGB0eXBlYCwgYGI2NGAsIGBub0Rvd25sb2FkYCwgYW5kIGBvdXRmaWxlYCBmcm9tIG9wdGlvbnNcclxuICAgICAgICBjb25zdCB7IHR5cGUsIGI2NCwgbm9Eb3dubG9hZCwgb3V0ZmlsZSB9ID0gZGF0YS5vcHRpb25zLmV4cG9ydDtcclxuXHJcbiAgICAgICAgLy8gSWYgb25seSBCYXNlNjQgaXMgcmVxdWlyZWQsIHJldHVybiBpdFxyXG4gICAgICAgIGlmIChiNjQpIHtcclxuICAgICAgICAgIHJldHVybiByZXNwb25zZS5zZW5kKGdldEJhc2U2NChkYXRhLnJlc3VsdCwgdHlwZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU2V0IGNvcnJlY3QgY29udGVudCB0eXBlXHJcbiAgICAgICAgcmVzcG9uc2UuaGVhZGVyKCdDb250ZW50LVR5cGUnLCByZXZlcnNlZE1pbWVbdHlwZV0gfHwgJ2ltYWdlL3BuZycpO1xyXG5cclxuICAgICAgICAvLyBEZWNpZGUgd2hldGhlciB0byBkb3dubG9hZCBvciBub3QgY2hhcnQgZmlsZVxyXG4gICAgICAgIGlmICghbm9Eb3dubG9hZCkge1xyXG4gICAgICAgICAgcmVzcG9uc2UuYXR0YWNobWVudChvdXRmaWxlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIFNWRywgcmV0dXJuIHBsYWluIGNvbnRlbnQsIG90aGVyd2lzZSBhIGI2NCBzdHJpbmcgZnJvbSBhIGJ1ZmZlclxyXG4gICAgICAgIHJldHVybiB0eXBlID09PSAnc3ZnJ1xyXG4gICAgICAgICAgPyByZXNwb25zZS5zZW5kKGRhdGEucmVzdWx0KVxyXG4gICAgICAgICAgOiByZXNwb25zZS5zZW5kKEJ1ZmZlci5mcm9tKGRhdGEucmVzdWx0LCAnYmFzZTY0JykpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgcmV0dXJuIG5leHQoZXJyb3IpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHMgdGhlIGBleHBvcnRgIHJvdXRlcy5cclxuICpcclxuICogQGZ1bmN0aW9uIGV4cG9ydFJvdXRlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge0V4cHJlc3N9IGFwcCAtIFRoZSBFeHByZXNzIGFwcCBpbnN0YW5jZS5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4cG9ydFJvdXRlcyhhcHApIHtcclxuICAvKipcclxuICAgKiBBZGRzIHRoZSBQT1NUICcvJyAtIEEgcm91dGUgZm9yIGhhbmRsaW5nIFBPU1QgcmVxdWVzdHMgYXQgdGhlIHJvb3RcclxuICAgKiBlbmRwb2ludC5cclxuICAgKi9cclxuICBhcHAucG9zdCgnLycsIHJlcXVlc3RFeHBvcnQpO1xyXG5cclxuICAvKipcclxuICAgKiBBZGRzIHRoZSBQT1NUICcvOmZpbGVuYW1lJyAtIEEgcm91dGUgZm9yIGhhbmRsaW5nIFBPU1QgcmVxdWVzdHMgd2l0aFxyXG4gICAqIGEgc3BlY2lmaWVkIGZpbGVuYW1lIHBhcmFtZXRlci5cclxuICAgKi9cclxuICBhcHAucG9zdCgnLzpmaWxlbmFtZScsIHJlcXVlc3RFeHBvcnQpO1xyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBEZWZpbmVzIGFuIEV4cHJlc3Mgcm91dGUgZm9yIHNlcnZlciBoZWFsdGggbW9uaXRvcmluZywgaW5jbHVkaW5nXHJcbiAqIHVwdGltZSwgc3VjY2VzcyByYXRlcywgYW5kIG90aGVyIHNlcnZlciBzdGF0aXN0aWNzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJztcclxuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xyXG5cclxuaW1wb3J0IHsgZ2V0SGNWZXJzaW9uIH0gZnJvbSAnLi4vLi4vY2FjaGUuanMnO1xyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuLi8uLi9sb2dnZXIuanMnO1xyXG5pbXBvcnQgeyBnZXRQb29sSW5mb0pTT04sIGdldFBvb2xTdGF0cyB9IGZyb20gJy4uLy4uL3Bvb2wuanMnO1xyXG5pbXBvcnQgeyBhZGRUaW1lciB9IGZyb20gJy4uLy4uL3RpbWVyLmpzJztcclxuaW1wb3J0IHsgX19kaXJuYW1lLCBnZXROZXdEYXRlVGltZSB9IGZyb20gJy4uLy4uL3V0aWxzLmpzJztcclxuXHJcbi8vIFNldCB0aGUgc3RhcnQgZGF0ZSBvZiB0aGUgc2VydmVyXHJcbmNvbnN0IHNlcnZlclN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XHJcblxyXG4vLyBHZXQgdGhlIGBwYWNrYWdlLmpzb25gIGNvbnRlbnRcclxuY29uc3QgcGFja2FnZUZpbGUgPSBKU09OLnBhcnNlKFxyXG4gIHJlYWRGaWxlU3luYyhqb2luKF9fZGlybmFtZSwgJ3BhY2thZ2UuanNvbicpLCAndXRmOCcpXHJcbik7XHJcblxyXG4vLyBBbiBhcnJheSBmb3Igc3VjY2VzcyByYXRlIHJhdGlvc1xyXG5jb25zdCBzdWNjZXNzUmF0ZXMgPSBbXTtcclxuXHJcbi8vIFJlY29yZCBldmVyeSBtaW51dGVcclxuY29uc3QgcmVjb3JkSW50ZXJ2YWwgPSA2MCAqIDEwMDA7XHJcblxyXG4vLyAzMCBtaW51dGVzXHJcbmNvbnN0IHdpbmRvd1NpemUgPSAzMDtcclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIG1vdmluZyBhdmVyYWdlIGluZGljYXRvciBiYXNlZCBvbiB0aGUgZGF0YSBmcm9tIHRoZSBgc3VjY2Vzc1JhdGVzYFxyXG4gKiBhcnJheS5cclxuICpcclxuICogQGZ1bmN0aW9uIF9jYWxjdWxhdGVNb3ZpbmdBdmVyYWdlXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbW92aW5nIGF2ZXJhZ2UgZm9yIHN1Y2Nlc3MgcmF0aW8gb2YgdGhlIHNlcnZlciBleHBvcnRzLlxyXG4gKi9cclxuZnVuY3Rpb24gX2NhbGN1bGF0ZU1vdmluZ0F2ZXJhZ2UoKSB7XHJcbiAgcmV0dXJuIHN1Y2Nlc3NSYXRlcy5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKSAvIHN1Y2Nlc3NSYXRlcy5sZW5ndGg7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdGFydHMgdGhlIGludGVydmFsIHJlc3BvbnNpYmxlIGZvciBjYWxjdWxhdGluZyBjdXJyZW50IHN1Y2Nlc3MgcmF0ZSByYXRpb1xyXG4gKiBhbmQgY29sbGVjdHMgcmVjb3JkcyB0byB0aGUgYHN1Y2Nlc3NSYXRlc2AgYXJyYXkuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBfc3RhcnRTdWNjZXNzUmF0ZVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Tm9kZUpTLlRpbWVvdXR9IElkIG9mIGFuIGludGVydmFsLlxyXG4gKi9cclxuZnVuY3Rpb24gX3N0YXJ0U3VjY2Vzc1JhdGUoKSB7XHJcbiAgcmV0dXJuIHNldEludGVydmFsKCgpID0+IHtcclxuICAgIGNvbnN0IHN0YXRzID0gZ2V0UG9vbFN0YXRzKCk7XHJcbiAgICBjb25zdCBzdWNjZXNzUmF0aW8gPVxyXG4gICAgICBzdGF0cy5leHBvcnRzQXR0ZW1wdGVkID09PSAwXHJcbiAgICAgICAgPyAxXHJcbiAgICAgICAgOiAoc3RhdHMuZXhwb3J0c1BlcmZvcm1lZCAvIHN0YXRzLmV4cG9ydHNBdHRlbXB0ZWQpICogMTAwO1xyXG5cclxuICAgIHN1Y2Nlc3NSYXRlcy5wdXNoKHN1Y2Nlc3NSYXRpbyk7XHJcbiAgICBpZiAoc3VjY2Vzc1JhdGVzLmxlbmd0aCA+IHdpbmRvd1NpemUpIHtcclxuICAgICAgc3VjY2Vzc1JhdGVzLnNoaWZ0KCk7XHJcbiAgICB9XHJcbiAgfSwgcmVjb3JkSW50ZXJ2YWwpO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcyB0aGUgYGhlYWx0aGAgcm91dGVzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gaGVhbHRoUm91dGVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7RXhwcmVzc30gYXBwIC0gVGhlIEV4cHJlc3MgYXBwIGluc3RhbmNlLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGVhbHRoUm91dGVzKGFwcCkge1xyXG4gIC8vIFN0YXJ0IHByb2Nlc3Npbmcgc3VjY2VzcyByYXRlIHJhdGlvIGludGVydmFsIGFuZCBzYXZlIGl0cyBpZCB0byB0aGUgYXJyYXlcclxuICAvLyBmb3IgdGhlIGdyYWNlZnVsIGNsZWFyaW5nIG9uIHNodXRkb3duIHdpdGggaW5qZWN0ZWQgYGFkZFRpbWVyYCBmdW50aW9uXHJcbiAgYWRkVGltZXIoX3N0YXJ0U3VjY2Vzc1JhdGUoKSk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZHMgdGhlIEdFVCAnL2hlYWx0aCcgLSBBIHJvdXRlIGZvciBnZXR0aW5nIHRoZSBiYXNpYyBzdGF0cyBvZiB0aGUgc2VydmVyLlxyXG4gICAqL1xyXG4gIGFwcC5nZXQoJy9oZWFsdGgnLCAocmVxdWVzdCwgcmVzcG9uc2UsIG5leHQpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGxvZyg0LCAnW2hlYWx0aF0gUmV0dXJuaW5nIHNlcnZlciBoZWFsdGguJyk7XHJcblxyXG4gICAgICBjb25zdCBzdGF0cyA9IGdldFBvb2xTdGF0cygpO1xyXG4gICAgICBjb25zdCBwZXJpb2QgPSBzdWNjZXNzUmF0ZXMubGVuZ3RoO1xyXG4gICAgICBjb25zdCBtb3ZpbmdBdmVyYWdlID0gX2NhbGN1bGF0ZU1vdmluZ0F2ZXJhZ2UoKTtcclxuXHJcbiAgICAgIC8vIFNlbmQgdGhlIHNlcnZlcidzIHN0YXRpc3RpY3NcclxuICAgICAgcmVzcG9uc2Uuc2VuZCh7XHJcbiAgICAgICAgLy8gU3RhdHVzIGFuZCB0aW1lc1xyXG4gICAgICAgIHN0YXR1czogJ09LJyxcclxuICAgICAgICBib290VGltZTogc2VydmVyU3RhcnRUaW1lLFxyXG4gICAgICAgIHVwdGltZTogYCR7TWF0aC5mbG9vcigoZ2V0TmV3RGF0ZVRpbWUoKSAtIHNlcnZlclN0YXJ0VGltZS5nZXRUaW1lKCkpIC8gMTAwMCAvIDYwKX0gbWludXRlc2AsXHJcblxyXG4gICAgICAgIC8vIFZlcnNpb25zXHJcbiAgICAgICAgc2VydmVyVmVyc2lvbjogcGFja2FnZUZpbGUudmVyc2lvbixcclxuICAgICAgICBoaWdoY2hhcnRzVmVyc2lvbjogZ2V0SGNWZXJzaW9uKCksXHJcblxyXG4gICAgICAgIC8vIEV4cG9ydHNcclxuICAgICAgICBhdmVyYWdlRXhwb3J0VGltZTogc3RhdHMudGltZVNwZW50QXZlcmFnZSxcclxuICAgICAgICBhdHRlbXB0ZWRFeHBvcnRzOiBzdGF0cy5leHBvcnRzQXR0ZW1wdGVkLFxyXG4gICAgICAgIHBlcmZvcm1lZEV4cG9ydHM6IHN0YXRzLmV4cG9ydHNQZXJmb3JtZWQsXHJcbiAgICAgICAgZmFpbGVkRXhwb3J0czogc3RhdHMuZXhwb3J0c0Ryb3BwZWQsXHJcbiAgICAgICAgc3VjZXNzUmF0aW86IChzdGF0cy5leHBvcnRzUGVyZm9ybWVkIC8gc3RhdHMuZXhwb3J0c0F0dGVtcHRlZCkgKiAxMDAsXHJcblxyXG4gICAgICAgIC8vIFBvb2xcclxuICAgICAgICBwb29sOiBnZXRQb29sSW5mb0pTT04oKSxcclxuXHJcbiAgICAgICAgLy8gTW92aW5nIGF2ZXJhZ2VcclxuICAgICAgICBwZXJpb2QsXHJcbiAgICAgICAgbW92aW5nQXZlcmFnZSxcclxuICAgICAgICBtZXNzYWdlOlxyXG4gICAgICAgICAgaXNOYU4obW92aW5nQXZlcmFnZSkgfHwgIXN1Y2Nlc3NSYXRlcy5sZW5ndGhcclxuICAgICAgICAgICAgPyAnVG9vIGVhcmx5IHRvIHJlcG9ydC4gTm8gZXhwb3J0cyBtYWRlIHlldC4gUGxlYXNlIGNoZWNrIGJhY2sgc29vbi4nXHJcbiAgICAgICAgICAgIDogYExhc3QgJHtwZXJpb2R9IG1pbnV0ZXMgaGFkIGEgc3VjY2VzcyByYXRlIG9mICR7bW92aW5nQXZlcmFnZS50b0ZpeGVkKDIpfSUuYCxcclxuXHJcbiAgICAgICAgLy8gU1ZHIGFuZCBKU09OIGV4cG9ydHNcclxuICAgICAgICBzdmdFeHBvcnRzOiBzdGF0cy5leHBvcnRzRnJvbVN2ZyxcclxuICAgICAgICBqc29uRXhwb3J0czogc3RhdHMuZXhwb3J0c0Zyb21PcHRpb25zLFxyXG4gICAgICAgIHN2Z0V4cG9ydHNBdHRlbXB0czogc3RhdHMuZXhwb3J0c0Zyb21TdmdBdHRlbXB0cyxcclxuICAgICAgICBqc29uRXhwb3J0c0F0dGVtcHRzOiBzdGF0cy5leHBvcnRzRnJvbU9wdGlvbnNBdHRlbXB0c1xyXG4gICAgICB9KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHJldHVybiBuZXh0KGVycm9yKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNSwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgRGVmaW5lcyBhbiBFeHByZXNzIHJvdXRlIGZvciBzZXJ2aW5nIHRoZSBVSSBmb3IgdGhlIGV4cG9ydCBzZXJ2ZXJcclxuICogd2hlbiBlbmFibGVkLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcclxuXHJcbmltcG9ydCB7IGdldE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb25maWcuanMnO1xyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuLi8uLi9sb2dnZXIuanMnO1xyXG5pbXBvcnQgeyBfX2Rpcm5hbWUgfSBmcm9tICcuLi8uLi91dGlscy5qcyc7XHJcblxyXG4vKipcclxuICogQWRkcyB0aGUgYHVpYCByb3V0ZXMuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiB1aVJvdXRlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge0V4cHJlc3N9IGFwcCAtIFRoZSBFeHByZXNzIGFwcCBpbnN0YW5jZS5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVpUm91dGVzKGFwcCkge1xyXG4gIC8vIEFkZCB0aGUgVUkgZW5kcG9pbnQgb25seSBpZiByZXF1aXJlZFxyXG4gIGlmIChnZXRPcHRpb25zKCkudWkuZW5hYmxlKSB7XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIEdFVCAnLycgLSBBIHJvdXRlIGZvciBhIFVJIHdoZW4gZW5hYmxlZCBvbiB0aGUgZXhwb3J0IHNlcnZlci5cclxuICAgICAqL1xyXG4gICAgYXBwLmdldChnZXRPcHRpb25zKCkudWkucm91dGUgfHwgJy8nLCAocmVxdWVzdCwgcmVzcG9uc2UsIG5leHQpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBsb2coNCwgJ1t1aV0gUmV0dXJuaW5nIFVJIGZvciB0aGUgZXhwb3J0LicpO1xyXG5cclxuICAgICAgICByZXNwb25zZS5zZW5kRmlsZShqb2luKF9fZGlybmFtZSwgJ3B1YmxpYycsICdpbmRleC5odG1sJyksIHtcclxuICAgICAgICAgIGFjY2VwdFJhbmdlczogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gbmV4dChlcnJvcik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNSwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgRGVmaW5lcyBhbiBFeHByZXNzIHJvdXRlIGZvciB1cGRhdGluZyB0aGUgSGlnaGNoYXJ0cyB2ZXJzaW9uXHJcbiAqIG9uIHRoZSBzZXJ2ZXIsIHdpdGggYXV0aGVudGljYXRpb24gYW5kIHZhbGlkYXRpb24uXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgZ2V0SGNWZXJzaW9uLCB1cGRhdGVIY1ZlcnNpb24gfSBmcm9tICcuLi8uLi9jYWNoZS5qcyc7XHJcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4uLy4uL2xvZ2dlci5qcyc7XHJcbmltcG9ydCB7IGVudnMgfSBmcm9tICcuLi8uLi92YWxpZGF0aW9uLmpzJztcclxuXHJcbmltcG9ydCBFeHBvcnRFcnJvciBmcm9tICcuLi8uLi9lcnJvcnMvRXhwb3J0RXJyb3IuanMnO1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgdGhlIGB2ZXJzaW9uX2NoYW5nZWAgcm91dGVzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gdmVyc2lvbkNoYW5nZVJvdXRlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge0V4cHJlc3N9IGFwcCAtIFRoZSBFeHByZXNzIGFwcCBpbnN0YW5jZS5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcnNpb25DaGFuZ2VSb3V0ZXMoYXBwKSB7XHJcbiAgLyoqXHJcbiAgICogQWRkcyB0aGUgUE9TVCAnL3ZlcnNpb25fY2hhbmdlLzpuZXdWZXJzaW9uJyAtIEEgcm91dGUgZm9yIGNoYW5naW5nXHJcbiAgICogdGhlIEhpZ2hjaGFydHMgdmVyc2lvbiBvbiB0aGUgc2VydmVyLlxyXG4gICAqL1xyXG4gIGFwcC5wb3N0KCcvdmVyc2lvbl9jaGFuZ2UvOm5ld1ZlcnNpb24nLCBhc3luYyAocmVxdWVzdCwgcmVzcG9uc2UsIG5leHQpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGxvZyg0LCAnW3ZlcnNpb25dIENoYW5naW5nIEhpZ2hjaGFydHMgdmVyc2lvbi4nKTtcclxuXHJcbiAgICAgIC8vIEdldCB0aGUgdG9rZW4gZGlyZWN0bHkgZnJvbSBlbnZzXHJcbiAgICAgIGNvbnN0IGFkbWluVG9rZW4gPSBlbnZzLkhJR0hDSEFSVFNfQURNSU5fVE9LRU47XHJcblxyXG4gICAgICAvLyBDaGVjayB0aGUgZXhpc3RlbmNlIG9mIHRoZSB0b2tlblxyXG4gICAgICBpZiAoIWFkbWluVG9rZW4gfHwgIWFkbWluVG9rZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgICAgJ1t2ZXJzaW9uXSBUaGUgc2VydmVyIGlzIG5vdCBjb25maWd1cmVkIHRvIHBlcmZvcm0gcnVuLXRpbWUgdmVyc2lvbiBjaGFuZ2VzOiBgSElHSENIQVJUU19BRE1JTl9UT0tFTmAgaXMgbm90IHNldC4nLFxyXG4gICAgICAgICAgNDAxXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gR2V0IHRoZSB0b2tlbiBmcm9tIHRoZSBoYy1hdXRoIGhlYWRlclxyXG4gICAgICBjb25zdCB0b2tlbiA9IHJlcXVlc3QuZ2V0KCdoYy1hdXRoJyk7XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiB0aGUgaGMtYXV0aCBoZWFkZXIgY29udGFpbiBhIGNvcnJlY3QgdG9rZW5cclxuICAgICAgaWYgKCF0b2tlbiB8fCB0b2tlbiAhPT0gYWRtaW5Ub2tlbikge1xyXG4gICAgICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgICAgICdbdmVyc2lvbl0gSW52YWxpZCBvciBtaXNzaW5nIHRva2VuOiBTZXQgdGhlIHRva2VuIGluIHRoZSBoYy1hdXRoIGhlYWRlci4nLFxyXG4gICAgICAgICAgNDAxXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gR2V0IHRoZSBuZXcgdmVyc2lvbiBmcm9tIHRoZSBwYXJhbXNcclxuICAgICAgY29uc3QgbmV3VmVyc2lvbiA9IHJlcXVlc3QucGFyYW1zLm5ld1ZlcnNpb247XHJcblxyXG4gICAgICAvLyBVcGRhdGUgdmVyc2lvblxyXG4gICAgICBpZiAobmV3VmVyc2lvbikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBhd2FpdCB1cGRhdGVIY1ZlcnNpb24obmV3VmVyc2lvbik7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgICAgICAgYFt2ZXJzaW9uXSBWZXJzaW9uIGNoYW5nZTogJHtlcnJvci5tZXNzYWdlfWAsXHJcbiAgICAgICAgICAgIDQwMFxyXG4gICAgICAgICAgKS5zZXRFcnJvcihlcnJvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTdWNjZXNzXHJcbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzKDIwMCkuc2VuZCh7XHJcbiAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXHJcbiAgICAgICAgICBoaWdoY2hhcnRzVmVyc2lvbjogZ2V0SGNWZXJzaW9uKCksXHJcbiAgICAgICAgICBtZXNzYWdlOiBgU3VjY2Vzc2Z1bGx5IHVwZGF0ZWQgSGlnaGNoYXJ0cyB0byB2ZXJzaW9uOiAke25ld1ZlcnNpb259LmBcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBObyB2ZXJzaW9uIHNwZWNpZmllZFxyXG4gICAgICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcignW3ZlcnNpb25dIE5vIG5ldyB2ZXJzaW9uIHN1cHBsaWVkLicsIDQwMCk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHJldHVybiBuZXh0KGVycm9yKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNSwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgQSBtb2R1bGUgdGhhdCBzZXRzIHVwIGFuZCBtYW5hZ2VzIEhUVFAgYW5kIEhUVFBTIHNlcnZlcnNcclxuICogZm9yIHRoZSBIaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXIuIEl0IGhhbmRsZXMgc2VydmVyIGluaXRpYWxpemF0aW9uLFxyXG4gKiBjb25maWd1cmF0aW9uLCBlcnJvciBoYW5kbGluZywgbWlkZGxld2FyZXMgc2V0dXAsIHJvdXRlIGRlZmluaXRpb24sIGFuZCByYXRlXHJcbiAqIGxpbWl0aW5nLiBUaGUgbW9kdWxlIGV4cG9ydHMgZnVuY3Rpb25zIHRvIHN0YXJ0LCBzdG9wLCBhbmQgbWFuYWdlIHNlcnZlclxyXG4gKiBpbnN0YW5jZXMsIGFzIHdlbGwgYXMgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIGRlZmluaW5nIHJvdXRlcyBhbmQgYXR0YWNoaW5nXHJcbiAqIG1pZGRsZXdhcmVzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJztcclxuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xyXG5cclxuaW1wb3J0IGNvcnMgZnJvbSAnY29ycyc7XHJcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgaHR0cCBmcm9tICdodHRwJztcclxuaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcclxuaW1wb3J0IG11bHRlciBmcm9tICdtdWx0ZXInO1xyXG5cclxuaW1wb3J0IHsgdXBkYXRlT3B0aW9ucyB9IGZyb20gJy4uL2NvbmZpZy5qcyc7XHJcbmltcG9ydCB7IGxvZywgbG9nV2l0aFN0YWNrIH0gZnJvbSAnLi4vbG9nZ2VyLmpzJztcclxuaW1wb3J0IHsgX19kaXJuYW1lLCBnZXRBYnNvbHV0ZVBhdGggfSBmcm9tICcuLi91dGlscy5qcyc7XHJcblxyXG5pbXBvcnQgeyB3ZWJTb2NrZXRJbml0IH0gZnJvbSAnLi93ZWJTb2NrZXQuanMnO1xyXG5cclxuaW1wb3J0IGVycm9yTWlkZGxld2FyZSBmcm9tICcuL21pZGRsZXdhcmVzL2Vycm9yLmpzJztcclxuaW1wb3J0IHJhdGVMaW1pdGluZ01pZGRsZXdhcmUgZnJvbSAnLi9taWRkbGV3YXJlcy9yYXRlTGltaXRpbmcuanMnO1xyXG5pbXBvcnQgdmFsaWRhdGlvbk1pZGRsZXdhcmUgZnJvbSAnLi9taWRkbGV3YXJlcy92YWxpZGF0aW9uLmpzJztcclxuXHJcbmltcG9ydCBleHBvcnRSb3V0ZXMgZnJvbSAnLi9yb3V0ZXMvZXhwb3J0LmpzJztcclxuaW1wb3J0IGhlYWx0aFJvdXRlcyBmcm9tICcuL3JvdXRlcy9oZWFsdGguanMnO1xyXG5pbXBvcnQgdWlSb3V0ZXMgZnJvbSAnLi9yb3V0ZXMvdWkuanMnO1xyXG5pbXBvcnQgdmVyc2lvbkNoYW5nZVJvdXRlcyBmcm9tICcuL3JvdXRlcy92ZXJzaW9uQ2hhbmdlLmpzJztcclxuXHJcbmltcG9ydCBFeHBvcnRFcnJvciBmcm9tICcuLi9lcnJvcnMvRXhwb3J0RXJyb3IuanMnO1xyXG5cclxuLy8gQXJyYXkgb2YgYW4gYWN0aXZlIHNlcnZlcnNcclxuY29uc3QgYWN0aXZlU2VydmVycyA9IG5ldyBNYXAoKTtcclxuXHJcbi8vIENyZWF0ZSBleHByZXNzIGFwcFxyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XHJcblxyXG4vKipcclxuICogU3RhcnRzIGFuIEhUVFAgYW5kL29yIEhUVFBTIHNlcnZlciBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgY29uZmlndXJhdGlvbi5cclxuICogVGhlIGBzZXJ2ZXJPcHRpb25zYCBvYmplY3QgY29udGFpbnMgc2VydmVyLXJlbGF0ZWQgcHJvcGVydGllcyAocmVmZXJcclxuICogdG8gdGhlIGBzZXJ2ZXJgIHNlY3Rpb24gaW4gdGhlIGAuL2xpYi9zY2hlbWFzL2NvbmZpZy5qc2AgZmlsZSBmb3IgZGV0YWlscykuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gc3RhcnRTZXJ2ZXJcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IFtzZXJ2ZXJPcHRpb25zPXt9XSAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nXHJcbiAqIGBzZXJ2ZXJgIG9wdGlvbnMuIFRoaXMgb2JqZWN0IG1heSBpbmNsdWRlIGEgcGFydGlhbCBvciBjb21wbGV0ZSBzZXRcclxuICogb2YgdGhlIGBzZXJ2ZXJgIG9wdGlvbnMuIElmIHRoZSBvcHRpb25zIGFyZSBwYXJ0aWFsLCBtaXNzaW5nIHZhbHVlcyB3aWxsXHJcbiAqIGRlZmF1bHQgdG8gdGhlIGN1cnJlbnQgZ2xvYmFsIGNvbmZpZ3VyYXRpb24uIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGFuIGVtcHR5XHJcbiAqIG9iamVjdC5cclxuICpcclxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHNlcnZlciBpcyBlaXRoZXJcclxuICogbm90IGVuYWJsZWQgb3Igbm8gdmFsaWQgRXhwcmVzcyBhcHAgaXMgZm91bmQsIHNpZ25hbGluZyB0aGUgZW5kIG9mIHRoZVxyXG4gKiBmdW5jdGlvbidzIGV4ZWN1dGlvbi5cclxuICpcclxuICogQHRocm93cyB7RXhwb3J0RXJyb3J9IFRocm93cyBhbiBgRXhwb3J0RXJyb3JgIGlmIHRoZSBzZXJ2ZXIgY2Fubm90XHJcbiAqIGJlIGNvbmZpZ3VyZWQgYW5kIHN0YXJ0ZWQuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRTZXJ2ZXIoc2VydmVyT3B0aW9ucyA9IHt9KSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIFVwZGF0ZSB0aGUgaW5zdGFuY2Ugb3B0aW9ucyBvYmplY3RcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB1cGRhdGVPcHRpb25zKHtcclxuICAgICAgc2VydmVyOiBzZXJ2ZXJPcHRpb25zXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBVc2UgdmFsaWRhdGVkIG9wdGlvbnNcclxuICAgIHNlcnZlck9wdGlvbnMgPSBvcHRpb25zLnNlcnZlcjtcclxuXHJcbiAgICAvLyBTdG9wIGlmIG5vdCBlbmFibGVkXHJcbiAgICBpZiAoIXNlcnZlck9wdGlvbnMuZW5hYmxlIHx8ICFhcHApIHtcclxuICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgICdbc2VydmVyXSBTZXJ2ZXIgY2Fubm90IGJlIHN0YXJ0ZWQgKG5vdCBlbmFibGVkIG9yIG5vIGNvcnJlY3QgRXhwcmVzcyBhcHAgZm91bmQpLicsXHJcbiAgICAgICAgNTAwXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVG9vIGJpZyBsaW1pdHMgbGVhZCB0byB0aW1lb3V0cyBpbiB0aGUgZXhwb3J0IHByb2Nlc3Mgd2hlblxyXG4gICAgLy8gdGhlIHJhc3Rlcml6YXRpb24gdGltZW91dCBpcyBzZXQgdG9vIGxvd1xyXG4gICAgY29uc3QgdXBsb2FkTGltaXRCeXRlcyA9IHNlcnZlck9wdGlvbnMudXBsb2FkTGltaXQgKiAxMDI0ICogMTAyNDtcclxuXHJcbiAgICAvLyBNZW1vcnkgc3RvcmFnZSBmb3IgbXVsdGVyIHBhY2thZ2VcclxuICAgIGNvbnN0IHN0b3JhZ2UgPSBtdWx0ZXIubWVtb3J5U3RvcmFnZSgpO1xyXG5cclxuICAgIC8vIEVuYWJsZSBwYXJzaW5nIG9mIGZvcm0gZGF0YSAoZmlsZXMpIHdpdGggbXVsdGVyIHBhY2thZ2VcclxuICAgIGNvbnN0IHVwbG9hZCA9IG11bHRlcih7XHJcbiAgICAgIHN0b3JhZ2UsXHJcbiAgICAgIGxpbWl0czoge1xyXG4gICAgICAgIGZpZWxkU2l6ZTogdXBsb2FkTGltaXRCeXRlc1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBEaXNhYmxlIHRoZSBYLVBvd2VyZWQtQnkgaGVhZGVyXHJcbiAgICBhcHAuZGlzYWJsZSgneC1wb3dlcmVkLWJ5Jyk7XHJcblxyXG4gICAgLy8gRW5hYmxlIENPUlMgc3VwcG9ydFxyXG4gICAgYXBwLnVzZShcclxuICAgICAgY29ycyh7XHJcbiAgICAgICAgbWV0aG9kczogWydQT1NUJywgJ0dFVCcsICdPUFRJT05TJ11cclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgLy8gR2V0dGluZyBhIGxvdCBvZiBgUmFuZ2VOb3RTYXRpc2ZpYWJsZUVycm9yYCBleGNlcHRpb25zIChldmVuIHRob3VnaCB0aGlzXHJcbiAgICAvLyBpcyBhIGRlcHJlY2F0ZWQgb3B0aW9ucywgbGV0J3MgdHJ5IHRvIHNldCBpdCB0byBmYWxzZSlcclxuICAgIGFwcC51c2UoKHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0KSA9PiB7XHJcbiAgICAgIHJlc3BvbnNlLnNldCgnQWNjZXB0LVJhbmdlcycsICdub25lJyk7XHJcbiAgICAgIG5leHQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEVuYWJsZSBib2R5IHBhcnNlciBmb3IgSlNPTiBkYXRhXHJcbiAgICBhcHAudXNlKFxyXG4gICAgICBleHByZXNzLmpzb24oe1xyXG4gICAgICAgIGxpbWl0OiB1cGxvYWRMaW1pdEJ5dGVzXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIC8vIEVuYWJsZSBib2R5IHBhcnNlciBmb3IgVVJMLWVuY29kZWQgZm9ybSBkYXRhXHJcbiAgICBhcHAudXNlKFxyXG4gICAgICBleHByZXNzLnVybGVuY29kZWQoe1xyXG4gICAgICAgIGV4dGVuZGVkOiB0cnVlLFxyXG4gICAgICAgIGxpbWl0OiB1cGxvYWRMaW1pdEJ5dGVzXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIC8vIFVzZSBvbmx5IG5vbi1maWxlIG11bHRpcGFydCBmb3JtIGZpZWxkc1xyXG4gICAgYXBwLnVzZSh1cGxvYWQubm9uZSgpKTtcclxuXHJcbiAgICAvLyBTZXQgdXAgc3RhdGljIGZvbGRlcidzIHJvdXRlXHJcbiAgICBhcHAudXNlKGV4cHJlc3Muc3RhdGljKGpvaW4oX19kaXJuYW1lLCAncHVibGljJykpKTtcclxuXHJcbiAgICAvLyBMaXN0ZW4gSFRUUCBzZXJ2ZXJcclxuICAgIGlmICghc2VydmVyT3B0aW9ucy5zc2wuZm9yY2UpIHtcclxuICAgICAgLy8gTWFpbiBzZXJ2ZXIgaW5zdGFuY2UgKEhUVFApXHJcbiAgICAgIGNvbnN0IGh0dHBTZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihhcHApO1xyXG5cclxuICAgICAgLy8gQXR0YWNoIGVycm9yIGhhbmRsZXJzIGFuZCBsaXN0ZW4gdG8gdGhlIHNlcnZlclxyXG4gICAgICBfYXR0YWNoU2VydmVyRXJyb3JIYW5kbGVycyhodHRwU2VydmVyKTtcclxuXHJcbiAgICAgIC8vIExpc3RlblxyXG4gICAgICBodHRwU2VydmVyLmxpc3RlbihzZXJ2ZXJPcHRpb25zLnBvcnQsIHNlcnZlck9wdGlvbnMuaG9zdCwgKCkgPT4ge1xyXG4gICAgICAgIC8vIFNhdmUgdGhlIHJlZmVyZW5jZSB0byBIVFRQIHNlcnZlclxyXG4gICAgICAgIGFjdGl2ZVNlcnZlcnMuc2V0KHNlcnZlck9wdGlvbnMucG9ydCwgaHR0cFNlcnZlcik7XHJcblxyXG4gICAgICAgIGxvZyhcclxuICAgICAgICAgIDMsXHJcbiAgICAgICAgICBgW3NlcnZlcl0gU3RhcnRlZCBIVFRQIHNlcnZlciBvbiAke3NlcnZlck9wdGlvbnMuaG9zdH06JHtzZXJ2ZXJPcHRpb25zLnBvcnR9LmBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAoYWN0aXZlU2VydmVycy5zaXplID09PSAxKSB7XHJcbiAgICAgICAgICAvLyBTdGFydCBhIFdlYlNvY2tldCBjb25uZWN0aW9uXHJcbiAgICAgICAgICB3ZWJTb2NrZXRJbml0KHsgLi4uaHR0cFNlcnZlci5hZGRyZXNzKCksIHByb3RvY29sOiAnaHR0cCcgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBMaXN0ZW4gSFRUUFMgc2VydmVyXHJcbiAgICBpZiAoc2VydmVyT3B0aW9ucy5zc2wuZW5hYmxlKSB7XHJcbiAgICAgIC8vIFNldCB1cCBhbiBTU0wgc2VydmVyIGFsc29cclxuICAgICAgbGV0IGtleSwgY2VydDtcclxuXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgLy8gR2V0IHRoZSBTU0wga2V5XHJcbiAgICAgICAga2V5ID0gcmVhZEZpbGVTeW5jKFxyXG4gICAgICAgICAgam9pbihnZXRBYnNvbHV0ZVBhdGgoc2VydmVyT3B0aW9ucy5zc2wuY2VydFBhdGgpLCAnc2VydmVyLmtleScpLFxyXG4gICAgICAgICAgJ3V0ZjgnXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBTU0wgY2VydGlmaWNhdGVcclxuICAgICAgICBjZXJ0ID0gcmVhZEZpbGVTeW5jKFxyXG4gICAgICAgICAgam9pbihnZXRBYnNvbHV0ZVBhdGgoc2VydmVyT3B0aW9ucy5zc2wuY2VydFBhdGgpLCAnc2VydmVyLmNydCcpLFxyXG4gICAgICAgICAgJ3V0ZjgnXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBsb2coXHJcbiAgICAgICAgICAyLFxyXG4gICAgICAgICAgYFtzZXJ2ZXJdIFVuYWJsZSB0byBsb2FkIGtleS9jZXJ0aWZpY2F0ZSBmcm9tIHRoZSAnJHtzZXJ2ZXJPcHRpb25zLnNzbC5jZXJ0UGF0aH0nIHBhdGguIENvdWxkIG5vdCBydW4gc2VjdXJlZCBsYXllciBzZXJ2ZXIuYFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChrZXkgJiYgY2VydCkge1xyXG4gICAgICAgIC8vIE1haW4gc2VydmVyIGluc3RhbmNlIChIVFRQUylcclxuICAgICAgICBjb25zdCBodHRwc1NlcnZlciA9IGh0dHBzLmNyZWF0ZVNlcnZlcih7IGtleSwgY2VydCB9LCBhcHApO1xyXG5cclxuICAgICAgICAvLyBBdHRhY2ggZXJyb3IgaGFuZGxlcnMgYW5kIGxpc3RlbiB0byB0aGUgc2VydmVyXHJcbiAgICAgICAgX2F0dGFjaFNlcnZlckVycm9ySGFuZGxlcnMoaHR0cHNTZXJ2ZXIpO1xyXG5cclxuICAgICAgICAvLyBMaXN0ZW5cclxuICAgICAgICBodHRwc1NlcnZlci5saXN0ZW4oc2VydmVyT3B0aW9ucy5zc2wucG9ydCwgc2VydmVyT3B0aW9ucy5ob3N0LCAoKSA9PiB7XHJcbiAgICAgICAgICAvLyBTYXZlIHRoZSByZWZlcmVuY2UgdG8gSFRUUFMgc2VydmVyXHJcbiAgICAgICAgICBhY3RpdmVTZXJ2ZXJzLnNldChzZXJ2ZXJPcHRpb25zLnNzbC5wb3J0LCBodHRwc1NlcnZlcik7XHJcblxyXG4gICAgICAgICAgbG9nKFxyXG4gICAgICAgICAgICAzLFxyXG4gICAgICAgICAgICBgW3NlcnZlcl0gU3RhcnRlZCBIVFRQUyBzZXJ2ZXIgb24gJHtzZXJ2ZXJPcHRpb25zLmhvc3R9OiR7c2VydmVyT3B0aW9ucy5zc2wucG9ydH0uYFxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICBpZiAoYWN0aXZlU2VydmVycy5zaXplID09PSAxKSB7XHJcbiAgICAgICAgICAgIC8vIFN0YXJ0IGEgV2ViU29ja2V0IGNvbm5lY3Rpb25cclxuICAgICAgICAgICAgd2ViU29ja2V0SW5pdCh7IC4uLmh0dHBzU2VydmVyLmFkZHJlc3MoKSwgcHJvdG9jb2w6ICdodHRwcycgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBTZXQgdXAgdGhlIHJhdGUgbGltaXRlclxyXG4gICAgcmF0ZUxpbWl0aW5nTWlkZGxld2FyZShhcHAsIHNlcnZlck9wdGlvbnMucmF0ZUxpbWl0aW5nKTtcclxuXHJcbiAgICAvLyBTZXQgdXAgdGhlIHZhbGlkYXRpb24gaGFuZGxlclxyXG4gICAgdmFsaWRhdGlvbk1pZGRsZXdhcmUoYXBwKTtcclxuXHJcbiAgICAvLyBTZXQgdXAgcm91dGVzXHJcbiAgICBleHBvcnRSb3V0ZXMoYXBwKTtcclxuICAgIGhlYWx0aFJvdXRlcyhhcHApO1xyXG4gICAgdWlSb3V0ZXMoYXBwKTtcclxuICAgIHZlcnNpb25DaGFuZ2VSb3V0ZXMoYXBwKTtcclxuXHJcbiAgICAvLyBTZXQgdXAgdGhlIGNlbnRyYWxpemVkIGVycm9yIGhhbmRsZXJcclxuICAgIGVycm9yTWlkZGxld2FyZShhcHApO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICdbc2VydmVyXSBDb3VsZCBub3QgY29uZmlndXJlIGFuZCBzdGFydCB0aGUgc2VydmVyLicsXHJcbiAgICAgIDUwMFxyXG4gICAgKS5zZXRFcnJvcihlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ2xvc2VzIGFsbCBzZXJ2ZXJzIGFzc29jaWF0ZWQgd2l0aCBFeHByZXNzIGFwcCBpbnN0YW5jZS5cclxuICpcclxuICogQGZ1bmN0aW9uIGNsb3NlU2VydmVyc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlU2VydmVycygpIHtcclxuICAvLyBDaGVjayBpZiB0aGVyZSBhcmUgc2VydmVycyB3b3JraW5nXHJcbiAgaWYgKGFjdGl2ZVNlcnZlcnMuc2l6ZSA+IDApIHtcclxuICAgIGxvZyg0LCBgW3NlcnZlcl0gQ2xvc2luZyBhbGwgc2VydmVycy5gKTtcclxuXHJcbiAgICAvLyBDbG9zZSBlYWNoIG9uZSBvZiBzZXJ2ZXJzXHJcbiAgICBmb3IgKGNvbnN0IFtwb3J0LCBzZXJ2ZXJdIG9mIGFjdGl2ZVNlcnZlcnMpIHtcclxuICAgICAgc2VydmVyLmNsb3NlKCgpID0+IHtcclxuICAgICAgICBhY3RpdmVTZXJ2ZXJzLmRlbGV0ZShwb3J0KTtcclxuICAgICAgICBsb2coNCwgYFtzZXJ2ZXJdIENsb3NlZCBzZXJ2ZXIgb24gcG9ydDogJHtwb3J0fS5gKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogR2V0IGFsbCBzZXJ2ZXJzIGFzc29jaWF0ZWQgd2l0aCBFeHByZXNzIGFwcCBpbnN0YW5jZS5cclxuICpcclxuICogQGZ1bmN0aW9uIGdldFNlcnZlcnNcclxuICpcclxuICogQHJldHVybnMge0FycmF5PE9iamVjdD59IFNlcnZlcnMgYXNzb2NpYXRlZCB3aXRoIEV4cHJlc3MgYXBwIGluc3RhbmNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlcnZlcnMoKSB7XHJcbiAgcmV0dXJuIGFjdGl2ZVNlcnZlcnM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIEV4cHJlc3MgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBnZXRFeHByZXNzXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtFeHByZXNzfSBUaGUgRXhwcmVzcyBpbnN0YW5jZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHByZXNzKCkge1xyXG4gIHJldHVybiBleHByZXNzO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBFeHByZXNzIGFwcCBpbnN0YW5jZS5cclxuICpcclxuICogQGZ1bmN0aW9uIGdldEFwcFxyXG4gKlxyXG4gKiBAcmV0dXJucyB7RXhwcmVzc30gVGhlIEV4cHJlc3MgYXBwIGluc3RhbmNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFwcCgpIHtcclxuICByZXR1cm4gYXBwO1xyXG59XHJcblxyXG4vKipcclxuICogRW5hYmxlIHJhdGUgbGltaXRpbmcgZm9yIHRoZSBzZXJ2ZXIuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBlbmFibGVSYXRlTGltaXRpbmdcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHJhdGVMaW1pdGluZ09wdGlvbnMgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbmluZ1xyXG4gKiBgcmF0ZUxpbWl0aW5nYCBvcHRpb25zLiBUaGlzIG9iamVjdCBtYXkgaW5jbHVkZSBhIHBhcnRpYWwgb3IgY29tcGxldGUgc2V0XHJcbiAqIG9mIHRoZSBgcmF0ZUxpbWl0aW5nYCBvcHRpb25zLiBJZiB0aGUgb3B0aW9ucyBhcmUgcGFydGlhbCwgbWlzc2luZyB2YWx1ZXNcclxuICogd2lsbCBkZWZhdWx0IHRvIHRoZSBjdXJyZW50IGdsb2JhbCBjb25maWd1cmF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZVJhdGVMaW1pdGluZyhyYXRlTGltaXRpbmdPcHRpb25zKSB7XHJcbiAgLy8gVXBkYXRlIHRoZSBpbnN0YW5jZSBvcHRpb25zIG9iamVjdFxyXG4gIGNvbnN0IG9wdGlvbnMgPSB1cGRhdGVPcHRpb25zKHtcclxuICAgIHNlcnZlcjoge1xyXG4gICAgICByYXRlTGltaXRpbmc6IHJhdGVMaW1pdGluZ09wdGlvbnNcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy8gU2V0IHRoZSByYXRlIGxpbWl0aW5nIG9wdGlvbnNcclxuICByYXRlTGltaXRpbmdNaWRkbGV3YXJlKGFwcCwgb3B0aW9ucy5zZXJ2ZXIucmF0ZUxpbWl0aW5nT3B0aW9ucyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBcHBseSBtaWRkbGV3YXJlKHMpIHRvIGEgc3BlY2lmaWMgcGF0aC5cclxuICpcclxuICogQGZ1bmN0aW9uIHVzZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHdoaWNoIHRoZSBtaWRkbGV3YXJlKHMpIHNob3VsZCBiZSBhcHBsaWVkLlxyXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyAtIFRoZSBtaWRkbGV3YXJlIGZ1bmN0aW9uKHMpIHRvIGJlIGFwcGxpZWQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlKHBhdGgsIC4uLm1pZGRsZXdhcmVzKSB7XHJcbiAgYXBwLnVzZShwYXRoLCAuLi5taWRkbGV3YXJlcyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdXAgYSByb3V0ZSB3aXRoIEdFVCBtZXRob2QgYW5kIGFwcGx5IG1pZGRsZXdhcmUocykuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBnZXRcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCB0byB3aGljaCB0aGUgbWlkZGxld2FyZShzKSBzaG91bGQgYmUgYXBwbGllZC5cclxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgLSBUaGUgbWlkZGxld2FyZSBmdW5jdGlvbihzKSB0byBiZSBhcHBsaWVkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldChwYXRoLCAuLi5taWRkbGV3YXJlcykge1xyXG4gIGFwcC5nZXQocGF0aCwgLi4ubWlkZGxld2FyZXMpO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IHVwIGEgcm91dGUgd2l0aCBQT1NUIG1ldGhvZCBhbmQgYXBwbHkgbWlkZGxld2FyZShzKS5cclxuICpcclxuICogQGZ1bmN0aW9uIHBvc3RcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCB0byB3aGljaCB0aGUgbWlkZGxld2FyZShzKSBzaG91bGQgYmUgYXBwbGllZC5cclxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgLSBUaGUgbWlkZGxld2FyZSBmdW5jdGlvbihzKSB0byBiZSBhcHBsaWVkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBvc3QocGF0aCwgLi4ubWlkZGxld2FyZXMpIHtcclxuICBhcHAucG9zdChwYXRoLCAuLi5taWRkbGV3YXJlcyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBdHRhY2ggZXJyb3IgaGFuZGxlcnMgdG8gdGhlIHNlcnZlci5cclxuICpcclxuICogQGZ1bmN0aW9uIF9hdHRhY2hTZXJ2ZXJFcnJvckhhbmRsZXJzXHJcbiAqXHJcbiAqIEBwYXJhbSB7KGh0dHAuU2VydmVyfGh0dHBzLlNlcnZlcil9IHNlcnZlciAtIFRoZSBIVFRQL0hUVFBTIHNlcnZlciBpbnN0YW5jZS5cclxuICovXHJcbmZ1bmN0aW9uIF9hdHRhY2hTZXJ2ZXJFcnJvckhhbmRsZXJzKHNlcnZlcikge1xyXG4gIHNlcnZlci5vbignY2xpZW50RXJyb3InLCAoZXJyb3IsIHNvY2tldCkgPT4ge1xyXG4gICAgbG9nV2l0aFN0YWNrKFxyXG4gICAgICAxLFxyXG4gICAgICBlcnJvcixcclxuICAgICAgYFtzZXJ2ZXJdIENsaWVudCBlcnJvcjogJHtlcnJvci5tZXNzYWdlfSwgZGVzdHJveWluZyBzb2NrZXQuYFxyXG4gICAgKTtcclxuICAgIHNvY2tldC5kZXN0cm95KCk7XHJcbiAgfSk7XHJcblxyXG4gIHNlcnZlci5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcclxuICAgIGxvZ1dpdGhTdGFjaygxLCBlcnJvciwgYFtzZXJ2ZXJdIFNlcnZlciBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gIH0pO1xyXG5cclxuICBzZXJ2ZXIub24oJ2Nvbm5lY3Rpb24nLCAoc29ja2V0KSA9PiB7XHJcbiAgICBzb2NrZXQub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XHJcbiAgICAgIGxvZ1dpdGhTdGFjaygxLCBlcnJvciwgYFtzZXJ2ZXJdIFNvY2tldCBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBzdGFydFNlcnZlcixcclxuICBjbG9zZVNlcnZlcnMsXHJcbiAgZ2V0U2VydmVycyxcclxuICBnZXRFeHByZXNzLFxyXG4gIGdldEFwcCxcclxuICBlbmFibGVSYXRlTGltaXRpbmcsXHJcbiAgdXNlLFxyXG4gIGdldCxcclxuICBwb3N0XHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBIYW5kbGVzIGdyYWNlZnVsIHNodXRkb3duIG9mIHRoZSBIaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXIsIGVuc3VyaW5nXHJcbiAqIHByb3BlciBjbGVhbnVwIG9mIHJlc291cmNlcyBzdWNoIGFzIGJyb3dzZXIsIHBhZ2VzLCBzZXJ2ZXJzLCBhbmQgdGltZXJzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGtpbGxQb29sIH0gZnJvbSAnLi9wb29sLmpzJztcclxuaW1wb3J0IHsgY2xlYXJBbGxUaW1lcnMgfSBmcm9tICcuL3RpbWVyLmpzJztcclxuXHJcbmltcG9ydCB7IGNsb3NlU2VydmVycyB9IGZyb20gJy4vc2VydmVyL3NlcnZlci5qcyc7XHJcbmltcG9ydCB7IHRlcm1pbmF0ZUNsaWVudHMgfSBmcm9tICcuL3NlcnZlci93ZWJTb2NrZXQuanMnO1xyXG5cclxuLyoqXHJcbiAqIFBlcmZvcm1zIGNsZWFudXAgb3BlcmF0aW9ucyB0byBlbnN1cmUgYSBncmFjZWZ1bCBzaHV0ZG93biBvZiB0aGUgcHJvY2Vzcy5cclxuICogVGhpcyBpbmNsdWRlcyBjbGVhcmluZyBhbGwgcmVnaXN0ZXJlZCB0aW1lb3V0cy9pbnRlcnZhbHMsIGNsb3NpbmcgYWN0aXZlXHJcbiAqIHNlcnZlcnMsIHRlcm1pbmF0aW5nIHJlc291cmNlcyAocGFnZXMpIG9mIHRoZSBwb29sLCBwb29sIGl0c2VsZiwgYW5kIGNsb3NpbmdcclxuICogdGhlIGJyb3dzZXIuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBzaHV0ZG93bkNsZWFuVXBcclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ9IFtleGl0Q29kZT0wXSAtIFRoZSBleGl0IGNvZGUgdG8gdXNlIHdpdGggYHByb2Nlc3MuZXhpdCgpYC5cclxuICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgYDBgLlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNodXRkb3duQ2xlYW5VcChleGl0Q29kZSA9IDApIHtcclxuICAvLyBBd2FpdCBmcmVlaW5nIGFsbCByZXNvdXJjZXNcclxuICBhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQoW1xyXG4gICAgLy8gQ2xlYXIgYWxsIG9uZ29pbmcgaW50ZXJ2YWxzXHJcbiAgICBjbGVhckFsbFRpbWVycygpLFxyXG5cclxuICAgIC8vIFRlcm1pbmF0ZSBhbGwgY29ubmVjdGVkIFdlYlNvY2tldCBjbGllbnRzXHJcbiAgICB0ZXJtaW5hdGVDbGllbnRzKCksXHJcblxyXG4gICAgLy8gR2V0IGF2YWlsYWJsZSBzZXJ2ZXIgaW5zdGFuY2VzIChIVFRQL0hUVFBTKSBhbmQgY2xvc2UgdGhlbVxyXG4gICAgY2xvc2VTZXJ2ZXJzKCksXHJcblxyXG4gICAgLy8gQ2xvc2UgYW4gYWN0aXZlIHBvb2wgYWxvbmcgd2l0aCBpdHMgd29ya2VycyBhbmQgdGhlIGJyb3dzZXIgaW5zdGFuY2VcclxuICAgIGtpbGxQb29sKClcclxuICBdKTtcclxuXHJcbiAgLy8gRXhpdCBwcm9jZXNzIHdpdGggYSBjb3JyZWN0IGNvZGVcclxuICBwcm9jZXNzLmV4aXQoZXhpdENvZGUpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgc2h1dGRvd25DbGVhblVwXHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBUaGlzIGNvcmUgbW9kdWxlIGluaXRpYWxpemVzIGFuZCBtYW5hZ2VzIHRoZSBIaWdoY2hhcnRzIEV4cG9ydFxyXG4gKiBTZXJ2ZXIuIFRoZSBtYWluIGBpbml0RXhwb3J0YCBmdW5jdGlvbiBoYW5kbGVzIGxvZ2dpbmcsIHNjcmlwdCBjYWNoaW5nLFxyXG4gKiByZXNvdXJjZSBwb29saW5nLCBicm93c2VyIHN0YXJ0dXAsIGFuZCBlbnN1cmVzIGdyYWNlZnVsIHByb2Nlc3MgY2xlYW51cFxyXG4gKiBvbiBleGl0LiBBZGRpdGlvbmFsbHksIGl0IHByb3ZpZGVzIEFQSSBmdW5jdGlvbnMgZm9yIHVzaW5nIGl0IGFzIGEgTm9kZS5qc1xyXG4gKiBtb2R1bGUsIG9mZmVyaW5nIGZ1bmN0aW9uYWxpdGllcyBmb3IgcHJvY2Vzc2luZyBvcHRpb25zLCBjb25maWd1cmluZ1xyXG4gKiBhbmQgcGVyZm9ybWluZyBleHBvcnRzLCBhbmQgc2V0dGluZyB1cCBzZXJ2ZXIuXHJcbiAqL1xyXG5cclxuaW1wb3J0ICdjb2xvcnMnO1xyXG5cclxuaW1wb3J0IHsgY2hlY2tDYWNoZSB9IGZyb20gJy4vY2FjaGUuanMnO1xyXG5pbXBvcnQge1xyXG4gIGJhdGNoRXhwb3J0LFxyXG4gIHNpbmdsZUV4cG9ydCxcclxuICBzdGFydEV4cG9ydCxcclxuICBzZXRBbGxvd0NvZGVFeGVjdXRpb25cclxufSBmcm9tICcuL2NoYXJ0LmpzJztcclxuaW1wb3J0IHtcclxuICBnZXRPcHRpb25zLFxyXG4gIHVwZGF0ZU9wdGlvbnMsXHJcbiAgbWFwVG9OZXdPcHRpb25zLFxyXG4gIHZhbGlkYXRlT3B0aW9uLFxyXG4gIHZhbGlkYXRlT3B0aW9uc1xyXG59IGZyb20gJy4vY29uZmlnLmpzJztcclxuaW1wb3J0IHtcclxuICBsb2csXHJcbiAgbG9nV2l0aFN0YWNrLFxyXG4gIGxvZ1pvZElzc3VlcyxcclxuICBpbml0TG9nZ2luZyxcclxuICBlbmFibGVDb25zb2xlTG9nZ2luZyxcclxuICBlbmFibGVGaWxlTG9nZ2luZyxcclxuICBzZXRMb2dMZXZlbFxyXG59IGZyb20gJy4vbG9nZ2VyLmpzJztcclxuaW1wb3J0IHsgaW5pdFBvb2wsIGtpbGxQb29sIH0gZnJvbSAnLi9wb29sLmpzJztcclxuaW1wb3J0IHsgc2h1dGRvd25DbGVhblVwIH0gZnJvbSAnLi9yZXNvdXJjZVJlbGVhc2UuanMnO1xyXG5cclxuaW1wb3J0IHNlcnZlciBmcm9tICcuL3NlcnZlci9zZXJ2ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemVzIHRoZSBleHBvcnQgcHJvY2Vzcy4gVGFza3Mgc3VjaCBhcyBjb25maWd1cmluZyBsb2dnaW5nLCBjaGVja2luZ1xyXG4gKiB0aGUgY2FjaGUgYW5kIHNvdXJjZXMsIGFuZCBpbml0aWFsaXppbmcgdGhlIHJlc291cmNlIHBvb2wgb2NjdXIgZHVyaW5nIHRoaXNcclxuICogc3RhZ2UuXHJcbiAqXHJcbiAqIFRoaXMgZnVuY3Rpb24gbXVzdCBiZSBjYWxsZWQgYmVmb3JlIGF0dGVtcHRpbmcgdG8gZXhwb3J0IGNoYXJ0cyBvciBzZXRcclxuICogdXAgYSBzZXJ2ZXIuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gaW5pdEV4cG9ydFxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gW2luaXRPcHRpb25zPXt9XSAtIFRoZSBgaW5pdE9wdGlvbnNgIG9iamVjdCwgd2hpY2ggbWF5XHJcbiAqIGJlIGEgcGFydGlhbCBvciBjb21wbGV0ZSBzZXQgb2Ygb3B0aW9ucy4gSWYgdGhlIG9wdGlvbnMgYXJlIHBhcnRpYWwsIG1pc3NpbmdcclxuICogdmFsdWVzIHdpbGwgZGVmYXVsdCB0byB0aGUgY3VycmVudCBnbG9iYWwgY29uZmlndXJhdGlvbi4gVGhlIGRlZmF1bHQgdmFsdWVcclxuICogaXMgYW4gZW1wdHkgb2JqZWN0LlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRFeHBvcnQoaW5pdE9wdGlvbnMgPSB7fSkge1xyXG4gIC8vIEluaXQsIHZhbGlkYXRlIGFuZCB1cGRhdGUgdGhlIG9wdGlvbnMgb2JqZWN0XHJcbiAgY29uc3Qgb3B0aW9ucyA9IHVwZGF0ZU9wdGlvbnMoaW5pdE9wdGlvbnMpO1xyXG5cclxuICAvLyBTZXQgdGhlIGBhbGxvd0NvZGVFeGVjdXRpb25gIHBlciBleHBvcnQgbW9kdWxlIHNjb3BlXHJcbiAgc2V0QWxsb3dDb2RlRXhlY3V0aW9uKG9wdGlvbnMuY3VzdG9tTG9naWMuYWxsb3dDb2RlRXhlY3V0aW9uKTtcclxuXHJcbiAgLy8gSW5pdCB0aGUgbG9nZ2luZ1xyXG4gIGluaXRMb2dnaW5nKG9wdGlvbnMubG9nZ2luZyk7XHJcblxyXG4gIC8vIEF0dGFjaCBwcm9jZXNzJyBleGl0IGxpc3RlbmVyc1xyXG4gIGlmIChvcHRpb25zLm90aGVyLmxpc3RlblRvUHJvY2Vzc0V4aXRzKSB7XHJcbiAgICBfYXR0YWNoUHJvY2Vzc0V4aXRMaXN0ZW5lcnMoKTtcclxuICB9XHJcblxyXG4gIC8vIENoZWNrIHRoZSBjdXJyZW50IHN0YXR1cyBvZiBjYWNoZVxyXG4gIGF3YWl0IGNoZWNrQ2FjaGUob3B0aW9ucy5oaWdoY2hhcnRzLCBvcHRpb25zLnNlcnZlci5wcm94eSk7XHJcblxyXG4gIC8vIEluaXQgdGhlIHBvb2xcclxuICBhd2FpdCBpbml0UG9vbChvcHRpb25zLnBvb2wsIG9wdGlvbnMucHVwcGV0ZWVyLmFyZ3MpO1xyXG59XHJcblxyXG4vKipcclxuICogQXR0YWNoZXMgZXhpdCBsaXN0ZW5lcnMgdG8gdGhlIHByb2Nlc3MsIGVuc3VyaW5nIHByb3BlciBjbGVhbnVwIG9mIHJlc291cmNlc1xyXG4gKiBhbmQgdGVybWluYXRpb24gb24gZXhpdCBzaWduYWxzLiBIYW5kbGVzICdleGl0JywgJ1NJR0lOVCcsICdTSUdURVJNJyxcclxuICogYW5kICd1bmNhdWdodEV4Y2VwdGlvbicgZXZlbnRzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX2F0dGFjaFByb2Nlc3NFeGl0TGlzdGVuZXJzXHJcbiAqL1xyXG5mdW5jdGlvbiBfYXR0YWNoUHJvY2Vzc0V4aXRMaXN0ZW5lcnMoKSB7XHJcbiAgbG9nKDMsICdbcHJvY2Vzc10gQXR0YWNoaW5nIGV4aXQgbGlzdGVuZXJzIHRvIHRoZSBwcm9jZXNzLicpO1xyXG5cclxuICAvLyBIYW5kbGVyIGZvciB0aGUgJ2V4aXQnXHJcbiAgcHJvY2Vzcy5vbignZXhpdCcsIChjb2RlKSA9PiB7XHJcbiAgICBsb2coNCwgYFtwcm9jZXNzXSBQcm9jZXNzIGV4aXRlZCB3aXRoIGNvZGU6ICR7Y29kZX0uYCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIEhhbmRsZXIgZm9yIHRoZSAnU0lHSU5UJ1xyXG4gIHByb2Nlc3Mub24oJ1NJR0lOVCcsIGFzeW5jIChuYW1lLCBjb2RlKSA9PiB7XHJcbiAgICBsb2coNCwgYFtwcm9jZXNzXSBUaGUgJHtuYW1lfSBldmVudCB3aXRoIGNvZGU6ICR7Y29kZX0uYCk7XHJcbiAgICBhd2FpdCBzaHV0ZG93bkNsZWFuVXAoKTtcclxuICB9KTtcclxuXHJcbiAgLy8gSGFuZGxlciBmb3IgdGhlICdTSUdURVJNJ1xyXG4gIHByb2Nlc3Mub24oJ1NJR1RFUk0nLCBhc3luYyAobmFtZSwgY29kZSkgPT4ge1xyXG4gICAgbG9nKDQsIGBbcHJvY2Vzc10gVGhlICR7bmFtZX0gZXZlbnQgd2l0aCBjb2RlOiAke2NvZGV9LmApO1xyXG4gICAgYXdhaXQgc2h1dGRvd25DbGVhblVwKCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIEhhbmRsZXIgZm9yIHRoZSAnU0lHSFVQJ1xyXG4gIHByb2Nlc3Mub24oJ1NJR0hVUCcsIGFzeW5jIChuYW1lLCBjb2RlKSA9PiB7XHJcbiAgICBsb2coNCwgYFtwcm9jZXNzXSBUaGUgJHtuYW1lfSBldmVudCB3aXRoIGNvZGU6ICR7Y29kZX0uYCk7XHJcbiAgICBhd2FpdCBzaHV0ZG93bkNsZWFuVXAoKTtcclxuICB9KTtcclxuXHJcbiAgLy8gSGFuZGxlciBmb3IgdGhlICd1bmNhdWdodEV4Y2VwdGlvbidcclxuICBwcm9jZXNzLm9uKCd1bmNhdWdodEV4Y2VwdGlvbicsIGFzeW5jIChlcnJvciwgbmFtZSkgPT4ge1xyXG4gICAgbG9nV2l0aFN0YWNrKDEsIGVycm9yLCBgW3Byb2Nlc3NdIFRoZSAke25hbWV9IGVycm9yLmApO1xyXG4gICAgYXdhaXQgc2h1dGRvd25DbGVhblVwKDEpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgLy8gU2VydmVyXHJcbiAgLi4uc2VydmVyLFxyXG5cclxuICAvLyBPcHRpb25zXHJcbiAgZ2V0T3B0aW9ucyxcclxuICB1cGRhdGVPcHRpb25zLFxyXG4gIG1hcFRvTmV3T3B0aW9ucyxcclxuXHJcbiAgLy8gVmFsaWRhdGlvblxyXG4gIHZhbGlkYXRlT3B0aW9uLFxyXG4gIHZhbGlkYXRlT3B0aW9ucyxcclxuXHJcbiAgLy8gRXhwb3J0aW5nXHJcbiAgaW5pdEV4cG9ydCxcclxuICBzaW5nbGVFeHBvcnQsXHJcbiAgYmF0Y2hFeHBvcnQsXHJcbiAgc3RhcnRFeHBvcnQsXHJcblxyXG4gIC8vIFJlbGVhc2VcclxuICBraWxsUG9vbCxcclxuICBzaHV0ZG93bkNsZWFuVXAsXHJcblxyXG4gIC8vIExvZ3NcclxuICBsb2csXHJcbiAgbG9nV2l0aFN0YWNrLFxyXG4gIGxvZ1pvZElzc3VlcyxcclxuICBzZXRMb2dMZXZlbDogZnVuY3Rpb24gKGxldmVsKSB7XHJcbiAgICAvLyBVcGRhdGUgdGhlIGluc3RhbmNlIG9wdGlvbnMgb2JqZWN0XHJcbiAgICBjb25zdCBvcHRpb25zID0gdXBkYXRlT3B0aW9ucyh7XHJcbiAgICAgIGxvZ2dpbmc6IHtcclxuICAgICAgICBsZXZlbFxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDYWxsIHRoZSBmdW5jdGlvblxyXG4gICAgc2V0TG9nTGV2ZWwob3B0aW9ucy5sb2dnaW5nLmxldmVsKTtcclxuICB9LFxyXG4gIGVuYWJsZUNvbnNvbGVMb2dnaW5nOiBmdW5jdGlvbiAodG9Db25zb2xlKSB7XHJcbiAgICAvLyBVcGRhdGUgdGhlIGluc3RhbmNlIG9wdGlvbnMgb2JqZWN0XHJcbiAgICBjb25zdCBvcHRpb25zID0gdXBkYXRlT3B0aW9ucyh7XHJcbiAgICAgIGxvZ2dpbmc6IHtcclxuICAgICAgICB0b0NvbnNvbGVcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ2FsbCB0aGUgZnVuY3Rpb25cclxuICAgIGVuYWJsZUNvbnNvbGVMb2dnaW5nKG9wdGlvbnMubG9nZ2luZy50b0NvbnNvbGUpO1xyXG4gIH0sXHJcbiAgZW5hYmxlRmlsZUxvZ2dpbmc6IGZ1bmN0aW9uIChkZXN0LCBmaWxlLCB0b0ZpbGUpIHtcclxuICAgIC8vIFVwZGF0ZSB0aGUgaW5zdGFuY2Ugb3B0aW9ucyBvYmplY3RcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB1cGRhdGVPcHRpb25zKHtcclxuICAgICAgbG9nZ2luZzoge1xyXG4gICAgICAgIGRlc3QsXHJcbiAgICAgICAgZmlsZSxcclxuICAgICAgICB0b0ZpbGVcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ2FsbCB0aGUgZnVuY3Rpb25cclxuICAgIGVuYWJsZUZpbGVMb2dnaW5nKFxyXG4gICAgICBvcHRpb25zLmxvZ2dpbmcuZGVzdCxcclxuICAgICAgb3B0aW9ucy5sb2dnaW5nLmZpbGUsXHJcbiAgICAgIG9wdGlvbnMubG9nZ2luZy50b0ZpbGVcclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG4iXSwibmFtZXMiOlsiX19kaXJuYW1lIiwiZmlsZVVSTFRvUGF0aCIsIlVSTCIsImRvY3VtZW50IiwicmVxdWlyZSIsInBhdGhUb0ZpbGVVUkwiLCJfX2ZpbGVuYW1lIiwiaHJlZiIsIl9kb2N1bWVudEN1cnJlbnRTY3JpcHQiLCJ0YWdOYW1lIiwidG9VcHBlckNhc2UiLCJzcmMiLCJiYXNlVVJJIiwiZGVlcENvcHkiLCJvYmpBcnIiLCJvYmpBcnJDb3B5IiwiQXJyYXkiLCJpc0FycmF5Iiwia2V5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZ2V0QWJzb2x1dGVQYXRoIiwicGF0aCIsImlzQWJzb2x1dGUiLCJub3JtYWxpemUiLCJyZXNvbHZlIiwiZ2V0QmFzZTY0IiwiaW5wdXQiLCJ0eXBlIiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIiwiZ2V0TmV3RGF0ZSIsIkRhdGUiLCJzcGxpdCIsInRyaW0iLCJnZXROZXdEYXRlVGltZSIsImdldFRpbWUiLCJpc09iamVjdCIsIml0ZW0iLCJpc09iamVjdEVtcHR5Iiwia2V5cyIsImxlbmd0aCIsImlzUHJpdmF0ZVJhbmdlVXJsRm91bmQiLCJzb21lIiwicGF0dGVybiIsInRlc3QiLCJtZWFzdXJlVGltZSIsInN0YXJ0IiwicHJvY2VzcyIsImhydGltZSIsImJpZ2ludCIsIk51bWJlciIsInJvdW5kTnVtYmVyIiwidmFsdWUiLCJwcmVjaXNpb24iLCJtdWx0aXBsaWVyIiwiTWF0aCIsInBvdyIsInJvdW5kIiwiY29sb3JzIiwibG9nZ2luZyIsInRvQ29uc29sZSIsInRvRmlsZSIsInBhdGhDcmVhdGVkIiwicGF0aFRvTG9nIiwibGV2ZWxzRGVzYyIsInRpdGxlIiwiY29sb3IiLCJsb2ciLCJhcmdzIiwibmV3TGV2ZWwiLCJ0ZXh0cyIsImxldmVsIiwicHJlZml4IiwiX2xvZ1RvRmlsZSIsImNvbnNvbGUiLCJhcHBseSIsInVuZGVmaW5lZCIsImNvbmNhdCIsImxvZ1dpdGhTdGFjayIsImVycm9yIiwiY3VzdG9tTWVzc2FnZSIsIm1haW5NZXNzYWdlIiwibWVzc2FnZSIsInN0YWNrTWVzc2FnZSIsInN0YWNrIiwicHVzaCIsInNoaWZ0IiwibG9nWm9kSXNzdWVzIiwiaXNzdWVzIiwibWFwIiwiaXNzdWUiLCJqb2luIiwiaW5pdExvZ2dpbmciLCJsb2dnaW5nT3B0aW9ucyIsImRlc3QiLCJmaWxlIiwic2V0TG9nTGV2ZWwiLCJlbmFibGVDb25zb2xlTG9nZ2luZyIsImVuYWJsZUZpbGVMb2dnaW5nIiwiaXNJbnRlZ2VyIiwiZXhpc3RzU3luYyIsIm1rZGlyU3luYyIsImFwcGVuZEZpbGUiLCJkZWZhdWx0Q29uZmlnIiwicHVwcGV0ZWVyIiwidHlwZXMiLCJlbnZMaW5rIiwiY2xpTmFtZSIsImRlc2NyaXB0aW9uIiwicHJvbXB0T3B0aW9ucyIsInNlcGFyYXRvciIsImhpZ2hjaGFydHMiLCJ2ZXJzaW9uIiwiY2RuVXJsIiwiZm9yY2VGZXRjaCIsImNhY2hlUGF0aCIsImNvcmVTY3JpcHRzIiwiaW5zdHJ1Y3Rpb25zIiwibW9kdWxlU2NyaXB0cyIsImluZGljYXRvclNjcmlwdHMiLCJjdXN0b21TY3JpcHRzIiwiZXhwb3J0IiwiaW5maWxlIiwiaW5zdHIiLCJvcHRpb25zIiwic3ZnIiwiYmF0Y2giLCJvdXRmaWxlIiwiaGludCIsImNob2ljZXMiLCJjb25zdHIiLCJiNjQiLCJub0Rvd25sb2FkIiwiaGVpZ2h0Iiwid2lkdGgiLCJzY2FsZSIsImRlZmF1bHRIZWlnaHQiLCJkZWZhdWx0V2lkdGgiLCJkZWZhdWx0U2NhbGUiLCJtaW4iLCJtYXgiLCJnbG9iYWxPcHRpb25zIiwidGhlbWVPcHRpb25zIiwicmFzdGVyaXphdGlvblRpbWVvdXQiLCJjdXN0b21Mb2dpYyIsImFsbG93Q29kZUV4ZWN1dGlvbiIsImFsbG93RmlsZVJlc291cmNlcyIsImN1c3RvbUNvZGUiLCJjYWxsYmFjayIsInJlc291cmNlcyIsImxvYWRDb25maWciLCJsZWdhY3lOYW1lIiwiY3JlYXRlQ29uZmlnIiwic2VydmVyIiwiZW5hYmxlIiwiaG9zdCIsInBvcnQiLCJ1cGxvYWRMaW1pdCIsImJlbmNobWFya2luZyIsInByb3h5IiwidGltZW91dCIsInJhdGVMaW1pdGluZyIsIm1heFJlcXVlc3RzIiwid2luZG93IiwiZGVsYXkiLCJ0cnVzdFByb3h5Iiwic2tpcEtleSIsInNraXBUb2tlbiIsInNzbCIsImZvcmNlIiwiY2VydFBhdGgiLCJwb29sIiwibWluV29ya2VycyIsIm1heFdvcmtlcnMiLCJ3b3JrTGltaXQiLCJhY3F1aXJlVGltZW91dCIsImNyZWF0ZVRpbWVvdXQiLCJkZXN0cm95VGltZW91dCIsImlkbGVUaW1lb3V0IiwiY3JlYXRlUmV0cnlJbnRlcnZhbCIsInJlYXBlckludGVydmFsIiwidWkiLCJyb3V0ZSIsIm90aGVyIiwibm9kZUVudiIsImxpc3RlblRvUHJvY2Vzc0V4aXRzIiwibm9Mb2dvIiwiaGFyZFJlc2V0UGFnZSIsImJyb3dzZXJTaGVsbE1vZGUiLCJ2YWxpZGF0aW9uIiwiZGVidWciLCJoZWFkbGVzcyIsImRldnRvb2xzIiwibGlzdGVuVG9Db25zb2xlIiwiZHVtcGlvIiwic2xvd01vIiwiZGVidWdnaW5nUG9ydCIsIndlYlNvY2tldCIsInJlY29ubmVjdCIsInJlamVjdFVuYXV0aG9yaXplZCIsInBpbmdUaW1lb3V0IiwicmVjb25uZWN0SW50ZXJ2YWwiLCJyZWNvbm5lY3RBdHRlbXB0cyIsIm1lc3NhZ2VJbnRlcnZhbCIsImdhdGhlckFsbE9wdGlvbnMiLCJ1cmwiLCJkb3RlbnYiLCJjb25maWciLCJ6Iiwic2V0RXJyb3JNYXAiLCJfY3VzdG9tRXJyb3JNYXAiLCJ2IiwiYm9vbGVhbiIsInN0cmljdENoZWNrIiwidW5pb24iLCJlbnVtIiwidHJhbnNmb3JtIiwiaW5jbHVkZXMiLCJudWxsYWJsZSIsInN0cmluZyIsInJlZmluZSIsInBhcmFtcyIsImVycm9yTWVzc2FnZSIsInZhbHVlcyIsInN0cmluZ0FycmF5IiwiZmlsdGVyQ2FsbGJhY2siLCJhcnJheVNjaGVtYSIsImFycmF5Iiwic3RyaW5nU2NoZW1hIiwic3RhcnRzV2l0aCIsInNsaWNlIiwiZW5kc1dpdGgiLCJ0cmFuc2Zvcm1DYWxsYmFjayIsImZpbHRlciIsInBvc2l0aXZlTnVtIiwibnVtYmVyIiwicG9zaXRpdmUiLCJpc05hTiIsIm5vbk5lZ2F0aXZlTnVtIiwibm9ubmVnYXRpdmUiLCJwcmVmaXhlcyIsImNoYXJ0Q29uZmlnIiwib2JqZWN0IiwicGFzc3Rocm91Z2giLCJhZGRpdGlvbmFsT3B0aW9ucyIsInZhbGlkYXRvcnMiLCJhZG1pblRva2VuIiwiaW5kZXhPZiIsImd0ZSIsImx0ZSIsInRoaXMiLCJvYmplY3RTY2hlbWEiLCJqcyIsImNzcyIsImZpbGVzIiwicGFydGlhbCIsInN0cmluZ1NjaGVtYTEiLCJzdHJpbmdTY2hlbWEyIiwiZW5hYmxlU2VydmVyIiwic2VydmVyQmVuY2htYXJraW5nIiwicHJveHlIb3N0IiwicHJveHlQb3J0IiwicHJveHlUaW1lb3V0IiwiZW5hYmxlUmF0ZUxpbWl0aW5nIiwiZW5hYmxlU3NsIiwic3NsRm9yY2UiLCJzc2xQb3J0Iiwic3NsQ2VydFBhdGgiLCJwb29sQmVuY2htYXJraW5nIiwicmVzb3VyY2VzSW50ZXJ2YWwiLCJsb2dMZXZlbCIsImludCIsImxvZ0ZpbGUiLCJsb2dEZXN0IiwibG9nVG9Db25zb2xlIiwibG9nVG9GaWxlIiwiZW5hYmxlVWkiLCJ1aVJvdXRlIiwiZW5hYmxlRGVidWciLCJlbmFibGVXcyIsIndzUmVjb25uZWN0Iiwid3NSZWplY3RVbmF1dGhvcml6ZWQiLCJ3c1BpbmdUaW1lb3V0Iiwid3NSZWNvbm5lY3RJbnRlcnZhbCIsIndzUmVjb25uZWN0QXR0ZW1wdHMiLCJ3c01lc3NhZ2VJbnRlcnZhbCIsIndzR2F0aGVyQWxsT3B0aW9ucyIsIndzVXJsIiwid3NTZWNyZXQiLCJyZXF1ZXN0SWQiLCJ1dWlkIiwiUHVwcGV0ZWVyU2NoZW1hIiwiSGlnaGNoYXJ0c1NjaGVtYSIsIkV4cG9ydFNjaGVtYSIsIkN1c3RvbUxvZ2ljU2NoZW1hIiwiUHJveHlTY2hlbWEiLCJSYXRlTGltaXRpbmdTY2hlbWEiLCJTc2xTY2hlbWEiLCJTZXJ2ZXJTY2hlbWEiLCJvcHRpb25hbCIsIlBvb2xTY2hlbWEiLCJMb2dnaW5nU2NoZW1hIiwiVWlTY2hlbWEiLCJPdGhlclNjaGVtYSIsIkRlYnVnU2NoZW1hIiwiV2ViU29ja2V0U2NoZW1hIiwiU3RyaWN0Q29uZmlnU2NoZW1hIiwiTG9vc2VDb25maWdTY2hlbWEiLCJFbnZTY2hlbWEiLCJQVVBQRVRFRVJfQVJHUyIsIkhJR0hDSEFSVFNfVkVSU0lPTiIsIkhJR0hDSEFSVFNfQ0ROX1VSTCIsIkhJR0hDSEFSVFNfRk9SQ0VfRkVUQ0giLCJISUdIQ0hBUlRTX0NBQ0hFX1BBVEgiLCJISUdIQ0hBUlRTX0FETUlOX1RPS0VOIiwiSElHSENIQVJUU19DT1JFX1NDUklQVFMiLCJISUdIQ0hBUlRTX01PRFVMRV9TQ1JJUFRTIiwiSElHSENIQVJUU19JTkRJQ0FUT1JfU0NSSVBUUyIsIkhJR0hDSEFSVFNfQ1VTVE9NX1NDUklQVFMiLCJFWFBPUlRfSU5GSUxFIiwiRVhQT1JUX0lOU1RSIiwiRVhQT1JUX09QVElPTlMiLCJFWFBPUlRfU1ZHIiwiRVhQT1JUX0JBVENIIiwiRVhQT1JUX09VVEZJTEUiLCJFWFBPUlRfVFlQRSIsIkVYUE9SVF9DT05TVFIiLCJFWFBPUlRfQjY0IiwiRVhQT1JUX05PX0RPV05MT0FEIiwiRVhQT1JUX0hFSUdIVCIsIkVYUE9SVF9XSURUSCIsIkVYUE9SVF9TQ0FMRSIsIkVYUE9SVF9ERUZBVUxUX0hFSUdIVCIsIkVYUE9SVF9ERUZBVUxUX1dJRFRIIiwiRVhQT1JUX0RFRkFVTFRfU0NBTEUiLCJFWFBPUlRfR0xPQkFMX09QVElPTlMiLCJFWFBPUlRfVEhFTUVfT1BUSU9OUyIsIkVYUE9SVF9SQVNURVJJWkFUSU9OX1RJTUVPVVQiLCJDVVNUT01fTE9HSUNfQUxMT1dfQ09ERV9FWEVDVVRJT04iLCJDVVNUT01fTE9HSUNfQUxMT1dfRklMRV9SRVNPVVJDRVMiLCJDVVNUT01fTE9HSUNfQ1VTVE9NX0NPREUiLCJDVVNUT01fTE9HSUNfQ0FMTEJBQ0siLCJDVVNUT01fTE9HSUNfUkVTT1VSQ0VTIiwiQ1VTVE9NX0xPR0lDX0xPQURfQ09ORklHIiwiQ1VTVE9NX0xPR0lDX0NSRUFURV9DT05GSUciLCJTRVJWRVJfRU5BQkxFIiwiU0VSVkVSX0hPU1QiLCJTRVJWRVJfUE9SVCIsIlNFUlZFUl9VUExPQURfTElNSVQiLCJTRVJWRVJfQkVOQ0hNQVJLSU5HIiwiU0VSVkVSX1BST1hZX0hPU1QiLCJTRVJWRVJfUFJPWFlfUE9SVCIsIlNFUlZFUl9QUk9YWV9USU1FT1VUIiwiU0VSVkVSX1JBVEVfTElNSVRJTkdfRU5BQkxFIiwiU0VSVkVSX1JBVEVfTElNSVRJTkdfTUFYX1JFUVVFU1RTIiwiU0VSVkVSX1JBVEVfTElNSVRJTkdfV0lORE9XIiwiU0VSVkVSX1JBVEVfTElNSVRJTkdfREVMQVkiLCJTRVJWRVJfUkFURV9MSU1JVElOR19UUlVTVF9QUk9YWSIsIlNFUlZFUl9SQVRFX0xJTUlUSU5HX1NLSVBfS0VZIiwiU0VSVkVSX1JBVEVfTElNSVRJTkdfU0tJUF9UT0tFTiIsIlNFUlZFUl9TU0xfRU5BQkxFIiwiU0VSVkVSX1NTTF9GT1JDRSIsIlNFUlZFUl9TU0xfUE9SVCIsIlNFUlZFUl9TU0xfQ0VSVF9QQVRIIiwiUE9PTF9NSU5fV09SS0VSUyIsIlBPT0xfTUFYX1dPUktFUlMiLCJQT09MX1dPUktfTElNSVQiLCJQT09MX0FDUVVJUkVfVElNRU9VVCIsIlBPT0xfQ1JFQVRFX1RJTUVPVVQiLCJQT09MX0RFU1RST1lfVElNRU9VVCIsIlBPT0xfSURMRV9USU1FT1VUIiwiUE9PTF9DUkVBVEVfUkVUUllfSU5URVJWQUwiLCJQT09MX1JFQVBFUl9JTlRFUlZBTCIsIlBPT0xfQkVOQ0hNQVJLSU5HIiwiTE9HR0lOR19MRVZFTCIsIkxPR0dJTkdfRklMRSIsIkxPR0dJTkdfREVTVCIsIkxPR0dJTkdfVE9fQ09OU09MRSIsIkxPR0dJTkdfVE9fRklMRSIsIlVJX0VOQUJMRSIsIlVJX1JPVVRFIiwiT1RIRVJfTk9ERV9FTlYiLCJPVEhFUl9MSVNURU5fVE9fUFJPQ0VTU19FWElUUyIsIk9USEVSX05PX0xPR08iLCJPVEhFUl9IQVJEX1JFU0VUX1BBR0UiLCJPVEhFUl9CUk9XU0VSX1NIRUxMX01PREUiLCJPVEhFUl9WQUxJREFUSU9OIiwiREVCVUdfRU5BQkxFIiwiREVCVUdfSEVBRExFU1MiLCJERUJVR19ERVZUT09MUyIsIkRFQlVHX0xJU1RFTl9UT19DT05TT0xFIiwiREVCVUdfRFVNUElPIiwiREVCVUdfU0xPV19NTyIsIkRFQlVHX0RFQlVHR0lOR19QT1JUIiwiV0VCX1NPQ0tFVF9FTkFCTEUiLCJXRUJfU09DS0VUX1JFQ09OTkVDVCIsIldFQl9TT0NLRVRfUkVKRUNUX1VOQVVUSE9SSVpFRCIsIldFQl9TT0NLRVRfUElOR19USU1FT1VUIiwiV0VCX1NPQ0tFVF9SRUNPTk5FQ1RfSU5URVJWQUwiLCJXRUJfU09DS0VUX1JFQ09OTkVDVF9BVFRFTVBUUyIsIldFQl9TT0NLRVRfTUVTU0FHRV9JTlRFUlZBTCIsIldFQl9TT0NLRVRfR0FUSEVSX0FMTF9PUFRJT05TIiwiV0VCX1NPQ0tFVF9VUkwiLCJXRUJfU09DS0VUX1NFQ1JFVCIsImVudnMiLCJwYXJzZSIsImVudiIsInN0cmljdFZhbGlkYXRlIiwiY29uZmlnT3B0aW9ucyIsImxvb3NlVmFsaWRhdGUiLCJjb250ZXh0IiwicHJvcGVydHlOYW1lIiwicHJvcGVydHlJbmZvIiwiY29kZSIsIlpvZElzc3VlQ29kZSIsImludmFsaWRfdHlwZSIsInJlY2VpdmVkIiwiWm9kUGFyc2VkVHlwZSIsImRlZmF1bHRFcnJvciIsImN1c3RvbSIsImRhdGEiLCJpbnZhbGlkX3VuaW9uIiwidW5pb25FcnJvcnMiLCJmb3JFYWNoIiwiaW5kZXgiLCJzdWJzdHJpbmciLCJFeHBvcnRFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJzdGF0dXNDb2RlIiwic3VwZXIiLCJzZXRFcnJvciIsIm5hbWUiLCJfaW5pdE9wdGlvbnMiLCJuZXN0ZWRQcm9wcyIsIl9jcmVhdGVOZXN0ZWRQcm9wcyIsImFic29sdXRlUHJvcHMiLCJfY3JlYXRlQWJzb2x1dGVQcm9wcyIsImdldE9wdGlvbnMiLCJnZXRDb3B5IiwidXBkYXRlT3B0aW9ucyIsIm5ld09wdGlvbnMiLCJfbWVyZ2VPcHRpb25zIiwidmFsaWRhdGVPcHRpb25zIiwibWFwVG9OZXdPcHRpb25zIiwib2xkT3B0aW9ucyIsImVudHJpZXMiLCJwcm9wZXJ0aWVzQ2hhaW4iLCJyZWR1Y2UiLCJvYmoiLCJwcm9wIiwidmFsaWRhdGVPcHRpb24iLCJjb25maWdPcHRpb24iLCJpc0FsbG93ZWRDb25maWciLCJhbGxvd0Z1bmN0aW9ucyIsIm9iamVjdENvbmZpZyIsImV2YWwiLCJKU09OIiwic3RyaW5naWZpZWRPcHRpb25zIiwiX29wdGlvbnNTdHJpbmdpZnkiLCJwYXJzZWRPcHRpb25zIiwiXyIsIm9yaWdpbmFsT3B0aW9ucyIsInN0cmluZ2lmeUZ1bmN0aW9ucyIsInN0cmluZ2lmeSIsInJlcGxhY2VBbGwiLCJwcm9wQ2hhaW4iLCJlbnRyeSIsImFzeW5jIiwiZ2V0IiwicmVxdWVzdE9wdGlvbnMiLCJQcm9taXNlIiwicmVqZWN0IiwiX2dldFByb3RvY29sTW9kdWxlIiwicmVzcG9uc2UiLCJyZXNwb25zZURhdGEiLCJvbiIsImNodW5rIiwidGV4dCIsImh0dHBzIiwiaHR0cCIsImNhY2hlIiwiYWN0aXZlTWFuaWZlc3QiLCJzb3VyY2VzIiwiaGNWZXJzaW9uIiwiY2hlY2tDYWNoZSIsImhpZ2hjaGFydHNPcHRpb25zIiwic2VydmVyUHJveHlPcHRpb25zIiwiZmV0Y2hlZE1vZHVsZXMiLCJnZXRDYWNoZVBhdGgiLCJtYW5pZmVzdFBhdGgiLCJzb3VyY2VQYXRoIiwicmVjdXJzaXZlIiwiX3VwZGF0ZUNhY2hlIiwicmVxdWVzdFVwZGF0ZSIsIm1hbmlmZXN0IiwicmVhZEZpbGVTeW5jIiwibW9kdWxlcyIsIm1vZHVsZU1hcCIsIm0iLCJudW1iZXJPZk1vZHVsZXMiLCJtb2R1bGVOYW1lIiwiX2V4dHJhY3RIY1ZlcnNpb24iLCJfc2F2ZUNvbmZpZ1RvTWFuaWZlc3QiLCJnZXRIY1ZlcnNpb24iLCJ1cGRhdGVIY1ZlcnNpb24iLCJuZXdWZXJzaW9uIiwid3JpdGVGaWxlU3luYyIsIl9jb25maWd1cmVSZXF1ZXN0IiwiYWxsIiwiY3MiLCJfZmV0Y2hTY3JpcHQiLCJtcyIsImlzIiwic2NyaXB0Iiwic2hvdWxkVGhyb3dFcnJvciIsIl9leHRyYWN0TW9kdWxlTmFtZSIsImFnZW50IiwiSHR0cHNQcm94eUFnZW50IiwiY2FjaGVTb3VyY2VzIiwicmVwbGFjZSIsInNjcmlwdFBhdGgiLCJzZXR1cEhpZ2hjaGFydHMiLCJIaWdoY2hhcnRzIiwiYW5pbU9iamVjdCIsImR1cmF0aW9uIiwiY3JlYXRlQ2hhcnQiLCJleHBvcnRPcHRpb25zIiwiY3VzdG9tTG9naWNPcHRpb25zIiwic2V0T3B0aW9ucyIsIm1lcmdlIiwid3JhcCIsInNldE9wdGlvbnNPYmoiLCJpc1JlbmRlckNvbXBsZXRlIiwiQ2hhcnQiLCJwcm9jZWVkIiwidXNlck9wdGlvbnMiLCJjYiIsImV4cG9ydGluZyIsImVuYWJsZWQiLCJwbG90T3B0aW9ucyIsInNlcmllcyIsImxhYmVsIiwidG9vbHRpcCIsImFuaW1hdGlvbiIsIm9uSGlnaGNoYXJ0c1JlbmRlciIsImFkZEV2ZW50IiwiU2VyaWVzIiwiY2hhcnQiLCJGdW5jdGlvbiIsImZpbmFsT3B0aW9ucyIsImZpbmFsQ2FsbGJhY2siLCJpbWFnZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwicmFjZSIsImltYWdlIiwiY29tcGxldGUiLCJuYXR1cmFsSGVpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uY2UiLCJzZXRUaW1lb3V0IiwiZGVmYXVsdE9wdGlvbnMiLCJwYWdlVGVtcGxhdGUiLCJicm93c2VyIiwiY3JlYXRlQnJvd3NlciIsInB1cHBldGVlckFyZ3MiLCJlbmFibGVkRGVidWciLCJkZWJ1Z09wdGlvbnMiLCJsYXVuY2hPcHRpb25zIiwidXNlckRhdGFEaXIiLCJoYW5kbGVTSUdJTlQiLCJoYW5kbGVTSUdURVJNIiwiaGFuZGxlU0lHSFVQIiwid2FpdEZvckluaXRpYWxQYWdlIiwiZGVmYXVsdFZpZXdwb3J0IiwidHJ5Q291bnQiLCJvcGVuQnJvd3NlciIsImxhdW5jaCIsImNsb3NlQnJvd3NlciIsImNvbm5lY3RlZCIsImNsb3NlIiwibmV3UGFnZSIsInBvb2xSZXNvdXJjZSIsInBhZ2UiLCJzZXRDYWNoZUVuYWJsZWQiLCJfc2V0UGFnZUNvbnRlbnQiLCJfc2V0UGFnZUV2ZW50cyIsImlzQ2xvc2VkIiwiY2xlYXJQYWdlIiwiaGFyZFJlc2V0IiwiZ290byIsIndhaXRVbnRpbCIsImV2YWx1YXRlIiwiYm9keSIsImlubmVySFRNTCIsImlkIiwid29ya0NvdW50IiwiYWRkUGFnZVJlc291cmNlcyIsImluamVjdGVkUmVzb3VyY2VzIiwiaW5qZWN0ZWRKcyIsImNvbnRlbnQiLCJpc0xvY2FsIiwianNSZXNvdXJjZSIsImFkZFNjcmlwdFRhZyIsImluamVjdGVkQ3NzIiwiY3NzSW1wb3J0cyIsIm1hdGNoIiwiY3NzSW1wb3J0UGF0aCIsImNzc1Jlc291cmNlIiwiYWRkU3R5bGVUYWciLCJjbGVhclBhZ2VSZXNvdXJjZXMiLCJyZXNvdXJjZSIsImRpc3Bvc2UiLCJvbGRDaGFydHMiLCJjaGFydHMiLCJvbGRDaGFydCIsImRlc3Ryb3kiLCJzY3JpcHRzVG9SZW1vdmUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInN0eWxlc1RvUmVtb3ZlIiwibGlua3NUb1JlbW92ZSIsImVsZW1lbnQiLCJyZW1vdmUiLCJzZXRDb250ZW50IiwiY3NzVGVtcGxhdGUiLCJzdmdUZW1wbGF0ZSIsInB1cHBldGVlckV4cG9ydCIsImlzU1ZHIiwic2l6ZSIsIl9nZXRDaGFydFNpemUiLCJ4IiwieSIsIl9nZXRDbGlwUmVnaW9uIiwidmlld3BvcnRIZWlnaHQiLCJhYnMiLCJjZWlsIiwiY2hhcnRIZWlnaHQiLCJ2aWV3cG9ydFdpZHRoIiwiY2hhcnRXaWR0aCIsInJlc3VsdCIsInNldFZpZXdwb3J0IiwiZGV2aWNlU2NhbGVGYWN0b3IiLCJwYXJzZUZsb2F0IiwiX2NyZWF0ZVNWRyIsIl9jcmVhdGVJbWFnZSIsIl9jcmVhdGVQREYiLCIkZXZhbCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRydW5jIiwic3ZnRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJiYXNlVmFsIiwic3R5bGUiLCJ6b29tIiwibWFyZ2luIiwib3V0ZXJIVE1MIiwiY2xpcCIsInNjcmVlbnNob3QiLCJlbmNvZGluZyIsImZ1bGxQYWdlIiwib3B0aW1pemVGb3JTcGVlZCIsImNhcHR1cmVCZXlvbmRWaWV3cG9ydCIsInF1YWxpdHkiLCJvbWl0QmFja2dyb3VuZCIsIl9yZXNvbHZlIiwiZW11bGF0ZU1lZGlhVHlwZSIsInBkZiIsInBvb2xTdGF0cyIsImV4cG9ydHNBdHRlbXB0ZWQiLCJleHBvcnRzUGVyZm9ybWVkIiwiZXhwb3J0c0Ryb3BwZWQiLCJleHBvcnRzRnJvbVN2ZyIsImV4cG9ydHNGcm9tT3B0aW9ucyIsImV4cG9ydHNGcm9tU3ZnQXR0ZW1wdHMiLCJleHBvcnRzRnJvbU9wdGlvbnNBdHRlbXB0cyIsInRpbWVTcGVudCIsInRpbWVTcGVudEF2ZXJhZ2UiLCJpbml0UG9vbCIsInBvb2xPcHRpb25zIiwiUG9vbCIsIl9mYWN0b3J5IiwiYWNxdWlyZVRpbWVvdXRNaWxsaXMiLCJjcmVhdGVUaW1lb3V0TWlsbGlzIiwiZGVzdHJveVRpbWVvdXRNaWxsaXMiLCJpZGxlVGltZW91dE1pbGxpcyIsImNyZWF0ZVJldHJ5SW50ZXJ2YWxNaWxsaXMiLCJyZWFwSW50ZXJ2YWxNaWxsaXMiLCJwcm9wYWdhdGVDcmVhdGVFcnJvciIsImNsZWFyU3RhdHVzIiwiX2V2ZW50SWQiLCJpbml0aWFsUmVzb3VyY2VzIiwiaSIsImFjcXVpcmUiLCJwcm9taXNlIiwicmVsZWFzZSIsImtpbGxQb29sIiwid29ya2VyIiwidXNlZCIsImRlc3Ryb3llZCIsInBvc3RXb3JrIiwid29ya2VySGFuZGxlIiwiX2dldFBvb2xJbmZvIiwiYWNxdWlyZUNvdW50ZXIiLCJleHBvcnRDb3VudGVyIiwiZXhwb3J0UmVzdWx0IiwiZ2V0UG9vbFN0YXRzIiwiZ2V0UG9vbEluZm9KU09OIiwibnVtVXNlZCIsImF2YWlsYWJsZSIsIm51bUZyZWUiLCJhbGxDcmVhdGVkIiwicGVuZGluZ0FjcXVpcmVzIiwibnVtUGVuZGluZ0FjcXVpcmVzIiwicGVuZGluZ0NyZWF0ZXMiLCJudW1QZW5kaW5nQ3JlYXRlcyIsInBlbmRpbmdWYWxpZGF0aW9ucyIsIm51bVBlbmRpbmdWYWxpZGF0aW9ucyIsInBlbmRpbmdEZXN0cm95cyIsImFic29sdXRlQWxsIiwiY3JlYXRlIiwicmFuZG9tIiwic3RhcnREYXRlIiwidmFsaWRhdGUiLCJtYWluRnJhbWUiLCJkZXRhY2hlZCIsInJlbW92ZUFsbExpc3RlbmVycyIsInNhbml0aXplIiwiSlNET00iLCJET01QdXJpZnkiLCJBRERfVEFHUyIsInNpbmdsZUV4cG9ydCIsInN0YXJ0RXhwb3J0IiwiYmF0Y2hFeHBvcnQiLCJiYXRjaEZ1bmN0aW9ucyIsInBhaXIiLCJiYXRjaFJlc3VsdHMiLCJhbGxTZXR0bGVkIiwicmVhc29uIiwiaW1hZ2VPcHRpb25zIiwiZW5kQ2FsbGJhY2siLCJmaWxlQ29udGVudCIsIl9leHBvcnRGcm9tU3ZnIiwiX2V4cG9ydEZyb21PcHRpb25zIiwiZ2V0QWxsb3dDb2RlRXhlY3V0aW9uIiwic2V0QWxsb3dDb2RlRXhlY3V0aW9uIiwiaW5wdXRUb0V4cG9ydCIsIl9wcmVwYXJlRXhwb3J0IiwiX2ZpeENvbnN0ciIsIl9maXhUeXBlIiwiX2ZpeE91dGZpbGUiLCJfaGFuZGxlQ3VzdG9tTG9naWMiLCJfaGFuZGxlR2xvYmFsQW5kVGhlbWUiLCJfaGFuZGxlU2l6ZSIsIl9jaGVja0RhdGFTaXplIiwiZml4ZWRDb25zdHIiLCJ0b0xvd2VyQ2FzZSIsIm1pbWVUeXBlcyIsImZvcm1hdHMiLCJvdXRUeXBlIiwicG9wIiwiZmluZCIsInQiLCJvcHRpb25zQ2hhcnQiLCJvcHRpb25zRXhwb3J0aW5nIiwiZ2xvYmFsT3B0aW9uc0NoYXJ0IiwiZ2xvYmFsT3B0aW9uc0V4cG9ydGluZyIsInRoZW1lT3B0aW9uc0NoYXJ0IiwidGhlbWVPcHRpb25zRXhwb3J0aW5nIiwic291cmNlSGVpZ2h0Iiwic291cmNlV2lkdGgiLCJwYXJhbSIsIl9oYW5kbGVSZXNvdXJjZXMiLCJfaGFuZGxlQ3VzdG9tQ29kZSIsImhhbmRsZWRSZXNvdXJjZXMiLCJhbGxvd2VkUHJvcHMiLCJjb3JyZWN0UmVzb3VyY2VzIiwicHJvcE5hbWUiLCJpc0NhbGxiYWNrIiwib3B0aW9uc05hbWUiLCJ0b3RhbFNpemUiLCJieXRlTGVuZ3RoIiwidG9GaXhlZCIsInRpbWVySWRzIiwiYWRkVGltZXIiLCJjbGVhckFsbFRpbWVycyIsImNsZWFySW50ZXJ2YWwiLCJjbGVhclRpbWVvdXQiLCJ0ZWxlbWV0cnlUZW1wbGF0ZSIsIm9wdGlvbnNJbkFycmF5IiwidGVsZW1ldHJ5RGF0YSIsInRpbWVPZlNlbnQiLCJsYXN0U2VudCIsIm9wdGlvbnNQZXJSZXF1ZXN0IiwibnVtYmVyT2ZSZXF1ZXN0cyIsInByZXBhcmVUZWxlbWV0cnkiLCJjaGFydE9wdGlvbnMiLCJfZmlsdGVyRGF0YSIsInRlbXBsYXRlIiwiZmlsdGVyZWRPYmplY3QiLCJ0ZW1wbGF0ZUtleSIsInRlbXBsYXRlVmFsdWUiLCJvcHRpb25zVmFsdWUiLCJ3ZWJTb2NrZXRDbGllbnRzIiwiTWFwIiwid2ViU29ja2V0T3B0aW9ucyIsIndlYlNvY2tldEluaXQiLCJhZGRyZXNzIiwid2ViU29ja2V0U2VjcmV0IiwiY29ubmVjdGlvbk9wdGlvbnMiLCJoZWFkZXJzIiwiYXV0aCIsImp3dCIsInNpZ24iLCJzdWNjZXNzIiwiYWxnb3JpdGhtIiwicHJvdG9jb2wiLCJjbGllbnRPcHRpb25zIiwicmVjb25uZWN0SW50ZXJ2YWxNcyIsInJlY29ubmVjdFRyeSIsImNvbm5lY3QiLCJfc2VuZGluZ01lc3NhZ2VJbnRlcnZhbCIsIndlYlNvY2tldFVybCIsIndlYlNvY2tldENsaWVudCIsIldlYlNvY2tldCIsInNldCIsImRlbGV0ZSIsIl9yZWNvbm5lY3QiLCJ0ZXJtaW5hdGUiLCJnZXRDbGllbnRzIiwidGVybWluYXRlQ2xpZW50cyIsImNsaWVudCIsImNsZWFyIiwic2V0SW50ZXJ2YWwiLCJuZXh0IiwicmVhZHlTdGF0ZSIsIk9QRU4iLCJjdXJyZW50RGF0ZSIsInNlbmQiLCJsb2dFcnJvck1pZGRsZXdhcmUiLCJyZXF1ZXN0IiwicmV0dXJuRXJyb3JNaWRkbGV3YXJlIiwic3RhdHVzIiwianNvbiIsImVycm9yTWlkZGxld2FyZSIsImFwcCIsInVzZSIsInJhdGVMaW1pdGluZ01pZGRsZXdhcmUiLCJyYXRlTGltaXRpbmdPcHRpb25zIiwicmF0ZU9wdGlvbnMiLCJsaW1pdGVyIiwicmF0ZUxpbWl0Iiwid2luZG93TXMiLCJsaW1pdCIsImRlbGF5TXMiLCJoYW5kbGVyIiwiZm9ybWF0IiwiZGVmYXVsdCIsInNraXAiLCJxdWVyeSIsImFjY2Vzc190b2tlbiIsImNvbnRlbnRUeXBlTWlkZGxld2FyZSIsImNvbnRlbnRUeXBlIiwicmVxdWVzdEJvZHlNaWRkbGV3YXJlIiwiY29ubmVjdGlvbiIsInJlbW90ZUFkZHJlc3MiLCJ2YWxpZGF0ZWRPcHRpb25zIiwiZmlsZW5hbWUiLCJ2YWxpZGF0aW9uTWlkZGxld2FyZSIsInBvc3QiLCJyZXZlcnNlZE1pbWUiLCJwbmciLCJqcGVnIiwiZ2lmIiwicmVxdWVzdEV4cG9ydCIsInJlcXVlc3RDb3VudGVyIiwiY29ubmVjdGlvbkFib3J0ZWQiLCJzb2NrZXQiLCJoYWRFcnJvcnMiLCJwYXlsb2FkIiwiaGVhZGVyIiwiYXR0YWNobWVudCIsImV4cG9ydFJvdXRlcyIsInNlcnZlclN0YXJ0VGltZSIsInBhY2thZ2VGaWxlIiwic3VjY2Vzc1JhdGVzIiwicmVjb3JkSW50ZXJ2YWwiLCJ3aW5kb3dTaXplIiwiX2NhbGN1bGF0ZU1vdmluZ0F2ZXJhZ2UiLCJhIiwiYiIsIl9zdGFydFN1Y2Nlc3NSYXRlIiwic3RhdHMiLCJzdWNjZXNzUmF0aW8iLCJoZWFsdGhSb3V0ZXMiLCJwZXJpb2QiLCJtb3ZpbmdBdmVyYWdlIiwiYm9vdFRpbWUiLCJ1cHRpbWUiLCJmbG9vciIsInNlcnZlclZlcnNpb24iLCJoaWdoY2hhcnRzVmVyc2lvbiIsImF2ZXJhZ2VFeHBvcnRUaW1lIiwiYXR0ZW1wdGVkRXhwb3J0cyIsInBlcmZvcm1lZEV4cG9ydHMiLCJmYWlsZWRFeHBvcnRzIiwic3VjZXNzUmF0aW8iLCJzdmdFeHBvcnRzIiwianNvbkV4cG9ydHMiLCJzdmdFeHBvcnRzQXR0ZW1wdHMiLCJqc29uRXhwb3J0c0F0dGVtcHRzIiwidWlSb3V0ZXMiLCJzZW5kRmlsZSIsImFjY2VwdFJhbmdlcyIsInZlcnNpb25DaGFuZ2VSb3V0ZXMiLCJ0b2tlbiIsImFjdGl2ZVNlcnZlcnMiLCJleHByZXNzIiwic3RhcnRTZXJ2ZXIiLCJzZXJ2ZXJPcHRpb25zIiwidXBsb2FkTGltaXRCeXRlcyIsInN0b3JhZ2UiLCJtdWx0ZXIiLCJtZW1vcnlTdG9yYWdlIiwidXBsb2FkIiwibGltaXRzIiwiZmllbGRTaXplIiwiZGlzYWJsZSIsImNvcnMiLCJtZXRob2RzIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwibm9uZSIsInN0YXRpYyIsImh0dHBTZXJ2ZXIiLCJjcmVhdGVTZXJ2ZXIiLCJfYXR0YWNoU2VydmVyRXJyb3JIYW5kbGVycyIsImxpc3RlbiIsImNlcnQiLCJodHRwc1NlcnZlciIsImNsb3NlU2VydmVycyIsImdldFNlcnZlcnMiLCJnZXRFeHByZXNzIiwiZ2V0QXBwIiwibWlkZGxld2FyZXMiLCJzaHV0ZG93bkNsZWFuVXAiLCJleGl0Q29kZSIsImV4aXQiLCJpbml0RXhwb3J0IiwiaW5pdE9wdGlvbnMiLCJfYXR0YWNoUHJvY2Vzc0V4aXRMaXN0ZW5lcnMi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

"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),require("colors");var fs=require("fs"),path=require("path"),httpsProxyAgent=require("https-proxy-agent"),url=require("url"),dotenv=require("dotenv"),zod=require("zod"),http=require("http"),https=require("https"),tarn=require("tarn"),uuid=require("uuid"),puppeteer=require("puppeteer"),DOMPurify=require("dompurify"),jsdom=require("jsdom"),cors=require("cors"),express=require("express"),multer=require("multer"),rateLimit=require("express-rate-limit"),_documentCurrentScript="undefined"!=typeof document?document.currentScript:null;const __dirname$1=url.fileURLToPath(new URL("../.","undefined"==typeof document?require("url").pathToFileURL(__filename).href:_documentCurrentScript&&"SCRIPT"===_documentCurrentScript.tagName.toUpperCase()&&_documentCurrentScript.src||new URL("index.cjs",document.baseURI).href));function deepCopy(e){if(null===e||"object"!=typeof e)return e;const t=Array.isArray(e)?[]:{};for(const o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=deepCopy(e[o]));return t}function fixConstr(e){try{const t=`${e.toLowerCase().replace("chart","")}Chart`;return"Chart"===t&&t.toLowerCase(),["chart","stockChart","mapChart","ganttChart"].includes(t)?t:"chart"}catch{return"chart"}}function fixOutfile(e,t){return`${getAbsolutePath(t||"chart").split(".").shift()}.${e}`}function fixType(e,t=null){const o={"image/png":"png","image/jpeg":"jpeg","application/pdf":"pdf","image/svg+xml":"svg"},r=Object.values(o);if(t){const o=t.split(".").pop();"jpg"===o?e="jpeg":r.includes(o)&&e!==o&&(e=o)}return o[e]||r.find((t=>t===e))||"png"}function getAbsolutePath(e){return path.isAbsolute(e)?path.normalize(e):path.resolve(e)}function getBase64(e,t){return"pdf"===t||"svg"==t?Buffer.from(e,"utf8").toString("base64"):e}function getNewDate(){return(new Date).toString().split("(")[0].trim()}function getNewDateTime(){return(new Date).getTime()}function isObject(e){return"[object Object]"===Object.prototype.toString.call(e)}function isObjectEmpty(e){return"object"==typeof e&&!Array.isArray(e)&&null!==e&&0===Object.keys(e).length}function isPrivateRangeUrlFound(e){return[/xlink:href="(?:http:\/\/|https:\/\/)?localhost\b/,/xlink:href="(?:http:\/\/|https:\/\/)?10\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?127\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?172\.(1[6-9]|2[0-9]|3[0-1])\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?192\.168\.\d{1,3}\.\d{1,3}\b/].some((t=>t.test(e)))}function measureTime(){const e=process.hrtime.bigint();return()=>Number(process.hrtime.bigint()-e)/1e6}function roundNumber(e,t=1){const o=Math.pow(10,t||0);return Math.round(+e*o)/o}function wrapAround(e,t,o=!1){if(e&&"string"==typeof e)return(e=e.trim()).endsWith(".js")?t?wrapAround(fs.readFileSync(getAbsolutePath(e),"utf8"),t,o):null:!o&&(e.startsWith("function()")||e.startsWith("function ()")||e.startsWith("()=>")||e.startsWith("() =>"))?`(${e})()`:e.replace(/;$/,"")}const colors=["red","yellow","blue","gray","green"],logging={toConsole:!0,toFile:!1,pathCreated:!1,pathToLog:"",levelsDesc:[{title:"error",color:colors[0]},{title:"warning",color:colors[1]},{title:"notice",color:colors[2]},{title:"verbose",color:colors[3]},{title:"benchmark",color:colors[4]}]};function log(...e){const[t,...o]=e,{levelsDesc:r,level:n}=logging;if(5!==t&&(0===t||t>n||n>r.length))return;const i=`${getNewDate()} [${r[t-1].title}] -`;logging.toFile&&_logToFile(o,i),logging.toConsole&&console.log.apply(void 0,[i.toString()[logging.levelsDesc[t-1].color]].concat(o))}function logWithStack(e,t,o){const r=o||t&&t.message||"",{level:n,levelsDesc:i}=logging;if(0===e||e>n||n>i.length)return;const s=`${getNewDate()} [${i[e-1].title}] -`,a=t&&t.stack,l=[r];a&&l.push("\n",a),logging.toFile&&_logToFile(l,s),logging.toConsole&&console.log.apply(void 0,[s.toString()[logging.levelsDesc[e-1].color]].concat([l.shift()[colors[e-1]],...l]))}function logZodIssues(e,t,o){logWithStack(e,null,[`${o||"[validation] Validation error"} - the following Zod issues occured:`,...(t||[]).map((e=>`- ${e.message}`))].join("\n"))}function initLogging(e){const{level:t,dest:o,file:r,toConsole:n,toFile:i}=e;logging.pathCreated=!1,logging.pathToLog="",setLogLevel(t),enableConsoleLogging(n),enableFileLogging(o,r,i)}function setLogLevel(e){Number.isInteger(e)&&e>=0&&e<=logging.levelsDesc.length&&(logging.level=e)}function enableConsoleLogging(e){logging.toConsole=!!e}function enableFileLogging(e,t,o){logging.toFile=!!o,logging.toFile&&(logging.dest=e||"",logging.file=t||"")}function _logToFile(e,t){logging.pathCreated||(!fs.existsSync(getAbsolutePath(logging.dest))&&fs.mkdirSync(getAbsolutePath(logging.dest)),logging.pathToLog=getAbsolutePath(path.join(logging.dest,logging.file)),logging.pathCreated=!0),fs.appendFile(logging.pathToLog,[t].concat(e).join(" ")+"\n",(e=>{e&&logging.toFile&&logging.pathCreated&&(logging.toFile=!1,logging.pathCreated=!1,logWithStack(2,e,"[logger] Unable to write to log file."))}))}const defaultConfig={puppeteer:{args:{value:["--allow-running-insecure-content","--ash-no-nudges","--autoplay-policy=user-gesture-required","--block-new-web-contents","--disable-accelerated-2d-canvas","--disable-background-networking","--disable-background-timer-throttling","--disable-backgrounding-occluded-windows","--disable-breakpad","--disable-checker-imaging","--disable-client-side-phishing-detection","--disable-component-extensions-with-background-pages","--disable-component-update","--disable-default-apps","--disable-dev-shm-usage","--disable-domain-reliability","--disable-extensions","--disable-features=CalculateNativeWinOcclusion,InterestFeedContentSuggestions,WebOTP","--disable-hang-monitor","--disable-ipc-flooding-protection","--disable-logging","--disable-notifications","--disable-offer-store-unmasked-wallet-cards","--disable-popup-blocking","--disable-print-preview","--disable-prompt-on-repost","--disable-renderer-backgrounding","--disable-search-engine-choice-screen","--disable-session-crashed-bubble","--disable-setuid-sandbox","--disable-site-isolation-trials","--disable-speech-api","--disable-sync","--enable-unsafe-webgpu","--hide-crash-restore-bubble","--hide-scrollbars","--metrics-recording-only","--mute-audio","--no-default-browser-check","--no-first-run","--no-pings","--no-sandbox","--no-startup-window","--no-zygote","--password-store=basic","--process-per-tab","--use-mock-keychain"],types:["string[]"],envLink:"PUPPETEER_ARGS",cliName:"puppeteerArgs",description:"Array of Puppeteer arguments",promptOptions:{type:"list",separator:";"}}},highcharts:{version:{value:"latest",types:["string"],envLink:"HIGHCHARTS_VERSION",description:"Highcharts version",promptOptions:{type:"text"}},cdnUrl:{value:"https://code.highcharts.com",types:["string"],envLink:"HIGHCHARTS_CDN_URL",description:"CDN URL for Highcharts scripts",promptOptions:{type:"text"}},forceFetch:{value:!1,types:["boolean"],envLink:"HIGHCHARTS_FORCE_FETCH",description:"Flag to refetch scripts after each server rerun",promptOptions:{type:"toggle"}},cachePath:{value:".cache",types:["string"],envLink:"HIGHCHARTS_CACHE_PATH",description:"Directory path for cached Highcharts scripts",promptOptions:{type:"text"}},coreScripts:{value:["highcharts","highcharts-more","highcharts-3d"],types:["string[]"],envLink:"HIGHCHARTS_CORE_SCRIPTS",description:"Highcharts core scripts to fetch",promptOptions:{type:"multiselect",instructions:"Space: Select specific, A: Select all, Enter: Confirm"}},moduleScripts:{value:["stock","map","gantt","exporting","parallel-coordinates","accessibility","boost-canvas","boost","data","data-tools","draggable-points","static-scale","broken-axis","heatmap","tilemap","tiledwebmap","timeline","treemap","treegraph","item-series","drilldown","histogram-bellcurve","bullet","funnel","funnel3d","geoheatmap","pyramid3d","networkgraph","overlapping-datalabels","pareto","pattern-fill","pictorial","price-indicator","sankey","arc-diagram","dependency-wheel","series-label","series-on-point","solid-gauge","sonification","streamgraph","sunburst","variable-pie","variwide","vector","venn","windbarb","wordcloud","xrange","no-data-to-display","drag-panes","debugger","dumbbell","lollipop","cylinder","organization","dotplot","marker-clusters","hollowcandlestick","heikinashi","flowmap","export-data","navigator","textpath"],types:["string[]"],envLink:"HIGHCHARTS_MODULE_SCRIPTS",description:"Highcharts module scripts to fetch",promptOptions:{type:"multiselect",instructions:"Space: Select specific, A: Select all, Enter: Confirm"}},indicatorScripts:{value:["indicators-all"],types:["string[]"],envLink:"HIGHCHARTS_INDICATOR_SCRIPTS",description:"Highcharts indicator scripts to fetch",promptOptions:{type:"multiselect",instructions:"Space: Select specific, A: Select all, Enter: Confirm"}},customScripts:{value:["https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/moment.min.js","https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.45/moment-timezone-with-data.min.js"],types:["string[]"],envLink:"HIGHCHARTS_CUSTOM_SCRIPTS",description:"Additional custom scripts or dependencies to fetch",promptOptions:{type:"list",separator:";"}}},export:{infile:{value:null,types:["string","null"],envLink:"EXPORT_INFILE",description:"Input filename with type, formatted correctly as JSON or SVG",promptOptions:{type:"text"}},instr:{value:null,types:["Object","string","null"],envLink:"EXPORT_INSTR",description:"Overrides the `infile` with JSON, stringified JSON, or SVG input",promptOptions:{type:"text"}},options:{value:null,types:["Object","string","null"],envLink:"EXPORT_OPTIONS",description:"Alias for the `instr` option",promptOptions:{type:"text"}},svg:{value:null,types:["string","null"],envLink:"EXPORT_SVG",description:"SVG string representation of the chart to render",promptOptions:{type:"text"}},batch:{value:null,types:["string","null"],envLink:"EXPORT_BATCH",description:'Batch job string with input/output pairs: "in=out;in=out;..."',promptOptions:{type:"text"}},outfile:{value:null,types:["string","null"],envLink:"EXPORT_OUTFILE",description:"Output filename with type. Can be jpeg, png, pdf, or svg and ignores `type` option",promptOptions:{type:"text"}},type:{value:"png",types:["string"],envLink:"EXPORT_TYPE",description:"File export format. Can be jpeg, png, pdf, or svg",promptOptions:{type:"select",hint:"Default: png",choices:["png","jpeg","pdf","svg"]}},constr:{value:"chart",types:["string"],envLink:"EXPORT_CONSTR",description:"Chart constructor. Can be chart, stockChart, mapChart, or ganttChart",promptOptions:{type:"select",hint:"Default: chart",choices:["chart","stockChart","mapChart","ganttChart"]}},b64:{value:!1,types:["boolean"],envLink:"EXPORT_B64",description:"Whether or not to the chart should be received in Base64 format instead of binary",promptOptions:{type:"toggle"}},noDownload:{value:!1,types:["boolean"],envLink:"EXPORT_NO_DOWNLOAD",description:"Whether or not to include or exclude attachment headers in the response",promptOptions:{type:"toggle"}},height:{value:null,types:["number","null"],envLink:"EXPORT_HEIGHT",description:"Height of the exported chart, overrides chart settings",promptOptions:{type:"number"}},width:{value:null,types:["number","null"],envLink:"EXPORT_WIDTH",description:"Width of the exported chart, overrides chart settings",promptOptions:{type:"number"}},scale:{value:null,types:["number","null"],envLink:"EXPORT_SCALE",description:"Scale of the exported chart, overrides chart settings. Ranges from 0.1 to 5.0",promptOptions:{type:"number"}},defaultHeight:{value:400,types:["number"],envLink:"EXPORT_DEFAULT_HEIGHT",description:"Default height of the exported chart if not set",promptOptions:{type:"number"}},defaultWidth:{value:600,types:["number"],envLink:"EXPORT_DEFAULT_WIDTH",description:"Default width of the exported chart if not set",promptOptions:{type:"number"}},defaultScale:{value:1,types:["number"],envLink:"EXPORT_DEFAULT_SCALE",description:"Default scale of the exported chart if not set. Ranges from 0.1 to 5.0",promptOptions:{type:"number",min:.1,max:5}},globalOptions:{value:null,types:["Object","string","null"],envLink:"EXPORT_GLOBAL_OPTIONS",description:"JSON, stringified JSON or filename with global options for Highcharts.setOptions",promptOptions:{type:"text"}},themeOptions:{value:null,types:["Object","string","null"],envLink:"EXPORT_THEME_OPTIONS",description:"JSON, stringified JSON or filename with theme options for Highcharts.setOptions",promptOptions:{type:"text"}},rasterizationTimeout:{value:1500,types:["number"],envLink:"EXPORT_RASTERIZATION_TIMEOUT",description:"Milliseconds to wait for webpage rendering",promptOptions:{type:"number"}}},customLogic:{allowCodeExecution:{value:!1,types:["boolean"],envLink:"CUSTOM_LOGIC_ALLOW_CODE_EXECUTION",description:"Allows or disallows execution of arbitrary code during exporting",promptOptions:{type:"toggle"}},allowFileResources:{value:!1,types:["boolean"],envLink:"CUSTOM_LOGIC_ALLOW_FILE_RESOURCES",description:"Allows or disallows injection of filesystem resources (disabled in server mode)",promptOptions:{type:"toggle"}},customCode:{value:null,types:["string","null"],envLink:"CUSTOM_LOGIC_CUSTOM_CODE",description:"Custom code to execute before chart initialization. Can be a function, code wrapped in a function, or a .js filename",promptOptions:{type:"text"}},callback:{value:null,types:["string","null"],envLink:"CUSTOM_LOGIC_CALLBACK",description:"JavaScript code to run during construction. Can be a function or a .js filename",promptOptions:{type:"text"}},resources:{value:null,types:["Object","string","null"],envLink:"CUSTOM_LOGIC_RESOURCES",description:"Additional resources as JSON, stringified JSON, or filename, containing files, js, and css sections",promptOptions:{type:"text"}},loadConfig:{value:null,types:["string","null"],envLink:"CUSTOM_LOGIC_LOAD_CONFIG",legacyName:"fromFile",description:"File with a pre-defined configuration to use",promptOptions:{type:"text"}},createConfig:{value:null,types:["string","null"],envLink:"CUSTOM_LOGIC_CREATE_CONFIG",description:"Prompt-based option setting, saved to a provided config file",promptOptions:{type:"text"}}},server:{enable:{value:!1,types:["boolean"],envLink:"SERVER_ENABLE",cliName:"enableServer",description:"Starts the server when true",promptOptions:{type:"toggle"}},host:{value:"0.0.0.0",types:["string"],envLink:"SERVER_HOST",description:"Hostname of the server",promptOptions:{type:"text"}},port:{value:7801,types:["number"],envLink:"SERVER_PORT",description:"Port number for the server",promptOptions:{type:"number"}},uploadLimit:{value:3,types:["number"],envLink:"SERVER_UPLOAD_LIMIT",description:"Maximum request body size in MB",promptOptions:{type:"number"}},benchmarking:{value:!1,types:["boolean"],envLink:"SERVER_BENCHMARKING",cliName:"serverBenchmarking",description:"Displays or not action durations in milliseconds during server requests",promptOptions:{type:"toggle"}},proxy:{host:{value:null,types:["string","null"],envLink:"SERVER_PROXY_HOST",cliName:"proxyHost",description:"Host of the proxy server, if applicable",promptOptions:{type:"text"}},port:{value:null,types:["number","null"],envLink:"SERVER_PROXY_PORT",cliName:"proxyPort",description:"Port of the proxy server, if applicable",promptOptions:{type:"number"}},timeout:{value:5e3,types:["number"],envLink:"SERVER_PROXY_TIMEOUT",cliName:"proxyTimeout",description:"Timeout in milliseconds for the proxy server, if applicable",promptOptions:{type:"number"}}},rateLimiting:{enable:{value:!1,types:["boolean"],envLink:"SERVER_RATE_LIMITING_ENABLE",cliName:"enableRateLimiting",description:"Enables or disables rate limiting on the server",promptOptions:{type:"toggle"}},maxRequests:{value:10,types:["number"],envLink:"SERVER_RATE_LIMITING_MAX_REQUESTS",legacyName:"rateLimit",description:"Maximum number of requests allowed per minute",promptOptions:{type:"number"}},window:{value:1,types:["number"],envLink:"SERVER_RATE_LIMITING_WINDOW",description:"Time window in minutes for rate limiting",promptOptions:{type:"number"}},delay:{value:0,types:["number"],envLink:"SERVER_RATE_LIMITING_DELAY",description:"Delay duration between successive requests before reaching the limit",promptOptions:{type:"number"}},trustProxy:{value:!1,types:["boolean"],envLink:"SERVER_RATE_LIMITING_TRUST_PROXY",description:"Set to true if the server is behind a load balancer",promptOptions:{type:"toggle"}},skipKey:{value:null,types:["string","null"],envLink:"SERVER_RATE_LIMITING_SKIP_KEY",description:"Key to bypass the rate limiter, used with `skipToken`",promptOptions:{type:"text"}},skipToken:{value:null,types:["string","null"],envLink:"SERVER_RATE_LIMITING_SKIP_TOKEN",description:"Token to bypass the rate limiter, used with `skipKey`",promptOptions:{type:"text"}}},ssl:{enable:{value:!1,types:["boolean"],envLink:"SERVER_SSL_ENABLE",cliName:"enableSsl",description:"Enables or disables SSL protocol",promptOptions:{type:"toggle"}},force:{value:!1,types:["boolean"],envLink:"SERVER_SSL_FORCE",cliName:"sslForce",legacyName:"sslOnly",description:"Forces the server to use HTTPS only when true",promptOptions:{type:"toggle"}},port:{value:443,types:["number"],envLink:"SERVER_SSL_PORT",cliName:"sslPort",description:"Port for the SSL server",promptOptions:{type:"number"}},certPath:{value:null,types:["string","null"],envLink:"SERVER_SSL_CERT_PATH",cliName:"sslCertPath",legacyName:"sslPath",description:"Path to the SSL certificate/key file",promptOptions:{type:"text"}}}},pool:{minWorkers:{value:4,types:["number"],envLink:"POOL_MIN_WORKERS",description:"Minimum and initial number of pool workers to spawn",promptOptions:{type:"number"}},maxWorkers:{value:8,types:["number"],envLink:"POOL_MAX_WORKERS",legacyName:"workers",description:"Maximum number of pool workers to spawn",promptOptions:{type:"number"}},workLimit:{value:40,types:["number"],envLink:"POOL_WORK_LIMIT",description:"Number of tasks a worker can handle before restarting",promptOptions:{type:"number"}},acquireTimeout:{value:5e3,types:["number"],envLink:"POOL_ACQUIRE_TIMEOUT",description:"Timeout in milliseconds for acquiring a resource",promptOptions:{type:"number"}},createTimeout:{value:5e3,types:["number"],envLink:"POOL_CREATE_TIMEOUT",description:"Timeout in milliseconds for creating a resource",promptOptions:{type:"number"}},destroyTimeout:{value:5e3,types:["number"],envLink:"POOL_DESTROY_TIMEOUT",description:"Timeout in milliseconds for destroying a resource",promptOptions:{type:"number"}},idleTimeout:{value:3e4,types:["number"],envLink:"POOL_IDLE_TIMEOUT",description:"Timeout in milliseconds for destroying idle resources",promptOptions:{type:"number"}},createRetryInterval:{value:200,types:["number"],envLink:"POOL_CREATE_RETRY_INTERVAL",description:"Interval in milliseconds before retrying resource creation on failure",promptOptions:{type:"number"}},reaperInterval:{value:1e3,types:["number"],envLink:"POOL_REAPER_INTERVAL",description:"Interval in milliseconds to check and destroy idle resources",promptOptions:{type:"number"}},benchmarking:{value:!1,types:["boolean"],envLink:"POOL_BENCHMARKING",cliName:"poolBenchmarking",description:"Shows statistics for the pool of resources",promptOptions:{type:"toggle"}}},logging:{level:{value:4,types:["number"],envLink:"LOGGING_LEVEL",cliName:"logLevel",description:"Logging verbosity level",promptOptions:{type:"number",round:0,min:0,max:5}},file:{value:"highcharts-export-server.log",types:["string"],envLink:"LOGGING_FILE",cliName:"logFile",description:"Log file name. Requires `logToFile` and `logDest` to be set",promptOptions:{type:"text"}},dest:{value:"log",types:["string"],envLink:"LOGGING_DEST",cliName:"logDest",description:"Path to store log files. Requires `logToFile` to be set",promptOptions:{type:"text"}},toConsole:{value:!0,types:["boolean"],envLink:"LOGGING_TO_CONSOLE",cliName:"logToConsole",description:"Enables or disables console logging",promptOptions:{type:"toggle"}},toFile:{value:!0,types:["boolean"],envLink:"LOGGING_TO_FILE",cliName:"logToFile",description:"Enables or disables logging to a file",promptOptions:{type:"toggle"}}},ui:{enable:{value:!1,types:["boolean"],envLink:"UI_ENABLE",cliName:"enableUi",description:"Enables or disables the UI for the export server",promptOptions:{type:"toggle"}},route:{value:"/",types:["string"],envLink:"UI_ROUTE",cliName:"uiRoute",description:"The endpoint route for the UI",promptOptions:{type:"text"}}},other:{nodeEnv:{value:"production",types:["string"],envLink:"OTHER_NODE_ENV",description:"The Node.js environment type",promptOptions:{type:"text"}},listenToProcessExits:{value:!0,types:["boolean"],envLink:"OTHER_LISTEN_TO_PROCESS_EXITS",description:"Whether or not to attach process.exit handlers",promptOptions:{type:"toggle"}},noLogo:{value:!1,types:["boolean"],envLink:"OTHER_NO_LOGO",description:"Display or skip printing the logo on startup",promptOptions:{type:"toggle"}},hardResetPage:{value:!1,types:["boolean"],envLink:"OTHER_HARD_RESET_PAGE",description:"Whether or not to reset the page content entirely",promptOptions:{type:"toggle"}},browserShellMode:{value:!0,types:["boolean"],envLink:"OTHER_BROWSER_SHELL_MODE",description:"Whether or not to set the browser to run in shell mode",promptOptions:{type:"toggle"}},validation:{value:!0,types:["boolean"],envLink:"OTHER_VALIDATION",description:"Whether or not to enable validation of options types",promptOptions:{type:"toggle"}}},debug:{enable:{value:!1,types:["boolean"],envLink:"DEBUG_ENABLE",cliName:"enableDebug",description:"Enables or disables debug mode for the underlying browser",promptOptions:{type:"toggle"}},headless:{value:!1,types:["boolean"],envLink:"DEBUG_HEADLESS",description:"Whether or not to set the browser to run in headless mode during debugging",promptOptions:{type:"toggle"}},devtools:{value:!1,types:["boolean"],envLink:"DEBUG_DEVTOOLS",description:"Enables or disables DevTools in headful mode",promptOptions:{type:"toggle"}},listenToConsole:{value:!1,types:["boolean"],envLink:"DEBUG_LISTEN_TO_CONSOLE",description:"Enables or disables listening to console messages from the browser",promptOptions:{type:"toggle"}},dumpio:{value:!1,types:["boolean"],envLink:"DEBUG_DUMPIO",description:"Redirects or not browser stdout and stderr to process.stdout and process.stderr",promptOptions:{type:"toggle"}},slowMo:{value:0,types:["number"],envLink:"DEBUG_SLOW_MO",description:"Delays Puppeteer operations by the specified milliseconds",promptOptions:{type:"number"}},debuggingPort:{value:9222,types:["number"],envLink:"DEBUG_DEBUGGING_PORT",description:"Port used for debugging",promptOptions:{type:"number"}}}},nestedProps=_createNestedProps(defaultConfig),absoluteProps=_createAbsoluteProps(defaultConfig);function _createNestedProps(e,t={},o=""){return Object.keys(e).forEach((r=>{const n=e[r];void 0===n.value?_createNestedProps(n,t,`${o}.${r}`):(t[n.cliName||r]=`${o}.${r}`.substring(1),void 0!==n.legacyName&&(t[n.legacyName]=`${o}.${r}`.substring(1)))})),t}function _createAbsoluteProps(e,t=[]){return Object.keys(e).forEach((o=>{const r=e[o];void 0===r.types?_createAbsoluteProps(r,t):r.types.includes("Object")&&t.push(o)})),t}dotenv.config();const{coreScripts:coreScripts,moduleScripts:moduleScripts,indicatorScripts:indicatorScripts}=defaultConfig.highcharts;zod.z.setErrorMap(_customErrorMap);const v={boolean:e=>e?zod.z.boolean():zod.z.union([zod.z.enum(["true","1","false","0","undefined","null",""]).transform((e=>["undefined","null",""].includes(e)?null:"true"===e||"1"===e)),zod.z.boolean()]).nullable(),string:e=>e?zod.z.string().trim().refine((e=>!["false","undefined","null",""].includes(e)),{params:{errorMessage:"The string contains a forbidden value"}}):zod.z.string().trim().transform((e=>["false","undefined","null",""].includes(e)?null:e)).nullable(),enum:(e,t)=>t?zod.z.enum([...e]):zod.z.enum([...e,"undefined","null",""]).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),stringArray(e,t,o){const r=zod.z.string().trim().array(),n=zod.z.string().trim().transform((e=>(e.startsWith("[")&&(e=e.slice(1)),e.endsWith("]")&&(e=e.slice(0,-1)),e.split(t)))),i=t=>t.map((e=>e.trim())).filter(e);return o?r.transform(i):zod.z.union([n,r]).transform(i).transform((e=>e.length?e:null)).nullable()},positiveNum:e=>e?zod.z.number().positive():zod.z.union([zod.z.string().trim().refine((e=>!isNaN(Number(e))&&Number(e)>0||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be numeric and positive"}}).transform((e=>["undefined","null",""].includes(e)?null:Number(e))),zod.z.number().positive()]).nullable(),nonNegativeNum:e=>e?zod.z.number().nonnegative():zod.z.union([zod.z.string().trim().refine((e=>!isNaN(Number(e))&&Number(e)>=0||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be numeric and non-negative"}}).transform((e=>["undefined","null",""].includes(e)?null:Number(e))),zod.z.number().nonnegative()]).nullable(),startsWith:(e,t)=>t?zod.z.string().trim().refine((t=>e.some((e=>t.startsWith(e)))),{params:{errorMessage:`The value must be a string that starts with ${e.join(", ")}`}}):zod.z.string().trim().refine((t=>e.some((e=>t.startsWith(e)))||["undefined","null",""].includes(t)),{params:{errorMessage:`The value must be a string that starts with ${e.join(", ")}`}}).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),chartConfig:()=>zod.z.union([zod.z.string().trim().refine((e=>e.startsWith("{")&&e.endsWith("}")||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that starts with '{' and ends with '}'"}}).transform((e=>["undefined","null",""].includes(e)?null:e)),zod.z.object({}).passthrough()]).nullable(),additionalOptions:()=>zod.z.union([zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".json")||e.startsWith("{")&&e.endsWith("}")||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that ends with '.json' or starts with '{' and ends with '}'"}}).transform((e=>["undefined","null",""].includes(e)?null:e)),zod.z.object({}).passthrough()]).nullable()},validators={args:e=>v.stringArray((e=>!["false","undefined","null",""].includes(e)),";",e),version:e=>e?zod.z.string().trim().refine((e=>/^(latest|\d{1,2}(\.\d{1,2}){0,2})$/.test(e)),{params:{errorMessage:"The value must be 'latest', a major version, or in the form XX.YY.ZZ"}}):zod.z.string().trim().refine((e=>/^(latest|\d{1,2}(\.\d{1,2}){0,2})$/.test(e)||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be 'latest', a major version, or in the form XX.YY.ZZ"}}).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),cdnUrl:e=>v.startsWith(["http://","https://"],e),forceFetch:e=>v.boolean(e),cachePath:e=>v.string(e),adminToken:e=>v.string(e),coreScripts:e=>v.stringArray((e=>coreScripts.value.includes(e)),",",e),moduleScripts:e=>v.stringArray((e=>moduleScripts.value.includes(e)),",",e),indicatorScripts:e=>v.stringArray((e=>indicatorScripts.value.includes(e)),",",e),customScripts:e=>v.stringArray((e=>e.startsWith("https://")||e.startsWith("http://")),",",e),infile:e=>e?zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".json")||e.length>=5&&e.endsWith(".svg")),{params:{errorMessage:"The value must be a string that ends with .json or .svg"}}).nullable():zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".json")||e.length>=5&&e.endsWith(".svg")||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that ends with .json or .svg"}}).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),instr:()=>v.chartConfig(),options:()=>v.chartConfig(),svg:()=>zod.z.string().trim().refine((e=>e.indexOf("<svg")>=0||e.indexOf("<?xml")>=0||["false","undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that contains '<svg' or '<?xml'"}}).transform((e=>["false","undefined","null",""].includes(e)?null:e)).nullable(),outfile:e=>e?zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".jpeg")||e.length>=5&&(e.endsWith(".jpg")||e.endsWith(".png")||e.endsWith(".pdf")||e.endsWith(".svg"))),{params:{errorMessage:"The value must be a string that ends with .jpeg, .jpg, .png, .pdf, or .svg"}}).nullable():zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".jpeg")||e.length>=5&&(e.endsWith(".jpg")||e.endsWith(".png")||e.endsWith(".pdf")||e.endsWith(".svg"))||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that ends with .jpeg, .jpg, .png, .pdf, or .svg"}}).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),type:e=>v.enum(["jpeg","jpg","png","pdf","svg"],e),constr:e=>v.enum(["chart","stockChart","mapChart","ganttChart"],e),b64:e=>v.boolean(e),noDownload:e=>v.boolean(e),defaultHeight:e=>v.positiveNum(e),defaultWidth:e=>v.positiveNum(e),defaultScale:e=>e?zod.z.number().gte(.1).lte(5):zod.z.union([zod.z.string().trim().refine((e=>!isNaN(Number(e))&&!0!==e&&!e.startsWith("[")&&Number(e)>=.1&&Number(e)<=5||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be within a 0.1 and 5.0 range"}}).transform((e=>["undefined","null",""].includes(e)?null:Number(e))),zod.z.number().gte(.1).lte(5)]).nullable(),height(e){return this.defaultHeight(e).nullable()},width(e){return this.defaultWidth(e).nullable()},scale(e){return this.defaultScale(e).nullable()},globalOptions:()=>v.additionalOptions(),themeOptions:()=>v.additionalOptions(),batch:e=>v.string(e),rasterizationTimeout:e=>v.nonNegativeNum(e),allowCodeExecution:e=>v.boolean(e),allowFileResources:e=>v.boolean(e),customCode:e=>v.string(e),callback:e=>v.string(e),resources(e){const t=zod.z.object({js:v.string(!1),css:v.string(!1),files:v.stringArray((e=>!["undefined","null",""].includes(e)),",",!0).nullable()}).partial(),o=zod.z.string().trim().refine((e=>e.startsWith("{")&&e.endsWith("}")||e.length>=6&&e.endsWith(".json")),{params:{errorMessage:"The value must be a string that starts with '{' and ends with '}"}}),r=zod.z.string().trim().refine((e=>e.startsWith("{")&&e.endsWith("}")||e.length>=6&&e.endsWith(".json")||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that ends with .json"}}).transform((e=>["undefined","null",""].includes(e)?null:e));return e?zod.z.union([t,o]).nullable():zod.z.union([t,r]).nullable()},loadConfig:e=>v.string(e).refine((e=>null===e||e.length>=6&&e.endsWith(".json")),{params:{errorMessage:"The value must be a string that ends with .json"}}),createConfig(e){return this.loadConfig(e)},enableServer:e=>v.boolean(e),host:e=>v.string(e),port:e=>v.nonNegativeNum(e),uploadLimit:e=>v.positiveNum(e),serverBenchmarking:e=>v.boolean(e),proxyHost:e=>v.string(e),proxyPort:e=>v.nonNegativeNum(e).nullable(),proxyTimeout:e=>v.nonNegativeNum(e),enableRateLimiting:e=>v.boolean(e),maxRequests:e=>v.nonNegativeNum(e),window:e=>v.nonNegativeNum(e),delay:e=>v.nonNegativeNum(e),trustProxy:e=>v.boolean(e),skipKey:e=>v.string(e),skipToken:e=>v.string(e),enableSsl:e=>v.boolean(e),sslForce:e=>v.boolean(e),sslPort:e=>v.nonNegativeNum(e),sslCertPath:e=>v.string(e),minWorkers:e=>v.positiveNum(e),maxWorkers:e=>v.positiveNum(e),workLimit:e=>v.positiveNum(e),acquireTimeout:e=>v.nonNegativeNum(e),createTimeout:e=>v.nonNegativeNum(e),destroyTimeout:e=>v.nonNegativeNum(e),idleTimeout:e=>v.nonNegativeNum(e),createRetryInterval:e=>v.nonNegativeNum(e),reaperInterval:e=>v.nonNegativeNum(e),poolBenchmarking:e=>v.boolean(e),resourcesInterval:e=>v.nonNegativeNum(e),logLevel:e=>e?zod.z.number().int().gte(0).lte(5):zod.z.union([zod.z.string().trim().refine((e=>!isNaN(Number(e))&&!0!==e&&!e.startsWith("[")&&Number.isInteger(Number(e))&&Number(e)>=0&&Number(e)<=5||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be within a 0 and 5 range"}}).transform((e=>["undefined","null",""].includes(e)?null:Number(e))),zod.z.number().int().gte(0).lte(5)]).nullable(),logFile:e=>v.string(e).refine((e=>null===e||e.length>=5&&e.endsWith(".log")),{params:{errorMessage:"The value must be a string that ends with .log"}}),logDest:e=>v.string(e),logToConsole:e=>v.boolean(e),logToFile:e=>v.boolean(e),enableUi:e=>v.boolean(e),uiRoute:e=>v.startsWith(["/"],e),nodeEnv:e=>v.enum(["development","production","test"],e),listenToProcessExits:e=>v.boolean(e),noLogo:e=>v.boolean(e),hardResetPage:e=>v.boolean(e),browserShellMode:e=>v.boolean(e),validation:e=>v.boolean(e),enableDebug:e=>v.boolean(e),headless:e=>v.boolean(e),devtools:e=>v.boolean(e),listenToConsole:e=>v.boolean(e),dumpio:e=>v.boolean(e),slowMo:e=>v.nonNegativeNum(e),debuggingPort:e=>v.nonNegativeNum(e),requestId:()=>zod.z.string().uuid({message:"The value must be a stringified UUID"}).nullable()},PuppeteerSchema=e=>zod.z.object({args:validators.args(e)}).partial(),HighchartsSchema=e=>zod.z.object({version:validators.version(e),cdnUrl:validators.cdnUrl(e),forceFetch:validators.forceFetch(e),cachePath:validators.cachePath(e),coreScripts:validators.coreScripts(e),moduleScripts:validators.moduleScripts(e),indicatorScripts:validators.indicatorScripts(e),customScripts:validators.customScripts(e)}).partial(),ExportSchema=e=>zod.z.object({infile:validators.infile(e),instr:validators.instr(),options:validators.options(),svg:validators.svg(),outfile:validators.outfile(e),type:validators.type(e),constr:validators.constr(e),b64:validators.b64(e),noDownload:validators.noDownload(e),defaultHeight:validators.defaultHeight(e),defaultWidth:validators.defaultWidth(e),defaultScale:validators.defaultScale(e),height:validators.height(e),width:validators.width(e),scale:validators.scale(e),globalOptions:validators.globalOptions(),themeOptions:validators.themeOptions(),batch:validators.batch(!1),rasterizationTimeout:validators.rasterizationTimeout(e)}).partial(),CustomLogicSchema=e=>zod.z.object({allowCodeExecution:validators.allowCodeExecution(e),allowFileResources:validators.allowFileResources(e),customCode:validators.customCode(!1),callback:validators.callback(!1),resources:validators.resources(e),loadConfig:validators.loadConfig(!1),createConfig:validators.createConfig(!1)}).partial(),ProxySchema=e=>zod.z.object({host:validators.proxyHost(!1),port:validators.proxyPort(e),timeout:validators.proxyTimeout(e)}).partial(),RateLimitingSchema=e=>zod.z.object({enable:validators.enableRateLimiting(e),maxRequests:validators.maxRequests(e),window:validators.window(e),delay:validators.delay(e),trustProxy:validators.trustProxy(e),skipKey:validators.skipKey(!1),skipToken:validators.skipToken(!1)}).partial(),SslSchema=e=>zod.z.object({enable:validators.enableSsl(e),force:validators.sslForce(e),port:validators.sslPort(e),certPath:validators.sslCertPath(!1)}).partial(),ServerSchema=e=>zod.z.object({enable:validators.enableServer(e).optional(),host:validators.host(e).optional(),port:validators.port(e).optional(),uploadLimit:validators.uploadLimit(e).optional(),benchmarking:validators.serverBenchmarking(e).optional(),proxy:ProxySchema(e).optional(),rateLimiting:RateLimitingSchema(e).optional(),ssl:SslSchema(e).optional()}),PoolSchema=e=>zod.z.object({minWorkers:validators.minWorkers(e),maxWorkers:validators.maxWorkers(e),workLimit:validators.workLimit(e),acquireTimeout:validators.acquireTimeout(e),createTimeout:validators.createTimeout(e),destroyTimeout:validators.destroyTimeout(e),idleTimeout:validators.idleTimeout(e),createRetryInterval:validators.createRetryInterval(e),reaperInterval:validators.reaperInterval(e),benchmarking:validators.poolBenchmarking(e)}).partial(),LoggingSchema=e=>zod.z.object({level:validators.logLevel(e),file:validators.logFile(e),dest:validators.logDest(e),toConsole:validators.logToConsole(e),toFile:validators.logToFile(e)}).partial(),UiSchema=e=>zod.z.object({enable:validators.enableUi(e),route:validators.uiRoute(e)}).partial(),OtherSchema=e=>zod.z.object({nodeEnv:validators.nodeEnv(e),listenToProcessExits:validators.listenToProcessExits(e),noLogo:validators.noLogo(e),hardResetPage:validators.hardResetPage(e),browserShellMode:validators.browserShellMode(e),validation:validators.validation(e)}).partial(),DebugSchema=e=>zod.z.object({enable:validators.enableDebug(e),headless:validators.headless(e),devtools:validators.devtools(e),listenToConsole:validators.listenToConsole(e),dumpio:validators.dumpio(e),slowMo:validators.slowMo(e),debuggingPort:validators.debuggingPort(e)}).partial(),StrictConfigSchema=zod.z.object({requestId:validators.requestId(),puppeteer:PuppeteerSchema(!0),highcharts:HighchartsSchema(!0),export:ExportSchema(!0),customLogic:CustomLogicSchema(!0),server:ServerSchema(!0),pool:PoolSchema(!0),logging:LoggingSchema(!0),ui:UiSchema(!0),other:OtherSchema(!0),debug:DebugSchema(!0)}),LooseConfigSchema=zod.z.object({requestId:validators.requestId(),puppeteer:PuppeteerSchema(!1),highcharts:HighchartsSchema(!1),export:ExportSchema(!1),customLogic:CustomLogicSchema(!1),server:ServerSchema(!1),pool:PoolSchema(!1),logging:LoggingSchema(!1),ui:UiSchema(!1),other:OtherSchema(!1),debug:DebugSchema(!1)}),EnvSchema=zod.z.object({PUPPETEER_ARGS:validators.args(!1),HIGHCHARTS_VERSION:validators.version(!1),HIGHCHARTS_CDN_URL:validators.cdnUrl(!1),HIGHCHARTS_FORCE_FETCH:validators.forceFetch(!1),HIGHCHARTS_CACHE_PATH:validators.cachePath(!1),HIGHCHARTS_ADMIN_TOKEN:validators.adminToken(!1),HIGHCHARTS_CORE_SCRIPTS:validators.coreScripts(!1),HIGHCHARTS_MODULE_SCRIPTS:validators.moduleScripts(!1),HIGHCHARTS_INDICATOR_SCRIPTS:validators.indicatorScripts(!1),HIGHCHARTS_CUSTOM_SCRIPTS:validators.customScripts(!1),EXPORT_INFILE:validators.infile(!1),EXPORT_INSTR:validators.instr(),EXPORT_OPTIONS:validators.options(),EXPORT_SVG:validators.svg(),EXPORT_BATCH:validators.batch(!1),EXPORT_OUTFILE:validators.outfile(!1),EXPORT_TYPE:validators.type(!1),EXPORT_CONSTR:validators.constr(!1),EXPORT_B64:validators.b64(!1),EXPORT_NO_DOWNLOAD:validators.noDownload(!1),EXPORT_HEIGHT:validators.height(!1),EXPORT_WIDTH:validators.width(!1),EXPORT_SCALE:validators.scale(!1),EXPORT_DEFAULT_HEIGHT:validators.defaultHeight(!1),EXPORT_DEFAULT_WIDTH:validators.defaultWidth(!1),EXPORT_DEFAULT_SCALE:validators.defaultScale(!1),EXPORT_GLOBAL_OPTIONS:validators.globalOptions(),EXPORT_THEME_OPTIONS:validators.themeOptions(),EXPORT_RASTERIZATION_TIMEOUT:validators.rasterizationTimeout(!1),CUSTOM_LOGIC_ALLOW_CODE_EXECUTION:validators.allowCodeExecution(!1),CUSTOM_LOGIC_ALLOW_FILE_RESOURCES:validators.allowFileResources(!1),CUSTOM_LOGIC_CUSTOM_CODE:validators.customCode(!1),CUSTOM_LOGIC_CALLBACK:validators.callback(!1),CUSTOM_LOGIC_RESOURCES:validators.resources(!1),CUSTOM_LOGIC_LOAD_CONFIG:validators.loadConfig(!1),CUSTOM_LOGIC_CREATE_CONFIG:validators.createConfig(!1),SERVER_ENABLE:validators.enableServer(!1),SERVER_HOST:validators.host(!1),SERVER_PORT:validators.port(!1),SERVER_UPLOAD_LIMIT:validators.uploadLimit(!1),SERVER_BENCHMARKING:validators.serverBenchmarking(!1),SERVER_PROXY_HOST:validators.proxyHost(!1),SERVER_PROXY_PORT:validators.proxyPort(!1),SERVER_PROXY_TIMEOUT:validators.proxyTimeout(!1),SERVER_RATE_LIMITING_ENABLE:validators.enableRateLimiting(!1),SERVER_RATE_LIMITING_MAX_REQUESTS:validators.maxRequests(!1),SERVER_RATE_LIMITING_WINDOW:validators.window(!1),SERVER_RATE_LIMITING_DELAY:validators.delay(!1),SERVER_RATE_LIMITING_TRUST_PROXY:validators.trustProxy(!1),SERVER_RATE_LIMITING_SKIP_KEY:validators.skipKey(!1),SERVER_RATE_LIMITING_SKIP_TOKEN:validators.skipToken(!1),SERVER_SSL_ENABLE:validators.enableSsl(!1),SERVER_SSL_FORCE:validators.sslForce(!1),SERVER_SSL_PORT:validators.sslPort(!1),SERVER_SSL_CERT_PATH:validators.sslCertPath(!1),POOL_MIN_WORKERS:validators.minWorkers(!1),POOL_MAX_WORKERS:validators.maxWorkers(!1),POOL_WORK_LIMIT:validators.workLimit(!1),POOL_ACQUIRE_TIMEOUT:validators.acquireTimeout(!1),POOL_CREATE_TIMEOUT:validators.createTimeout(!1),POOL_DESTROY_TIMEOUT:validators.destroyTimeout(!1),POOL_IDLE_TIMEOUT:validators.idleTimeout(!1),POOL_CREATE_RETRY_INTERVAL:validators.createRetryInterval(!1),POOL_REAPER_INTERVAL:validators.reaperInterval(!1),POOL_BENCHMARKING:validators.poolBenchmarking(!1),LOGGING_LEVEL:validators.logLevel(!1),LOGGING_FILE:validators.logFile(!1),LOGGING_DEST:validators.logDest(!1),LOGGING_TO_CONSOLE:validators.logToConsole(!1),LOGGING_TO_FILE:validators.logToFile(!1),UI_ENABLE:validators.enableUi(!1),UI_ROUTE:validators.uiRoute(!1),OTHER_NODE_ENV:validators.nodeEnv(!1),OTHER_LISTEN_TO_PROCESS_EXITS:validators.listenToProcessExits(!1),OTHER_NO_LOGO:validators.noLogo(!1),OTHER_HARD_RESET_PAGE:validators.hardResetPage(!1),OTHER_BROWSER_SHELL_MODE:validators.browserShellMode(!1),OTHER_VALIDATION:validators.validation(!1),DEBUG_ENABLE:validators.enableDebug(!1),DEBUG_HEADLESS:validators.headless(!1),DEBUG_DEVTOOLS:validators.devtools(!1),DEBUG_LISTEN_TO_CONSOLE:validators.listenToConsole(!1),DEBUG_DUMPIO:validators.dumpio(!1),DEBUG_SLOW_MO:validators.slowMo(!1),DEBUG_DEBUGGING_PORT:validators.debuggingPort(!1)}),envs=EnvSchema.partial().parse(process.env);function strictValidate(e){return StrictConfigSchema.partial().parse(e)}function looseValidate(e){return LooseConfigSchema.partial().parse(e)}function _customErrorMap(e,t){const o=e.path.join("."),r=`Invalid value for the ${o}`;if(e.code===zod.z.ZodIssueCode.invalid_type)return e.received===zod.z.ZodParsedType.undefined?{message:`${r} - No value was provided.`}:{message:`${r} - Invalid type. ${t.defaultError}.`};if(e.code===zod.z.ZodIssueCode.custom&&e.params?.errorMessage)return{message:`${r} - ${e.params?.errorMessage}, received '${t.data}'.`};if(e.code===zod.z.ZodIssueCode.invalid_union){let t=`Multiple errors occurred for the ${o}:\n`;return e.unionErrors.forEach((e=>{const o=e.issues[0].message.indexOf("-");t+=-1!==o?`${e.issues[0].message}\n`.substring(o):`${e.issues[0].message}\n`})),{message:t}}return{message:`${r} - ${t.defaultError}.`}}class ExportError extends Error{constructor(e,t){super(),this.message=e,this.stackMessage=e,t&&(this.statusCode=t)}setStatus(e){return this.statusCode=e,this}setError(e){return this.error=e,e.name&&(this.name=e.name),e.statusCode&&(this.statusCode=e.statusCode),e.stack&&(this.stackMessage=e.message,this.stack=e.stack),this}}const globalOptions=_initOptions(defaultConfig);function getOptions(e=!0){return e?deepCopy(globalOptions):globalOptions}function updateOptions(e,t=!1,o=!0){return _mergeOptions(getOptions(t),validateOptions(e,o))}function mapToNewOptions(e){const t={};if(isObject(e))for(const[o,r]of Object.entries(e)){const e=nestedProps[o]?nestedProps[o].split("."):[];e.reduce(((t,o,n)=>t[o]=e.length-1===n?r:t[o]||{}),t)}else log(2,"[config] No correct object with options was provided. Returning an empty array.");return t}function validateOption(e,t,o=!0){if(!getOptions().other.validation)return t;try{return validators[e](o).parse(t)}catch(t){throw logZodIssues(1,t.issues,`[validation] The ${e} option validation error`),new ExportError(`[validation] The ${e} option validation error`,400)}}function validateOptions(e,t=!0){if(!getOptions().other.validation)return e;try{return t?strictValidate(e):looseValidate(e)}catch(e){throw logZodIssues(1,e.issues,"[validation] Options validation error"),new ExportError("[validation] Options validation error",400)}}function isAllowedConfig(config,toString=!1,allowFunctions=!1){try{if(!isObject(config)&&"string"!=typeof config)return null;const objectConfig="string"==typeof config?allowFunctions?eval(`(${config})`):JSON.parse(config):config,stringifiedOptions=_optionsStringify(objectConfig,allowFunctions,!1),parsedOptions=allowFunctions?JSON.parse(_optionsStringify(objectConfig,allowFunctions,!0),((_,value)=>"string"==typeof value&&value.startsWith("function")?eval(`(${value})`):value)):JSON.parse(stringifiedOptions);return toString?stringifiedOptions:parsedOptions}catch(e){return null}}function _initOptions(e){const t={};for(const[o,r]of Object.entries(e))Object.prototype.hasOwnProperty.call(r,"value")?void 0!==envs[r.envLink]&&null!==envs[r.envLink]?t[o]=envs[r.envLink]:t[o]=r.value:t[o]=_initOptions(r);return t}function _mergeOptions(e,t){if(isObject(e)&&isObject(t))for(const[o,r]of Object.entries(t))e[o]=isObject(r)&&!absoluteProps.includes(o)&&void 0!==e[o]?_mergeOptions(e[o],r):void 0!==r?r:e[o]||null;return e}function _optionsStringify(e,t,o){return JSON.stringify(e,((e,r)=>{if("string"==typeof r&&(r=r.trim()),"function"==typeof r||"string"==typeof r&&r.startsWith("function")&&r.endsWith("}")){if(t)return o?`"EXP_FUN${(r+"").replaceAll(/\s+/g," ")}EXP_FUN"`:`EXP_FUN${(r+"").replaceAll(/\s+/g," ")}EXP_FUN`;throw new Error}return r})).replaceAll(o?/\\"EXP_FUN|EXP_FUN\\"/g:/"EXP_FUN|EXP_FUN"/g,"")}async function fetch(e,t={}){return new Promise(((o,r)=>{_getProtocolModule(e).get(e,t,(e=>{let t="";e.on("data",(e=>{t+=e})),e.on("end",(()=>{t||r("Nothing was fetched from the URL."),e.text=t,o(e)}))})).on("error",(e=>{r(e)}))}))}function _getProtocolModule(e){return e.startsWith("https")?https:http}const cache={cdnUrl:"https://code.highcharts.com",activeManifest:{},sources:"",hcVersion:""};async function checkAndUpdateCache(e,t){try{let o;const r=getCachePath(),n=path.join(r,"manifest.json"),i=path.join(r,"sources.js");if(!fs.existsSync(r)&&fs.mkdirSync(r,{recursive:!0}),!fs.existsSync(n)||e.forceFetch)log(3,"[cache] Fetching and caching Highcharts dependencies."),o=await _updateCache(e,t,i);else{let r=!1;const s=JSON.parse(fs.readFileSync(n),"utf8");if(s.modules&&Array.isArray(s.modules)){const e={};s.modules.forEach((t=>e[t]=1)),s.modules=e}const{coreScripts:a,moduleScripts:l,indicatorScripts:c}=e,p=a.length+l.length+c.length;s.version!==e.version?(log(2,"[cache] A Highcharts version mismatch in the cache, need to re-fetch."),r=!0):Object.keys(s.modules||{}).length!==p?(log(2,"[cache] The cache and the requested modules do not match, need to re-fetch."),r=!0):r=(l||[]).some((e=>{if(!s.modules[e])return log(2,`[cache] The ${e} is missing in the cache, need to re-fetch.`),!0})),r?o=await _updateCache(e,t,i):(log(3,"[cache] Dependency cache is up to date, proceeding."),cache.sources=fs.readFileSync(i,"utf8"),o=s.modules,cache.hcVersion=extractVersion(cache.sources))}await _saveConfigToManifest(e,o)}catch(e){throw new ExportError("[cache] Could not configure cache and create or update the config manifest.",500).setError(e)}}function getHighchartsVersion(){return cache.hcVersion}async function updateHighchartsVersion(e){const t=updateOptions({highcharts:{version:e}});await checkAndUpdateCache(t.highcharts,t.server.proxy)}function extractVersion(e){return e.substring(0,e.indexOf("*/")).replace("/*","").replace("*/","").replace(/\n/g,"").trim()}function extractModuleName(e){return e.replace(/(.*)\/|(.*)modules\/|stock\/(.*)indicators\/|maps\/(.*)modules\//gi,"")}function getCachePath(){return getAbsolutePath(getOptions().highcharts.cachePath)}async function _fetchAndProcessScript(e,t,o,r=!1){e.endsWith(".js")&&(e=e.substring(0,e.length-3)),log(4,`[cache] Fetching script - ${e}.js`);const n=await fetch(`${e}.js`,t);if(200===n.statusCode&&"string"==typeof n.text){if(o){o[extractModuleName(e)]=1}return n.text}if(r)throw new ExportError(`[cache] Could not fetch the ${e}.js. The script might not exist in the requested version (status code: ${n.statusCode}).`,404).setError(n);log(2,`[cache] Could not fetch the ${e}.js. The script might not exist in the requested version.`)}async function _saveConfigToManifest(e,t={}){const o={version:e.version,modules:t};cache.activeManifest=o,log(3,"[cache] Writing a new manifest.");try{fs.writeFileSync(path.join(getCachePath(),"manifest.json"),JSON.stringify(o),"utf8")}catch(e){throw new ExportError("[cache] Error writing the cache manifest.",500).setError(e)}}async function _fetchScripts(e,t,o,r,n){let i;const s=r.host,a=r.port;if(s&&a)try{i=new httpsProxyAgent.HttpsProxyAgent({host:s,port:a})}catch(e){throw new ExportError("[cache] Could not create a Proxy Agent.",500).setError(e)}const l=i?{agent:i,timeout:r.timeout}:{},c=[...e.map((e=>_fetchAndProcessScript(`${e}`,l,n,!0))),...t.map((e=>_fetchAndProcessScript(`${e}`,l,n))),...o.map((e=>_fetchAndProcessScript(`${e}`,l)))];return(await Promise.all(c)).join(";\n")}async function _updateCache(e,t,o){const r="latest"===e.version?null:`${e.version}`,n=e.cdnUrl||cache.cdnUrl;try{const i={};return log(3,`[cache] Updating cache version to Highcharts: ${r||"latest"}.`),cache.sources=await _fetchScripts([...e.coreScripts.map((e=>r?`${n}/${r}/${e}`:`${n}/${e}`))],[...e.moduleScripts.map((e=>"map"===e?r?`${n}/maps/${r}/modules/${e}`:`${n}/maps/modules/${e}`:r?`${n}/${r}/modules/${e}`:`${n}/modules/${e}`)),...e.indicatorScripts.map((e=>r?`${n}/stock/${r}/indicators/${e}`:`${n}/stock/indicators/${e}`))],e.customScripts,t,i),cache.hcVersion=extractVersion(cache.sources),fs.writeFileSync(o,cache.sources),i}catch(e){throw new ExportError("[cache] Unable to update the local Highcharts cache.",500).setError(e)}}function setupHighcharts(){Highcharts.animObject=function(){return{duration:0}}}async function createChart(e,t){const{getOptions:o,setOptions:r,merge:n,wrap:i}=Highcharts;Highcharts.setOptionsObj=n(!1,{},o()),window.isRenderComplete=!1,i(Highcharts.Chart.prototype,"init",(function(e,t,o){((t=n(t,{exporting:{enabled:!1},plotOptions:{series:{label:{enabled:!1}}},tooltip:{}})).series||[]).forEach((function(e){e.animation=!1})),window.onHighchartsRender||(window.onHighchartsRender=Highcharts.addEvent(this,"render",(()=>{window.isRenderComplete=!0}))),e.apply(this,[t,o])})),i(Highcharts.Series.prototype,"init",(function(e,t,o){e.apply(this,[t,o])}));const s={chart:{animation:!1,height:e.height,width:e.width},exporting:{enabled:!1}},a=new Function(`return ${e.instr}`)(),l=new Function(`return ${e.themeOptions}`)(),c=new Function(`return ${e.globalOptions}`)(),p=n(!1,l,a,s),u=t.callback?new Function(`return ${t.callback}`)():null;t.customCode&&new Function("options",t.customCode)(a),c&&r(c),Highcharts[e.constr]("container",p,u);const d=o();for(const e in d)"function"!=typeof d[e]&&delete d[e];r(Highcharts.setOptionsObj),Highcharts.setOptionsObj={}}const template=fs.readFileSync(path.join(__dirname$1,"templates","template.html"),"utf8");let browser=null;async function createBrowser(e){const{debug:t,other:o}=getOptions(),{enable:r,...n}=t,i={headless:!o.browserShellMode||"shell",userDataDir:"tmp",args:e||[],handleSIGINT:!1,handleSIGTERM:!1,handleSIGHUP:!1,waitForInitialPage:!1,defaultViewport:null,...r&&n};if(!browser){let e=0;const t=async()=>{try{log(3,`[browser] Attempting to get a browser instance (try ${++e}).`),browser=await puppeteer.launch(i)}catch(o){if(logWithStack(1,o,"[browser] Failed to launch a browser instance."),!(e<25))throw o;log(3,`[browser] Retry to open a browser (${e} out of 25).`),await new Promise((e=>setTimeout(e,4e3))),await t()}};try{await t(),"shell"===i.headless&&log(3,"[browser] Launched browser in shell mode."),r&&log(3,"[browser] Launched browser in debug mode.")}catch(e){throw new ExportError("[browser] Maximum retries to open a browser instance reached.",500).setError(e)}if(!browser)throw new ExportError("[browser] Cannot find a browser to open.",500)}return browser}async function closeBrowser(){browser&&browser.connected&&await browser.close(),browser=null,log(4,"[browser] Closed the browser.")}async function newPage(e){if(!browser||!browser.connected)throw new ExportError("[browser] Browser is not yet connected.",500);if(e.page=await browser.newPage(),await e.page.setCacheEnabled(!1),await _setPageContent(e.page),_setPageEvents(e.page),!e.page||e.page.isClosed())throw new ExportError("[browser] The page is invalid or closed.",400)}async function clearPage(e,t=!1){try{if(e.page&&!e.page.isClosed())return t?(await e.page.goto("about:blank",{waitUntil:"domcontentloaded"}),await _setPageContent(e.page)):await e.page.evaluate((()=>{document.body.innerHTML='<div id="chart-container"><div id="container"></div></div>'})),!0}catch(t){logWithStack(2,t,`[pool] Pool resource [${e.id}] - Content of the page could not be cleared.`),e.workCount=getOptions().pool.workLimit+1}return!1}async function addPageResources(e,t){const o=[],r=t.resources;if(r){const n=[];if(r.js&&n.push({content:r.js}),r.files)for(const e of r.files){const t=!e.startsWith("http");n.push(t?{content:fs.readFileSync(getAbsolutePath(e),"utf8")}:{url:e})}for(const t of n)try{o.push(await e.addScriptTag(t))}catch(e){logWithStack(2,e,"[browser] The JS resource cannot be loaded.")}n.length=0;const i=[];if(r.css){let n=r.css.match(/@import\s*([^;]*);/g);if(n)for(let e of n)e&&(e=e.replace("url(","").replace("@import","").replace(/"/g,"").replace(/'/g,"").replace(/;/,"").replace(/\)/g,"").trim(),e.startsWith("http")?i.push({url:e}):t.allowFileResources&&i.push({path:getAbsolutePath(e)}));i.push({content:r.css.replace(/@import\s*([^;]*);/g,"")||" "});for(const t of i)try{o.push(await e.addStyleTag(t))}catch(e){logWithStack(2,e,"[browser] The CSS resource cannot be loaded.")}i.length=0}}return o}async function clearPageResources(e,t){try{for(const e of t)await e.dispose();await e.evaluate((()=>{if("undefined"!=typeof Highcharts){const e=Highcharts.charts;if(Array.isArray(e)&&e.length)for(const t of e)t&&t.destroy(),Highcharts.charts.shift()}const[...e]=document.getElementsByTagName("script"),[,...t]=document.getElementsByTagName("style"),[...o]=document.getElementsByTagName("link");for(const r of[...e,...t,...o])r.remove()}))}catch(e){logWithStack(2,e,"[browser] Could not clear page's resources.")}}async function _setPageContent(e){await e.setContent(template,{waitUntil:"domcontentloaded"}),await e.addScriptTag({path:path.join(getCachePath(),"sources.js")}),await e.evaluate(setupHighcharts)}function _setPageEvents(e){const{debug:t}=getOptions();e.on("pageerror",(async()=>{e.isClosed()})),t.enable&&t.listenToConsole&&e.on("console",(e=>{console.log(`[debug] ${e.text()}`)}))}var cssTemplate=()=>"\n\nhtml, body {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n#table-div, #sliders, #datatable, #controls, .ld-row {\n  display: none;\n  height: 0;\n}\n\n#chart-container {\n  box-sizing: border-box;\n  margin: 0;\n  overflow: auto;\n  font-size: 0;\n}\n\n#chart-container > figure, div {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n\n",svgTemplate=e=>`\n<!DOCTYPE html>\n<html lang='en-US'>\n  <head>\n    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n    <title>Highcharts Export</title>\n  </head>\n  <style>\n    ${cssTemplate()}\n  </style>\n  <body>\n    <div id="chart-container">\n      ${e}\n    </div>\n  </body>\n</html>\n\n`;async function puppeteerExport(e,t,o){const r=[];try{let n=!1;if(t.svg){if(log(4,"[export] Treating as SVG input."),"svg"===t.type)return t.svg;n=!0,await e.setContent(svgTemplate(t.svg),{waitUntil:"domcontentloaded"})}else log(4,"[export] Treating as JSON config."),await e.evaluate(createChart,t,o);r.push(...await addPageResources(e,o));const i=n?await e.evaluate((e=>{const t=document.querySelector("#chart-container svg:first-of-type"),o=t.height.baseVal.value*e,r=t.width.baseVal.value*e;return document.body.style.zoom=e,document.body.style.margin="0px",{chartHeight:o,chartWidth:r}}),parseFloat(t.scale)):await e.evaluate((()=>{const{chartHeight:e,chartWidth:t}=window.Highcharts.charts[0];return document.body.style.zoom=1,{chartHeight:e,chartWidth:t}})),{x:s,y:a}=await _getClipRegion(e),l=Math.abs(Math.ceil(i.chartHeight||t.height)),c=Math.abs(Math.ceil(i.chartWidth||t.width));let p;switch(await e.setViewport({height:l,width:c,deviceScaleFactor:n?1:parseFloat(t.scale)}),t.type){case"svg":p=await _createSVG(e);break;case"png":case"jpeg":p=await _createImage(e,t.type,{width:c,height:l,x:s,y:a},t.rasterizationTimeout);break;case"pdf":p=await _createPDF(e,l,c,t.rasterizationTimeout);break;default:throw new ExportError(`[export] Unsupported output format: ${t.type}.`,400)}return await clearPageResources(e,r),p}catch(t){return await clearPageResources(e,r),t}}async function _getClipRegion(e){return e.$eval("#chart-container",(e=>{const{x:t,y:o,width:r,height:n}=e.getBoundingClientRect();return{x:t,y:o,width:r,height:Math.trunc(n>1?n:500)}}))}async function _createSVG(e){return e.$eval("#container svg:first-of-type",(e=>e.outerHTML))}async function _createImage(e,t,o,r){return Promise.race([e.screenshot({type:t,clip:o,encoding:"base64",fullPage:!1,optimizeForSpeed:!0,captureBeyondViewport:!0,..."png"!==t?{quality:80}:{},omitBackground:"png"==t}),new Promise(((e,t)=>setTimeout((()=>t(new ExportError("Rasterization timeout",408))),r||1500)))])}async function _createPDF(e,t,o,r){return await e.emulateMediaType("screen"),e.pdf({height:t+1,width:o,encoding:"base64",timeout:r||1500})}let pool=null;const poolStats={exportsAttempted:0,exportsPerformed:0,exportsDropped:0,exportsFromSvg:0,exportsFromOptions:0,exportsFromSvgAttempts:0,exportsFromOptionsAttempts:0,timeSpent:0,timeSpentAverage:0};async function initPool(e,t){await createBrowser(t);try{if(log(3,`[pool] Initializing pool with workers: min ${e.minWorkers}, max ${e.maxWorkers}.`),pool)return void log(4,"[pool] Already initialized, please kill it before creating a new one.");e.minWorkers>e.maxWorkers&&(e.minWorkers=e.maxWorkers),pool=new tarn.Pool({..._factory(e),min:e.minWorkers,max:e.maxWorkers,acquireTimeoutMillis:e.acquireTimeout,createTimeoutMillis:e.createTimeout,destroyTimeoutMillis:e.destroyTimeout,idleTimeoutMillis:e.idleTimeout,createRetryIntervalMillis:e.createRetryInterval,reapIntervalMillis:e.reaperInterval,propagateCreateError:!1}),pool.on("release",(async e=>{const t=await clearPage(e,!1);log(4,`[pool] Pool resource [${e.id}] - Releasing a worker. Clear page status: ${t}.`)})),pool.on("destroySuccess",((e,t)=>{log(4,`[pool] Pool resource [${t.id}] - Destroyed a worker successfully.`),t.page=null}));const t=[];for(let o=0;o<e.minWorkers;o++)try{const e=await pool.acquire().promise;t.push(e)}catch(e){logWithStack(2,e,"[pool] Could not create an initial resource.")}t.forEach((e=>{pool.release(e)})),log(3,"[pool] The pool is ready"+(t.length?` with ${t.length} initial resources waiting.`:"."))}catch(e){throw new ExportError("[pool] Could not configure and create the pool of workers.",500).setError(e)}}async function killPool(){if(log(3,"[pool] Killing pool with all workers and closing browser."),pool){for(const e of pool.used)pool.release(e.resource);pool.destroyed||(await pool.destroy(),log(4,"[pool] Destroyed the pool of resources.")),pool=null}await closeBrowser()}async function postWork(e){let t;try{if(log(4,"[pool] Work received, starting to process."),++poolStats.exportsAttempted,e.pool.benchmarking&&getPoolInfo(),!pool)throw new ExportError("[pool] Work received, but pool has not been started.",500);const o=measureTime();try{log(4,"[pool] Acquiring a worker handle."),t=await pool.acquire().promise,e.server.benchmarking&&log(5,"[benchmark] "+(e.requestId?`Request [${e.requestId}] - `:""),`Acquiring a worker handle took ${o()}ms.`)}catch(t){throw new ExportError(`[pool] ${e.requestId?`Request [${e.requestId}] - `:""}Error encountered when acquiring an available entry: ${o()}ms.`,400).setError(t)}if(log(4,"[pool] Acquired a worker handle."),!t.page)throw t.workCount=e.pool.workLimit+1,new ExportError("[pool] Resolved worker page is invalid: the pool setup is wonky.",400);const r=getNewDateTime();log(4,`[pool] Pool resource [${t.id}] - Starting work on this pool entry.`);const n=measureTime(),i=await puppeteerExport(t.page,e.export,e.customLogic);if(i instanceof Error)throw"Rasterization timeout"===i.message&&(t.workCount=e.pool.workLimit+1,t.page=null),"TimeoutError"===i.name||"Rasterization timeout"===i.message?new ExportError(`[pool] ${e.requestId?`Request [${e.requestId}] - `:""}Rasterization timeout: your chart may be too complex or large, and failed to render within the allotted time.`).setError(i):new ExportError(`[pool] ${e.requestId?`Request [${e.requestId}] - `:""}Error encountered during export: ${n()}ms.`).setError(i);e.server.benchmarking&&log(5,"[benchmark] "+(e.requestId?`Request [${e.requestId}] - `:""),`Exporting a chart sucessfully took ${n()}ms.`),pool.release(t);const s=getNewDateTime()-r;return poolStats.timeSpent+=s,poolStats.timeSpentAverage=poolStats.timeSpent/++poolStats.exportsPerformed,log(4,`[pool] Work completed in ${s}ms.`),{result:i,options:e}}catch(e){throw++poolStats.exportsDropped,t&&pool.release(t),e}}function getPoolStats(){return poolStats}function getPoolInfoJSON(){return{min:pool.min,max:pool.max,used:pool.numUsed(),available:pool.numFree(),allCreated:pool.numUsed()+pool.numFree(),pendingAcquires:pool.numPendingAcquires(),pendingCreates:pool.numPendingCreates(),pendingValidations:pool.numPendingValidations(),pendingDestroys:pool.pendingDestroys.length,absoluteAll:pool.numUsed()+pool.numFree()+pool.numPendingAcquires()+pool.numPendingCreates()+pool.numPendingValidations()+pool.pendingDestroys.length}}function getPoolInfo(){const{min:e,max:t,used:o,available:r,allCreated:n,pendingAcquires:i,pendingCreates:s,pendingValidations:a,pendingDestroys:l,absoluteAll:c}=getPoolInfoJSON();log(5,`[pool] The minimum number of resources allowed by pool: ${e}.`),log(5,`[pool] The maximum number of resources allowed by pool: ${t}.`),log(5,`[pool] The number of used resources: ${o}.`),log(5,`[pool] The number of free resources: ${r}.`),log(5,`[pool] The number of all created (used and free) resources: ${n}.`),log(5,`[pool] The number of resources waiting to be acquired: ${i}.`),log(5,`[pool] The number of resources waiting to be created: ${s}.`),log(5,`[pool] The number of resources waiting to be validated: ${a}.`),log(5,`[pool] The number of resources waiting to be destroyed: ${l}.`),log(5,`[pool] The number of all resources: ${c}.`)}function _factory(e){return{create:async()=>{const t={id:uuid.v4(),workCount:Math.round(Math.random()*(e.workLimit/2))};try{const e=getNewDateTime();return await newPage(t),log(3,`[pool] Pool resource [${t.id}] - Successfully created a worker, took ${getNewDateTime()-e}ms.`),t}catch(e){throw log(3,`[pool] Pool resource [${t.id}] - Error encountered when creating a new page.`),e}},validate:async t=>t.page?t.page.isClosed()?(log(3,`[pool] Pool resource [${t.id}] - Validation failed (page is closed or invalid).`),!1):t.page.mainFrame().detached?(log(3,`[pool] Pool resource [${t.id}] - Validation failed (page's frame is detached).`),!1):!(e.workLimit&&++t.workCount>e.workLimit)||(log(3,`[pool] Pool resource [${t.id}] - Validation failed (exceeded the ${e.workLimit} works per resource limit).`),!1):(log(3,`[pool] Pool resource [${t.id}] - Validation failed (no valid page is found).`),!1),destroy:async e=>{if(log(3,`[pool] Pool resource [${e.id}] - Destroying a worker.`),e.page&&!e.page.isClosed())try{e.page.removeAllListeners("pageerror"),e.page.removeAllListeners("console"),e.page.removeAllListeners("framedetached"),await e.page.close()}catch(t){throw log(3,`[pool] Pool resource [${e.id}] - Page could not be closed upon destroying.`),t}}}}function sanitize(e){const t=new jsdom.JSDOM("").window;return DOMPurify(t).sanitize(e,{ADD_TAGS:["foreignObject"]})}let allowCodeExecution=!1;async function singleExport(e){if(!e||!e.export)throw new ExportError("[chart] No expected `export` options were found. Please provide one of the following options: `infile`, `instr`, `options`, or `svg` to generate a valid image.",400);await startExport({export:e.export,customLogic:e.customLogic},(async(e,t)=>{if(e)throw e;const{b64:o,outfile:r,type:n}=t.options.export;try{o?fs.writeFileSync(`${r.split(".").shift()||"chart"}.txt`,getBase64(t.result,n)):fs.writeFileSync(r||`chart.${n}`,"svg"!==n?Buffer.from(t.result,"base64"):t.result)}catch(e){throw new ExportError("[chart] Error while saving a chart.",500).setError(e)}await killPool()}))}async function batchExport(e){if(!(e&&e.export&&e.export.batch))throw new ExportError("[chart] No expected `export` options were found. Please provide the `batch` option to generate valid images.",400);{const t=[];for(let o of e.export.batch.split(";")||[])o=o.split("="),2===o.length?t.push(startExport({export:{...e.export,infile:o[0],outfile:o[1]},customLogic:e.customLogic},((e,t)=>{if(e)throw e;const{b64:o,outfile:r,type:n}=t.options.export;try{o?fs.writeFileSync(`${r.split(".").shift()||"chart"}.txt`,getBase64(t.result,n)):fs.writeFileSync(r,"svg"!==n?Buffer.from(t.result,"base64"):t.result)}catch(e){throw new ExportError("[chart] Error while saving a chart.",500).setError(e)}}))):log(2,"[chart] No correct pair found for the batch export.");const o=await Promise.allSettled(t);await killPool(),o.forEach(((e,t)=>{e.reason&&logWithStack(1,e.reason,`[chart] Batch export number ${t+1} could not be correctly completed.`)}))}}async function startExport(e,t){try{if(!isObject(e))throw new ExportError("[chart] Incorrect value of the provided `imageOptions`. Needs to be an object.",400);const o=updateOptions({export:e.export,customLogic:e.customLogic},!0),r=o.export;if(log(4,"[chart] Starting the exporting process."),null!==r.infile){let e;log(4,"[chart] Attempting to export from a file input.");try{e=fs.readFileSync(getAbsolutePath(r.infile),"utf8")}catch(e){throw new ExportError("[chart] Error loading content from a file input.",400).setError(e)}if(r.infile.endsWith(".svg"))r.svg=validateOption("svg",e);else{if(!r.infile.endsWith(".json"))throw new ExportError("[chart] Incorrect value of the `infile` option.",400);r.instr=validateOption("instr",e)}}if(null!==r.svg){log(4,"[chart] Attempting to export from an SVG input."),++getPoolStats().exportsFromSvgAttempts;const e=await _exportFromSvg(sanitize(r.svg),o);return++getPoolStats().exportsFromSvg,t(null,e)}if(null!==r.instr||null!==r.options){log(4,"[chart] Attempting to export from options input."),++getPoolStats().exportsFromOptionsAttempts;const e=await _exportFromOptions(r.instr||r.options,o);return++getPoolStats().exportsFromOptions,t(null,e)}return t(new ExportError("[chart] No valid input specified. Check if at least one of the following parameters is correctly set: 'infile', 'instr', 'options', or 'svg'.",400))}catch(e){return t(e)}}function getAllowCodeExecution(){return allowCodeExecution}function setAllowCodeExecution(e){allowCodeExecution=e}async function _exportFromSvg(e,t){if("string"==typeof e&&(e.indexOf("<svg")>=0||e.indexOf("<?xml")>=0))return log(4,"[chart] Parsing input as SVG."),t.export.svg=e,t.export.instr=null,t.export.options=null,_prepareExport(t);throw new ExportError("[chart] Not a correct SVG input.",400)}async function _exportFromOptions(e,t){log(4,"[chart] Parsing input from options.");const o=isAllowedConfig(e,!0,t.customLogic.allowCodeExecution);if(null===o||"string"!=typeof o||!o.startsWith("{")||!o.endsWith("}"))throw new ExportError("[chart] Invalid configuration provided - Only options configurations and SVG are allowed for this server. If this is your server, JavaScript custom code can be enabled by starting the server with the `allowCodeExecution` options set to true.",403);return t.export.instr=o,t.export.svg=null,_prepareExport(t)}async function _prepareExport(e){const{export:t,customLogic:o}=e;return t.type=fixType(t.type,t.outfile),t.outfile=fixOutfile(t.type,t.outfile),t.constr=fixConstr(t.constr),log(3,`[chart] The custom logic is ${o.allowCodeExecution?"allowed":"disallowed"}.`),_handleCustomLogic(o,o.allowCodeExecution),_handleGlobalAndTheme(t,o.allowFileResources,o.allowCodeExecution),e.export={...t,..._findChartSize(t)},postWork(e)}function _findChartSize(e){const{chart:t,exporting:o}=e.options||isAllowedConfig(e.instr)||!1,{chart:r,exporting:n}=isAllowedConfig(e.globalOptions)||!1,{chart:i,exporting:s}=isAllowedConfig(e.themeOptions)||!1,a=roundNumber(Math.max(.1,Math.min(e.scale||o?.scale||n?.scale||s?.scale||e.defaultScale||1,5)),2),l={height:e.height||o?.sourceHeight||t?.height||n?.sourceHeight||r?.height||s?.sourceHeight||i?.height||e.defaultHeight||400,width:e.width||o?.sourceWidth||t?.width||n?.sourceWidth||r?.width||s?.sourceWidth||i?.width||e.defaultWidth||600,scale:a};for(let[e,t]of Object.entries(l))l[e]="string"==typeof t?+t.replace(/px|%/gi,""):t;return l}function _handleCustomLogic(e,t){if(t){if("string"==typeof e.resources)e.resources=_handleResources(e.resources,e.allowFileResources,!0);else if(!e.resources)try{e.resources=_handleResources(fs.readFileSync(getAbsolutePath("resources.json"),"utf8"),e.allowFileResources,!0)}catch(e){log(2,"[chart] Unable to load the default `resources.json` file.")}try{e.customCode=wrapAround(e.customCode,e.allowFileResources),e.customCode=validateOption("customCode",e.customCode)}catch(t){logWithStack(2,t,"[chart] The `customCode` cannot be loaded."),e.customCode=null}try{e.callback=wrapAround(e.callback,e.allowFileResources,!0),e.callback=validateOption("callback",e.callback)}catch(t){logWithStack(2,t,"[chart] The `callback` cannot be loaded."),e.callback=null}[null,void 0].includes(e.customCode)&&log(3,"[chart] No value for the `customCode` option found."),[null,void 0].includes(e.callback)&&log(3,"[chart] No value for the `callback` option found."),[null,void 0].includes(e.resources)&&log(3,"[chart] No value for the `resources` option found.")}else if(e.callback||e.resources||e.customCode)throw e.callback=null,e.resources=null,e.customCode=null,new ExportError("[chart] The 'callback', 'resources', and 'customCode' options have been disabled for this server.",403)}function _handleResources(e=null,t,o){const r=["js","css","files"];let n=e,i=!1;if(t&&e.endsWith(".json"))try{n=isAllowedConfig(fs.readFileSync(getAbsolutePath(e),"utf8"),!1,o)}catch{return null}else n=isAllowedConfig(e,!1,o),n&&!t&&delete n.files;for(const e in n)r.includes(e)?i||(i=!0):delete n[e];return i?(n.files&&(n.files=n.files.map((e=>e.trim())),(!n.files||n.files.length<=0)&&delete n.files),n=validateOption("resources",n),n):null}function _handleGlobalAndTheme(e,t,o){["globalOptions","themeOptions"].forEach((r=>{try{e[r]&&(t&&"string"==typeof e[r]&&e[r].endsWith(".json")?e[r]=isAllowedConfig(fs.readFileSync(getAbsolutePath(e[r]),"utf8"),!0,o):e[r]=isAllowedConfig(e[r],!0,o),e[r]=validateOption(r,e[r]))}catch(t){logWithStack(2,t,`[chart] The \`${r}\` cannot be loaded.`),e[r]=null}})),[null,void 0].includes(e.globalOptions)&&log(3,"[chart] No value for the `globalOptions` option found."),[null,void 0].includes(e.themeOptions)&&log(3,"[chart] No value for the `themeOptions` option found.")}const timerIds=[];function addTimer(e){timerIds.push(e)}function clearAllTimers(){log(4,"[timer] Clearing all registered intervals and timeouts.");for(const e of timerIds)clearInterval(e),clearTimeout(e)}function logErrorMiddleware(e,t,o,r){return logWithStack(1,e),"development"!==getOptions().other.nodeEnv&&delete e.stack,r(e)}function returnErrorMiddleware(e,t,o,r){const{message:n,stack:i}=e,s=e.statusCode||400;o.status(s).json({statusCode:s,message:n,stack:i})}function errorMiddleware(e){e.use(logErrorMiddleware),e.use(returnErrorMiddleware)}function rateLimitingMiddleware(e,t){try{if(e&&t.enable){const o="Too many requests, you have been rate limited. Please try again later.",r={window:t.window||1,maxRequests:t.maxRequests||30,delay:t.delay||0,trustProxy:t.trustProxy||!1,skipKey:t.skipKey||null,skipToken:t.skipToken||null};r.trustProxy&&e.enable("trust proxy");const n=rateLimit({windowMs:60*r.window*1e3,limit:r.maxRequests,delayMs:r.delay,handler:(e,t)=>{t.format({json:()=>{t.status(429).send({message:o})},default:()=>{t.status(429).send(o)}})},skip:e=>null!==r.skipKey&&null!==r.skipToken&&e.query.key===r.skipKey&&e.query.access_token===r.skipToken&&(log(4,"[rate limiting] Skipping rate limiter."),!0)});e.use(n),log(3,`[rate limiting] Enabled rate limiting with ${r.maxRequests} requests per ${r.window} minute for each IP, trusting proxy: ${r.trustProxy}.`)}}catch(e){throw new ExportError("[rate limiting] Could not configure and set the rate limiting options.",500).setError(e)}}function contentTypeMiddleware(e,t,o){try{const t=e.headers["content-type"]||"";if(!t.includes("application/json")&&!t.includes("application/x-www-form-urlencoded")&&!t.includes("multipart/form-data"))throw new ExportError("[validation] Content-Type must be application/json, application/x-www-form-urlencoded, or multipart/form-data.",415);return o()}catch(e){return o(e)}}function requestBodyMiddleware(e,t,o){try{const t=e.body,r=uuid.v4();if(!t||isObjectEmpty(t))throw log(2,`[validation] Request [${r}] - The request from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Received payload is empty.`),new ExportError(`[validation] Request [${r}] - The request body is required. Please ensure that your Content-Type header is correct. Accepted types are 'application/json' and 'multipart/form-data'.`,400);const n=getAllowCodeExecution(),i=isAllowedConfig(t.instr||t.options||t.infile||t.data,!0,n);if(null===i&&!t.svg)throw log(2,`[validation] Request [${r}] - The request from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Received payload is missing correct chart data for export: ${JSON.stringify(t)}.`),new ExportError(`Request [${r}] - [validation] No correct chart data found. Ensure that you are using either application/json or multipart/form-data headers. If sending JSON, make sure the chart data is in the 'infile', 'options', or 'data' attribute. If sending SVG, ensure it is in the 'svg' attribute.`,400);if(t.svg&&isPrivateRangeUrlFound(t.svg))throw new ExportError(`Request [${r}] - [validation] SVG potentially contain at least one forbidden URL in 'xlink:href' element. Please review the SVG content and ensure that all referenced URLs comply with security policies.`,400);return e.validatedOptions={requestId:r,export:{instr:i,svg:t.svg,outfile:t.outfile||`${e.params.filename||"chart"}.${t.type||"png"}`,type:t.type,constr:t.constr,b64:t.b64,noDownload:t.noDownload,height:t.height,width:t.width,scale:t.scale,globalOptions:isAllowedConfig(t.globalOptions,!0,n),themeOptions:isAllowedConfig(t.themeOptions,!0,n)},customLogic:{allowCodeExecution:n,allowFileResources:!1,customCode:t.customCode,callback:t.callback,resources:isAllowedConfig(t.resources,!0,n)}},o()}catch(e){return o(e)}}function validationMiddleware(e){e.post(["/","/:filename"],contentTypeMiddleware),e.post(["/","/:filename"],requestBodyMiddleware)}const reversedMime={png:"image/png",jpeg:"image/jpeg",gif:"image/gif",pdf:"application/pdf",svg:"image/svg+xml"};async function requestExport(e,t,o){try{const o=measureTime();let r=!1;e.socket.on("close",(e=>{e&&(r=!0)}));const n=e.validatedOptions,i=n.requestId;log(4,`[export] Request [${i}] - Got an incoming HTTP request.`),await startExport(n,((n,s)=>{if(e.socket.removeAllListeners("close"),r)log(3,`[export] Request [${i}] - The client closed the connection before the chart finished processing.`);else{if(n)throw n;if(!s||!s.result)throw log(2,`[export] Request [${i}] - Request from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Received result is ${s.result}.`),new ExportError(`[export] Request [${i}] - Unexpected return of the export result from the chart generation. Please check your request data.`,400);if(s.result){log(3,`[export] Request [${i}] - The whole exporting process took ${o()}ms.`);const{type:e,b64:r,noDownload:n,outfile:a}=s.options.export;return r?t.send(getBase64(s.result,e)):(t.header("Content-Type",reversedMime[e]||"image/png"),n||t.attachment(a),"svg"===e?t.send(s.result):t.send(Buffer.from(s.result,"base64")))}}}))}catch(e){return o(e)}}function exportRoutes(e){e.post("/",requestExport),e.post("/:filename",requestExport)}const serverStartTime=new Date,packageFile=JSON.parse(fs.readFileSync(path.join(__dirname$1,"package.json"),"utf8")),successRates=[],recordInterval=6e4,windowSize=30;function _calculateMovingAverage(){return successRates.reduce(((e,t)=>e+t),0)/successRates.length}function _startSuccessRate(){return setInterval((()=>{const e=getPoolStats(),t=0===e.exportsAttempted?1:e.exportsPerformed/e.exportsAttempted*100;successRates.push(t),successRates.length>windowSize&&successRates.shift()}),recordInterval)}function healthRoutes(e){addTimer(_startSuccessRate()),e.get("/health",((e,t,o)=>{try{log(4,"[health] Returning server health.");const e=getPoolStats(),o=successRates.length,r=_calculateMovingAverage();t.send({status:"OK",bootTime:serverStartTime,uptime:`${Math.floor((getNewDateTime()-serverStartTime.getTime())/1e3/60)} minutes`,serverVersion:packageFile.version,highchartsVersion:getHighchartsVersion(),averageExportTime:e.timeSpentAverage,attemptedExports:e.exportsAttempted,performedExports:e.exportsPerformed,failedExports:e.exportsDropped,sucessRatio:e.exportsPerformed/e.exportsAttempted*100,pool:getPoolInfoJSON(),period:o,movingAverage:r,message:isNaN(r)||!successRates.length?"Too early to report. No exports made yet. Please check back soon.":`Last ${o} minutes had a success rate of ${r.toFixed(2)}%.`,svgExports:e.exportsFromSvg,jsonExports:e.exportsFromOptions,svgExportsAttempts:e.exportsFromSvgAttempts,jsonExportsAttempts:e.exportsFromOptionsAttempts})}catch(e){return o(e)}}))}function uiRoutes(e){e.get(getOptions().ui.route||"/",((e,t,o)=>{try{log(4,"[ui] Returning UI for the export."),t.sendFile(path.join(__dirname$1,"public","index.html"),{acceptRanges:!1})}catch(e){return o(e)}}))}function versionChangeRoutes(e){e.post("/version_change/:newVersion",(async(e,t,o)=>{try{log(4,"[version] Changing Highcharts version.");const o=envs.HIGHCHARTS_ADMIN_TOKEN;if(!o||!o.length)throw new ExportError("[version] The server is not configured to perform run-time version changes: HIGHCHARTS_ADMIN_TOKEN is not set.",401);const r=e.get("hc-auth");if(!r||r!==o)throw new ExportError("[version] Invalid or missing token: Set the token in the hc-auth header.",401);const n=e.params.newVersion;if(!n)throw new ExportError("[version] No new version supplied.",400);try{await updateHighchartsVersion(n)}catch(e){throw new ExportError(`[version] Version change: ${e.message}`,400).setError(e)}t.status(200).send({statusCode:200,highchartsVersion:getHighchartsVersion(),message:`Successfully updated Highcharts to version: ${n}.`})}catch(e){return o(e)}}))}const activeServers=new Map,app=express();async function startServer(e){try{const t=updateOptions({server:e});if(!(e=t.server).enable||!app)throw new ExportError("[server] Server cannot be started (not enabled or no correct Express app found).",500);const o=1024*e.uploadLimit*1024,r=multer.memoryStorage(),n=multer({storage:r,limits:{fieldSize:o}});if(app.disable("x-powered-by"),app.use(cors({methods:["POST","GET","OPTIONS"]})),app.use(((e,t,o)=>{t.set("Accept-Ranges","none"),o()})),app.use(express.json({limit:o})),app.use(express.urlencoded({extended:!0,limit:o})),app.use(n.none()),app.use(express.static(path.join(__dirname$1,"public"))),!e.ssl.force){const t=http.createServer(app);_attachServerErrorHandlers(t),t.listen(e.port,e.host,(()=>{activeServers.set(e.port,t),log(3,`[server] Started HTTP server on ${e.host}:${e.port}.`)}))}if(e.ssl.enable){let t,o;try{t=fs.readFileSync(path.join(getAbsolutePath(e.ssl.certPath),"server.key"),"utf8"),o=fs.readFileSync(path.join(getAbsolutePath(e.ssl.certPath),"server.crt"),"utf8")}catch(t){log(2,`[server] Unable to load key/certificate from the '${e.ssl.certPath}' path. Could not run secured layer server.`)}if(t&&o){const r=https.createServer({key:t,cert:o},app);_attachServerErrorHandlers(r),r.listen(e.ssl.port,e.host,(()=>{activeServers.set(e.ssl.port,r),log(3,`[server] Started HTTPS server on ${e.host}:${e.ssl.port}.`)}))}}rateLimitingMiddleware(app,e.rateLimiting),validationMiddleware(app),exportRoutes(app),healthRoutes(app),uiRoutes(app),versionChangeRoutes(app),errorMiddleware(app)}catch(e){throw new ExportError("[server] Could not configure and start the server.",500).setError(e)}}function closeServers(){if(activeServers.size>0){log(4,"[server] Closing all servers.");for(const[e,t]of activeServers)t.close((()=>{activeServers.delete(e),log(4,`[server] Closed server on port: ${e}.`)}))}}function getServers(){return activeServers}function getExpress(){return express}function getApp(){return app}function enableRateLimiting(e){const t=updateOptions({server:{rateLimiting:e}});rateLimitingMiddleware(app,t.server.rateLimitingOptions)}function use(e,...t){app.use(e,...t)}function get(e,...t){app.get(e,...t)}function post(e,...t){app.post(e,...t)}function _attachServerErrorHandlers(e){e.on("clientError",((e,t)=>{logWithStack(1,e,`[server] Client error: ${e.message}, destroying socket.`),t.destroy()})),e.on("error",(e=>{logWithStack(1,e,`[server] Server error: ${e.message}`)})),e.on("connection",(e=>{e.on("error",(e=>{logWithStack(1,e,`[server] Socket error: ${e.message}`)}))}))}var server={startServer:startServer,closeServers:closeServers,getServers:getServers,getExpress:getExpress,getApp:getApp,enableRateLimiting:enableRateLimiting,use:use,get:get,post:post};async function shutdownCleanUp(e=0){await Promise.allSettled([clearAllTimers(),closeServers(),killPool()]),process.exit(e)}async function initExport(e){const t=updateOptions(e);setAllowCodeExecution(t.customLogic.allowCodeExecution),initLogging(t.logging),t.other.listenToProcessExits&&_attachProcessExitListeners(),await checkAndUpdateCache(t.highcharts,t.server.proxy),await initPool(t.pool,t.puppeteer.args)}function _attachProcessExitListeners(){log(3,"[process] Attaching exit listeners to the process."),process.on("exit",(e=>{log(4,`[process] Process exited with code ${e}.`)})),process.on("SIGINT",(async(e,t)=>{log(4,`[process] The ${e} event with code: ${t}.`),await shutdownCleanUp()})),process.on("SIGTERM",(async(e,t)=>{log(4,`[process] The ${e} event with code: ${t}.`),await shutdownCleanUp()})),process.on("SIGHUP",(async(e,t)=>{log(4,`[process] The ${e} event with code: ${t}.`),await shutdownCleanUp()})),process.on("uncaughtException",(async(e,t)=>{logWithStack(1,e,`[process] The ${t} error.`),await shutdownCleanUp(1)}))}var index={...server,getOptions:getOptions,updateOptions:updateOptions,mapToNewOptions:mapToNewOptions,validateOption:validateOption,validateOptions:validateOptions,initExport:initExport,singleExport:singleExport,batchExport:batchExport,startExport:startExport,killPool:killPool,shutdownCleanUp:shutdownCleanUp,log:log,logWithStack:logWithStack,logZodIssues:logZodIssues,setLogLevel:function(e){setLogLevel(updateOptions({logging:{level:e}}).logging.level)},enableConsoleLogging:function(e){enableConsoleLogging(updateOptions({logging:{toConsole:e}}).logging.toConsole)},enableFileLogging:function(e,t,o){const r=updateOptions({logging:{dest:e,file:t,toFile:o}});enableFileLogging(r.logging.dest,r.logging.file,r.logging.toFile)}};exports.default=index,exports.initExport=initExport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2pzIiwic291cmNlcyI6WyIuLi9saWIvdXRpbHMuanMiLCIuLi9saWIvbG9nZ2VyLmpzIiwiLi4vbGliL3NjaGVtYXMvY29uZmlnLmpzIiwiLi4vbGliL3ZhbGlkYXRpb24uanMiLCIuLi9saWIvZXJyb3JzL0V4cG9ydEVycm9yLmpzIiwiLi4vbGliL2NvbmZpZy5qcyIsIi4uL2xpYi9mZXRjaC5qcyIsIi4uL2xpYi9jYWNoZS5qcyIsIi4uL2xpYi9oaWdoY2hhcnRzLmpzIiwiLi4vbGliL2Jyb3dzZXIuanMiLCIuLi90ZW1wbGF0ZXMvc3ZnRXhwb3J0L2Nzcy5qcyIsIi4uL3RlbXBsYXRlcy9zdmdFeHBvcnQvc3ZnRXhwb3J0LmpzIiwiLi4vbGliL2V4cG9ydC5qcyIsIi4uL2xpYi9wb29sLmpzIiwiLi4vbGliL3Nhbml0aXplLmpzIiwiLi4vbGliL2NoYXJ0LmpzIiwiLi4vbGliL3RpbWVyLmpzIiwiLi4vbGliL3NlcnZlci9taWRkbGV3YXJlcy9lcnJvci5qcyIsIi4uL2xpYi9zZXJ2ZXIvbWlkZGxld2FyZXMvcmF0ZUxpbWl0aW5nLmpzIiwiLi4vbGliL3NlcnZlci9taWRkbGV3YXJlcy92YWxpZGF0aW9uLmpzIiwiLi4vbGliL3NlcnZlci9yb3V0ZXMvZXhwb3J0LmpzIiwiLi4vbGliL3NlcnZlci9yb3V0ZXMvaGVhbHRoLmpzIiwiLi4vbGliL3NlcnZlci9yb3V0ZXMvdWkuanMiLCIuLi9saWIvc2VydmVyL3JvdXRlcy92ZXJzaW9uQ2hhbmdlLmpzIiwiLi4vbGliL3NlcnZlci9zZXJ2ZXIuanMiLCIuLi9saWIvcmVzb3VyY2VSZWxlYXNlLmpzIiwiLi4vbGliL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBUaGUgSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyIHV0aWxpdHkgbW9kdWxlIHByb3ZpZGVzXHJcbiAqIGEgY29tcHJlaGVuc2l2ZSBzZXQgb2YgaGVscGVyIGZ1bmN0aW9ucyBhbmQgY29uc3RhbnRzIGRlc2lnbmVkIHRvIHN0cmVhbWxpbmVcclxuICogYW5kIGVuaGFuY2UgdmFyaW91cyBvcGVyYXRpb25zIHJlcXVpcmVkIGZvciBIaWdoY2hhcnRzIGV4cG9ydCB0YXNrcy5cclxuICovXHJcblxyXG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7XHJcbmltcG9ydCB7IGlzQWJzb2x1dGUsIG5vcm1hbGl6ZSwgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAndXJsJztcclxuXHJcbmNvbnN0IE1BWF9CQUNLT0ZGX0FUVEVNUFRTID0gNjtcclxuXHJcbi8vIFRoZSBkaXJlY3RvcnkgcGF0aFxyXG5leHBvcnQgY29uc3QgX19kaXJuYW1lID0gZmlsZVVSTFRvUGF0aChuZXcgVVJMKCcuLi8uJywgaW1wb3J0Lm1ldGEudXJsKSk7XHJcblxyXG4vKipcclxuICogQ2xlYXJzIGFuZCBzdGFuZGFyZGl6ZXMgdGV4dCBieSByZXBsYWNpbmcgbXVsdGlwbGUgY29uc2VjdXRpdmUgd2hpdGVzcGFjZVxyXG4gKiBjaGFyYWN0ZXJzIHdpdGggYSBzaW5nbGUgc3BhY2UgYW5kIHRyaW1taW5nIGFueSBsZWFkaW5nIG9yIHRyYWlsaW5nXHJcbiAqIHdoaXRlc3BhY2UuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBjbGVhclRleHRcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBUaGUgaW5wdXQgdGV4dCB0byBiZSBjbGVhcmVkLlxyXG4gKiBAcGFyYW0ge1JlZ0V4cH0gW3J1bGU9L1xcc1xccysvZ10gLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHJ1bGUgdG8gbWF0Y2hcclxuICogbXVsdGlwbGUgY29uc2VjdXRpdmUgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzLiBUaGUgZGVmYXVsdCB2YWx1ZVxyXG4gKiBpcyB0aGUgJy9cXHNcXHMrL2cnIFJlZ0V4cC5cclxuICogQHBhcmFtIHtzdHJpbmd9IFtyZXBsYWNlcj0nICddIC0gVGhlIHN0cmluZyB1c2VkIHRvIHJlcGxhY2UgbXVsdGlwbGVcclxuICogY29uc2VjdXRpdmUgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0aGUgJyAnIHN0cmluZy5cclxuICpcclxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNsZWFyZWQgYW5kIHN0YW5kYXJkaXplZCB0ZXh0LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyVGV4dCh0ZXh0LCBydWxlID0gL1xcc1xccysvZywgcmVwbGFjZXIgPSAnICcpIHtcclxuICByZXR1cm4gdGV4dC5yZXBsYWNlQWxsKHJ1bGUsIHJlcGxhY2VyKS50cmltKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIHRoZSBnaXZlbiBvYmplY3Qgb3IgYXJyYXkuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBkZWVwQ29weVxyXG4gKlxyXG4gKiBAcGFyYW0geyhPYmplY3R8QXJyYXkpfSBvYmpBcnIgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIGRlZXBseSBjb3BpZWQuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHsoT2JqZWN0fEFycmF5KX0gVGhlIGRlZXAgY29weSBvZiB0aGUgcHJvdmlkZWQgb2JqZWN0IG9yIGFycmF5LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZXBDb3B5KG9iakFycikge1xyXG4gIC8vIElmIHRoZSBgb2JqQXJyYCBpcyBudWxsIG9yIG5vdCBvZiB0aGUgYG9iamVjdGAgdHlwZSwgcmV0dXJuIGl0XHJcbiAgaWYgKG9iakFyciA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQXJyICE9PSAnb2JqZWN0Jykge1xyXG4gICAgcmV0dXJuIG9iakFycjtcclxuICB9XHJcblxyXG4gIC8vIFByZXBhcmUgZWl0aGVyIGEgbmV3IGFycmF5IG9yIGEgbmV3IG9iamVjdFxyXG4gIGNvbnN0IG9iakFyckNvcHkgPSBBcnJheS5pc0FycmF5KG9iakFycikgPyBbXSA6IHt9O1xyXG5cclxuICAvLyBSZWN1cnNpdmVseSBjb3B5IGVhY2ggcHJvcGVydHlcclxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmpBcnIpIHtcclxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQXJyLCBrZXkpKSB7XHJcbiAgICAgIG9iakFyckNvcHlba2V5XSA9IGRlZXBDb3B5KG9iakFycltrZXldKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJldHVybiB0aGUgY29waWVkIG9iamVjdFxyXG4gIHJldHVybiBvYmpBcnJDb3B5O1xyXG59XHJcblxyXG4vKipcclxuICogSW1wbGVtZW50cyBhbiBleHBvbmVudGlhbCBiYWNrb2ZmIHN0cmF0ZWd5IGZvciByZXRyeWluZyBhIGZ1bmN0aW9uIHVudGlsXHJcbiAqIGEgY2VydGFpbiBudW1iZXIgb2YgYXR0ZW1wdHMgYXJlIHJlYWNoZWQuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gZXhwQmFja29mZlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBiZSByZXRyaWVkLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gW2F0dGVtcHQ9MF0gLSBUaGUgY3VycmVudCBhdHRlbXB0IG51bWJlci4gVGhlIGRlZmF1bHQgdmFsdWVcclxuICogaXMgYDBgLlxyXG4gKiBAcGFyYW0gey4uLnVua25vd259IGFyZ3MgLSBBcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIHRoZSBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybnMge1Byb21pc2U8dW5rbm93bj59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSByZXN1bHRcclxuICogb2YgdGhlIGZ1bmN0aW9uIGlmIHN1Y2Nlc3NmdWwuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBUaHJvd3MgYW4gYEVycm9yYCBpZiB0aGUgbWF4aW11bSBudW1iZXIgb2YgYXR0ZW1wdHNcclxuICogaXMgcmVhY2hlZC5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleHBCYWNrb2ZmKGZuLCBhdHRlbXB0ID0gMCwgLi4uYXJncykge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBUcnkgdG8gY2FsbCB0aGUgZnVuY3Rpb25cclxuICAgIHJldHVybiBhd2FpdCBmbiguLi5hcmdzKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgLy8gQ2FsY3VsYXRlIGRlbGF5IGluIG1zXHJcbiAgICBjb25zdCBkZWxheUluTXMgPSAyICoqIGF0dGVtcHQgKiAxMDAwO1xyXG5cclxuICAgIC8vIElmIHRoZSBhdHRlbXB0IGV4Y2VlZHMgdGhlIG1heGltdW0gYXR0ZW1wdHMgb2YgcmVwZWF0LCB0aHJvdyBhbiBlcnJvclxyXG4gICAgaWYgKCsrYXR0ZW1wdCA+PSBNQVhfQkFDS09GRl9BVFRFTVBUUykge1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBXYWl0IGdpdmVuIGFtb3VudCBvZiB0aW1lXHJcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzcG9uc2UpID0+IHNldFRpbWVvdXQocmVzcG9uc2UsIGRlbGF5SW5NcykpO1xyXG5cclxuICAgIC8vLyBUTyBETzogQ29ycmVjdFxyXG4gICAgLy8gLy8gSW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlc291cmNlIHRpbWVvdXRcclxuICAgIC8vIGxvZyhcclxuICAgIC8vICAgMyxcclxuICAgIC8vICAgYFt1dGlsc10gV2FpdGVkICR7ZGVsYXlJbk1zfW1zIHVudGlsIG5leHQgY2FsbCBmb3IgdGhlIHJlc291cmNlIG9mIElEOiAke2FyZ3NbMF19LmBcclxuICAgIC8vICk7XHJcblxyXG4gICAgLy8gVHJ5IGFnYWluXHJcbiAgICByZXR1cm4gZXhwQmFja29mZihmbiwgYXR0ZW1wdCwgLi4uYXJncyk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQWRqdXN0cyB0aGUgY29uc3RydWN0b3IgbmFtZSBieSB0cmFuc2Zvcm1pbmcgYW5kIG5vcm1hbGl6aW5nIGl0IGJhc2VkXHJcbiAqIG9uIGNvbW1vbiBjaGFydCB0eXBlcy5cclxuICpcclxuICogQGZ1bmN0aW9uIGZpeENvbnN0clxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gY29uc3RyIC0gVGhlIG9yaWdpbmFsIGNvbnN0cnVjdG9yIG5hbWUgdG8gYmUgZml4ZWQuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb3JyZWN0ZWQgY29uc3RydWN0b3IgbmFtZSwgb3IgJ2NoYXJ0JyBpZiB0aGUgaW5wdXRcclxuICogaXMgbm90IHJlY29nbml6ZWQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZml4Q29uc3RyKGNvbnN0cikge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBGaXggdGhlIGNvbnN0cnVjdG9yIGJ5IGxvd2VyaW5nIGNhc2luZ1xyXG4gICAgY29uc3QgZml4ZWRDb25zdHIgPSBgJHtjb25zdHIudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdjaGFydCcsICcnKX1DaGFydGA7XHJcblxyXG4gICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSByZXN1bHQgaXMganVzdCAnQ2hhcnQnXHJcbiAgICBpZiAoZml4ZWRDb25zdHIgPT09ICdDaGFydCcpIHtcclxuICAgICAgZml4ZWRDb25zdHIudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIGNvcnJlY3RlZCBjb25zdHJ1Y3Rvciwgb3RoZXJ3aXNlIGRlZmF1bHQgdG8gJ2NoYXJ0J1xyXG4gICAgcmV0dXJuIFsnY2hhcnQnLCAnc3RvY2tDaGFydCcsICdtYXBDaGFydCcsICdnYW50dENoYXJ0J10uaW5jbHVkZXMoXHJcbiAgICAgIGZpeGVkQ29uc3RyXHJcbiAgICApXHJcbiAgICAgID8gZml4ZWRDb25zdHJcclxuICAgICAgOiAnY2hhcnQnO1xyXG4gIH0gY2F0Y2gge1xyXG4gICAgLy8gRGVmYXVsdCB0byAnY2hhcnQnIGluIGNhc2Ugb2YgYW55IGVycm9yXHJcbiAgICByZXR1cm4gJ2NoYXJ0JztcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGaXhlcyB0aGUgb3V0ZmlsZSBiYXNlZCBvbiBwcm92aWRlZCB0eXBlLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZml4T3V0ZmlsZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSBvcmlnaW5hbCBleHBvcnQgdHlwZS5cclxuICogQHBhcmFtIHtzdHJpbmd9IG91dGZpbGUgLSBUaGUgZmlsZSBwYXRoIG9yIG5hbWUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb3JyZWN0ZWQgb3V0ZmlsZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaXhPdXRmaWxlKHR5cGUsIG91dGZpbGUpIHtcclxuICAvLyBHZXQgdGhlIGZpbGUgbmFtZSBmcm9tIHRoZSBgb3V0ZmlsZWAgb3B0aW9uXHJcbiAgY29uc3QgZmlsZU5hbWUgPSBnZXRBYnNvbHV0ZVBhdGgob3V0ZmlsZSB8fCAnY2hhcnQnKVxyXG4gICAgLnNwbGl0KCcuJylcclxuICAgIC5zaGlmdCgpO1xyXG5cclxuICAvLyBSZXR1cm4gYSBjb3JyZWN0IG91dGZpbGVcclxuICByZXR1cm4gYCR7ZmlsZU5hbWV9LiR7dHlwZX1gO1xyXG59XHJcblxyXG4vKipcclxuICogRml4ZXMgdGhlIGV4cG9ydCB0eXBlIGJhc2VkIG9uIE1JTUUgdHlwZXMgYW5kIGZpbGUgZXh0ZW5zaW9ucy5cclxuICpcclxuICogQGZ1bmN0aW9uIGZpeFR5cGVcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgb3JpZ2luYWwgZXhwb3J0IHR5cGUuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3V0ZmlsZT1udWxsXSAtIFRoZSBmaWxlIHBhdGggb3IgbmFtZS4gVGhlIGRlZmF1bHQgdmFsdWVcclxuICogaXMgYG51bGxgLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29ycmVjdGVkIGV4cG9ydCB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZpeFR5cGUodHlwZSwgb3V0ZmlsZSA9IG51bGwpIHtcclxuICAvLyBNSU1FIHR5cGVzXHJcbiAgY29uc3QgbWltZVR5cGVzID0ge1xyXG4gICAgJ2ltYWdlL3BuZyc6ICdwbmcnLFxyXG4gICAgJ2ltYWdlL2pwZWcnOiAnanBlZycsXHJcbiAgICAnYXBwbGljYXRpb24vcGRmJzogJ3BkZicsXHJcbiAgICAnaW1hZ2Uvc3ZnK3htbCc6ICdzdmcnXHJcbiAgfTtcclxuXHJcbiAgLy8gR2V0IGZvcm1hdHNcclxuICBjb25zdCBmb3JtYXRzID0gT2JqZWN0LnZhbHVlcyhtaW1lVHlwZXMpO1xyXG5cclxuICAvLyBDaGVjayBpZiB0eXBlIGFuZCBvdXRmaWxlJ3MgZXh0ZW5zaW9ucyBhcmUgdGhlIHNhbWVcclxuICBpZiAob3V0ZmlsZSkge1xyXG4gICAgY29uc3Qgb3V0VHlwZSA9IG91dGZpbGUuc3BsaXQoJy4nKS5wb3AoKTtcclxuXHJcbiAgICAvLyBTdXBwb3J0IHRoZSBKUEcgdHlwZVxyXG4gICAgaWYgKG91dFR5cGUgPT09ICdqcGcnKSB7XHJcbiAgICAgIHR5cGUgPSAnanBlZyc7XHJcbiAgICB9IGVsc2UgaWYgKGZvcm1hdHMuaW5jbHVkZXMob3V0VHlwZSkgJiYgdHlwZSAhPT0gb3V0VHlwZSkge1xyXG4gICAgICB0eXBlID0gb3V0VHlwZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJldHVybiBhIGNvcnJlY3QgdHlwZVxyXG4gIHJldHVybiBtaW1lVHlwZXNbdHlwZV0gfHwgZm9ybWF0cy5maW5kKCh0KSA9PiB0ID09PSB0eXBlKSB8fCAncG5nJztcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gcGF0aCBpcyByZWxhdGl2ZSBvciBhYnNvbHV0ZSBhbmQgcmV0dXJucyB0aGUgY29ycmVjdGVkLFxyXG4gKiBhYnNvbHV0ZSBwYXRoLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gaXNBYnNvbHV0ZVBhdGhcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCB0byBiZSBjaGVja2VkIG9uLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgYWJzb2x1dGUgcGF0aC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBYnNvbHV0ZVBhdGgocGF0aCkge1xyXG4gIHJldHVybiBpc0Fic29sdXRlKHBhdGgpID8gbm9ybWFsaXplKHBhdGgpIDogcmVzb2x2ZShwYXRoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIGlucHV0IGRhdGEgdG8gYSBCYXNlNjQgc3RyaW5nIGJhc2VkIG9uIHRoZSBleHBvcnQgdHlwZS5cclxuICpcclxuICogQGZ1bmN0aW9uIGdldEJhc2U2NFxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgLSBUaGUgaW5wdXQgdG8gYmUgdHJhbnNmb3JtZWQgdG8gQmFzZTY0IGZvcm1hdC5cclxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgb3JpZ2luYWwgZXhwb3J0IHR5cGUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBCYXNlNjQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpbnB1dC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRCYXNlNjQoaW5wdXQsIHR5cGUpIHtcclxuICAvLyBGb3IgcGRmIGFuZCBzdmcgdHlwZXMgdGhlIGlucHV0IG11c3QgYmUgdHJhbnNmb3JtZWQgdG8gQmFzZTY0IGZyb20gYSBidWZmZXJcclxuICBpZiAodHlwZSA9PT0gJ3BkZicgfHwgdHlwZSA9PSAnc3ZnJykge1xyXG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGlucHV0LCAndXRmOCcpLnRvU3RyaW5nKCdiYXNlNjQnKTtcclxuICB9XHJcblxyXG4gIC8vIEZvciBwbmcgYW5kIGpwZWcgaW5wdXQgaXMgYWxyZWFkeSBhIEJhc2U2NCBzdHJpbmdcclxuICByZXR1cm4gaW5wdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHN0cmluZ2lmaWVkIGRhdGUgd2l0aG91dCB0aGUgR01UIHRleHQgaW5mb3JtYXRpb24uXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBnZXROZXdEYXRlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV3RGF0ZSgpIHtcclxuICAvLyBHZXQgcmlkIG9mIHRoZSBHTVQgdGV4dCBpbmZvcm1hdGlvblxyXG4gIHJldHVybiBuZXcgRGF0ZSgpLnRvU3RyaW5nKCkuc3BsaXQoJygnKVswXS50cmltKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBzdG9yZWQgdGltZSB2YWx1ZSBpbiBtaWxsaXNlY29uZHMuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBnZXROZXdEYXRlVGltZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE5ld0RhdGVUaW1lKCkge1xyXG4gIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gaXRlbSBpcyBhbiBvYmplY3QuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBpc09iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge3Vua25vd259IGl0ZW0gLSBUaGUgaXRlbSB0byBiZSBjaGVja2VkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgaXRlbSBpcyBhbiBvYmplY3QsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdChpdGVtKSB7XHJcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVtKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIG9iamVjdCBpcyBlbXB0eS5cclxuICpcclxuICogQGZ1bmN0aW9uIGlzT2JqZWN0RW1wdHlcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IGl0ZW0gLSBUaGUgb2JqZWN0IHRvIGJlIGNoZWNrZWQuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBvYmplY3QgaXMgZW1wdHksIGZhbHNlIG90aGVyd2lzZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdEVtcHR5KGl0ZW0pIHtcclxuICByZXR1cm4gKFxyXG4gICAgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmXHJcbiAgICAhQXJyYXkuaXNBcnJheShpdGVtKSAmJlxyXG4gICAgaXRlbSAhPT0gbnVsbCAmJlxyXG4gICAgT2JqZWN0LmtleXMoaXRlbSkubGVuZ3RoID09PSAwXHJcbiAgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBhIHByaXZhdGUgSVAgcmFuZ2UgVVJMIGlzIGZvdW5kIGluIHRoZSBnaXZlbiBzdHJpbmcuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBpc1ByaXZhdGVSYW5nZVVybEZvdW5kXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpdGVtIC0gVGhlIHN0cmluZyB0byBiZSBjaGVja2VkIGZvciBhIHByaXZhdGUgSVAgcmFuZ2UgVVJMLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBhIHByaXZhdGUgSVAgcmFuZ2UgVVJMIGlzIGZvdW5kLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNQcml2YXRlUmFuZ2VVcmxGb3VuZChpdGVtKSB7XHJcbiAgY29uc3QgcmVnZXhQYXR0ZXJucyA9IFtcclxuICAgIC94bGluazpocmVmPVwiKD86aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvKT9sb2NhbGhvc3RcXGIvLFxyXG4gICAgL3hsaW5rOmhyZWY9XCIoPzpodHRwOlxcL1xcL3xodHRwczpcXC9cXC8pPzEwXFwuXFxkezEsM31cXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFxiLyxcclxuICAgIC94bGluazpocmVmPVwiKD86aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvKT8xMjdcXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM31cXGIvLFxyXG4gICAgL3hsaW5rOmhyZWY9XCIoPzpodHRwOlxcL1xcL3xodHRwczpcXC9cXC8pPzE3MlxcLigxWzYtOV18MlswLTldfDNbMC0xXSlcXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFxiLyxcclxuICAgIC94bGluazpocmVmPVwiKD86aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvKT8xOTJcXC4xNjhcXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFxiL1xyXG4gIF07XHJcblxyXG4gIHJldHVybiByZWdleFBhdHRlcm5zLnNvbWUoKHBhdHRlcm4pID0+IHBhdHRlcm4udGVzdChpdGVtKSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBVdGlsaXR5IHRvIG1lYXN1cmUgZWxhcHNlZCB0aW1lIHVzaW5nIHRoZSBOb2RlLmpzIGBwcm9jZXNzLmhydGltZSgpYCBtZXRob2QuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBtZWFzdXJlVGltZVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSBlbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1lYXN1cmVUaW1lKCkge1xyXG4gIGNvbnN0IHN0YXJ0ID0gcHJvY2Vzcy5ocnRpbWUuYmlnaW50KCk7XHJcbiAgcmV0dXJuICgpID0+IE51bWJlcihwcm9jZXNzLmhydGltZS5iaWdpbnQoKSAtIHN0YXJ0KSAvIDEwMDAwMDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb3VuZHMgYSBudW1iZXIgdG8gdGhlIHNwZWNpZmllZCBwcmVjaXNpb24uXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiByb3VuZE51bWJlclxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgbnVtYmVyIHRvIGJlIHJvdW5kZWQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwcmVjaXNpb24gLSBUaGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRvLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcm91bmRlZCBudW1iZXIuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm91bmROdW1iZXIodmFsdWUsIHByZWNpc2lvbiA9IDEpIHtcclxuICBjb25zdCBtdWx0aXBsaWVyID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbiB8fCAwKTtcclxuICByZXR1cm4gTWF0aC5yb3VuZCgrdmFsdWUgKiBtdWx0aXBsaWVyKSAvIG11bHRpcGxpZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhIHZhbHVlIHRvIGEgYm9vbGVhbi5cclxuICpcclxuICogQGZ1bmN0aW9uIHRvQm9vbGVhblxyXG4gKlxyXG4gKiBAcGFyYW0ge3Vua25vd259IGl0ZW0gLSBUaGUgdmFsdWUgdG8gYmUgY29udmVydGVkIHRvIGEgYm9vbGVhbi5cclxuICpcclxuICogQHJldHVybnMge2Jvb2xlYW59IFRoZSBib29sZWFuIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpbnB1dCB2YWx1ZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0Jvb2xlYW4oaXRlbSkge1xyXG4gIHJldHVybiBbJ2ZhbHNlJywgJ3VuZGVmaW5lZCcsICdudWxsJywgJ05hTicsICcwJywgJyddLmluY2x1ZGVzKGl0ZW0pXHJcbiAgICA/IGZhbHNlXHJcbiAgICA6ICEhaXRlbTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFdyYXBzIGN1c3RvbSBjb2RlIHRvIGV4ZWN1dGUgaXQgc2FmZWx5LlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gd3JhcEFyb3VuZFxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gY3VzdG9tQ29kZSAtIFRoZSBjdXN0b20gY29kZSB0byBiZSB3cmFwcGVkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFsbG93RmlsZVJlc291cmNlcyAtIEZsYWcgdG8gYWxsb3cgbG9hZGluZyBjb2RlIGZyb20gYSBmaWxlLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0NhbGxiYWNrPWZhbHNlXSAtIEZsYWcgdGhhdCBpbmRpY2F0ZXMgdGhlIHJldHVybmVkIGNvZGVcclxuICogbXVzdCBiZSBpbiBhIGNhbGxiYWNrIGZvcm1hdC5cclxuICpcclxuICogQHJldHVybnMgeyhzdHJpbmd8bnVsbCl9IFRoZSB3cmFwcGVkIGN1c3RvbSBjb2RlIG9yIG51bGwgaWYgd3JhcHBpbmcgZmFpbHMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gd3JhcEFyb3VuZChjdXN0b21Db2RlLCBhbGxvd0ZpbGVSZXNvdXJjZXMsIGlzQ2FsbGJhY2sgPSBmYWxzZSkge1xyXG4gIGlmIChjdXN0b21Db2RlICYmIHR5cGVvZiBjdXN0b21Db2RlID09PSAnc3RyaW5nJykge1xyXG4gICAgY3VzdG9tQ29kZSA9IGN1c3RvbUNvZGUudHJpbSgpO1xyXG5cclxuICAgIGlmIChjdXN0b21Db2RlLmVuZHNXaXRoKCcuanMnKSkge1xyXG4gICAgICAvLyBMb2FkIGEgZmlsZSBpZiB0aGUgZmlsZSByZXNvdXJjZXMgYXJlIGFsbG93ZWRcclxuICAgICAgcmV0dXJuIGFsbG93RmlsZVJlc291cmNlc1xyXG4gICAgICAgID8gd3JhcEFyb3VuZChcclxuICAgICAgICAgICAgcmVhZEZpbGVTeW5jKGdldEFic29sdXRlUGF0aChjdXN0b21Db2RlKSwgJ3V0ZjgnKSxcclxuICAgICAgICAgICAgYWxsb3dGaWxlUmVzb3VyY2VzLFxyXG4gICAgICAgICAgICBpc0NhbGxiYWNrXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgOiBudWxsO1xyXG4gICAgfSBlbHNlIGlmIChcclxuICAgICAgIWlzQ2FsbGJhY2sgJiZcclxuICAgICAgKGN1c3RvbUNvZGUuc3RhcnRzV2l0aCgnZnVuY3Rpb24oKScpIHx8XHJcbiAgICAgICAgY3VzdG9tQ29kZS5zdGFydHNXaXRoKCdmdW5jdGlvbiAoKScpIHx8XHJcbiAgICAgICAgY3VzdG9tQ29kZS5zdGFydHNXaXRoKCcoKT0+JykgfHxcclxuICAgICAgICBjdXN0b21Db2RlLnN0YXJ0c1dpdGgoJygpID0+JykpXHJcbiAgICApIHtcclxuICAgICAgLy8gVHJlYXQgYSBmdW5jdGlvbiBhcyBhIHNlbGYtaW52b2tpbmcgZXhwcmVzc2lvblxyXG4gICAgICByZXR1cm4gYCgke2N1c3RvbUNvZGV9KSgpYDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBPciByZXR1cm4gYXMgYSBzdHJpbmdpZmllZCBjb2RlXHJcbiAgICByZXR1cm4gY3VzdG9tQ29kZS5yZXBsYWNlKC87JC8sICcnKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBfX2Rpcm5hbWUsXHJcbiAgY2xlYXJUZXh0LFxyXG4gIGRlZXBDb3B5LFxyXG4gIGV4cEJhY2tvZmYsXHJcbiAgZml4Q29uc3RyLFxyXG4gIGZpeE91dGZpbGUsXHJcbiAgZml4VHlwZSxcclxuICBnZXRBYnNvbHV0ZVBhdGgsXHJcbiAgZ2V0QmFzZTY0LFxyXG4gIGdldE5ld0RhdGUsXHJcbiAgZ2V0TmV3RGF0ZVRpbWUsXHJcbiAgaXNPYmplY3QsXHJcbiAgaXNPYmplY3RFbXB0eSxcclxuICBpc1ByaXZhdGVSYW5nZVVybEZvdW5kLFxyXG4gIG1lYXN1cmVUaW1lLFxyXG4gIHJvdW5kTnVtYmVyLFxyXG4gIHRvQm9vbGVhbixcclxuICB3cmFwQXJvdW5kXHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBBIG1vZHVsZSBmb3IgbWFuYWdpbmcgbG9nZ2luZyBmdW5jdGlvbmFsaXR5IHdpdGggY3VzdG9taXphYmxlXHJcbiAqIGxvZyBsZXZlbHMsIGNvbnNvbGUgYW5kIGZpbGUgbG9nZ2luZyBvcHRpb25zLCBhbmQgZXJyb3IgaGFuZGxpbmcgc3VwcG9ydC5cclxuICogVGhlIG1vZHVsZSBhbHNvIGVuc3VyZXMgdGhhdCBmaWxlLWJhc2VkIGxvZ3MgYXJlIHN0b3JlZCBpbiBhIHN0cnVjdHVyZWRcclxuICogZGlyZWN0b3J5LCBjcmVhdGluZyB0aGUgbmVjZXNzYXJ5IHBhdGhzIGF1dG9tYXRpY2FsbHkgaWYgdGhleSBkbyBub3QgZXhpc3QuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgYXBwZW5kRmlsZSwgZXhpc3RzU3luYywgbWtkaXJTeW5jIH0gZnJvbSAnZnMnO1xyXG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XHJcblxyXG5pbXBvcnQgeyBnZXRBYnNvbHV0ZVBhdGgsIGdldE5ld0RhdGUgfSBmcm9tICcuL3V0aWxzLmpzJztcclxuXHJcbi8vIFRoZSBhdmFpbGFibGUgY29sb3JzXHJcbmNvbnN0IGNvbG9ycyA9IFsncmVkJywgJ3llbGxvdycsICdibHVlJywgJ2dyYXknLCAnZ3JlZW4nXTtcclxuXHJcbi8vIFRoZSBkZWZhdWx0IGxvZ2dpbmcgY29uZmlnXHJcbmNvbnN0IGxvZ2dpbmcgPSB7XHJcbiAgLy8gRmxhZ3MgZm9yIGxvZ2dpbmcgc3RhdHVzXHJcbiAgdG9Db25zb2xlOiB0cnVlLFxyXG4gIHRvRmlsZTogZmFsc2UsXHJcbiAgcGF0aENyZWF0ZWQ6IGZhbHNlLFxyXG4gIC8vIEZ1bGwgcGF0aCB0byB0aGUgbG9nIGZpbGVcclxuICBwYXRoVG9Mb2c6ICcnLFxyXG4gIC8vIExvZyBsZXZlbHNcclxuICBsZXZlbHNEZXNjOiBbXHJcbiAgICB7XHJcbiAgICAgIHRpdGxlOiAnZXJyb3InLFxyXG4gICAgICBjb2xvcjogY29sb3JzWzBdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0aXRsZTogJ3dhcm5pbmcnLFxyXG4gICAgICBjb2xvcjogY29sb3JzWzFdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0aXRsZTogJ25vdGljZScsXHJcbiAgICAgIGNvbG9yOiBjb2xvcnNbMl1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHRpdGxlOiAndmVyYm9zZScsXHJcbiAgICAgIGNvbG9yOiBjb2xvcnNbM11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHRpdGxlOiAnYmVuY2htYXJrJyxcclxuICAgICAgY29sb3I6IGNvbG9yc1s0XVxyXG4gICAgfVxyXG4gIF1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBMb2dzIGEgbWVzc2FnZSB3aXRoIGEgc3BlY2lmaWVkIGxvZyBsZXZlbC4gQWNjZXB0cyBhIHZhcmlhYmxlIG51bWJlclxyXG4gKiBvZiBhcmd1bWVudHMuIFRoZSBhcmd1bWVudHMgYWZ0ZXIgdGhlIGBsZXZlbGAgYXJlIHBhc3NlZCB0byBgY29uc29sZS5sb2dgXHJcbiAqIGFuZC9vciB1c2VkIHRvIGNvbnN0cnVjdCBhbmQgYXBwZW5kIG1lc3NhZ2VzIHRvIGEgbG9nIGZpbGUuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBsb2dcclxuICpcclxuICogQHBhcmFtIHsuLi51bmtub3dufSBhcmdzIC0gQW4gYXJyYXkgb2YgYXJndW1lbnRzIHdoZXJlIHRoZSBmaXJzdCBpcyB0aGUgbG9nXHJcbiAqIGxldmVsIGFuZCB0aGUgcmVtYWluaW5nIGFyZSBzdHJpbmdzIHVzZWQgdG8gYnVpbGQgdGhlIGxvZyBtZXNzYWdlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dm9pZH0gRXhpdHMgdGhlIGZ1bmN0aW9uIGV4ZWN1dGlvbiBpZiBhdHRlbXB0aW5nIHRvIGxvZyBhdCBhIGxldmVsXHJcbiAqIGhpZ2hlciB0aGFuIGFsbG93ZWQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9nKC4uLmFyZ3MpIHtcclxuICBjb25zdCBbbmV3TGV2ZWwsIC4uLnRleHRzXSA9IGFyZ3M7XHJcblxyXG4gIC8vIEN1cnJlbnQgbG9nZ2luZyBvcHRpb25zXHJcbiAgY29uc3QgeyBsZXZlbHNEZXNjLCBsZXZlbCB9ID0gbG9nZ2luZztcclxuXHJcbiAgLy8gQ2hlY2sgaWYgdGhlIGxvZyBsZXZlbCBpcyB3aXRoaW4gYSBjb3JyZWN0IHJhbmdlIG9yIGlzIGl0IGEgYmVuY2htYXJrIGxvZ1xyXG4gIGlmIChcclxuICAgIG5ld0xldmVsICE9PSA1ICYmXHJcbiAgICAobmV3TGV2ZWwgPT09IDAgfHwgbmV3TGV2ZWwgPiBsZXZlbCB8fCBsZXZlbCA+IGxldmVsc0Rlc2MubGVuZ3RoKVxyXG4gICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gQ3JlYXRlIGEgbWVzc2FnZSdzIHByZWZpeFxyXG4gIGNvbnN0IHByZWZpeCA9IGAke2dldE5ld0RhdGUoKX0gWyR7bGV2ZWxzRGVzY1tuZXdMZXZlbCAtIDFdLnRpdGxlfV0gLWA7XHJcblxyXG4gIC8vIExvZyB0byBmaWxlXHJcbiAgaWYgKGxvZ2dpbmcudG9GaWxlKSB7XHJcbiAgICBfbG9nVG9GaWxlKHRleHRzLCBwcmVmaXgpO1xyXG4gIH1cclxuXHJcbiAgLy8gTG9nIHRvIGNvbnNvbGVcclxuICBpZiAobG9nZ2luZy50b0NvbnNvbGUpIHtcclxuICAgIGNvbnNvbGUubG9nLmFwcGx5KFxyXG4gICAgICB1bmRlZmluZWQsXHJcbiAgICAgIFtwcmVmaXgudG9TdHJpbmcoKVtsb2dnaW5nLmxldmVsc0Rlc2NbbmV3TGV2ZWwgLSAxXS5jb2xvcl1dLmNvbmNhdCh0ZXh0cylcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogTG9ncyBhbiBlcnJvciBtZXNzYWdlIGFsb25nIHdpdGggaXRzIHN0YWNrIHRyYWNlLiBPcHRpb25hbGx5LCBhIGN1c3RvbSBtZXNzYWdlXHJcbiAqIGNhbiBiZSBwcm92aWRlZC5cclxuICpcclxuICogQGZ1bmN0aW9uIGxvZ1dpdGhTdGFja1xyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3TGV2ZWwgLSBUaGUgbG9nIGxldmVsLlxyXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciAtIFRoZSBlcnJvciBvYmplY3QgY29udGFpbmluZyB0aGUgc3RhY2sgdHJhY2UuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjdXN0b21NZXNzYWdlIC0gQW4gb3B0aW9uYWwgY3VzdG9tIG1lc3NhZ2UgdG8gYmUgaW5jbHVkZWRcclxuICogaW4gdGhlIGxvZyBhbG9uZ3NpZGUgdGhlIGVycm9yLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dm9pZH0gRXhpdHMgdGhlIGZ1bmN0aW9uIGV4ZWN1dGlvbiBpZiBhdHRlbXB0aW5nIHRvIGxvZyBhdCBhIGxldmVsXHJcbiAqIGhpZ2hlciB0aGFuIGFsbG93ZWQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9nV2l0aFN0YWNrKG5ld0xldmVsLCBlcnJvciwgY3VzdG9tTWVzc2FnZSkge1xyXG4gIC8vIEdldCB0aGUgbWFpbiBtZXNzYWdlXHJcbiAgY29uc3QgbWFpbk1lc3NhZ2UgPSBjdXN0b21NZXNzYWdlIHx8IChlcnJvciAmJiBlcnJvci5tZXNzYWdlKSB8fCAnJztcclxuXHJcbiAgLy8gQ3VycmVudCBsb2dnaW5nIG9wdGlvbnNcclxuICBjb25zdCB7IGxldmVsLCBsZXZlbHNEZXNjIH0gPSBsb2dnaW5nO1xyXG5cclxuICAvLyBDaGVjayBpZiB0aGUgbG9nIGxldmVsIGlzIHdpdGhpbiBhIGNvcnJlY3QgcmFuZ2VcclxuICBpZiAobmV3TGV2ZWwgPT09IDAgfHwgbmV3TGV2ZWwgPiBsZXZlbCB8fCBsZXZlbCA+IGxldmVsc0Rlc2MubGVuZ3RoKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBDcmVhdGUgYSBtZXNzYWdlJ3MgcHJlZml4XHJcbiAgY29uc3QgcHJlZml4ID0gYCR7Z2V0TmV3RGF0ZSgpfSBbJHtsZXZlbHNEZXNjW25ld0xldmVsIC0gMV0udGl0bGV9XSAtYDtcclxuXHJcbiAgLy8gQWRkIHRoZSB3aG9sZSBzdGFjayBtZXNzYWdlXHJcbiAgY29uc3Qgc3RhY2tNZXNzYWdlID0gZXJyb3IgJiYgZXJyb3Iuc3RhY2s7XHJcblxyXG4gIC8vIENvbWJpbmUgY3VzdG9tIG1lc3NhZ2Ugb3IgZXJyb3IgbWVzc2FnZSB3aXRoIGVycm9yIHN0YWNrIG1lc3NhZ2UsIGlmIGV4aXN0c1xyXG4gIGNvbnN0IHRleHRzID0gW21haW5NZXNzYWdlXTtcclxuICBpZiAoc3RhY2tNZXNzYWdlKSB7XHJcbiAgICB0ZXh0cy5wdXNoKCdcXG4nLCBzdGFja01lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgLy8gTG9nIHRvIGZpbGVcclxuICBpZiAobG9nZ2luZy50b0ZpbGUpIHtcclxuICAgIF9sb2dUb0ZpbGUodGV4dHMsIHByZWZpeCk7XHJcbiAgfVxyXG5cclxuICAvLyBMb2cgdG8gY29uc29sZVxyXG4gIGlmIChsb2dnaW5nLnRvQ29uc29sZSkge1xyXG4gICAgY29uc29sZS5sb2cuYXBwbHkoXHJcbiAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgW3ByZWZpeC50b1N0cmluZygpW2xvZ2dpbmcubGV2ZWxzRGVzY1tuZXdMZXZlbCAtIDFdLmNvbG9yXV0uY29uY2F0KFtcclxuICAgICAgICB0ZXh0cy5zaGlmdCgpW2NvbG9yc1tuZXdMZXZlbCAtIDFdXSxcclxuICAgICAgICAuLi50ZXh0c1xyXG4gICAgICBdKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMb2dzIGFuIGVycm9yIG1lc3NhZ2UgcmVsYXRlZCB0byBab2QgdmFsaWRhdGlvbiBpc3N1ZXMuIE9wdGlvbmFsbHksIGEgY3VzdG9tXHJcbiAqIG1lc3NhZ2UgY2FuIGJlIHByb3ZpZGVkLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gbG9nWm9kSXNzdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBuZXdMZXZlbCAtIFRoZSBsb2cgbGV2ZWwuXHJcbiAqIEBwYXJhbSB7RXJyb3JbXX0gaXNzdWVzIC0gQW4gYXJyYXkgb2YgWm9kIHZhbGlkYXRpb24gaXNzdWVzLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gY3VzdG9tTWVzc2FnZSAtIEFuIG9wdGlvbmFsIGN1c3RvbSBtZXNzYWdlIHRvIGJlIGluY2x1ZGVkXHJcbiAqIGluIHRoZSBsb2cgYWxvbmdzaWRlIHRoZSBlcnJvci5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2dab2RJc3N1ZXMobmV3TGV2ZWwsIGlzc3VlcywgY3VzdG9tTWVzc2FnZSkge1xyXG4gIGxvZ1dpdGhTdGFjayhcclxuICAgIG5ld0xldmVsLFxyXG4gICAgbnVsbCxcclxuICAgIFtcclxuICAgICAgYCR7Y3VzdG9tTWVzc2FnZSB8fCAnW3ZhbGlkYXRpb25dIFZhbGlkYXRpb24gZXJyb3InfSAtIHRoZSBmb2xsb3dpbmcgWm9kIGlzc3VlcyBvY2N1cmVkOmAsXHJcbiAgICAgIC4uLihpc3N1ZXMgfHwgW10pLm1hcCgoaXNzdWUpID0+IGAtICR7aXNzdWUubWVzc2FnZX1gKVxyXG4gICAgXS5qb2luKCdcXG4nKVxyXG4gICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplcyBsb2dnaW5nIHdpdGggdGhlIHNwZWNpZmllZCBsb2dnaW5nIGNvbmZpZ3VyYXRpb24uXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBpbml0TG9nZ2luZ1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gbG9nZ2luZ09wdGlvbnMgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbmluZ1xyXG4gKiBgbG9nZ2luZ2Agb3B0aW9ucy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0TG9nZ2luZyhsb2dnaW5nT3B0aW9ucykge1xyXG4gIC8vIEdldCBvcHRpb25zIGZyb20gdGhlIGBsb2dnaW5nT3B0aW9uc2Agb2JqZWN0XHJcbiAgY29uc3QgeyBsZXZlbCwgZGVzdCwgZmlsZSwgdG9Db25zb2xlLCB0b0ZpbGUgfSA9IGxvZ2dpbmdPcHRpb25zO1xyXG5cclxuICAvLyBSZXNldCBmbGFncyB0byB0aGUgZGVmYXVsdCB2YWx1ZXNcclxuICBsb2dnaW5nLnBhdGhDcmVhdGVkID0gZmFsc2U7XHJcbiAgbG9nZ2luZy5wYXRoVG9Mb2cgPSAnJztcclxuXHJcbiAgLy8gU2V0IHRoZSBsb2dnaW5nIGxldmVsXHJcbiAgc2V0TG9nTGV2ZWwobGV2ZWwpO1xyXG5cclxuICAvLyBTZXQgdGhlIGNvbnNvbGUgbG9nZ2luZ1xyXG4gIGVuYWJsZUNvbnNvbGVMb2dnaW5nKHRvQ29uc29sZSk7XHJcblxyXG4gIC8vIFNldCB0aGUgZmlsZSBsb2dnaW5nXHJcbiAgZW5hYmxlRmlsZUxvZ2dpbmcoZGVzdCwgZmlsZSwgdG9GaWxlKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldHMgdGhlIGxvZyBsZXZlbCB0byB0aGUgc3BlY2lmaWVkIHZhbHVlLiBMb2cgbGV2ZWxzIGFyZSAoYDBgID0gbm8gbG9nZ2luZyxcclxuICogYDFgID0gZXJyb3IsIGAyYCA9IHdhcm5pbmcsIGAzYCA9IG5vdGljZSwgYDRgID0gdmVyYm9zZSwgb3IgYDVgID0gYmVuY2htYXJrKS5cclxuICpcclxuICogQGZ1bmN0aW9uIHNldExvZ0xldmVsXHJcbiAqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZXZlbCAtIFRoZSBsb2cgbGV2ZWwgdG8gYmUgc2V0LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsKSB7XHJcbiAgaWYgKFxyXG4gICAgTnVtYmVyLmlzSW50ZWdlcihsZXZlbCkgJiZcclxuICAgIGxldmVsID49IDAgJiZcclxuICAgIGxldmVsIDw9IGxvZ2dpbmcubGV2ZWxzRGVzYy5sZW5ndGhcclxuICApIHtcclxuICAgIC8vIFVwZGF0ZSB0aGUgbW9kdWxlIGxvZ2dpbmcncyBgbGV2ZWxgIG9wdGlvblxyXG4gICAgbG9nZ2luZy5sZXZlbCA9IGxldmVsO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEVuYWJsZXMgY29uc29sZSBsb2dnaW5nLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZW5hYmxlQ29uc29sZUxvZ2dpbmdcclxuICpcclxuICogQHBhcmFtIHtib29sZWFufSB0b0NvbnNvbGUgLSBUaGUgZmxhZyBmb3Igc2V0dGluZyB0aGUgbG9nZ2luZyB0byB0aGUgY29uc29sZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBlbmFibGVDb25zb2xlTG9nZ2luZyh0b0NvbnNvbGUpIHtcclxuICAvLyBVcGRhdGUgdGhlIG1vZHVsZSBsb2dnaW5nJ3MgYHRvQ29uc29sZWAgb3B0aW9uXHJcbiAgbG9nZ2luZy50b0NvbnNvbGUgPSAhIXRvQ29uc29sZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEVuYWJsZXMgZmlsZSBsb2dnaW5nIHdpdGggdGhlIHNwZWNpZmllZCBkZXN0aW5hdGlvbiBhbmQgbG9nIGZpbGUgbmFtZS5cclxuICpcclxuICogQGZ1bmN0aW9uIGVuYWJsZUZpbGVMb2dnaW5nXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBkZXN0IC0gVGhlIGRlc3RpbmF0aW9uIHBhdGggd2hlcmUgdGhlIGxvZyBmaWxlIHNob3VsZFxyXG4gKiBiZSBzYXZlZC5cclxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGUgLSBUaGUgbmFtZSBvZiB0aGUgbG9nIGZpbGUuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdG9GaWxlIC0gQSBmbGFnIGluZGljYXRpbmcgd2hldGhlciBsb2dnaW5nIHNob3VsZFxyXG4gKiBiZSBkaXJlY3RlZCB0byBhIGZpbGUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlRmlsZUxvZ2dpbmcoZGVzdCwgZmlsZSwgdG9GaWxlKSB7XHJcbiAgLy8gVXBkYXRlIHRoZSBtb2R1bGUgbG9nZ2luZydzIGB0b0ZpbGVgIG9wdGlvblxyXG4gIGxvZ2dpbmcudG9GaWxlID0gISF0b0ZpbGU7XHJcblxyXG4gIC8vIFNldCB0aGUgYGRlc3RgIGFuZCBgZmlsZWAgb3B0aW9ucyBvbmx5IGlmIHRoZSBmaWxlIGxvZ2dpbmcgaXMgZW5hYmxlZFxyXG4gIGlmIChsb2dnaW5nLnRvRmlsZSkge1xyXG4gICAgbG9nZ2luZy5kZXN0ID0gZGVzdCB8fCAnJztcclxuICAgIGxvZ2dpbmcuZmlsZSA9IGZpbGUgfHwgJyc7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogTG9ncyB0aGUgcHJvdmlkZWQgdGV4dHMgdG8gYSBmaWxlLCBpZiBmaWxlIGxvZ2dpbmcgaXMgZW5hYmxlZC4gSXQgY3JlYXRlc1xyXG4gKiB0aGUgbmVjZXNzYXJ5IGRpcmVjdG9yeSBzdHJ1Y3R1cmUgaWYgbm90IGFscmVhZHkgY3JlYXRlZCBhbmQgYXBwZW5kc1xyXG4gKiB0aGUgY29udGVudCwgaW5jbHVkaW5nIGFuIG9wdGlvbmFsIHByZWZpeCwgdG8gdGhlIHNwZWNpZmllZCBsb2cgZmlsZS5cclxuICpcclxuICogQGZ1bmN0aW9uIF9sb2dUb0ZpbGVcclxuICpcclxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gdGV4dHMgLSBBbiBhcnJheSBvZiB0ZXh0cyB0byBiZSBsb2dnZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmaXggLSBBbiBvcHRpb25hbCBwcmVmaXggdG8gYmUgYWRkZWQgdG8gZWFjaCBsb2cgZW50cnkuXHJcbiAqL1xyXG5mdW5jdGlvbiBfbG9nVG9GaWxlKHRleHRzLCBwcmVmaXgpIHtcclxuICBpZiAoIWxvZ2dpbmcucGF0aENyZWF0ZWQpIHtcclxuICAgIC8vIENyZWF0ZSBpZiBkb2VzIG5vdCBleGlzdFxyXG4gICAgIWV4aXN0c1N5bmMoZ2V0QWJzb2x1dGVQYXRoKGxvZ2dpbmcuZGVzdCkpICYmXHJcbiAgICAgIG1rZGlyU3luYyhnZXRBYnNvbHV0ZVBhdGgobG9nZ2luZy5kZXN0KSk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBmdWxsIHBhdGhcclxuICAgIGxvZ2dpbmcucGF0aFRvTG9nID0gZ2V0QWJzb2x1dGVQYXRoKGpvaW4obG9nZ2luZy5kZXN0LCBsb2dnaW5nLmZpbGUpKTtcclxuXHJcbiAgICAvLyBXZSBub3cgYXNzdW1lIHRoZSBwYXRoIGlzIGF2YWlsYWJsZSwgZS5nLiBpdCdzIHRoZSByZXNwb25zaWJpbGl0eVxyXG4gICAgLy8gb2YgdGhlIHVzZXIgdG8gY3JlYXRlIHRoZSBwYXRoIHdpdGggdGhlIGNvcnJlY3QgYWNjZXNzIHJpZ2h0cy5cclxuICAgIGxvZ2dpbmcucGF0aENyZWF0ZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLy8gQWRkIHRoZSBjb250ZW50IHRvIGEgZmlsZVxyXG4gIGFwcGVuZEZpbGUoXHJcbiAgICBsb2dnaW5nLnBhdGhUb0xvZyxcclxuICAgIFtwcmVmaXhdLmNvbmNhdCh0ZXh0cykuam9pbignICcpICsgJ1xcbicsXHJcbiAgICAoZXJyb3IpID0+IHtcclxuICAgICAgaWYgKGVycm9yICYmIGxvZ2dpbmcudG9GaWxlICYmIGxvZ2dpbmcucGF0aENyZWF0ZWQpIHtcclxuICAgICAgICBsb2dnaW5nLnRvRmlsZSA9IGZhbHNlO1xyXG4gICAgICAgIGxvZ2dpbmcucGF0aENyZWF0ZWQgPSBmYWxzZTtcclxuICAgICAgICBsb2dXaXRoU3RhY2soMiwgZXJyb3IsIGBbbG9nZ2VyXSBVbmFibGUgdG8gd3JpdGUgdG8gbG9nIGZpbGUuYCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgbG9nLFxyXG4gIGxvZ1dpdGhTdGFjayxcclxuICBsb2dab2RJc3N1ZXMsXHJcbiAgaW5pdExvZ2dpbmcsXHJcbiAgc2V0TG9nTGV2ZWwsXHJcbiAgZW5hYmxlQ29uc29sZUxvZ2dpbmcsXHJcbiAgZW5hYmxlRmlsZUxvZ2dpbmdcclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQG92ZXJ2aWV3IENvbmZpZ3VyYXRpb24gbWFuYWdlbWVudCBtb2R1bGUgZm9yIHRoZSBIaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXIuXHJcbiAqIFByb3ZpZGVzIGRlZmF1bHQgY29uZmlndXJhdGlvbnMgdGhhdCBzdXBwb3J0IGVudmlyb25tZW50IHZhcmlhYmxlcywgQ0xJXHJcbiAqIGFyZ3VtZW50cywgYW5kIGludGVyYWN0aXZlIHByb21wdHMgZm9yIGN1c3RvbWl6YXRpb24gb2Ygb3B0aW9ucyBhbmQgZmVhdHVyZXMuXHJcbiAqIEFkZGl0aW9uYWxseSwgaXQgbWFwcyBsZWdhY3kgb3B0aW9ucyB0byBtb2Rlcm4gc3RydWN0dXJlcywgZ2VuZXJhdGVzIG5lc3RlZFxyXG4gKiBhcmd1bWVudCBtYXBwaW5ncywgYW5kIGRpc3BsYXlzIENMSSB1c2FnZSBpbmZvcm1hdGlvbi5cclxuICovXHJcblxyXG4vKipcclxuICogVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGF2YWlsYWJsZSBvcHRpb25zLCBvcmdhbml6ZWRcclxuICogYnkgc2VjdGlvbnMuXHJcbiAqXHJcbiAqIFRoaXMgb2JqZWN0IGluY2x1ZGVzOlxyXG4gKiAtIERlZmF1bHQgdmFsdWVzIGZvciBlYWNoIG9wdGlvblxyXG4gKiAtIERhdGEgdHlwZXMgZm9yIHZhbGlkYXRpb25cclxuICogLSBOYW1lcyBvZiBjb3JyZXNwb25kaW5nIGVudmlyb25tZW50IHZhcmlhYmxlc1xyXG4gKiAtIERlc2NyaXB0aW9ucyBvZiBlYWNoIHByb3BlcnR5XHJcbiAqIC0gSW5mb3JtYXRpb24gdXNlZCBmb3IgcHJvbXB0cyBpbiBpbnRlcmFjdGl2ZSBjb25maWd1cmF0aW9uXHJcbiAqIC0gW09wdGlvbmFsXSBDb3JyZXNwb25kaW5nIENMSSBhcmd1bWVudCBuYW1lcyBmb3IgQ0xJIHVzYWdlXHJcbiAqIC0gW09wdGlvbmFsXSBMZWdhY3kgbmFtZXMgZnJvbSB0aGUgcHJldmlvdXMgUGhhbnRvbUpTLWJhc2VkIHNlcnZlclxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRDb25maWcgPSB7XHJcbiAgcHVwcGV0ZWVyOiB7XHJcbiAgICBhcmdzOiB7XHJcbiAgICAgIHZhbHVlOiBbXHJcbiAgICAgICAgJy0tYWxsb3ctcnVubmluZy1pbnNlY3VyZS1jb250ZW50JyxcclxuICAgICAgICAnLS1hc2gtbm8tbnVkZ2VzJyxcclxuICAgICAgICAnLS1hdXRvcGxheS1wb2xpY3k9dXNlci1nZXN0dXJlLXJlcXVpcmVkJyxcclxuICAgICAgICAnLS1ibG9jay1uZXctd2ViLWNvbnRlbnRzJyxcclxuICAgICAgICAnLS1kaXNhYmxlLWFjY2VsZXJhdGVkLTJkLWNhbnZhcycsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1iYWNrZ3JvdW5kLW5ldHdvcmtpbmcnLFxyXG4gICAgICAgICctLWRpc2FibGUtYmFja2dyb3VuZC10aW1lci10aHJvdHRsaW5nJyxcclxuICAgICAgICAnLS1kaXNhYmxlLWJhY2tncm91bmRpbmctb2NjbHVkZWQtd2luZG93cycsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1icmVha3BhZCcsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1jaGVja2VyLWltYWdpbmcnLFxyXG4gICAgICAgICctLWRpc2FibGUtY2xpZW50LXNpZGUtcGhpc2hpbmctZGV0ZWN0aW9uJyxcclxuICAgICAgICAnLS1kaXNhYmxlLWNvbXBvbmVudC1leHRlbnNpb25zLXdpdGgtYmFja2dyb3VuZC1wYWdlcycsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1jb21wb25lbnQtdXBkYXRlJyxcclxuICAgICAgICAnLS1kaXNhYmxlLWRlZmF1bHQtYXBwcycsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1kZXYtc2htLXVzYWdlJyxcclxuICAgICAgICAnLS1kaXNhYmxlLWRvbWFpbi1yZWxpYWJpbGl0eScsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1leHRlbnNpb25zJyxcclxuICAgICAgICAnLS1kaXNhYmxlLWZlYXR1cmVzPUNhbGN1bGF0ZU5hdGl2ZVdpbk9jY2x1c2lvbixJbnRlcmVzdEZlZWRDb250ZW50U3VnZ2VzdGlvbnMsV2ViT1RQJyxcclxuICAgICAgICAnLS1kaXNhYmxlLWhhbmctbW9uaXRvcicsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1pcGMtZmxvb2RpbmctcHJvdGVjdGlvbicsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1sb2dnaW5nJyxcclxuICAgICAgICAnLS1kaXNhYmxlLW5vdGlmaWNhdGlvbnMnLFxyXG4gICAgICAgICctLWRpc2FibGUtb2ZmZXItc3RvcmUtdW5tYXNrZWQtd2FsbGV0LWNhcmRzJyxcclxuICAgICAgICAnLS1kaXNhYmxlLXBvcHVwLWJsb2NraW5nJyxcclxuICAgICAgICAnLS1kaXNhYmxlLXByaW50LXByZXZpZXcnLFxyXG4gICAgICAgICctLWRpc2FibGUtcHJvbXB0LW9uLXJlcG9zdCcsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1yZW5kZXJlci1iYWNrZ3JvdW5kaW5nJyxcclxuICAgICAgICAnLS1kaXNhYmxlLXNlYXJjaC1lbmdpbmUtY2hvaWNlLXNjcmVlbicsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1zZXNzaW9uLWNyYXNoZWQtYnViYmxlJyxcclxuICAgICAgICAnLS1kaXNhYmxlLXNldHVpZC1zYW5kYm94JyxcclxuICAgICAgICAnLS1kaXNhYmxlLXNpdGUtaXNvbGF0aW9uLXRyaWFscycsXHJcbiAgICAgICAgJy0tZGlzYWJsZS1zcGVlY2gtYXBpJyxcclxuICAgICAgICAnLS1kaXNhYmxlLXN5bmMnLFxyXG4gICAgICAgICctLWVuYWJsZS11bnNhZmUtd2ViZ3B1JyxcclxuICAgICAgICAnLS1oaWRlLWNyYXNoLXJlc3RvcmUtYnViYmxlJyxcclxuICAgICAgICAnLS1oaWRlLXNjcm9sbGJhcnMnLFxyXG4gICAgICAgICctLW1ldHJpY3MtcmVjb3JkaW5nLW9ubHknLFxyXG4gICAgICAgICctLW11dGUtYXVkaW8nLFxyXG4gICAgICAgICctLW5vLWRlZmF1bHQtYnJvd3Nlci1jaGVjaycsXHJcbiAgICAgICAgJy0tbm8tZmlyc3QtcnVuJyxcclxuICAgICAgICAnLS1uby1waW5ncycsXHJcbiAgICAgICAgJy0tbm8tc2FuZGJveCcsXHJcbiAgICAgICAgJy0tbm8tc3RhcnR1cC13aW5kb3cnLFxyXG4gICAgICAgICctLW5vLXp5Z290ZScsXHJcbiAgICAgICAgJy0tcGFzc3dvcmQtc3RvcmU9YmFzaWMnLFxyXG4gICAgICAgICctLXByb2Nlc3MtcGVyLXRhYicsXHJcbiAgICAgICAgJy0tdXNlLW1vY2sta2V5Y2hhaW4nXHJcbiAgICAgIF0sXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZ1tdJ10sXHJcbiAgICAgIGVudkxpbms6ICdQVVBQRVRFRVJfQVJHUycsXHJcbiAgICAgIGNsaU5hbWU6ICdwdXBwZXRlZXJBcmdzJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdBcnJheSBvZiBQdXBwZXRlZXIgYXJndW1lbnRzJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdsaXN0JyxcclxuICAgICAgICBzZXBhcmF0b3I6ICc7J1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBoaWdoY2hhcnRzOiB7XHJcbiAgICB2ZXJzaW9uOiB7XHJcbiAgICAgIHZhbHVlOiAnbGF0ZXN0JyxcclxuICAgICAgdHlwZXM6IFsnc3RyaW5nJ10sXHJcbiAgICAgIGVudkxpbms6ICdISUdIQ0hBUlRTX1ZFUlNJT04nLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0hpZ2hjaGFydHMgdmVyc2lvbicsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNkblVybDoge1xyXG4gICAgICB2YWx1ZTogJ2h0dHBzOi8vY29kZS5oaWdoY2hhcnRzLmNvbScsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZyddLFxyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19DRE5fVVJMJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdDRE4gVVJMIGZvciBIaWdoY2hhcnRzIHNjcmlwdHMnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBmb3JjZUZldGNoOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19GT1JDRV9GRVRDSCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnRmxhZyB0byByZWZldGNoIHNjcmlwdHMgYWZ0ZXIgZWFjaCBzZXJ2ZXIgcmVydW4nLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNhY2hlUGF0aDoge1xyXG4gICAgICB2YWx1ZTogJy5jYWNoZScsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZyddLFxyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19DQUNIRV9QQVRIJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdEaXJlY3RvcnkgcGF0aCBmb3IgY2FjaGVkIEhpZ2hjaGFydHMgc2NyaXB0cycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNvcmVTY3JpcHRzOiB7XHJcbiAgICAgIHZhbHVlOiBbJ2hpZ2hjaGFydHMnLCAnaGlnaGNoYXJ0cy1tb3JlJywgJ2hpZ2hjaGFydHMtM2QnXSxcclxuICAgICAgdHlwZXM6IFsnc3RyaW5nW10nXSxcclxuICAgICAgZW52TGluazogJ0hJR0hDSEFSVFNfQ09SRV9TQ1JJUFRTJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdIaWdoY2hhcnRzIGNvcmUgc2NyaXB0cyB0byBmZXRjaCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbXVsdGlzZWxlY3QnLFxyXG4gICAgICAgIGluc3RydWN0aW9uczogJ1NwYWNlOiBTZWxlY3Qgc3BlY2lmaWMsIEE6IFNlbGVjdCBhbGwsIEVudGVyOiBDb25maXJtJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgbW9kdWxlU2NyaXB0czoge1xyXG4gICAgICB2YWx1ZTogW1xyXG4gICAgICAgICdzdG9jaycsXHJcbiAgICAgICAgJ21hcCcsXHJcbiAgICAgICAgJ2dhbnR0JyxcclxuICAgICAgICAnZXhwb3J0aW5nJyxcclxuICAgICAgICAncGFyYWxsZWwtY29vcmRpbmF0ZXMnLFxyXG4gICAgICAgICdhY2Nlc3NpYmlsaXR5JyxcclxuICAgICAgICAvLyAnYW5ub3RhdGlvbnMtYWR2YW5jZWQnLFxyXG4gICAgICAgICdib29zdC1jYW52YXMnLFxyXG4gICAgICAgICdib29zdCcsXHJcbiAgICAgICAgJ2RhdGEnLFxyXG4gICAgICAgICdkYXRhLXRvb2xzJyxcclxuICAgICAgICAnZHJhZ2dhYmxlLXBvaW50cycsXHJcbiAgICAgICAgJ3N0YXRpYy1zY2FsZScsXHJcbiAgICAgICAgJ2Jyb2tlbi1heGlzJyxcclxuICAgICAgICAnaGVhdG1hcCcsXHJcbiAgICAgICAgJ3RpbGVtYXAnLFxyXG4gICAgICAgICd0aWxlZHdlYm1hcCcsXHJcbiAgICAgICAgJ3RpbWVsaW5lJyxcclxuICAgICAgICAndHJlZW1hcCcsXHJcbiAgICAgICAgJ3RyZWVncmFwaCcsXHJcbiAgICAgICAgJ2l0ZW0tc2VyaWVzJyxcclxuICAgICAgICAnZHJpbGxkb3duJyxcclxuICAgICAgICAnaGlzdG9ncmFtLWJlbGxjdXJ2ZScsXHJcbiAgICAgICAgJ2J1bGxldCcsXHJcbiAgICAgICAgJ2Z1bm5lbCcsXHJcbiAgICAgICAgJ2Z1bm5lbDNkJyxcclxuICAgICAgICAnZ2VvaGVhdG1hcCcsXHJcbiAgICAgICAgJ3B5cmFtaWQzZCcsXHJcbiAgICAgICAgJ25ldHdvcmtncmFwaCcsXHJcbiAgICAgICAgJ292ZXJsYXBwaW5nLWRhdGFsYWJlbHMnLFxyXG4gICAgICAgICdwYXJldG8nLFxyXG4gICAgICAgICdwYXR0ZXJuLWZpbGwnLFxyXG4gICAgICAgICdwaWN0b3JpYWwnLFxyXG4gICAgICAgICdwcmljZS1pbmRpY2F0b3InLFxyXG4gICAgICAgICdzYW5rZXknLFxyXG4gICAgICAgICdhcmMtZGlhZ3JhbScsXHJcbiAgICAgICAgJ2RlcGVuZGVuY3ktd2hlZWwnLFxyXG4gICAgICAgICdzZXJpZXMtbGFiZWwnLFxyXG4gICAgICAgICdzZXJpZXMtb24tcG9pbnQnLFxyXG4gICAgICAgICdzb2xpZC1nYXVnZScsXHJcbiAgICAgICAgJ3NvbmlmaWNhdGlvbicsXHJcbiAgICAgICAgLy8gJ3N0b2NrLXRvb2xzJyxcclxuICAgICAgICAnc3RyZWFtZ3JhcGgnLFxyXG4gICAgICAgICdzdW5idXJzdCcsXHJcbiAgICAgICAgJ3ZhcmlhYmxlLXBpZScsXHJcbiAgICAgICAgJ3Zhcml3aWRlJyxcclxuICAgICAgICAndmVjdG9yJyxcclxuICAgICAgICAndmVubicsXHJcbiAgICAgICAgJ3dpbmRiYXJiJyxcclxuICAgICAgICAnd29yZGNsb3VkJyxcclxuICAgICAgICAneHJhbmdlJyxcclxuICAgICAgICAnbm8tZGF0YS10by1kaXNwbGF5JyxcclxuICAgICAgICAnZHJhZy1wYW5lcycsXHJcbiAgICAgICAgJ2RlYnVnZ2VyJyxcclxuICAgICAgICAnZHVtYmJlbGwnLFxyXG4gICAgICAgICdsb2xsaXBvcCcsXHJcbiAgICAgICAgJ2N5bGluZGVyJyxcclxuICAgICAgICAnb3JnYW5pemF0aW9uJyxcclxuICAgICAgICAnZG90cGxvdCcsXHJcbiAgICAgICAgJ21hcmtlci1jbHVzdGVycycsXHJcbiAgICAgICAgJ2hvbGxvd2NhbmRsZXN0aWNrJyxcclxuICAgICAgICAnaGVpa2luYXNoaScsXHJcbiAgICAgICAgJ2Zsb3dtYXAnLFxyXG4gICAgICAgICdleHBvcnQtZGF0YScsXHJcbiAgICAgICAgJ25hdmlnYXRvcicsXHJcbiAgICAgICAgJ3RleHRwYXRoJ1xyXG4gICAgICBdLFxyXG4gICAgICB0eXBlczogWydzdHJpbmdbXSddLFxyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19NT0RVTEVfU0NSSVBUUycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnSGlnaGNoYXJ0cyBtb2R1bGUgc2NyaXB0cyB0byBmZXRjaCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbXVsdGlzZWxlY3QnLFxyXG4gICAgICAgIGluc3RydWN0aW9uczogJ1NwYWNlOiBTZWxlY3Qgc3BlY2lmaWMsIEE6IFNlbGVjdCBhbGwsIEVudGVyOiBDb25maXJtJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgaW5kaWNhdG9yU2NyaXB0czoge1xyXG4gICAgICB2YWx1ZTogWydpbmRpY2F0b3JzLWFsbCddLFxyXG4gICAgICB0eXBlczogWydzdHJpbmdbXSddLFxyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19JTkRJQ0FUT1JfU0NSSVBUUycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnSGlnaGNoYXJ0cyBpbmRpY2F0b3Igc2NyaXB0cyB0byBmZXRjaCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbXVsdGlzZWxlY3QnLFxyXG4gICAgICAgIGluc3RydWN0aW9uczogJ1NwYWNlOiBTZWxlY3Qgc3BlY2lmaWMsIEE6IFNlbGVjdCBhbGwsIEVudGVyOiBDb25maXJtJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgY3VzdG9tU2NyaXB0czoge1xyXG4gICAgICB2YWx1ZTogW1xyXG4gICAgICAgICdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9tb21lbnQuanMvMi4zMC4xL21vbWVudC5taW4uanMnLFxyXG4gICAgICAgICdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9tb21lbnQtdGltZXpvbmUvMC41LjQ1L21vbWVudC10aW1lem9uZS13aXRoLWRhdGEubWluLmpzJ1xyXG4gICAgICBdLFxyXG4gICAgICB0eXBlczogWydzdHJpbmdbXSddLFxyXG4gICAgICBlbnZMaW5rOiAnSElHSENIQVJUU19DVVNUT01fU0NSSVBUUycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnQWRkaXRpb25hbCBjdXN0b20gc2NyaXB0cyBvciBkZXBlbmRlbmNpZXMgdG8gZmV0Y2gnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ2xpc3QnLFxyXG4gICAgICAgIHNlcGFyYXRvcjogJzsnXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIGV4cG9ydDoge1xyXG4gICAgaW5maWxlOiB7XHJcbiAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICB0eXBlczogWydzdHJpbmcnLCAnbnVsbCddLFxyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX0lORklMRScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdJbnB1dCBmaWxlbmFtZSB3aXRoIHR5cGUsIGZvcm1hdHRlZCBjb3JyZWN0bHkgYXMgSlNPTiBvciBTVkcnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBpbnN0cjoge1xyXG4gICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgdHlwZXM6IFsnT2JqZWN0JywgJ3N0cmluZycsICdudWxsJ10sXHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfSU5TVFInLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnT3ZlcnJpZGVzIHRoZSBgaW5maWxlYCB3aXRoIEpTT04sIHN0cmluZ2lmaWVkIEpTT04sIG9yIFNWRyBpbnB1dCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9wdGlvbnM6IHtcclxuICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgIHR5cGVzOiBbJ09iamVjdCcsICdzdHJpbmcnLCAnbnVsbCddLFxyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX09QVElPTlMnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0FsaWFzIGZvciB0aGUgYGluc3RyYCBvcHRpb24nLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzdmc6IHtcclxuICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZycsICdudWxsJ10sXHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfU1ZHJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdTVkcgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjaGFydCB0byByZW5kZXInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBiYXRjaDoge1xyXG4gICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgdHlwZXM6IFsnc3RyaW5nJywgJ251bGwnXSxcclxuICAgICAgZW52TGluazogJ0VYUE9SVF9CQVRDSCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdCYXRjaCBqb2Igc3RyaW5nIHdpdGggaW5wdXQvb3V0cHV0IHBhaXJzOiBcImluPW91dDtpbj1vdXQ7Li4uXCInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBvdXRmaWxlOiB7XHJcbiAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICB0eXBlczogWydzdHJpbmcnLCAnbnVsbCddLFxyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX09VVEZJTEUnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnT3V0cHV0IGZpbGVuYW1lIHdpdGggdHlwZS4gQ2FuIGJlIGpwZWcsIHBuZywgcGRmLCBvciBzdmcgYW5kIGlnbm9yZXMgYHR5cGVgIG9wdGlvbicsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHR5cGU6IHtcclxuICAgICAgdmFsdWU6ICdwbmcnLFxyXG4gICAgICB0eXBlczogWydzdHJpbmcnXSxcclxuICAgICAgZW52TGluazogJ0VYUE9SVF9UWVBFJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdGaWxlIGV4cG9ydCBmb3JtYXQuIENhbiBiZSBqcGVnLCBwbmcsIHBkZiwgb3Igc3ZnJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdzZWxlY3QnLFxyXG4gICAgICAgIGhpbnQ6ICdEZWZhdWx0OiBwbmcnLFxyXG4gICAgICAgIGNob2ljZXM6IFsncG5nJywgJ2pwZWcnLCAncGRmJywgJ3N2ZyddXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjb25zdHI6IHtcclxuICAgICAgdmFsdWU6ICdjaGFydCcsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZyddLFxyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX0NPTlNUUicsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdDaGFydCBjb25zdHJ1Y3Rvci4gQ2FuIGJlIGNoYXJ0LCBzdG9ja0NoYXJ0LCBtYXBDaGFydCwgb3IgZ2FudHRDaGFydCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnc2VsZWN0JyxcclxuICAgICAgICBoaW50OiAnRGVmYXVsdDogY2hhcnQnLFxyXG4gICAgICAgIGNob2ljZXM6IFsnY2hhcnQnLCAnc3RvY2tDaGFydCcsICdtYXBDaGFydCcsICdnYW50dENoYXJ0J11cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGI2NDoge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgZW52TGluazogJ0VYUE9SVF9CNjQnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnV2hldGhlciBvciBub3QgdG8gdGhlIGNoYXJ0IHNob3VsZCBiZSByZWNlaXZlZCBpbiBCYXNlNjQgZm9ybWF0IGluc3RlYWQgb2YgYmluYXJ5JyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBub0Rvd25sb2FkOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX05PX0RPV05MT0FEJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ1doZXRoZXIgb3Igbm90IHRvIGluY2x1ZGUgb3IgZXhjbHVkZSBhdHRhY2htZW50IGhlYWRlcnMgaW4gdGhlIHJlc3BvbnNlJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBoZWlnaHQ6IHtcclxuICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlcicsICdudWxsJ10sXHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfSEVJR0hUJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdIZWlnaHQgb2YgdGhlIGV4cG9ydGVkIGNoYXJ0LCBvdmVycmlkZXMgY2hhcnQgc2V0dGluZ3MnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHdpZHRoOiB7XHJcbiAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICB0eXBlczogWydudW1iZXInLCAnbnVsbCddLFxyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX1dJRFRIJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdXaWR0aCBvZiB0aGUgZXhwb3J0ZWQgY2hhcnQsIG92ZXJyaWRlcyBjaGFydCBzZXR0aW5ncycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbnVtYmVyJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2NhbGU6IHtcclxuICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlcicsICdudWxsJ10sXHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfU0NBTEUnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnU2NhbGUgb2YgdGhlIGV4cG9ydGVkIGNoYXJ0LCBvdmVycmlkZXMgY2hhcnQgc2V0dGluZ3MuIFJhbmdlcyBmcm9tIDAuMSB0byA1LjAnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRlZmF1bHRIZWlnaHQ6IHtcclxuICAgICAgdmFsdWU6IDQwMCxcclxuICAgICAgdHlwZXM6IFsnbnVtYmVyJ10sXHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfREVGQVVMVF9IRUlHSFQnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0RlZmF1bHQgaGVpZ2h0IG9mIHRoZSBleHBvcnRlZCBjaGFydCBpZiBub3Qgc2V0JyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkZWZhdWx0V2lkdGg6IHtcclxuICAgICAgdmFsdWU6IDYwMCxcclxuICAgICAgdHlwZXM6IFsnbnVtYmVyJ10sXHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfREVGQVVMVF9XSURUSCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnRGVmYXVsdCB3aWR0aCBvZiB0aGUgZXhwb3J0ZWQgY2hhcnQgaWYgbm90IHNldCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbnVtYmVyJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZGVmYXVsdFNjYWxlOiB7XHJcbiAgICAgIHZhbHVlOiAxLFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ0VYUE9SVF9ERUZBVUxUX1NDQUxFJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ0RlZmF1bHQgc2NhbGUgb2YgdGhlIGV4cG9ydGVkIGNoYXJ0IGlmIG5vdCBzZXQuIFJhbmdlcyBmcm9tIDAuMSB0byA1LjAnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgICAgbWluOiAwLjEsXHJcbiAgICAgICAgbWF4OiA1XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBnbG9iYWxPcHRpb25zOiB7XHJcbiAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICB0eXBlczogWydPYmplY3QnLCAnc3RyaW5nJywgJ251bGwnXSxcclxuICAgICAgZW52TGluazogJ0VYUE9SVF9HTE9CQUxfT1BUSU9OUycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdKU09OLCBzdHJpbmdpZmllZCBKU09OIG9yIGZpbGVuYW1lIHdpdGggZ2xvYmFsIG9wdGlvbnMgZm9yIEhpZ2hjaGFydHMuc2V0T3B0aW9ucycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHRoZW1lT3B0aW9uczoge1xyXG4gICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgdHlwZXM6IFsnT2JqZWN0JywgJ3N0cmluZycsICdudWxsJ10sXHJcbiAgICAgIGVudkxpbms6ICdFWFBPUlRfVEhFTUVfT1BUSU9OUycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdKU09OLCBzdHJpbmdpZmllZCBKU09OIG9yIGZpbGVuYW1lIHdpdGggdGhlbWUgb3B0aW9ucyBmb3IgSGlnaGNoYXJ0cy5zZXRPcHRpb25zJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0ZXh0J1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmFzdGVyaXphdGlvblRpbWVvdXQ6IHtcclxuICAgICAgdmFsdWU6IDE1MDAsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICBlbnZMaW5rOiAnRVhQT1JUX1JBU1RFUklaQVRJT05fVElNRU9VVCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnTWlsbGlzZWNvbmRzIHRvIHdhaXQgZm9yIHdlYnBhZ2UgcmVuZGVyaW5nJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIGN1c3RvbUxvZ2ljOiB7XHJcbiAgICBhbGxvd0NvZGVFeGVjdXRpb246IHtcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICB0eXBlczogWydib29sZWFuJ10sXHJcbiAgICAgIGVudkxpbms6ICdDVVNUT01fTE9HSUNfQUxMT1dfQ09ERV9FWEVDVVRJT04nLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnQWxsb3dzIG9yIGRpc2FsbG93cyBleGVjdXRpb24gb2YgYXJiaXRyYXJ5IGNvZGUgZHVyaW5nIGV4cG9ydGluZycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgYWxsb3dGaWxlUmVzb3VyY2VzOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnQ1VTVE9NX0xPR0lDX0FMTE9XX0ZJTEVfUkVTT1VSQ0VTJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ0FsbG93cyBvciBkaXNhbGxvd3MgaW5qZWN0aW9uIG9mIGZpbGVzeXN0ZW0gcmVzb3VyY2VzIChkaXNhYmxlZCBpbiBzZXJ2ZXIgbW9kZSknLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGN1c3RvbUNvZGU6IHtcclxuICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZycsICdudWxsJ10sXHJcbiAgICAgIGVudkxpbms6ICdDVVNUT01fTE9HSUNfQ1VTVE9NX0NPREUnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnQ3VzdG9tIGNvZGUgdG8gZXhlY3V0ZSBiZWZvcmUgY2hhcnQgaW5pdGlhbGl6YXRpb24uIENhbiBiZSBhIGZ1bmN0aW9uLCBjb2RlIHdyYXBwZWQgaW4gYSBmdW5jdGlvbiwgb3IgYSAuanMgZmlsZW5hbWUnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjYWxsYmFjazoge1xyXG4gICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgdHlwZXM6IFsnc3RyaW5nJywgJ251bGwnXSxcclxuICAgICAgZW52TGluazogJ0NVU1RPTV9MT0dJQ19DQUxMQkFDSycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdKYXZhU2NyaXB0IGNvZGUgdG8gcnVuIGR1cmluZyBjb25zdHJ1Y3Rpb24uIENhbiBiZSBhIGZ1bmN0aW9uIG9yIGEgLmpzIGZpbGVuYW1lJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0ZXh0J1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmVzb3VyY2VzOiB7XHJcbiAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICB0eXBlczogWydPYmplY3QnLCAnc3RyaW5nJywgJ251bGwnXSxcclxuICAgICAgZW52TGluazogJ0NVU1RPTV9MT0dJQ19SRVNPVVJDRVMnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnQWRkaXRpb25hbCByZXNvdXJjZXMgYXMgSlNPTiwgc3RyaW5naWZpZWQgSlNPTiwgb3IgZmlsZW5hbWUsIGNvbnRhaW5pbmcgZmlsZXMsIGpzLCBhbmQgY3NzIHNlY3Rpb25zJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0ZXh0J1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgbG9hZENvbmZpZzoge1xyXG4gICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgdHlwZXM6IFsnc3RyaW5nJywgJ251bGwnXSxcclxuICAgICAgZW52TGluazogJ0NVU1RPTV9MT0dJQ19MT0FEX0NPTkZJRycsXHJcbiAgICAgIGxlZ2FjeU5hbWU6ICdmcm9tRmlsZScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnRmlsZSB3aXRoIGEgcHJlLWRlZmluZWQgY29uZmlndXJhdGlvbiB0byB1c2UnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGVDb25maWc6IHtcclxuICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZycsICdudWxsJ10sXHJcbiAgICAgIGVudkxpbms6ICdDVVNUT01fTE9HSUNfQ1JFQVRFX0NPTkZJRycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdQcm9tcHQtYmFzZWQgb3B0aW9uIHNldHRpbmcsIHNhdmVkIHRvIGEgcHJvdmlkZWQgY29uZmlnIGZpbGUnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIHNlcnZlcjoge1xyXG4gICAgZW5hYmxlOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnU0VSVkVSX0VOQUJMRScsXHJcbiAgICAgIGNsaU5hbWU6ICdlbmFibGVTZXJ2ZXInLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1N0YXJ0cyB0aGUgc2VydmVyIHdoZW4gdHJ1ZScsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgaG9zdDoge1xyXG4gICAgICB2YWx1ZTogJzAuMC4wLjAnLFxyXG4gICAgICB0eXBlczogWydzdHJpbmcnXSxcclxuICAgICAgZW52TGluazogJ1NFUlZFUl9IT1NUJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdIb3N0bmFtZSBvZiB0aGUgc2VydmVyJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0ZXh0J1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcG9ydDoge1xyXG4gICAgICB2YWx1ZTogNzgwMSxcclxuICAgICAgdHlwZXM6IFsnbnVtYmVyJ10sXHJcbiAgICAgIGVudkxpbms6ICdTRVJWRVJfUE9SVCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnUG9ydCBudW1iZXIgZm9yIHRoZSBzZXJ2ZXInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHVwbG9hZExpbWl0OiB7XHJcbiAgICAgIHZhbHVlOiAzLFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ1NFUlZFUl9VUExPQURfTElNSVQnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ01heGltdW0gcmVxdWVzdCBib2R5IHNpemUgaW4gTUInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGJlbmNobWFya2luZzoge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgZW52TGluazogJ1NFUlZFUl9CRU5DSE1BUktJTkcnLFxyXG4gICAgICBjbGlOYW1lOiAnc2VydmVyQmVuY2htYXJraW5nJyxcclxuICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgJ0Rpc3BsYXlzIG9yIG5vdCBhY3Rpb24gZHVyYXRpb25zIGluIG1pbGxpc2Vjb25kcyBkdXJpbmcgc2VydmVyIHJlcXVlc3RzJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwcm94eToge1xyXG4gICAgICBob3N0OiB7XHJcbiAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgdHlwZXM6IFsnc3RyaW5nJywgJ251bGwnXSxcclxuICAgICAgICBlbnZMaW5rOiAnU0VSVkVSX1BST1hZX0hPU1QnLFxyXG4gICAgICAgIGNsaU5hbWU6ICdwcm94eUhvc3QnLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSG9zdCBvZiB0aGUgcHJveHkgc2VydmVyLCBpZiBhcHBsaWNhYmxlJyxcclxuICAgICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHBvcnQ6IHtcclxuICAgICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgICB0eXBlczogWydudW1iZXInLCAnbnVsbCddLFxyXG4gICAgICAgIGVudkxpbms6ICdTRVJWRVJfUFJPWFlfUE9SVCcsXHJcbiAgICAgICAgY2xpTmFtZTogJ3Byb3h5UG9ydCcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdQb3J0IG9mIHRoZSBwcm94eSBzZXJ2ZXIsIGlmIGFwcGxpY2FibGUnLFxyXG4gICAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0aW1lb3V0OiB7XHJcbiAgICAgICAgdmFsdWU6IDUwMDAsXHJcbiAgICAgICAgdHlwZXM6IFsnbnVtYmVyJ10sXHJcbiAgICAgICAgZW52TGluazogJ1NFUlZFUl9QUk9YWV9USU1FT1VUJyxcclxuICAgICAgICBjbGlOYW1lOiAncHJveHlUaW1lb3V0JyxcclxuICAgICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAgICdUaW1lb3V0IGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHByb3h5IHNlcnZlciwgaWYgYXBwbGljYWJsZScsXHJcbiAgICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICByYXRlTGltaXRpbmc6IHtcclxuICAgICAgZW5hYmxlOiB7XHJcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgICBlbnZMaW5rOiAnU0VSVkVSX1JBVEVfTElNSVRJTkdfRU5BQkxFJyxcclxuICAgICAgICBjbGlOYW1lOiAnZW5hYmxlUmF0ZUxpbWl0aW5nJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ0VuYWJsZXMgb3IgZGlzYWJsZXMgcmF0ZSBsaW1pdGluZyBvbiB0aGUgc2VydmVyJyxcclxuICAgICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgbWF4UmVxdWVzdHM6IHtcclxuICAgICAgICB2YWx1ZTogMTAsXHJcbiAgICAgICAgdHlwZXM6IFsnbnVtYmVyJ10sXHJcbiAgICAgICAgZW52TGluazogJ1NFUlZFUl9SQVRFX0xJTUlUSU5HX01BWF9SRVFVRVNUUycsXHJcbiAgICAgICAgbGVnYWN5TmFtZTogJ3JhdGVMaW1pdCcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdNYXhpbXVtIG51bWJlciBvZiByZXF1ZXN0cyBhbGxvd2VkIHBlciBtaW51dGUnLFxyXG4gICAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB3aW5kb3c6IHtcclxuICAgICAgICB2YWx1ZTogMSxcclxuICAgICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgICBlbnZMaW5rOiAnU0VSVkVSX1JBVEVfTElNSVRJTkdfV0lORE9XJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ1RpbWUgd2luZG93IGluIG1pbnV0ZXMgZm9yIHJhdGUgbGltaXRpbmcnLFxyXG4gICAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBkZWxheToge1xyXG4gICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICAgIGVudkxpbms6ICdTRVJWRVJfUkFURV9MSU1JVElOR19ERUxBWScsXHJcbiAgICAgICAgZGVzY3JpcHRpb246XHJcbiAgICAgICAgICAnRGVsYXkgZHVyYXRpb24gYmV0d2VlbiBzdWNjZXNzaXZlIHJlcXVlc3RzIGJlZm9yZSByZWFjaGluZyB0aGUgbGltaXQnLFxyXG4gICAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0cnVzdFByb3h5OiB7XHJcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgICBlbnZMaW5rOiAnU0VSVkVSX1JBVEVfTElNSVRJTkdfVFJVU1RfUFJPWFknLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnU2V0IHRvIHRydWUgaWYgdGhlIHNlcnZlciBpcyBiZWhpbmQgYSBsb2FkIGJhbGFuY2VyJyxcclxuICAgICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgc2tpcEtleToge1xyXG4gICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIHR5cGVzOiBbJ3N0cmluZycsICdudWxsJ10sXHJcbiAgICAgICAgZW52TGluazogJ1NFUlZFUl9SQVRFX0xJTUlUSU5HX1NLSVBfS0VZJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ0tleSB0byBieXBhc3MgdGhlIHJhdGUgbGltaXRlciwgdXNlZCB3aXRoIGBza2lwVG9rZW5gJyxcclxuICAgICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHNraXBUb2tlbjoge1xyXG4gICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgIHR5cGVzOiBbJ3N0cmluZycsICdudWxsJ10sXHJcbiAgICAgICAgZW52TGluazogJ1NFUlZFUl9SQVRFX0xJTUlUSU5HX1NLSVBfVE9LRU4nLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnVG9rZW4gdG8gYnlwYXNzIHRoZSByYXRlIGxpbWl0ZXIsIHVzZWQgd2l0aCBgc2tpcEtleWAnLFxyXG4gICAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICAgIHR5cGU6ICd0ZXh0J1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHNzbDoge1xyXG4gICAgICBlbmFibGU6IHtcclxuICAgICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICAgIGVudkxpbms6ICdTRVJWRVJfU1NMX0VOQUJMRScsXHJcbiAgICAgICAgY2xpTmFtZTogJ2VuYWJsZVNzbCcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdFbmFibGVzIG9yIGRpc2FibGVzIFNTTCBwcm90b2NvbCcsXHJcbiAgICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGZvcmNlOiB7XHJcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgICBlbnZMaW5rOiAnU0VSVkVSX1NTTF9GT1JDRScsXHJcbiAgICAgICAgY2xpTmFtZTogJ3NzbEZvcmNlJyxcclxuICAgICAgICBsZWdhY3lOYW1lOiAnc3NsT25seScsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdGb3JjZXMgdGhlIHNlcnZlciB0byB1c2UgSFRUUFMgb25seSB3aGVuIHRydWUnLFxyXG4gICAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBwb3J0OiB7XHJcbiAgICAgICAgdmFsdWU6IDQ0MyxcclxuICAgICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgICBlbnZMaW5rOiAnU0VSVkVSX1NTTF9QT1JUJyxcclxuICAgICAgICBjbGlOYW1lOiAnc3NsUG9ydCcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdQb3J0IGZvciB0aGUgU1NMIHNlcnZlcicsXHJcbiAgICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGNlcnRQYXRoOiB7XHJcbiAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgdHlwZXM6IFsnc3RyaW5nJywgJ251bGwnXSxcclxuICAgICAgICBlbnZMaW5rOiAnU0VSVkVSX1NTTF9DRVJUX1BBVEgnLFxyXG4gICAgICAgIGNsaU5hbWU6ICdzc2xDZXJ0UGF0aCcsXHJcbiAgICAgICAgbGVnYWN5TmFtZTogJ3NzbFBhdGgnLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnUGF0aCB0byB0aGUgU1NMIGNlcnRpZmljYXRlL2tleSBmaWxlJyxcclxuICAgICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIHBvb2w6IHtcclxuICAgIG1pbldvcmtlcnM6IHtcclxuICAgICAgdmFsdWU6IDQsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICBlbnZMaW5rOiAnUE9PTF9NSU5fV09SS0VSUycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnTWluaW11bSBhbmQgaW5pdGlhbCBudW1iZXIgb2YgcG9vbCB3b3JrZXJzIHRvIHNwYXduJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtYXhXb3JrZXJzOiB7XHJcbiAgICAgIHZhbHVlOiA4LFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ1BPT0xfTUFYX1dPUktFUlMnLFxyXG4gICAgICBsZWdhY3lOYW1lOiAnd29ya2VycycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnTWF4aW11bSBudW1iZXIgb2YgcG9vbCB3b3JrZXJzIHRvIHNwYXduJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB3b3JrTGltaXQ6IHtcclxuICAgICAgdmFsdWU6IDQwLFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ1BPT0xfV09SS19MSU1JVCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnTnVtYmVyIG9mIHRhc2tzIGEgd29ya2VyIGNhbiBoYW5kbGUgYmVmb3JlIHJlc3RhcnRpbmcnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGFjcXVpcmVUaW1lb3V0OiB7XHJcbiAgICAgIHZhbHVlOiA1MDAwLFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ1BPT0xfQUNRVUlSRV9USU1FT1VUJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdUaW1lb3V0IGluIG1pbGxpc2Vjb25kcyBmb3IgYWNxdWlyaW5nIGEgcmVzb3VyY2UnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZVRpbWVvdXQ6IHtcclxuICAgICAgdmFsdWU6IDUwMDAsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICBlbnZMaW5rOiAnUE9PTF9DUkVBVEVfVElNRU9VVCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnVGltZW91dCBpbiBtaWxsaXNlY29uZHMgZm9yIGNyZWF0aW5nIGEgcmVzb3VyY2UnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRlc3Ryb3lUaW1lb3V0OiB7XHJcbiAgICAgIHZhbHVlOiA1MDAwLFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ1BPT0xfREVTVFJPWV9USU1FT1VUJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdUaW1lb3V0IGluIG1pbGxpc2Vjb25kcyBmb3IgZGVzdHJveWluZyBhIHJlc291cmNlJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBpZGxlVGltZW91dDoge1xyXG4gICAgICB2YWx1ZTogMzAwMDAsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICBlbnZMaW5rOiAnUE9PTF9JRExFX1RJTUVPVVQnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1RpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIGZvciBkZXN0cm95aW5nIGlkbGUgcmVzb3VyY2VzJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGVSZXRyeUludGVydmFsOiB7XHJcbiAgICAgIHZhbHVlOiAyMDAsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICBlbnZMaW5rOiAnUE9PTF9DUkVBVEVfUkVUUllfSU5URVJWQUwnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnSW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzIGJlZm9yZSByZXRyeWluZyByZXNvdXJjZSBjcmVhdGlvbiBvbiBmYWlsdXJlJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICByZWFwZXJJbnRlcnZhbDoge1xyXG4gICAgICB2YWx1ZTogMTAwMCxcclxuICAgICAgdHlwZXM6IFsnbnVtYmVyJ10sXHJcbiAgICAgIGVudkxpbms6ICdQT09MX1JFQVBFUl9JTlRFUlZBTCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdJbnRlcnZhbCBpbiBtaWxsaXNlY29uZHMgdG8gY2hlY2sgYW5kIGRlc3Ryb3kgaWRsZSByZXNvdXJjZXMnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ251bWJlcidcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGJlbmNobWFya2luZzoge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgZW52TGluazogJ1BPT0xfQkVOQ0hNQVJLSU5HJyxcclxuICAgICAgY2xpTmFtZTogJ3Bvb2xCZW5jaG1hcmtpbmcnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1Nob3dzIHN0YXRpc3RpY3MgZm9yIHRoZSBwb29sIG9mIHJlc291cmNlcycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBsb2dnaW5nOiB7XHJcbiAgICBsZXZlbDoge1xyXG4gICAgICB2YWx1ZTogNCxcclxuICAgICAgdHlwZXM6IFsnbnVtYmVyJ10sXHJcbiAgICAgIGVudkxpbms6ICdMT0dHSU5HX0xFVkVMJyxcclxuICAgICAgY2xpTmFtZTogJ2xvZ0xldmVsJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdMb2dnaW5nIHZlcmJvc2l0eSBsZXZlbCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgICByb3VuZDogMCxcclxuICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgbWF4OiA1XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBmaWxlOiB7XHJcbiAgICAgIHZhbHVlOiAnaGlnaGNoYXJ0cy1leHBvcnQtc2VydmVyLmxvZycsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZyddLFxyXG4gICAgICBlbnZMaW5rOiAnTE9HR0lOR19GSUxFJyxcclxuICAgICAgY2xpTmFtZTogJ2xvZ0ZpbGUnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnTG9nIGZpbGUgbmFtZS4gUmVxdWlyZXMgYGxvZ1RvRmlsZWAgYW5kIGBsb2dEZXN0YCB0byBiZSBzZXQnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkZXN0OiB7XHJcbiAgICAgIHZhbHVlOiAnbG9nJyxcclxuICAgICAgdHlwZXM6IFsnc3RyaW5nJ10sXHJcbiAgICAgIGVudkxpbms6ICdMT0dHSU5HX0RFU1QnLFxyXG4gICAgICBjbGlOYW1lOiAnbG9nRGVzdCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnUGF0aCB0byBzdG9yZSBsb2cgZmlsZXMuIFJlcXVpcmVzIGBsb2dUb0ZpbGVgIHRvIGJlIHNldCcsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndGV4dCdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHRvQ29uc29sZToge1xyXG4gICAgICB2YWx1ZTogdHJ1ZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnTE9HR0lOR19UT19DT05TT0xFJyxcclxuICAgICAgY2xpTmFtZTogJ2xvZ1RvQ29uc29sZScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnRW5hYmxlcyBvciBkaXNhYmxlcyBjb25zb2xlIGxvZ2dpbmcnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHRvRmlsZToge1xyXG4gICAgICB2YWx1ZTogdHJ1ZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnTE9HR0lOR19UT19GSUxFJyxcclxuICAgICAgY2xpTmFtZTogJ2xvZ1RvRmlsZScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnRW5hYmxlcyBvciBkaXNhYmxlcyBsb2dnaW5nIHRvIGEgZmlsZScsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICB1aToge1xyXG4gICAgZW5hYmxlOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnVUlfRU5BQkxFJyxcclxuICAgICAgY2xpTmFtZTogJ2VuYWJsZVVpJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdFbmFibGVzIG9yIGRpc2FibGVzIHRoZSBVSSBmb3IgdGhlIGV4cG9ydCBzZXJ2ZXInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJvdXRlOiB7XHJcbiAgICAgIHZhbHVlOiAnLycsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZyddLFxyXG4gICAgICBlbnZMaW5rOiAnVUlfUk9VVEUnLFxyXG4gICAgICBjbGlOYW1lOiAndWlSb3V0ZScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIGVuZHBvaW50IHJvdXRlIGZvciB0aGUgVUknLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIG90aGVyOiB7XHJcbiAgICBub2RlRW52OiB7XHJcbiAgICAgIHZhbHVlOiAncHJvZHVjdGlvbicsXHJcbiAgICAgIHR5cGVzOiBbJ3N0cmluZyddLFxyXG4gICAgICBlbnZMaW5rOiAnT1RIRVJfTk9ERV9FTlYnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1RoZSBOb2RlLmpzIGVudmlyb25tZW50IHR5cGUnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RleHQnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBsaXN0ZW5Ub1Byb2Nlc3NFeGl0czoge1xyXG4gICAgICB2YWx1ZTogdHJ1ZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnT1RIRVJfTElTVEVOX1RPX1BST0NFU1NfRVhJVFMnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1doZXRoZXIgb3Igbm90IHRvIGF0dGFjaCBwcm9jZXNzLmV4aXQgaGFuZGxlcnMnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIG5vTG9nbzoge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgZW52TGluazogJ09USEVSX05PX0xPR08nLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0Rpc3BsYXkgb3Igc2tpcCBwcmludGluZyB0aGUgbG9nbyBvbiBzdGFydHVwJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBoYXJkUmVzZXRQYWdlOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnT1RIRVJfSEFSRF9SRVNFVF9QQUdFJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdXaGV0aGVyIG9yIG5vdCB0byByZXNldCB0aGUgcGFnZSBjb250ZW50IGVudGlyZWx5JyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBicm93c2VyU2hlbGxNb2RlOiB7XHJcbiAgICAgIHZhbHVlOiB0cnVlLFxyXG4gICAgICB0eXBlczogWydib29sZWFuJ10sXHJcbiAgICAgIGVudkxpbms6ICdPVEhFUl9CUk9XU0VSX1NIRUxMX01PREUnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ1doZXRoZXIgb3Igbm90IHRvIHNldCB0aGUgYnJvd3NlciB0byBydW4gaW4gc2hlbGwgbW9kZScsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgdmFsaWRhdGlvbjoge1xyXG4gICAgICB2YWx1ZTogdHJ1ZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnT1RIRVJfVkFMSURBVElPTicsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnV2hldGhlciBvciBub3QgdG8gZW5hYmxlIHZhbGlkYXRpb24gb2Ygb3B0aW9ucyB0eXBlcycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAndG9nZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBkZWJ1Zzoge1xyXG4gICAgZW5hYmxlOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnREVCVUdfRU5BQkxFJyxcclxuICAgICAgY2xpTmFtZTogJ2VuYWJsZURlYnVnJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdFbmFibGVzIG9yIGRpc2FibGVzIGRlYnVnIG1vZGUgZm9yIHRoZSB1bmRlcmx5aW5nIGJyb3dzZXInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGhlYWRsZXNzOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnREVCVUdfSEVBRExFU1MnLFxyXG4gICAgICBkZXNjcmlwdGlvbjpcclxuICAgICAgICAnV2hldGhlciBvciBub3QgdG8gc2V0IHRoZSBicm93c2VyIHRvIHJ1biBpbiBoZWFkbGVzcyBtb2RlIGR1cmluZyBkZWJ1Z2dpbmcnLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRldnRvb2xzOiB7XHJcbiAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgICAgdHlwZXM6IFsnYm9vbGVhbiddLFxyXG4gICAgICBlbnZMaW5rOiAnREVCVUdfREVWVE9PTFMnLFxyXG4gICAgICBkZXNjcmlwdGlvbjogJ0VuYWJsZXMgb3IgZGlzYWJsZXMgRGV2VG9vbHMgaW4gaGVhZGZ1bCBtb2RlJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBsaXN0ZW5Ub0NvbnNvbGU6IHtcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICB0eXBlczogWydib29sZWFuJ10sXHJcbiAgICAgIGVudkxpbms6ICdERUJVR19MSVNURU5fVE9fQ09OU09MRScsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdFbmFibGVzIG9yIGRpc2FibGVzIGxpc3RlbmluZyB0byBjb25zb2xlIG1lc3NhZ2VzIGZyb20gdGhlIGJyb3dzZXInLFxyXG4gICAgICBwcm9tcHRPcHRpb25zOiB7XHJcbiAgICAgICAgdHlwZTogJ3RvZ2dsZSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGR1bXBpbzoge1xyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIHR5cGVzOiBbJ2Jvb2xlYW4nXSxcclxuICAgICAgZW52TGluazogJ0RFQlVHX0RVTVBJTycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOlxyXG4gICAgICAgICdSZWRpcmVjdHMgb3Igbm90IGJyb3dzZXIgc3Rkb3V0IGFuZCBzdGRlcnIgdG8gcHJvY2Vzcy5zdGRvdXQgYW5kIHByb2Nlc3Muc3RkZXJyJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICd0b2dnbGUnXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzbG93TW86IHtcclxuICAgICAgdmFsdWU6IDAsXHJcbiAgICAgIHR5cGVzOiBbJ251bWJlciddLFxyXG4gICAgICBlbnZMaW5rOiAnREVCVUdfU0xPV19NTycsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAnRGVsYXlzIFB1cHBldGVlciBvcGVyYXRpb25zIGJ5IHRoZSBzcGVjaWZpZWQgbWlsbGlzZWNvbmRzJyxcclxuICAgICAgcHJvbXB0T3B0aW9uczoge1xyXG4gICAgICAgIHR5cGU6ICdudW1iZXInXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkZWJ1Z2dpbmdQb3J0OiB7XHJcbiAgICAgIHZhbHVlOiA5MjIyLFxyXG4gICAgICB0eXBlczogWydudW1iZXInXSxcclxuICAgICAgZW52TGluazogJ0RFQlVHX0RFQlVHR0lOR19QT1JUJyxcclxuICAgICAgZGVzY3JpcHRpb246ICdQb3J0IHVzZWQgZm9yIGRlYnVnZ2luZycsXHJcbiAgICAgIHByb21wdE9wdGlvbnM6IHtcclxuICAgICAgICB0eXBlOiAnbnVtYmVyJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gUHJvcGVydGllcyBuZXN0aW5nIGxldmVsIG9mIGFsbCBvcHRpb25zXHJcbmV4cG9ydCBjb25zdCBuZXN0ZWRQcm9wcyA9IF9jcmVhdGVOZXN0ZWRQcm9wcyhkZWZhdWx0Q29uZmlnKTtcclxuXHJcbi8vIFByb3BlcnRpZXMgbmFtZXMgdGhhdCBzaG91bGQgbm90IGJlIHJlY3Vyc2l2ZWx5IG1lcmdlZFxyXG5leHBvcnQgY29uc3QgYWJzb2x1dGVQcm9wcyA9IF9jcmVhdGVBYnNvbHV0ZVByb3BzKGRlZmF1bHRDb25maWcpO1xyXG5cclxuLyoqXHJcbiAqIFJlY3Vyc2l2ZWx5IGdlbmVyYXRlcyBhIG1hcHBpbmcgb2YgbmVzdGVkIGFyZ3VtZW50IGNoYWlucyBmcm9tIGEgbmVzdGVkXHJcbiAqIGNvbmZpZyBvYmplY3QuIFRoaXMgZnVuY3Rpb24gdHJhdmVyc2VzIGEgbmVzdGVkIG9iamVjdCBhbmQgY3JlYXRlcyBhIG1hcHBpbmdcclxuICogd2hlcmUgZWFjaCBrZXkgaXMgYW4gYXJndW1lbnQgbmFtZSAoZWl0aGVyIGZyb20gYGNsaU5hbWVgLCBgbGVnYWN5TmFtZWAsXHJcbiAqIG9yIHRoZSBvcmlnaW5hbCBrZXkpIGFuZCBlYWNoIHZhbHVlIGlzIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY2hhaW5cclxuICogb2YgbmVzdGVkIHByb3BlcnRpZXMgbGVhZGluZyB0byB0aGF0IGFyZ3VtZW50LlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX2NyZWF0ZU5lc3RlZFByb3BzXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbbmVzdGVkUHJvcHM9e31dIC0gVGhlIGFjY3VtdWxhdG9yIG9iamVjdCBmb3Igc3RvcmluZ1xyXG4gKiB0aGUgcmVzdWx0aW5nIGFyZ3VtZW50cyBjaGFpbnMuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBhbiBlbXB0eSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvcENoYWluPScnXSAtIFRoZSBjdXJyZW50IGNoYWluIG9mIG5lc3RlZCBwcm9wZXJ0aWVzLFxyXG4gKiB1c2VkIGludGVybmFsbHkgZHVyaW5nIHJlY3Vyc2lvbi4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGFuIGVtcHR5IHN0cmluZy5cclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IG1hcHBpbmcgYXJndW1lbnQgbmFtZXMgdG8gdGhlaXIgY29ycmVzcG9uZGluZ1xyXG4gKiBuZXN0ZWQgcHJvcGVydHkgY2hhaW5zLlxyXG4gKi9cclxuZnVuY3Rpb24gX2NyZWF0ZU5lc3RlZFByb3BzKGNvbmZpZywgbmVzdGVkUHJvcHMgPSB7fSwgcHJvcENoYWluID0gJycpIHtcclxuICBPYmplY3Qua2V5cyhjb25maWcpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgLy8gR2V0IHRoZSBzcGVjaWZpYyBzZWN0aW9uXHJcbiAgICBjb25zdCBlbnRyeSA9IGNvbmZpZ1trZXldO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIHN0aWxsIG1vcmUgZGVwdGggdG8gdHJhdmVyc2VcclxuICAgIGlmICh0eXBlb2YgZW50cnkudmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIC8vIFJlY3Vyc2UgaW50byBkZWVwZXIgbGV2ZWxzIG9mIG5lc3RlZCBhcmd1bWVudHNcclxuICAgICAgX2NyZWF0ZU5lc3RlZFByb3BzKGVudHJ5LCBuZXN0ZWRQcm9wcywgYCR7cHJvcENoYWlufS4ke2tleX1gKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIENyZWF0ZSB0aGUgY2hhaW4gb2YgbmVzdGVkIGFyZ3VtZW50c1xyXG4gICAgICBuZXN0ZWRQcm9wc1tlbnRyeS5jbGlOYW1lIHx8IGtleV0gPSBgJHtwcm9wQ2hhaW59LiR7a2V5fWAuc3Vic3RyaW5nKDEpO1xyXG5cclxuICAgICAgLy8gU3VwcG9ydCBmb3IgdGhlIGxlZ2FjeSwgUGhhbnRvbUpTIHByb3BlcnRpZXMgbmFtZXNcclxuICAgICAgaWYgKGVudHJ5LmxlZ2FjeU5hbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIG5lc3RlZFByb3BzW2VudHJ5LmxlZ2FjeU5hbWVdID0gYCR7cHJvcENoYWlufS4ke2tleX1gLnN1YnN0cmluZygxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAvLyBSZXR1cm4gdGhlIG9iamVjdCB3aXRoIG5lc3RlZCBhcmd1bWVudCBjaGFpbnNcclxuICByZXR1cm4gbmVzdGVkUHJvcHM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWN1cnNpdmVseSBnYXRoZXJzIHRoZSBuYW1lcyBvZiBwcm9wZXJ0aWVzIGZyb20gYSBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0XHJcbiAqIGNhbiBiZSB0cmVhdGVkIGFzIGFic29sdXRlIHByb3BlcnRpZXMuIFRoZXNlIHByb3BlcnRpZXMgaGF2ZSB2YWx1ZXMgdGhhdFxyXG4gKiBhcmUgb2JqZWN0cyBhbmQgZG8gbm90IGNvbnRhaW4gZnVydGhlciBuZXN0ZWQgZGVwdGggd2hlbiBtZXJnaW5nIGFuIG9iamVjdFxyXG4gKiBjb250YWluaW5nIHRoZXNlIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBfY3JlYXRlQWJzb2x1dGVQcm9wc1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxyXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+fSBbYWJzb2x1dGVQcm9wcz1bXV0gLSBBbiBhcnJheSB0byBjb2xsZWN0IHRoZSBuYW1lc1xyXG4gKiBvZiBhYnNvbHV0ZSBwcm9wZXJ0aWVzLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBhbiBlbXB0eSBhcnJheS5cclxuICpcclxuICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSBBbiBhcnJheSBjb250YWluaW5nIHRoZSBuYW1lcyBvZiBhYnNvbHV0ZVxyXG4gKiBwcm9wZXJ0aWVzLlxyXG4gKi9cclxuZnVuY3Rpb24gX2NyZWF0ZUFic29sdXRlUHJvcHMoY29uZmlnLCBhYnNvbHV0ZVByb3BzID0gW10pIHtcclxuICBPYmplY3Qua2V5cyhjb25maWcpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgLy8gR2V0IHRoZSBzcGVjaWZpYyBzZWN0aW9uXHJcbiAgICBjb25zdCBlbnRyeSA9IGNvbmZpZ1trZXldO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIHN0aWxsIG1vcmUgZGVwdGggdG8gdHJhdmVyc2VcclxuICAgIGlmICh0eXBlb2YgZW50cnkudHlwZXMgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIC8vIFJlY3Vyc2UgaW50byBkZWVwZXIgbGV2ZWxzXHJcbiAgICAgIF9jcmVhdGVBYnNvbHV0ZVByb3BzKGVudHJ5LCBhYnNvbHV0ZVByb3BzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIElmIHRoZSBvcHRpb24gY2FuIGJlIGFuIG9iamVjdCwgc2F2ZSBpdHMgdHlwZSBpbiB0aGUgYXJyYXlcclxuICAgICAgaWYgKGVudHJ5LnR5cGVzLmluY2x1ZGVzKCdPYmplY3QnKSkge1xyXG4gICAgICAgIGFic29sdXRlUHJvcHMucHVzaChrZXkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vIFJldHVybiB0aGUgYXJyYXkgd2l0aCB0aGUgbmFtZXMgb2YgYWJzb2x1dGUgcHJvcGVydGllc1xyXG4gIHJldHVybiBhYnNvbHV0ZVByb3BzO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgZGVmYXVsdENvbmZpZyxcclxuICBuZXN0ZWRQcm9wcyxcclxuICBhYnNvbHV0ZVByb3BzXHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBUaGlzIGZpbGUgaGFuZGxlcyBwYXJzaW5nIGFuZCB2YWxpZGF0aW5nIG9wdGlvbnMgZnJvbSBtdWx0aXBsZVxyXG4gKiBzb3VyY2VzICh0aGUgY29uZmlnIGZpbGUsIGN1c3RvbSBKU09OLCBlbnZpcm9ubWVudCB2YXJpYWJsZXMsIENMSSBhcmd1bWVudHMsXHJcbiAqIGFuZCByZXF1ZXN0IHBheWxvYWQpIHVzaW5nIHRoZSAnem9kJyBsaWJyYXJ5LlxyXG4gKlxyXG4gKiBFbnZpcm9ubWVudCB2YXJpYWJsZXMgYXJlIHBhcnNlZCBhbmQgdmFsaWRhdGVkIG9ubHkgb25jZSBhdCBhcHBsaWNhdGlvblxyXG4gKiBzdGFydHVwLCBhbmQgdGhlIHZhbGlkYXRlZCByZXN1bHRzIGFyZSBleHBvcnRlZCBhcyBgZW52c2AgZm9yIHVzZSB0aHJvdWdob3V0XHJcbiAqIHRoZSBhcHBsaWNhdGlvbi5cclxuICpcclxuICogT3B0aW9ucyBmcm9tIG90aGVyIHNvdXJjZXMsIGhvd2V2ZXIsIGFyZSBwYXJzZWQgYW5kIHZhbGlkYXRlZCBvbiBkZW1hbmQsXHJcbiAqIGVhY2ggdGltZSBhbiBleHBvcnQgaXMgYXR0ZW1wdGVkLlxyXG4gKi9cclxuXHJcbmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52JztcclxuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XHJcblxyXG5pbXBvcnQgeyBkZWZhdWx0Q29uZmlnIH0gZnJvbSAnLi9zY2hlbWFzL2NvbmZpZy5qcyc7XHJcblxyXG4vLyBMb2FkIHRoZSAuZW52IGludG8gZW52aXJvbm1lbnQgdmFyaWFibGVzXHJcbmRvdGVudi5jb25maWcoKTtcclxuXHJcbi8vIEdldCBzY3JpcHRzIG5hbWVzIG9mIGVhY2ggY2F0ZWdvcnkgZnJvbSB0aGUgZGVmYXVsdCBjb25maWdcclxuY29uc3QgeyBjb3JlU2NyaXB0cywgbW9kdWxlU2NyaXB0cywgaW5kaWNhdG9yU2NyaXB0cyB9ID1cclxuICBkZWZhdWx0Q29uZmlnLmhpZ2hjaGFydHM7XHJcblxyXG4vLyBTZXRzIHRoZSBjdXN0b20gZXJyb3IgbWFwIGdsb2JhbGx5XHJcbnouc2V0RXJyb3JNYXAoX2N1c3RvbUVycm9yTWFwKTtcclxuXHJcbi8qKlxyXG4gKiBPYmplY3QgY29udGFpbmluZyBjdXN0b20gZ2VuZXJhbCB2YWxpZGF0b3JzIGFuZCBwYXJzZXJzIHRvIGF2b2lkIHJlcGV0aXRpb25cclxuICogaW4gc2NoZW1hIG9iamVjdHMuIEFsbCB2YWxpZGF0b3JzIGFwcGx5IHRvIHZhbHVlcyBmcm9tIHZhcmlvdXMgc291cmNlcyxcclxuICogaW5jbHVkaW5nIHRoZSBkZWZhdWx0IGNvbmZpZyBmaWxlLCBhIGN1c3RvbSBKU09OIGZpbGUgbG9hZGVkIHdpdGggdGhlIG9wdGlvblxyXG4gKiBjYWxsZWQgYGxvYWRDb25maWdgLCB0aGUgLmVudiBmaWxlLCBDTEkgYXJndW1lbnRzLCBhbmQgdGhlIHJlcXVlc3QgcGF5bG9hZC5cclxuICogVGhlIGBzdHJpY3RDaGVja2AgZmxhZyBlbmFibGVzIHN0cmljdGVyIHZhbGlkYXRpb24gYW5kIHBhcnNpbmcgcnVsZXMuIFRoaXNcclxuICogZmxhZyBpcyBzZXQgdG8gZmFsc2UgZm9yIHZhbHVlcyB0aGF0IGNvbWUgZnJvbSB0aGUgLmVudiBmaWxlIG9yIENMSSBhcmd1bWVudHNcclxuICogYmVjYXVzZSB0aGV5IGFyZSBwcm92aWRlZCBhcyBzdHJpbmdzIGFuZCBuZWVkIHRvIGJlIHBhcnNlZCBhY2NvcmRpbmdseSBmaXJzdC5cclxuICovXHJcbmNvbnN0IHYgPSB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGBib29sZWFuYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhhdDpcclxuICAgKlxyXG4gICAqIC0gV2hlbiBgc3RyaWN0Q2hlY2tgIGlzIHRydWUsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgdmFsdWVzIGFyZSB0cnVlXHJcbiAgICogYW5kIGZhbHNlIGFuZCB0aGUgc2NoZW1hIHdpbGwgdmFsaWRhdGUgYWdhaW5zdCB0aGUgZGVmYXVsdCBib29sZWFuXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgZmFsc2UsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgdmFsdWVzIGFyZSB0cnVlLFxyXG4gICAqIGZhbHNlLCBudWxsLCAndHJ1ZScsICcxJywgJ2ZhbHNlJywgJzAnLCAndW5kZWZpbmVkJywgJ251bGwnLCBhbmQgJycuXHJcbiAgICogVGhlIHN0cmluZ3MgJ3VuZGVmaW5lZCcsICdudWxsJywgYW5kICcnIHdpbGwgYmUgdHJhbnNmb3JtZWQgdG8gbnVsbCxcclxuICAgKiB0aGUgc3RyaW5nICd0cnVlJyB3aWxsIGJlIHRyYW5zZm9ybWVkIHRvIHRoZSBib29sZWFuIHZhbHVlIHRydWUsXHJcbiAgICogYW5kICdmYWxzZScgd2lsbCBiZSB0cmFuc2Zvcm1lZCB0byB0aGUgYm9vbGVhbiB2YWx1ZSBmYWxzZS5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBib29sZWFuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgYm9vbGVhbiB2YWx1ZXMuXHJcbiAgICovXHJcbiAgYm9vbGVhbihzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHN0cmljdENoZWNrXHJcbiAgICAgID8gei5ib29sZWFuKClcclxuICAgICAgOiB6XHJcbiAgICAgICAgICAudW5pb24oW1xyXG4gICAgICAgICAgICB6XHJcbiAgICAgICAgICAgICAgLmVudW0oWyd0cnVlJywgJzEnLCAnZmFsc2UnLCAnMCcsICd1bmRlZmluZWQnLCAnbnVsbCcsICcnXSlcclxuICAgICAgICAgICAgICAudHJhbnNmb3JtKCh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgICAgICFbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICA/IHZhbHVlID09PSAndHJ1ZScgfHwgdmFsdWUgPT09ICcxJ1xyXG4gICAgICAgICAgICAgICAgICA6IG51bGxcclxuICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICB6LmJvb2xlYW4oKVxyXG4gICAgICAgICAgXSlcclxuICAgICAgICAgIC5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgc3RyaW5nYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhhdDpcclxuICAgKlxyXG4gICAqIC0gV2hlbiBgc3RyaWN0Q2hlY2tgIGlzIHRydWUsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgdHJpbW1lZCBzdHJpbmdzIGV4Y2VwdFxyXG4gICAqIHRoZSBmb3JiaWRkZW4gdmFsdWVzOiAnZmFsc2UnLCAndW5kZWZpbmVkJywgJ251bGwnLCBhbmQgJycuXHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyBmYWxzZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCB0cmltbWVkIHN0cmluZ3NcclxuICAgKiBhbmQgbnVsbC4gVGhlIGZvcmJpZGRlbiB2YWx1ZXM6ICdmYWxzZScsICd1bmRlZmluZWQnLCAnbnVsbCcsIGFuZCAnJyB3aWxsXHJcbiAgICogYmUgdHJhbnNmb3JtZWQgdG8gbnVsbC5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBzdHJpbmdcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyBzdHJpbmcgdmFsdWVzLlxyXG4gICAqL1xyXG4gIHN0cmluZyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHN0cmljdENoZWNrXHJcbiAgICAgID8gelxyXG4gICAgICAgICAgLnN0cmluZygpXHJcbiAgICAgICAgICAudHJpbSgpXHJcbiAgICAgICAgICAucmVmaW5lKFxyXG4gICAgICAgICAgICAodmFsdWUpID0+ICFbJ2ZhbHNlJywgJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAnVGhlIHN0cmluZyBjb250YWlucyBhIGZvcmJpZGRlbiB2YWx1ZSdcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIClcclxuICAgICAgOiB6XHJcbiAgICAgICAgICAuc3RyaW5nKClcclxuICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgIC50cmFuc2Zvcm0oKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAhWydmYWxzZScsICd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IG51bGxcclxuICAgICAgICAgIClcclxuICAgICAgICAgIC5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgZW51bWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSBzY2hlbWEgd2lsbCB2YWxpZGF0ZSBhZ2FpbnN0IHRoZSBwcm92aWRlZCBgdmFsdWVzYCBhcnJheS5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoYXQ6XHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyB0cnVlLCB0aGUgc2NoZW1hIHdpbGwgdmFsaWRhdGUgYWdhaW5zdCB0aGUgYHZhbHVlc2BcclxuICAgKiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGVudW0gdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgZmFsc2UsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgYWxzbyBudWxsLFxyXG4gICAqICd1bmRlZmluZWQnLCAnbnVsbCcsIGFuZCAnJywgd2hpY2ggd2lsbCBiZSB0cmFuc2Zvcm1lZCB0byBudWxsLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGVudW1cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IHZhbHVlcyAtIEFuIGFycmF5IG9mIHZhbGlkIHN0cmluZyB2YWx1ZXNcclxuICAgKiBmb3IgdGhlIGVudW0uXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIGVudW0gdmFsdWVzLlxyXG4gICAqL1xyXG4gIGVudW0odmFsdWVzLCBzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHN0cmljdENoZWNrXHJcbiAgICAgID8gei5lbnVtKFsuLi52YWx1ZXNdKVxyXG4gICAgICA6IHpcclxuICAgICAgICAgIC5lbnVtKFsuLi52YWx1ZXMsICd1bmRlZmluZWQnLCAnbnVsbCcsICcnXSlcclxuICAgICAgICAgIC50cmFuc2Zvcm0oKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAhWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IG51bGxcclxuICAgICAgICAgIClcclxuICAgICAgICAgIC5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgc3RyaW5nQXJyYXlgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGF0OlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgdHJ1ZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCBhbiBhcnJheSBvZiB0cmltbWVkXHJcbiAgICogc3RyaW5nIHZhbHVlcyBmaWx0ZXJlZCBieSB0aGUgbG9naWMgcHJvdmlkZWQgdGhyb3VnaCB0aGUgYGZpbHRlckNhbGxiYWNrYC5cclxuICAgKlxyXG4gICAqIC0gV2hlbiBgc3RyaWN0Q2hlY2tgIGlzIGZhbHNlLCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IG51bGwgYW5kIHRyaW1tZWRcclxuICAgKiBzdHJpbmcgdmFsdWVzIHdoaWNoIHdpbGwgYmUgc3BsaXR0ZWQgaW50byBhbiBhcnJheSBvZiBzdHJpbmdzIGFuZCBmaWx0ZXJlZFxyXG4gICAqIGZyb20gdGhlICdbJyBhbmQgJ10nIGNoYXJhY3RlcnMgYW5kIGJ5IHRoZSBsb2dpYyBwcm92aWRlZCB0aHJvdWdoXHJcbiAgICogdGhlIGBmaWx0ZXJDYWxsYmFja2AuIElmIHRoZSBhcnJheSBpcyBlbXB0eSwgaXQgd2lsbCBiZSB0cmFuc2Zvcm1lZFxyXG4gICAqIHRvIG51bGwuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gc3RyaW5nQXJyYXlcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZpbHRlckNhbGxiYWNrIC0gVGhlIGZpbHRlciBjYWxsYmFjay5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VwYXJhdG9yIC0gVGhlIHNlcGFyYXRvciBmb3Igc3BsaXRpbmcgYSBzdHJpbmcuXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIGFycmF5IG9mIHN0cmluZ1xyXG4gICAqIHZhbHVlcy5cclxuICAgKi9cclxuICBzdHJpbmdBcnJheShmaWx0ZXJDYWxsYmFjaywgc2VwYXJhdG9yLCBzdHJpY3RDaGVjaykge1xyXG4gICAgY29uc3QgYXJyYXlTY2hlbWEgPSB6LnN0cmluZygpLnRyaW0oKS5hcnJheSgpO1xyXG4gICAgY29uc3Qgc3RyaW5nU2NoZW1hID0gelxyXG4gICAgICAuc3RyaW5nKClcclxuICAgICAgLnRyaW0oKVxyXG4gICAgICAudHJhbnNmb3JtKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgIGlmICh2YWx1ZS5zdGFydHNXaXRoKCdbJykpIHtcclxuICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWx1ZS5lbmRzV2l0aCgnXScpKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIC0xKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLnNwbGl0KHNlcGFyYXRvcik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHRyYW5zZm9ybUNhbGxiYWNrID0gKHZhbHVlKSA9PlxyXG4gICAgICB2YWx1ZS5tYXAoKHZhbHVlKSA9PiB2YWx1ZS50cmltKCkpLmZpbHRlcihmaWx0ZXJDYWxsYmFjayk7XHJcblxyXG4gICAgcmV0dXJuIHN0cmljdENoZWNrXHJcbiAgICAgID8gYXJyYXlTY2hlbWEudHJhbnNmb3JtKHRyYW5zZm9ybUNhbGxiYWNrKVxyXG4gICAgICA6IHpcclxuICAgICAgICAgIC51bmlvbihbc3RyaW5nU2NoZW1hLCBhcnJheVNjaGVtYV0pXHJcbiAgICAgICAgICAudHJhbnNmb3JtKHRyYW5zZm9ybUNhbGxiYWNrKVxyXG4gICAgICAgICAgLnRyYW5zZm9ybSgodmFsdWUpID0+ICh2YWx1ZS5sZW5ndGggPyB2YWx1ZSA6IG51bGwpKVxyXG4gICAgICAgICAgLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBwb3NpdGl2ZU51bWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoYXQ6XHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyB0cnVlLCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IHBvc2l0aXZlIG51bWJlciB2YWx1ZXNcclxuICAgKiBhbmQgdmFsaWRhdGUgYWdhaW5zdCB0aGUgZGVmYXVsdCBwb3NpdGl2ZSBudW1iZXIgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgZmFsc2UsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgcG9zaXRpdmUgbnVtYmVyXHJcbiAgICogdmFsdWVzLCBudWxsLCBhbmQgdHJpbW1lZCBzdHJpbmcgdmFsdWVzIHRoYXQgY2FuIGVpdGhlciBiZSAndW5kZWZpbmVkJyxcclxuICAgKiAnbnVsbCcsICcnLCBvciByZXByZXNlbnQgYSBwb3NpdGl2ZSBudW1iZXIuIEl0IHdpbGwgdHJhbnNmb3JtIHRoZSBzdHJpbmdcclxuICAgKiB0byBhIHBvc2l0aXZlIG51bWJlciwgb3IgdG8gbnVsbCBpZiBpdCBpcyAndW5kZWZpbmVkJywgJ251bGwnLCBvciAnJy5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBwb3NpdGl2ZU51bVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHBvc2l0aXZlIG51bWJlclxyXG4gICAqIHZhbHVlcy5cclxuICAgKi9cclxuICBwb3NpdGl2ZU51bShzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHN0cmljdENoZWNrXHJcbiAgICAgID8gei5udW1iZXIoKS5wb3NpdGl2ZSgpXHJcbiAgICAgIDogelxyXG4gICAgICAgICAgLnVuaW9uKFtcclxuICAgICAgICAgICAgelxyXG4gICAgICAgICAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgICAgICAucmVmaW5lKFxyXG4gICAgICAgICAgICAgICAgKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAgICAgICAoIWlzTmFOKE51bWJlcih2YWx1ZSkpICYmIE51bWJlcih2YWx1ZSkgPiAwKSB8fFxyXG4gICAgICAgICAgICAgICAgICBbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAnVGhlIHZhbHVlIG11c3QgYmUgbnVtZXJpYyBhbmQgcG9zaXRpdmUnXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgLnRyYW5zZm9ybSgodmFsdWUpID0+XHJcbiAgICAgICAgICAgICAgICAhWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgPyBOdW1iZXIodmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxyXG4gICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgIHoubnVtYmVyKCkucG9zaXRpdmUoKVxyXG4gICAgICAgICAgXSlcclxuICAgICAgICAgIC5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgbm9uTmVnYXRpdmVOdW1gIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGF0OlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgdHJ1ZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCBub24tbmVnYXRpdmUgbnVtYmVyXHJcbiAgICogdmFsdWVzIGFuZCB2YWxpZGF0ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IG5vbi1uZWdhdGl2ZSBudW1iZXIgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgZmFsc2UsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgbm9uLW5lZ2F0aXZlIG51bWJlclxyXG4gICAqIHZhbHVlcywgbnVsbCwgYW5kIHRyaW1tZWQgc3RyaW5nIHZhbHVlcyB0aGF0IGNhbiBlaXRoZXIgYmUgJ3VuZGVmaW5lZCcsXHJcbiAgICogJ251bGwnLCAnJywgb3IgcmVwcmVzZW50IGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gSXQgd2lsbCB0cmFuc2Zvcm1cclxuICAgKiB0aGUgc3RyaW5nIHRvIGEgbm9uLW5lZ2F0aXZlIG51bWJlciwgb3IgdG8gbnVsbCBpZiBpdCBpcyAndW5kZWZpbmVkJyxcclxuICAgKiAnbnVsbCcsIG9yICcnLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIG5vbk5lZ2F0aXZlTnVtXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgbm9uLW5lZ2F0aXZlXHJcbiAgICogbnVtYmVyIHZhbHVlcy5cclxuICAgKi9cclxuICBub25OZWdhdGl2ZU51bShzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHN0cmljdENoZWNrXHJcbiAgICAgID8gei5udW1iZXIoKS5ub25uZWdhdGl2ZSgpXHJcbiAgICAgIDogelxyXG4gICAgICAgICAgLnVuaW9uKFtcclxuICAgICAgICAgICAgelxyXG4gICAgICAgICAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgICAgICAucmVmaW5lKFxyXG4gICAgICAgICAgICAgICAgKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAgICAgICAoIWlzTmFOKE51bWJlcih2YWx1ZSkpICYmIE51bWJlcih2YWx1ZSkgPj0gMCkgfHxcclxuICAgICAgICAgICAgICAgICAgWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSksXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJ1RoZSB2YWx1ZSBtdXN0IGJlIG51bWVyaWMgYW5kIG5vbi1uZWdhdGl2ZSdcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAudHJhbnNmb3JtKCh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgICAgICFbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICA/IE51bWJlcih2YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgOiBudWxsXHJcbiAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgei5udW1iZXIoKS5ub25uZWdhdGl2ZSgpXHJcbiAgICAgICAgICBdKVxyXG4gICAgICAgICAgLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBzdGFydHNXaXRoYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHNjaGVtYSB3aWxsIHZhbGlkYXRlIGFnYWluc3QgdGhlIHByb3ZpZGVkIGBwcmVmaXhlc2AgYXJyYXkgdG8gY2hlY2tcclxuICAgKiB3aGV0aGVyIGEgc3RyaW5nIHZhbHVlIHN0YXJ0cyB3aXRoIGFueSBvZiB0aGUgdmFsdWVzIHByb3ZpZGVkXHJcbiAgICogaW4gdGhlIGBwcmVmaXhlc2AgYXJyYXkuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGF0OlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgdHJ1ZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCB0cmltbWVkIHN0cmluZyB2YWx1ZXNcclxuICAgKiB0aGF0IHN0YXJ0IHdpdGggdmFsdWVzIGZyb20gdGhlIHByZWZpeGVzIGFycmF5LlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgZmFsc2UsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgdHJpbW1lZCBzdHJpbmcgdmFsdWVzXHJcbiAgICogdGhhdCBzdGFydCB3aXRoIHZhbHVlcyBmcm9tIHRoZSBwcmVmaXhlcyBhcnJheSwgbnVsbCwgJ3VuZGVmaW5lZCcsICdudWxsJyxcclxuICAgKiBhbmQgJycgd2hlcmUgdGhlIHNjaGVtYSB3aWxsIHRyYW5zZm9ybSB0aGVtIHRvIG51bGwuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gc3RhcnRzV2l0aFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gcHJlZml4ZXMgLSBBbiBhcnJheSBvZiBwcmVmaXhlcyB0byB2YWxpZGF0ZVxyXG4gICAqIHRoZSBzdHJpbmcgYWdhaW5zdC5cclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgc3RyaW5ncyB0aGF0XHJcbiAgICogc3RhcnRzIHdpdGggdmFsdWVzLlxyXG4gICAqL1xyXG4gIHN0YXJ0c1dpdGgocHJlZml4ZXMsIHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gc3RyaWN0Q2hlY2tcclxuICAgICAgPyB6XHJcbiAgICAgICAgICAuc3RyaW5nKClcclxuICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgICAgICh2YWx1ZSkgPT4gcHJlZml4ZXMuc29tZSgocHJlZml4KSA9PiB2YWx1ZS5zdGFydHNXaXRoKHByZWZpeCkpLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGBUaGUgdmFsdWUgbXVzdCBiZSBhIHN0cmluZyB0aGF0IHN0YXJ0cyB3aXRoICR7cHJlZml4ZXMuam9pbignLCAnKX1gXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApXHJcbiAgICAgIDogelxyXG4gICAgICAgICAgLnN0cmluZygpXHJcbiAgICAgICAgICAudHJpbSgpXHJcbiAgICAgICAgICAucmVmaW5lKFxyXG4gICAgICAgICAgICAodmFsdWUpID0+XHJcbiAgICAgICAgICAgICAgcHJlZml4ZXMuc29tZSgocHJlZml4KSA9PiB2YWx1ZS5zdGFydHNXaXRoKHByZWZpeCkpIHx8XHJcbiAgICAgICAgICAgICAgWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSksXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogYFRoZSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nIHRoYXQgc3RhcnRzIHdpdGggJHtwcmVmaXhlcy5qb2luKCcsICcpfWBcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIClcclxuICAgICAgICAgIC50cmFuc2Zvcm0oKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAhWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IG51bGxcclxuICAgICAgICAgIClcclxuICAgICAgICAgIC5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgY2hhcnRDb25maWdgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhhdCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IG9iamVjdCB2YWx1ZXNcclxuICAgKiBvciB0cmltbWVkIHN0cmluZyB2YWx1ZXMgdGhhdCBjb250YWluICc8c3ZnJyBvciAnPD94bWwnIGVsZW1lbnRzLCBzdGFydFxyXG4gICAqIHdpdGggdGhlICd7JyBhbmQgZW5kIHdpdGggdGhlICd9JywgYW5kIG51bGwuIFRoZSAndW5kZWZpbmVkJywgJ251bGwnLFxyXG4gICAqIGFuZCAnJyB2YWx1ZXMgd2lsbCBiZSB0cmFuc2Zvcm1lZCB0byBudWxsLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGNoYXJ0Q29uZmlnXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgY2hhcnRcclxuICAgKiBjb25maWd1cmF0aW9uIHZhbHVlLlxyXG4gICAqL1xyXG4gIGNoYXJ0Q29uZmlnKCkge1xyXG4gICAgcmV0dXJuIHpcclxuICAgICAgLnVuaW9uKFtcclxuICAgICAgICB6XHJcbiAgICAgICAgICAuc3RyaW5nKClcclxuICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgICAgICh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgICAodmFsdWUuc3RhcnRzV2l0aCgneycpICYmIHZhbHVlLmVuZHNXaXRoKCd9JykpIHx8XHJcbiAgICAgICAgICAgICAgWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSksXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTpcclxuICAgICAgICAgICAgICAgICAgXCJUaGUgdmFsdWUgbXVzdCBiZSBhIHN0cmluZyB0aGF0IHN0YXJ0cyB3aXRoICd7JyBhbmQgZW5kcyB3aXRoICd9J1wiXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICAudHJhbnNmb3JtKCh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgIVsndW5kZWZpbmVkJywgJ251bGwnLCAnJ10uaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBudWxsXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgIHoub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpXHJcbiAgICAgIF0pXHJcbiAgICAgIC5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgYWRkaXRpb25hbE9wdGlvbnNgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhhdCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IG9iamVjdCB2YWx1ZXNcclxuICAgKiBvciB0cmltbWVkIHN0cmluZyB2YWx1ZXMgdGhhdCBlbmQgd2l0aCAnLmpzb24nIGFuZCBhcmUgYXQgbGVhc3Qgb25lXHJcbiAgICogY2hhcmFjdGVyIGxvbmcgZXhjbHVkaW5nIHRoZSBleHRlbnNpb24sIHN0YXJ0IHdpdGggdGhlICd7JyBhbmQgZW5kXHJcbiAgICogd2l0aCB0aGUgJ30nLCBhbmQgbnVsbC4gVGhlICd1bmRlZmluZWQnLCAnbnVsbCcsIGFuZCAnJyB2YWx1ZXMgd2lsbFxyXG4gICAqIGJlIHRyYW5zZm9ybWVkIHRvIG51bGwuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gYWRkaXRpb25hbE9wdGlvbnNcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gIEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgYWRkaXRpb25hbCBjaGFydFxyXG4gICAqIG9wdGlvbnMgdmFsdWUuXHJcbiAgICovXHJcbiAgYWRkaXRpb25hbE9wdGlvbnMoKSB7XHJcbiAgICByZXR1cm4gelxyXG4gICAgICAudW5pb24oW1xyXG4gICAgICAgIHpcclxuICAgICAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgLnJlZmluZShcclxuICAgICAgICAgICAgKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAgICh2YWx1ZS5sZW5ndGggPj0gNiAmJiB2YWx1ZS5lbmRzV2l0aCgnLmpzb24nKSkgfHxcclxuICAgICAgICAgICAgICAodmFsdWUuc3RhcnRzV2l0aCgneycpICYmIHZhbHVlLmVuZHNXaXRoKCd9JykpIHx8XHJcbiAgICAgICAgICAgICAgWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSksXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTpcclxuICAgICAgICAgICAgICAgICAgXCJUaGUgdmFsdWUgbXVzdCBiZSBhIHN0cmluZyB0aGF0IGVuZHMgd2l0aCAnLmpzb24nIG9yIHN0YXJ0cyB3aXRoICd7JyBhbmQgZW5kcyB3aXRoICd9J1wiXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICAudHJhbnNmb3JtKCh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgIVsndW5kZWZpbmVkJywgJ251bGwnLCAnJ10uaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBudWxsXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgIHoub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpXHJcbiAgICAgIF0pXHJcbiAgICAgIC5udWxsYWJsZSgpO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBPYmplY3QgY29udGFpbmluZyBjdXN0b20gY29uZmlnIHZhbGlkYXRvcnMgYW5kIHBhcnNlcnMgdG8gYXZvaWQgcmVwZXRpdGlvblxyXG4gKiBpbiBzY2hlbWEgb2JqZWN0cy4gQWxsIHZhbGlkYXRvcnMgYXBwbHkgdG8gdmFsdWVzIGZyb20gdmFyaW91cyBzb3VyY2VzLFxyXG4gKiBpbmNsdWRpbmcgdGhlIGRlZmF1bHQgY29uZmlnIGZpbGUsIGEgY3VzdG9tIEpTT04gZmlsZSBsb2FkZWQgd2l0aCB0aGUgb3B0aW9uXHJcbiAqIGNhbGxlZCBgbG9hZENvbmZpZ2AsIHRoZSAuZW52IGZpbGUsIENMSSBhcmd1bWVudHMsIGFuZCB0aGUgcmVxdWVzdCBwYXlsb2FkLlxyXG4gKiBUaGUgYHN0cmljdENoZWNrYCBmbGFnIGVuYWJsZXMgc3RyaWN0ZXIgdmFsaWRhdGlvbiBhbmQgcGFyc2luZyBydWxlcy4gVGhpc1xyXG4gKiBmbGFnIGlzIHNldCB0byBmYWxzZSBmb3IgdmFsdWVzIHRoYXQgY29tZSBmcm9tIHRoZSAuZW52IGZpbGUgb3IgQ0xJIGFyZ3VtZW50c1xyXG4gKiBiZWNhdXNlIHRoZXkgYXJlIHByb3ZpZGVkIGFzIHN0cmluZ3MgYW5kIG5lZWQgdG8gYmUgcGFyc2VkIGFjY29yZGluZ2x5IGZpcnN0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHZhbGlkYXRvcnMgPSB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGBhcmdzYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ0FycmF5YCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gYXJnc1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgYXJnc2BcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgYXJncyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuc3RyaW5nQXJyYXkoXHJcbiAgICAgICh2YWx1ZSkgPT4gIVsnZmFsc2UnLCAndW5kZWZpbmVkJywgJ251bGwnLCAnJ10uaW5jbHVkZXModmFsdWUpLFxyXG4gICAgICAnOycsXHJcbiAgICAgIHN0cmljdENoZWNrXHJcbiAgICApO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgdmVyc2lvbmAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoYXQ6XHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyB0cnVlLCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IHRyaW1tZWQgc3RyaW5nIHZhbHVlc1xyXG4gICAqIHRoYXQgYXJlIGEgUmVnRXhwLWJhc2VkIHRoYXQgYWxsb3dzIHRvIGJlICdsYXRlc3QnLCBvciBpbiB0aGUgZm9ybWF0IFhYLFxyXG4gICAqIFhYLllZLCBvciBYWC5ZWS5aWiwgd2hlcmUgWFgsIFlZLCBhbmQgWlogYXJlIG51bWVyaWMgZm9yIHRoZSBIaWdoY2hhcnRzXHJcbiAgICogdmVyc2lvbiBvcHRpb24uXHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyBmYWxzZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCBhbHNvIG51bGwsXHJcbiAgICogJ3VuZGVmaW5lZCcsICdudWxsJywgb3IgJycgYW5kIGluIGFsbCBjYXNlcyB0aGUgc2NoZW1hIHdpbGwgdHJhbnNmb3JtIHRoZW1cclxuICAgKiB0byBudWxsLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHZlcnNpb25cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYHZlcnNpb25gXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIHZlcnNpb24oc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiBzdHJpY3RDaGVja1xyXG4gICAgICA/IHpcclxuICAgICAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgLnJlZmluZSgodmFsdWUpID0+IC9eKGxhdGVzdHxcXGR7MSwyfShcXC5cXGR7MSwyfSl7MCwyfSkkLy50ZXN0KHZhbHVlKSwge1xyXG4gICAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6XHJcbiAgICAgICAgICAgICAgICBcIlRoZSB2YWx1ZSBtdXN0IGJlICdsYXRlc3QnLCBhIG1ham9yIHZlcnNpb24sIG9yIGluIHRoZSBmb3JtIFhYLllZLlpaXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgOiB6XHJcbiAgICAgICAgICAuc3RyaW5nKClcclxuICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgICAgICh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgICAvXihsYXRlc3R8XFxkezEsMn0oXFwuXFxkezEsMn0pezAsMn0pJC8udGVzdCh2YWx1ZSkgfHxcclxuICAgICAgICAgICAgICBbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOlxyXG4gICAgICAgICAgICAgICAgICBcIlRoZSB2YWx1ZSBtdXN0IGJlICdsYXRlc3QnLCBhIG1ham9yIHZlcnNpb24sIG9yIGluIHRoZSBmb3JtIFhYLllZLlpaXCJcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIClcclxuICAgICAgICAgIC50cmFuc2Zvcm0oKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAhWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IG51bGxcclxuICAgICAgICAgIClcclxuICAgICAgICAgIC5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgY2RuVXJsYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0YXJ0c1dpdGhgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBjZG5VcmxcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGNkblVybGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgY2RuVXJsKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdGFydHNXaXRoKFsnaHR0cDovLycsICdodHRwczovLyddLCBzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBmb3JjZUZldGNoYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBmb3JjZUZldGNoXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBmb3JjZUZldGNoYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBmb3JjZUZldGNoKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ib29sZWFuKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGNhY2hlUGF0aGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdHJpbmdgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBjYWNoZVBhdGhcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGNhY2hlUGF0aGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgY2FjaGVQYXRoKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdHJpbmcoc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgYWRtaW5Ub2tlbmAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdHJpbmdgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBhZG1pblRva2VuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBhZG1pblRva2VuYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBhZG1pblRva2VuKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdHJpbmcoc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgY29yZVNjcmlwdHNgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgc3RyaW5nQXJyYXlgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBjb3JlU2NyaXB0c1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgY29yZVNjcmlwdHNgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIGNvcmVTY3JpcHRzKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdHJpbmdBcnJheShcclxuICAgICAgKHZhbHVlKSA9PiBjb3JlU2NyaXB0cy52YWx1ZS5pbmNsdWRlcyh2YWx1ZSksXHJcbiAgICAgICcsJyxcclxuICAgICAgc3RyaWN0Q2hlY2tcclxuICAgICk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBtb2R1bGVTY3JpcHRzYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ0FycmF5YCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gbW9kdWxlU2NyaXB0c1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBtb2R1bGVTY3JpcHRzYCBvcHRpb24uXHJcbiAgICovXHJcbiAgbW9kdWxlU2NyaXB0cyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuc3RyaW5nQXJyYXkoXHJcbiAgICAgICh2YWx1ZSkgPT4gbW9kdWxlU2NyaXB0cy52YWx1ZS5pbmNsdWRlcyh2YWx1ZSksXHJcbiAgICAgICcsJyxcclxuICAgICAgc3RyaWN0Q2hlY2tcclxuICAgICk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBpbmRpY2F0b3JTY3JpcHRzYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ0FycmF5YCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gaW5kaWNhdG9yU2NyaXB0c1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBpbmRpY2F0b3JTY3JpcHRzYCBvcHRpb24uXHJcbiAgICovXHJcbiAgaW5kaWNhdG9yU2NyaXB0cyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuc3RyaW5nQXJyYXkoXHJcbiAgICAgICh2YWx1ZSkgPT4gaW5kaWNhdG9yU2NyaXB0cy52YWx1ZS5pbmNsdWRlcyh2YWx1ZSksXHJcbiAgICAgICcsJyxcclxuICAgICAgc3RyaWN0Q2hlY2tcclxuICAgICk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBjdXN0b21TY3JpcHRzYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ0FycmF5YCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gY3VzdG9tU2NyaXB0c1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBjdXN0b21TY3JpcHRzYCBvcHRpb24uXHJcbiAgICovXHJcbiAgY3VzdG9tU2NyaXB0cyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuc3RyaW5nQXJyYXkoXHJcbiAgICAgICh2YWx1ZSkgPT4gdmFsdWUuc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKSB8fCB2YWx1ZS5zdGFydHNXaXRoKCdodHRwOi8vJyksXHJcbiAgICAgICcsJyxcclxuICAgICAgc3RyaWN0Q2hlY2tcclxuICAgICk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBpbmZpbGVgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGF0OlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgdHJ1ZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCB0cmltbWVkIHN0cmluZyB2YWx1ZXNcclxuICAgKiB0aGF0IGVuZCB3aXRoICcuanNvbicgb3IgJy5zdmcnLCBhcmUgYXQgbGVhc3Qgb25lIGNoYXJhY3RlciBsb25nIGV4Y2x1ZGluZ1xyXG4gICAqIHRoZSBleHRlbnNpb24sIG9yIG51bGwuXHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyBmYWxzZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCB0cmltbWVkIHN0cmluZyB2YWx1ZXNcclxuICAgKiB0aGF0IGVuZCB3aXRoICcuanNvbicgb3IgJy5zdmcnLCBhcmUgYXQgbGVhc3Qgb25lIGNoYXJhY3RlciBsb25nIGV4Y2x1ZGluZ1xyXG4gICAqIHRoZSBleHRlbnNpb24gYW5kIHdpbGwgYmUgbnVsbCBpZiB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgbnVsbCwgJ3VuZGVmaW5lZCcsXHJcbiAgICogJ251bGwnLCBvciAnJy5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBpbmZpbGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGluZmlsZWBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgaW5maWxlKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gc3RyaWN0Q2hlY2tcclxuICAgICAgPyB6XHJcbiAgICAgICAgICAuc3RyaW5nKClcclxuICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgICAgICh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgICAodmFsdWUubGVuZ3RoID49IDYgJiYgdmFsdWUuZW5kc1dpdGgoJy5qc29uJykpIHx8XHJcbiAgICAgICAgICAgICAgKHZhbHVlLmxlbmd0aCA+PSA1ICYmIHZhbHVlLmVuZHNXaXRoKCcuc3ZnJykpLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6XHJcbiAgICAgICAgICAgICAgICAgICdUaGUgdmFsdWUgbXVzdCBiZSBhIHN0cmluZyB0aGF0IGVuZHMgd2l0aCAuanNvbiBvciAuc3ZnJ1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgLm51bGxhYmxlKClcclxuICAgICAgOiB6XHJcbiAgICAgICAgICAuc3RyaW5nKClcclxuICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgICAgICh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgICAodmFsdWUubGVuZ3RoID49IDYgJiYgdmFsdWUuZW5kc1dpdGgoJy5qc29uJykpIHx8XHJcbiAgICAgICAgICAgICAgKHZhbHVlLmxlbmd0aCA+PSA1ICYmIHZhbHVlLmVuZHNXaXRoKCcuc3ZnJykpIHx8XHJcbiAgICAgICAgICAgICAgWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSksXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTpcclxuICAgICAgICAgICAgICAgICAgJ1RoZSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nIHRoYXQgZW5kcyB3aXRoIC5qc29uIG9yIC5zdmcnXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICAudHJhbnNmb3JtKCh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgIVsndW5kZWZpbmVkJywgJ251bGwnLCAnJ10uaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBudWxsXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICAubnVsbGFibGUoKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGluc3RyYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYS5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBvcHRpb25zYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gaW5zdHJcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGluc3RyYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBpbnN0cigpIHtcclxuICAgIHJldHVybiB2LmNoYXJ0Q29uZmlnKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBvcHRpb25zYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYS5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBvcHRpb25zYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gb3B0aW9uc1xyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgb3B0aW9uc2BcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgb3B0aW9ucygpIHtcclxuICAgIHJldHVybiB2LmNoYXJ0Q29uZmlnKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBzdmdgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhhdCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IG9iamVjdCB2YWx1ZXNcclxuICAgKiBvciB0cmltbWVkIHN0cmluZyB2YWx1ZXMgdGhhdCBjb250YWluICc8c3ZnJyBvciAnPD94bWwnIGVsZW1lbnRzIGFuZCBudWxsLlxyXG4gICAqIFRoZSAndW5kZWZpbmVkJywgJ251bGwnLCBhbmQgJycgdmFsdWVzIHdpbGwgYmUgdHJhbnNmb3JtZWQgdG8gbnVsbC5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBzdmdcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYHN2Z2Agb3B0aW9uLlxyXG4gICAqL1xyXG4gIHN2ZygpIHtcclxuICAgIHJldHVybiB6XHJcbiAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAudHJpbSgpXHJcbiAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgKHZhbHVlKSA9PlxyXG4gICAgICAgICAgdmFsdWUuaW5kZXhPZignPHN2ZycpID49IDAgfHxcclxuICAgICAgICAgIHZhbHVlLmluZGV4T2YoJzw/eG1sJykgPj0gMCB8fFxyXG4gICAgICAgICAgWydmYWxzZScsICd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSksXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTpcclxuICAgICAgICAgICAgICBcIlRoZSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nIHRoYXQgY29udGFpbnMgJzxzdmcnIG9yICc8P3htbCdcIlxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKVxyXG4gICAgICAudHJhbnNmb3JtKCh2YWx1ZSkgPT5cclxuICAgICAgICAhWydmYWxzZScsICd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IG51bGxcclxuICAgICAgKVxyXG4gICAgICAubnVsbGFibGUoKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYG91dGZpbGVgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGF0OlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgdHJ1ZSwgdGhlIHNjaGVtYSB3aWxsIGFjY2VwdCB0cmltbWVkIHN0cmluZyB2YWx1ZXNcclxuICAgKiB0aGF0IGVuZCB3aXRoICcuanBlZycsICcuanBnJywgJy5wbmcnLCAnLnBkZicsIG9yICcuc3ZnJywgYXJlIGF0IGxlYXN0IG9uZVxyXG4gICAqIGNoYXJhY3RlciBsb25nIGV4Y2x1ZGluZyB0aGUgZXh0ZW5zaW9uLCBvciBudWxsLlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgZmFsc2UsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgdHJpbW1lZCBzdHJpbmcgdmFsdWVzXHJcbiAgICogdGhhdCBlbmQgd2l0aCAnLmpwZWcnLCAnLmpwZycsICcucG5nJywgJy5wZGYnLCBvciAnLnN2ZycsIGFyZSBhdCBsZWFzdCBvbmVcclxuICAgKiBjaGFyYWN0ZXIgbG9uZyBleGNsdWRpbmcgdGhlIGV4dGVuc2lvbiBhbmQgd2lsbCBiZSBudWxsIGlmIHRoZSBwcm92aWRlZFxyXG4gICAqIHZhbHVlIGlzIG51bGwsICd1bmRlZmluZWQnLCAnbnVsbCcsIG9yICcnLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIG91dGZpbGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYG91dGZpbGVgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIG91dGZpbGUoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiBzdHJpY3RDaGVja1xyXG4gICAgICA/IHpcclxuICAgICAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgLnJlZmluZShcclxuICAgICAgICAgICAgKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAgICh2YWx1ZS5sZW5ndGggPj0gNiAmJiB2YWx1ZS5lbmRzV2l0aCgnLmpwZWcnKSkgfHxcclxuICAgICAgICAgICAgICAodmFsdWUubGVuZ3RoID49IDUgJiZcclxuICAgICAgICAgICAgICAgICh2YWx1ZS5lbmRzV2l0aCgnLmpwZycpIHx8XHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlLmVuZHNXaXRoKCcucG5nJykgfHxcclxuICAgICAgICAgICAgICAgICAgdmFsdWUuZW5kc1dpdGgoJy5wZGYnKSB8fFxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZS5lbmRzV2l0aCgnLnN2ZycpKSksXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTpcclxuICAgICAgICAgICAgICAgICAgJ1RoZSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nIHRoYXQgZW5kcyB3aXRoIC5qcGVnLCAuanBnLCAucG5nLCAucGRmLCBvciAuc3ZnJ1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgLm51bGxhYmxlKClcclxuICAgICAgOiB6XHJcbiAgICAgICAgICAuc3RyaW5nKClcclxuICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgICAgICh2YWx1ZSkgPT5cclxuICAgICAgICAgICAgICAodmFsdWUubGVuZ3RoID49IDYgJiYgdmFsdWUuZW5kc1dpdGgoJy5qcGVnJykpIHx8XHJcbiAgICAgICAgICAgICAgKHZhbHVlLmxlbmd0aCA+PSA1ICYmXHJcbiAgICAgICAgICAgICAgICAodmFsdWUuZW5kc1dpdGgoJy5qcGcnKSB8fFxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZS5lbmRzV2l0aCgnLnBuZycpIHx8XHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlLmVuZHNXaXRoKCcucGRmJykgfHxcclxuICAgICAgICAgICAgICAgICAgdmFsdWUuZW5kc1dpdGgoJy5zdmcnKSkpIHx8XHJcbiAgICAgICAgICAgICAgWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSksXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTpcclxuICAgICAgICAgICAgICAgICAgJ1RoZSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nIHRoYXQgZW5kcyB3aXRoIC5qcGVnLCAuanBnLCAucG5nLCAucGRmLCBvciAuc3ZnJ1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgLnRyYW5zZm9ybSgodmFsdWUpID0+XHJcbiAgICAgICAgICAgICFbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogbnVsbFxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgLm51bGxhYmxlKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGB0eXBlYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGVudW1gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiB0eXBlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGB0eXBlYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICB0eXBlKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5lbnVtKFsnanBlZycsICdqcGcnLCAncG5nJywgJ3BkZicsICdzdmcnXSwgc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgY29uc3RyYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGVudW1gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBjb25zdHJcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGNvbnN0cmBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgY29uc3RyKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5lbnVtKFxyXG4gICAgICBbJ2NoYXJ0JywgJ3N0b2NrQ2hhcnQnLCAnbWFwQ2hhcnQnLCAnZ2FudHRDaGFydCddLFxyXG4gICAgICBzdHJpY3RDaGVja1xyXG4gICAgKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGI2NGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gYjY0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBiNjRgIG9wdGlvbi5cclxuICAgKi9cclxuICBiNjQoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgbm9Eb3dubG9hZGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gbm9Eb3dubG9hZFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgbm9Eb3dubG9hZGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgbm9Eb3dubG9hZChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBkZWZhdWx0SGVpZ2h0YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHBvc2l0aXZlTnVtYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gZGVmYXVsdEhlaWdodFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBkZWZhdWx0SGVpZ2h0YCBvcHRpb24uXHJcbiAgICovXHJcbiAgZGVmYXVsdEhlaWdodChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYucG9zaXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgZGVmYXVsdFdpZHRoYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHBvc2l0aXZlTnVtYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gZGVmYXVsdFdpZHRoXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGRlZmF1bHRXaWR0aGAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIGRlZmF1bHRXaWR0aChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYucG9zaXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgZGVmYXVsdFNjYWxlYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhhdDpcclxuICAgKlxyXG4gICAqIC0gV2hlbiBgc3RyaWN0Q2hlY2tgIGlzIHRydWUsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgbnVtYmVyIHZhbHVlcyB0aGF0XHJcbiAgICogYXJlIGJldHdlZW4gMC4xIGFuZCA1IChpbmNsdXNpdmUpLlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgZmFsc2UsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgbnVtYmVyIHZhbHVlc1xyXG4gICAqIGFuZCBzdHJpbmdpZmllZCBudW1iZXIgdmFsdWVzIHRoYXQgYXJlIGJldHdlZW4gMC4xIGFuZCA1IChpbmNsdXNpdmUpLCBudWxsLFxyXG4gICAqICd1bmRlZmluZWQnLCAnbnVsbCcsIGFuZCAnJyB3aGljaCB3aWxsIGJlIHRyYW5zZm9ybWVkIHRvIG51bGwuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gZGVmYXVsdFNjYWxlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGRlZmF1bHRTY2FsZWAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIGRlZmF1bHRTY2FsZShzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHN0cmljdENoZWNrXHJcbiAgICAgID8gei5udW1iZXIoKS5ndGUoMC4xKS5sdGUoNSlcclxuICAgICAgOiB6XHJcbiAgICAgICAgICAudW5pb24oW1xyXG4gICAgICAgICAgICB6XHJcbiAgICAgICAgICAgICAgLnN0cmluZygpXHJcbiAgICAgICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgICAgICAgICAodmFsdWUpID0+XHJcbiAgICAgICAgICAgICAgICAgICghaXNOYU4oTnVtYmVyKHZhbHVlKSkgJiZcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAhPT0gdHJ1ZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICF2YWx1ZS5zdGFydHNXaXRoKCdbJykgJiZcclxuICAgICAgICAgICAgICAgICAgICBOdW1iZXIodmFsdWUpID49IDAuMSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIE51bWJlcih2YWx1ZSkgPD0gNSkgfHxcclxuICAgICAgICAgICAgICAgICAgWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSksXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJ1RoZSB2YWx1ZSBtdXN0IGJlIHdpdGhpbiBhIDAuMSBhbmQgNS4wIHJhbmdlJ1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgIC50cmFuc2Zvcm0oKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAgICAgIVsndW5kZWZpbmVkJywgJ251bGwnLCAnJ10uaW5jbHVkZXModmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgID8gTnVtYmVyKHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICA6IG51bGxcclxuICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICB6Lm51bWJlcigpLmd0ZSgwLjEpLmx0ZSg1KVxyXG4gICAgICAgICAgXSlcclxuICAgICAgICAgIC5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgaGVpZ2h0YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyBhIG51bGxhYmxlIGBkZWZhdWx0SGVpZ2h0YFxyXG4gICAqIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBoZWlnaHRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGhlaWdodGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgaGVpZ2h0KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0SGVpZ2h0KHN0cmljdENoZWNrKS5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgd2lkdGhgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIGEgbnVsbGFibGUgYGRlZmF1bHRXaWR0aGBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gd2lkdGhcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYHdpZHRoYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICB3aWR0aChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdFdpZHRoKHN0cmljdENoZWNrKS5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgc2NhbGVgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIGEgbnVsbGFibGUgYGRlZmF1bHRTY2FsZWBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gc2NhbGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYHNjYWxlYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBzY2FsZShzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdFNjYWxlKHN0cmljdENoZWNrKS5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgZ2xvYmFsT3B0aW9uc2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYWRkaXRpb25hbE9wdGlvbnNgXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGdsb2JhbE9wdGlvbnNcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgZ2xvYmFsT3B0aW9uc2Agb3B0aW9uLlxyXG4gICAqL1xyXG4gIGdsb2JhbE9wdGlvbnMoKSB7XHJcbiAgICByZXR1cm4gdi5hZGRpdGlvbmFsT3B0aW9ucygpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgdGhlbWVPcHRpb25zYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYS5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBhZGRpdGlvbmFsT3B0aW9uc2BcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gdGhlbWVPcHRpb25zXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYHRoZW1lT3B0aW9uc2Agb3B0aW9uLlxyXG4gICAqL1xyXG4gIHRoZW1lT3B0aW9ucygpIHtcclxuICAgIHJldHVybiB2LmFkZGl0aW9uYWxPcHRpb25zKCk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBiYXRjaGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdHJpbmdgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBiYXRjaFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgYmF0Y2hgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIGJhdGNoKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdHJpbmcoc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgcmFzdGVyaXphdGlvblRpbWVvdXRgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGhcclxuICAgKiBhbiBvcHRpb25hbCBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHJhc3Rlcml6YXRpb25UaW1lb3V0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYHJhc3Rlcml6YXRpb25UaW1lb3V0YCBvcHRpb24uXHJcbiAgICovXHJcbiAgcmFzdGVyaXphdGlvblRpbWVvdXQoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGFsbG93Q29kZUV4ZWN1dGlvbmAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aFxyXG4gICAqIGFuIG9wdGlvbmFsIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gYWxsb3dDb2RlRXhlY3V0aW9uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGFsbG93Q29kZUV4ZWN1dGlvbmAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIGFsbG93Q29kZUV4ZWN1dGlvbihzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBhbGxvd0ZpbGVSZXNvdXJjZXNgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGhcclxuICAgKiBhbiBvcHRpb25hbCBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGFsbG93RmlsZVJlc291cmNlc1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBhbGxvd0ZpbGVSZXNvdXJjZXNgIG9wdGlvbi5cclxuICAgKi9cclxuICBhbGxvd0ZpbGVSZXNvdXJjZXMoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgY3VzdG9tQ29kZWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdHJpbmdgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBjdXN0b21Db2RlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBjdXN0b21Db2RlYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBjdXN0b21Db2RlKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdHJpbmcoc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgY2FsbGJhY2tgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgc3RyaW5nYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gY2FsbGJhY2tcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGNhbGxiYWNrYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBjYWxsYmFjayhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuc3RyaW5nKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHJlc291cmNlc2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoYXQ6XHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyB0cnVlLCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IGEgcGFydGlhbCBvYmplY3RcclxuICAgKiB3aXRoIGFsbG93ZWQgcHJvcGVydGllcyBganNgLCBgY3NzYCwgYW5kIGBmaWxlc2Agd2hlcmUgZWFjaCBvZiB0aGUgYWxsb3dlZFxyXG4gICAqIHByb3BlcnRpZXMgY2FuIGJlIG51bGwsIHN0cmluZ2lmaWVkIHZlcnNpb24gb2YgdGhlIG9iamVjdCwgc3RyaW5nIHRoYXQgZW5kc1xyXG4gICAqIHdpdGggdGhlICcuanNvbicsIGFuZCBudWxsLlxyXG4gICAqXHJcbiAgICogLSBXaGVuIGBzdHJpY3RDaGVja2AgaXMgZmFsc2UsIHRoZSBzY2hlbWEgd2lsbCBhY2NlcHQgYSBzdHJpbmdpZmllZCB2ZXJzaW9uXHJcbiAgICogb2YgYSBwYXJ0aWFsIG9iamVjdCB3aXRoIGFsbG93ZWQgcHJvcGVydGllcyBganNgLCBgY3NzYCwgYW5kIGBmaWxlc2Agd2hlcmVcclxuICAgKiBlYWNoIG9mIHRoZSBhbGxvd2VkIHByb3BlcnRpZXMgY2FuIGJlIG51bGwsIHN0cmluZyB0aGF0IGVuZHMgd2l0aCB0aGVcclxuICAgKiAnLmpzb24nLCBhbmQgd2lsbCBiZSBudWxsIGlmIHRoZSBwcm92aWRlZCB2YWx1ZSBpcyAndW5kZWZpbmVkJywgJ251bGwnXHJcbiAgICogb3IgJycuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gcmVzb3VyY2VzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGByZXNvdXJjZXNgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIHJlc291cmNlcyhzdHJpY3RDaGVjaykge1xyXG4gICAgY29uc3Qgb2JqZWN0U2NoZW1hID0gelxyXG4gICAgICAub2JqZWN0KHtcclxuICAgICAgICBqczogdi5zdHJpbmcoZmFsc2UpLFxyXG4gICAgICAgIGNzczogdi5zdHJpbmcoZmFsc2UpLFxyXG4gICAgICAgIGZpbGVzOiB2XHJcbiAgICAgICAgICAuc3RyaW5nQXJyYXkoXHJcbiAgICAgICAgICAgICh2YWx1ZSkgPT4gIVsndW5kZWZpbmVkJywgJ251bGwnLCAnJ10uaW5jbHVkZXModmFsdWUpLFxyXG4gICAgICAgICAgICAnLCcsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICAgIClcclxuICAgICAgICAgIC5udWxsYWJsZSgpXHJcbiAgICAgIH0pXHJcbiAgICAgIC5wYXJ0aWFsKCk7XHJcblxyXG4gICAgY29uc3Qgc3RyaW5nU2NoZW1hMSA9IHpcclxuICAgICAgLnN0cmluZygpXHJcbiAgICAgIC50cmltKClcclxuICAgICAgLnJlZmluZShcclxuICAgICAgICAodmFsdWUpID0+XHJcbiAgICAgICAgICAodmFsdWUuc3RhcnRzV2l0aCgneycpICYmIHZhbHVlLmVuZHNXaXRoKCd9JykpIHx8XHJcbiAgICAgICAgICAodmFsdWUubGVuZ3RoID49IDYgJiYgdmFsdWUuZW5kc1dpdGgoJy5qc29uJykpLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6XHJcbiAgICAgICAgICAgICAgXCJUaGUgdmFsdWUgbXVzdCBiZSBhIHN0cmluZyB0aGF0IHN0YXJ0cyB3aXRoICd7JyBhbmQgZW5kcyB3aXRoICd9XCJcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcblxyXG4gICAgY29uc3Qgc3RyaW5nU2NoZW1hMiA9IHpcclxuICAgICAgLnN0cmluZygpXHJcbiAgICAgIC50cmltKClcclxuICAgICAgLnJlZmluZShcclxuICAgICAgICAodmFsdWUpID0+XHJcbiAgICAgICAgICAodmFsdWUuc3RhcnRzV2l0aCgneycpICYmIHZhbHVlLmVuZHNXaXRoKCd9JykpIHx8XHJcbiAgICAgICAgICAodmFsdWUubGVuZ3RoID49IDYgJiYgdmFsdWUuZW5kc1dpdGgoJy5qc29uJykpIHx8XHJcbiAgICAgICAgICBbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAnVGhlIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcgdGhhdCBlbmRzIHdpdGggLmpzb24nXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApXHJcbiAgICAgIC50cmFuc2Zvcm0oKHZhbHVlKSA9PlxyXG4gICAgICAgICFbJ3VuZGVmaW5lZCcsICdudWxsJywgJyddLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogbnVsbFxyXG4gICAgICApO1xyXG5cclxuICAgIHJldHVybiBzdHJpY3RDaGVja1xyXG4gICAgICA/IHoudW5pb24oW29iamVjdFNjaGVtYSwgc3RyaW5nU2NoZW1hMV0pLm51bGxhYmxlKClcclxuICAgICAgOiB6LnVuaW9uKFtvYmplY3RTY2hlbWEsIHN0cmluZ1NjaGVtYTJdKS5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgbG9hZENvbmZpZ2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdHJpbmdgIHZhbGlkYXRvci5cclxuICAgKiBBZGRpdGlvbmFsbHksIGl0IG11c3QgYmUgYSBzdHJpbmcgdGhhdCBlbmRzIHdpdGggJy5qc29uJy5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBsb2FkQ29uZmlnXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBsb2FkQ29uZmlnYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBsb2FkQ29uZmlnKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdlxyXG4gICAgICAuc3RyaW5nKHN0cmljdENoZWNrKVxyXG4gICAgICAucmVmaW5lKFxyXG4gICAgICAgICh2YWx1ZSkgPT5cclxuICAgICAgICAgIHZhbHVlID09PSBudWxsIHx8ICh2YWx1ZS5sZW5ndGggPj0gNiAmJiB2YWx1ZS5lbmRzV2l0aCgnLmpzb24nKSksXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJ1RoZSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nIHRoYXQgZW5kcyB3aXRoIC5qc29uJ1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGNyZWF0ZUNvbmZpZ2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBsb2FkQ29uZmlnYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gY3JlYXRlQ29uZmlnXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGNyZWF0ZUNvbmZpZ2Agb3B0aW9uLlxyXG4gICAqL1xyXG4gIGNyZWF0ZUNvbmZpZyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHRoaXMubG9hZENvbmZpZyhzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBlbmFibGVTZXJ2ZXJgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGVuYWJsZVNlcnZlclxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBlbmFibGVTZXJ2ZXJgIG9wdGlvbi5cclxuICAgKi9cclxuICBlbmFibGVTZXJ2ZXIoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgaG9zdGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdHJpbmdgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBob3N0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBob3N0YFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBob3N0KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdHJpbmcoc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgcG9ydGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBub25OZWdhdGl2ZU51bWBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gcG9ydFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgcG9ydGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgcG9ydChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYubm9uTmVnYXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgdXBsb2FkTGltaXRgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgcG9zaXRpdmVOdW1gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiB1cGxvYWRMaW1pdFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgdXBsb2FkTGltaXRgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIHVwbG9hZExpbWl0KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5wb3NpdGl2ZU51bShzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBzZXJ2ZXJCZW5jaG1hcmtpbmdgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGhcclxuICAgKiBhbiBvcHRpb25hbCBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHNlcnZlckJlbmNobWFya2luZ1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBzZXJ2ZXJCZW5jaG1hcmtpbmdgIG9wdGlvbi5cclxuICAgKi9cclxuICBzZXJ2ZXJCZW5jaG1hcmtpbmcoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgcHJveHlIb3N0YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ2AgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHByb3h5SG9zdFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgcHJveHlIb3N0YFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBwcm94eUhvc3Qoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LnN0cmluZyhzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBwcm94eVBvcnRgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIGEgbnVsbGFibGUgYG5vbk5lZ2F0aXZlTnVtYFxyXG4gICAqIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBwcm94eVBvcnRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYHByb3h5UG9ydGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgcHJveHlQb3J0KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ub25OZWdhdGl2ZU51bShzdHJpY3RDaGVjaykubnVsbGFibGUoKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHByb3h5VGltZW91dGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBub25OZWdhdGl2ZU51bWBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gcHJveHlUaW1lb3V0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYHByb3h5VGltZW91dGAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIHByb3h5VGltZW91dChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYubm9uTmVnYXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgZW5hYmxlUmF0ZUxpbWl0aW5nYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoXHJcbiAgICogYW4gb3B0aW9uYWwgc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBlbmFibGVSYXRlTGltaXRpbmdcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgZW5hYmxlUmF0ZUxpbWl0aW5nYCBvcHRpb24uXHJcbiAgICovXHJcbiAgZW5hYmxlUmF0ZUxpbWl0aW5nKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ib29sZWFuKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYG1heFJlcXVlc3RzYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYG5vbk5lZ2F0aXZlTnVtYFxyXG4gICAqIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBtYXhSZXF1ZXN0c1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgbWF4UmVxdWVzdHNgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIG1heFJlcXVlc3RzKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ub25OZWdhdGl2ZU51bShzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGB3aW5kb3dgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHdpbmRvd1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgd2luZG93YFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICB3aW5kb3coc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGRlbGF5YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsIHN0cmljdGVyXHJcbiAgICogY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYG5vbk5lZ2F0aXZlTnVtYFxyXG4gICAqIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBkZWxheVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgZGVsYXlgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIGRlbGF5KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ub25OZWdhdGl2ZU51bShzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGB0cnVzdFByb3h5YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiB0cnVzdFByb3h5XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGB0cnVzdFByb3h5YFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICB0cnVzdFByb3h5KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ib29sZWFuKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHNraXBLZXlgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgc3RyaW5nYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gc2tpcEtleVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgc2tpcEtleWBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgc2tpcEtleShzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuc3RyaW5nKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHNraXBUb2tlbmAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdHJpbmdgIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBza2lwVG9rZW5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYHNraXBUb2tlbmBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgc2tpcFRva2VuKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5zdHJpbmcoc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgZW5hYmxlU3NsYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBlbmFibGVTc2xcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGVuYWJsZVNzbGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgZW5hYmxlU3NsKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ib29sZWFuKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHNzbEZvcmNlYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBzc2xGb3JjZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgc3NsRm9yY2VgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIHNzbEZvcmNlKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ib29sZWFuKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHNzbFBvcnRgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHNzbFBvcnRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYHNzbFBvcnRgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIHNzbFBvcnQoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHNzbENlcnRQYXRoYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHN0cmluZ2AgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHNzbENlcnRQYXRoXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBzc2xDZXJ0UGF0aGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgc3NsQ2VydFBhdGgoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LnN0cmluZyhzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBtaW5Xb3JrZXJzYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYHBvc2l0aXZlTnVtYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gbWluV29ya2Vyc1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgbWluV29ya2Vyc2BcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgbWluV29ya2VycyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYucG9zaXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgbWF4V29ya2Vyc2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBwb3NpdGl2ZU51bWAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIG1heFdvcmtlcnNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYG1heFdvcmtlcnNgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIG1heFdvcmtlcnMoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LnBvc2l0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHdvcmtMaW1pdGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBwb3NpdGl2ZU51bWAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHdvcmtMaW1pdFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgd29ya0xpbWl0YFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICB3b3JrTGltaXQoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LnBvc2l0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGFjcXVpcmVUaW1lb3V0YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYG5vbk5lZ2F0aXZlTnVtYFxyXG4gICAqIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBhY3F1aXJlVGltZW91dFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBhY3F1aXJlVGltZW91dGAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIGFjcXVpcmVUaW1lb3V0KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ub25OZWdhdGl2ZU51bShzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBjcmVhdGVUaW1lb3V0YCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYG5vbk5lZ2F0aXZlTnVtYFxyXG4gICAqIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBjcmVhdGVUaW1lb3V0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGNyZWF0ZVRpbWVvdXRgIG9wdGlvbi5cclxuICAgKi9cclxuICBjcmVhdGVUaW1lb3V0KHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ub25OZWdhdGl2ZU51bShzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBkZXN0cm95VGltZW91dGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBub25OZWdhdGl2ZU51bWBcclxuICAgKiB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gZGVzdHJveVRpbWVvdXRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgZGVzdHJveVRpbWVvdXRgIG9wdGlvbi5cclxuICAgKi9cclxuICBkZXN0cm95VGltZW91dChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYubm9uTmVnYXRpdmVOdW0oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgaWRsZVRpbWVvdXRgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGlkbGVUaW1lb3V0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGlkbGVUaW1lb3V0YCBvcHRpb24uXHJcbiAgICovXHJcbiAgaWRsZVRpbWVvdXQoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGNyZWF0ZVJldHJ5SW50ZXJ2YWxgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGhcclxuICAgKiBhbiBvcHRpb25hbCBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGNyZWF0ZVJldHJ5SW50ZXJ2YWxcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgY3JlYXRlUmV0cnlJbnRlcnZhbGAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIGNyZWF0ZVJldHJ5SW50ZXJ2YWwoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHJlYXBlckludGVydmFsYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYG5vbk5lZ2F0aXZlTnVtYFxyXG4gICAqIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiByZWFwZXJJbnRlcnZhbFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGByZWFwZXJJbnRlcnZhbGAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIHJlYXBlckludGVydmFsKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ub25OZWdhdGl2ZU51bShzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBwb29sQmVuY2htYXJraW5nYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBwb29sQmVuY2htYXJraW5nXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYHBvb2xCZW5jaG1hcmtpbmdgIG9wdGlvbi5cclxuICAgKi9cclxuICBwb29sQmVuY2htYXJraW5nKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ib29sZWFuKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHJlc291cmNlc0ludGVydmFsYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoXHJcbiAgICogYW4gb3B0aW9uYWwgc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYG5vbk5lZ2F0aXZlTnVtYFxyXG4gICAqIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiByZXNvdXJjZXNJbnRlcnZhbFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGByZXNvdXJjZXNJbnRlcnZhbGAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIHJlc291cmNlc0ludGVydmFsKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ub25OZWdhdGl2ZU51bShzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBsb2dMZXZlbGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoYXQ6XHJcbiAgICpcclxuICAgKiAtIFdoZW4gYHN0cmljdENoZWNrYCBpcyB0cnVlLCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IGludGVnZXIgbnVtYmVyIHZhbHVlc1xyXG4gICAqIHRoYXQgYXJlIGJldHdlZW4gMCBhbmQgNSAoaW5jbHVzaXZlKS5cclxuICAgKlxyXG4gICAqIC0gV2hlbiBgc3RyaWN0Q2hlY2tgIGlzIGZhbHNlLCB0aGUgc2NoZW1hIHdpbGwgYWNjZXB0IGludGVnZXIgbnVtYmVyIHZhbHVlc1xyXG4gICAqIGFuZCBzdHJpbmdpZmllZCBpbnRlZ2VyIG51bWJlciB2YWx1ZXMgdGhhdCBhcmUgYmV0d2VlbiAxIGFuZCA1IChpbmNsdXNpdmUpLFxyXG4gICAqIG51bGwsICd1bmRlZmluZWQnLCAnbnVsbCcsIGFuZCAnJyB3aGljaCB3aWxsIGJlIHRyYW5zZm9ybWVkIHRvIG51bGwuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gbG9nTGV2ZWxcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGxvZ0xldmVsYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBsb2dMZXZlbChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHN0cmljdENoZWNrXHJcbiAgICAgID8gei5udW1iZXIoKS5pbnQoKS5ndGUoMCkubHRlKDUpXHJcbiAgICAgIDogelxyXG4gICAgICAgICAgLnVuaW9uKFtcclxuICAgICAgICAgICAgelxyXG4gICAgICAgICAgICAgIC5zdHJpbmcoKVxyXG4gICAgICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgICAgICAucmVmaW5lKFxyXG4gICAgICAgICAgICAgICAgKHZhbHVlKSA9PlxyXG4gICAgICAgICAgICAgICAgICAoIWlzTmFOKE51bWJlcih2YWx1ZSkpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgIT09IHRydWUgJiZcclxuICAgICAgICAgICAgICAgICAgICAhdmFsdWUuc3RhcnRzV2l0aCgnWycpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgTnVtYmVyLmlzSW50ZWdlcihOdW1iZXIodmFsdWUpKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIE51bWJlcih2YWx1ZSkgPj0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIE51bWJlcih2YWx1ZSkgPD0gNSkgfHxcclxuICAgICAgICAgICAgICAgICAgWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSksXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJ1RoZSB2YWx1ZSBtdXN0IGJlIHdpdGhpbiBhIDAgYW5kIDUgcmFuZ2UnXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgLnRyYW5zZm9ybSgodmFsdWUpID0+XHJcbiAgICAgICAgICAgICAgICAhWyd1bmRlZmluZWQnLCAnbnVsbCcsICcnXS5pbmNsdWRlcyh2YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgPyBOdW1iZXIodmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxyXG4gICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgIHoubnVtYmVyKCkuaW50KCkuZ3RlKDApLmx0ZSg1KVxyXG4gICAgICAgICAgXSlcclxuICAgICAgICAgIC5udWxsYWJsZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgbG9nRmlsZWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdHJpbmdgIHZhbGlkYXRvci5cclxuICAgKiBBZGRpdGlvbmFsbHksIGl0IG11c3QgYmUgYSBzdHJpbmcgdGhhdCBlbmRzIHdpdGggJy5sb2cnLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGxvZ0ZpbGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYGxvZ0ZpbGVgXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIGxvZ0ZpbGUoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2XHJcbiAgICAgIC5zdHJpbmcoc3RyaWN0Q2hlY2spXHJcbiAgICAgIC5yZWZpbmUoXHJcbiAgICAgICAgKHZhbHVlKSA9PlxyXG4gICAgICAgICAgdmFsdWUgPT09IG51bGwgfHwgKHZhbHVlLmxlbmd0aCA+PSA1ICYmIHZhbHVlLmVuZHNXaXRoKCcubG9nJykpLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6ICdUaGUgdmFsdWUgbXVzdCBiZSBhIHN0cmluZyB0aGF0IGVuZHMgd2l0aCAubG9nJ1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGxvZ0Rlc3RgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgc3RyaW5nYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gbG9nRGVzdFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgbG9nRGVzdGBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgbG9nRGVzdChzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuc3RyaW5nKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGxvZ1RvQ29uc29sZWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gbG9nVG9Db25zb2xlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGxvZ1RvQ29uc29sZWAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIGxvZ1RvQ29uc29sZShzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBsb2dUb0ZpbGVgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGxvZ1RvRmlsZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgbG9nVG9GaWxlYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBsb2dUb0ZpbGUoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgZW5hYmxlVWlgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGVuYWJsZVVpXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBlbmFibGVVaWBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgZW5hYmxlVWkoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgdWlSb3V0ZWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdGFydHNXaXRoYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gdWlSb3V0ZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgdWlSb3V0ZWBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgdWlSb3V0ZShzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuc3RhcnRzV2l0aChbJy8nXSwgc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgbm9kZUVudmAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBlbnVtYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gbm9kZUVudlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgbm9kZUVudmBcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgbm9kZUVudihzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuZW51bShbJ2RldmVsb3BtZW50JywgJ3Byb2R1Y3Rpb24nLCAndGVzdCddLCBzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBsaXN0ZW5Ub1Byb2Nlc3NFeGl0c2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aFxyXG4gICAqIGFuIG9wdGlvbmFsIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gbGlzdGVuVG9Qcm9jZXNzRXhpdHNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgbGlzdGVuVG9Qcm9jZXNzRXhpdHNgIG9wdGlvbi5cclxuICAgKi9cclxuICBsaXN0ZW5Ub1Byb2Nlc3NFeGl0cyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBub0xvZ29gIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIG5vTG9nb1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgbm9Mb2dvYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBub0xvZ28oc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgaGFyZFJlc2V0UGFnZWAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gaGFyZFJlc2V0UGFnZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nXHJcbiAgICogdGhlIGBoYXJkUmVzZXRQYWdlYCBvcHRpb24uXHJcbiAgICovXHJcbiAgaGFyZFJlc2V0UGFnZShzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBicm93c2VyU2hlbGxNb2RlYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBicm93c2VyU2hlbGxNb2RlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmdcclxuICAgKiB0aGUgYGJyb3dzZXJTaGVsbE1vZGVgIG9wdGlvbi5cclxuICAgKi9cclxuICBicm93c2VyU2hlbGxNb2RlKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ib29sZWFuKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHZhbGlkYXRpb25gIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHZhbGlkYXRpb25cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZyB0aGUgYHZhbGlkYXRpb25gXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIHZhbGlkYXRpb24oc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgZW5hYmxlRGVidWdgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGVuYWJsZURlYnVnXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBlbmFibGVEZWJ1Z2BcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgZW5hYmxlRGVidWcoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgaGVhZGxlc3NgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGhlYWRsZXNzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBoZWFkbGVzc2BcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgaGVhZGxlc3Moc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgZGV2dG9vbHNgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgYm9vbGVhbmAgdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGRldnRvb2xzXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBkZXZ0b29sc2BcclxuICAgKiBvcHRpb24uXHJcbiAgICovXHJcbiAgZGV2dG9vbHMoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2LmJvb2xlYW4oc3RyaWN0Q2hlY2spO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBgbGlzdGVuVG9Db25zb2xlYCB2YWxpZGF0b3IgdGhhdCByZXR1cm5zIGEgWm9kIHNjaGVtYSB3aXRoIGFuIG9wdGlvbmFsXHJcbiAgICogc3RyaWN0ZXIgY2hlY2sgYmFzZWQgb24gdGhlIGBzdHJpY3RDaGVja2AgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogVGhlIHZhbGlkYXRpb24gc2NoZW1hIGVuc3VyZXMgdGhlIHNhbWUgd29yayBhcyB0aGUgYGJvb2xlYW5gIHZhbGlkYXRvci5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvbiBsaXN0ZW5Ub0NvbnNvbGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgbGlzdGVuVG9Db25zb2xlYCBvcHRpb24uXHJcbiAgICovXHJcbiAgbGlzdGVuVG9Db25zb2xlKHN0cmljdENoZWNrKSB7XHJcbiAgICByZXR1cm4gdi5ib29sZWFuKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGR1bXBpb2AgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbCBzdHJpY3RlclxyXG4gICAqIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBib29sZWFuYCB2YWxpZGF0b3IuXHJcbiAgICpcclxuICAgKiBAZnVuY3Rpb24gZHVtcGlvXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0cmljdENoZWNrIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uIHNob3VsZFxyXG4gICAqIGJlIGFwcGxpZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7ei5ab2RTY2hlbWF9IEEgWm9kIHNjaGVtYSBvYmplY3QgZm9yIHZhbGlkYXRpbmcgdGhlIGBkdW1waW9gXHJcbiAgICogb3B0aW9uLlxyXG4gICAqL1xyXG4gIGR1bXBpbyhzdHJpY3RDaGVjaykge1xyXG4gICAgcmV0dXJuIHYuYm9vbGVhbihzdHJpY3RDaGVjayk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGBzbG93TW9gIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWwgc3RyaWN0ZXJcclxuICAgKiBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHNsb3dNb1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgc2xvd01vYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICBzbG93TW8oc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYGRlYnVnZ2luZ1BvcnRgIHZhbGlkYXRvciB0aGF0IHJldHVybnMgYSBab2Qgc2NoZW1hIHdpdGggYW4gb3B0aW9uYWxcclxuICAgKiBzdHJpY3RlciBjaGVjayBiYXNlZCBvbiB0aGUgYHN0cmljdENoZWNrYCBwYXJhbWV0ZXIuXHJcbiAgICpcclxuICAgKiBUaGUgdmFsaWRhdGlvbiBzY2hlbWEgZW5zdXJlcyB0aGUgc2FtZSB3b3JrIGFzIHRoZSBgbm9uTmVnYXRpdmVOdW1gXHJcbiAgICogdmFsaWRhdG9yLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIGRlYnVnZ2luZ1BvcnRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RyaWN0Q2hlY2sgLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb24gc2hvdWxkXHJcbiAgICogYmUgYXBwbGllZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHt6LlpvZFNjaGVtYX0gQSBab2Qgc2NoZW1hIG9iamVjdCBmb3IgdmFsaWRhdGluZ1xyXG4gICAqIHRoZSBgZGVidWdnaW5nUG9ydGAgb3B0aW9uLlxyXG4gICAqL1xyXG4gIGRlYnVnZ2luZ1BvcnQoc3RyaWN0Q2hlY2spIHtcclxuICAgIHJldHVybiB2Lm5vbk5lZ2F0aXZlTnVtKHN0cmljdENoZWNrKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgYHJlcXVlc3RJZGAgdmFsaWRhdG9yIHRoYXQgcmV0dXJucyBhIFpvZCBzY2hlbWEgd2l0aCBhbiBvcHRpb25hbFxyXG4gICAqIHN0cmljdGVyIGNoZWNrIGJhc2VkIG9uIHRoZSBgc3RyaWN0Q2hlY2tgIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIFRoZSB2YWxpZGF0aW9uIHNjaGVtYSBlbnN1cmVzIHRoZSBzYW1lIHdvcmsgYXMgdGhlIGBzdHJpbmdgIHZhbGlkYXRvci5cclxuICAgKiBBZGRpdGlvbmFsbHksIGl0IG11c3QgYmUgYSBzdHJpbmdpZmllZCBVVUlEIG9yIGNhbiBiZSBudWxsLlxyXG4gICAqXHJcbiAgICogQGZ1bmN0aW9uIHJlcXVlc3RJZFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBzdHJpY3RDaGVjayAtIERldGVybWluZXMgaWYgc3RyaWN0ZXIgdmFsaWRhdGlvbiBzaG91bGRcclxuICAgKiBiZSBhcHBsaWVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge3ouWm9kU2NoZW1hfSBBIFpvZCBzY2hlbWEgb2JqZWN0IGZvciB2YWxpZGF0aW5nIHRoZSBgcmVxdWVzdElkYFxyXG4gICAqIG9wdGlvbi5cclxuICAgKi9cclxuICByZXF1ZXN0SWQoKSB7XHJcbiAgICByZXR1cm4gelxyXG4gICAgICAuc3RyaW5nKClcclxuICAgICAgLnV1aWQoeyBtZXNzYWdlOiAnVGhlIHZhbHVlIG11c3QgYmUgYSBzdHJpbmdpZmllZCBVVUlEJyB9KVxyXG4gICAgICAubnVsbGFibGUoKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBTY2hlbWEgZm9yIHRoZSBwdXBwZXRlZXIgc2VjdGlvbiBvZiBvcHRpb25zXHJcbmNvbnN0IFB1cHBldGVlclNjaGVtYSA9IChzdHJpY3RDaGVjaykgPT5cclxuICB6XHJcbiAgICAub2JqZWN0KHtcclxuICAgICAgYXJnczogdmFsaWRhdG9ycy5hcmdzKHN0cmljdENoZWNrKVxyXG4gICAgfSlcclxuICAgIC5wYXJ0aWFsKCk7XHJcblxyXG4vLyBTY2hlbWEgZm9yIHRoZSBoaWdoY2hhcnRzIHNlY3Rpb24gb2Ygb3B0aW9uc1xyXG5jb25zdCBIaWdoY2hhcnRzU2NoZW1hID0gKHN0cmljdENoZWNrKSA9PlxyXG4gIHpcclxuICAgIC5vYmplY3Qoe1xyXG4gICAgICB2ZXJzaW9uOiB2YWxpZGF0b3JzLnZlcnNpb24oc3RyaWN0Q2hlY2spLFxyXG4gICAgICBjZG5Vcmw6IHZhbGlkYXRvcnMuY2RuVXJsKHN0cmljdENoZWNrKSxcclxuICAgICAgZm9yY2VGZXRjaDogdmFsaWRhdG9ycy5mb3JjZUZldGNoKHN0cmljdENoZWNrKSxcclxuICAgICAgY2FjaGVQYXRoOiB2YWxpZGF0b3JzLmNhY2hlUGF0aChzdHJpY3RDaGVjayksXHJcbiAgICAgIGNvcmVTY3JpcHRzOiB2YWxpZGF0b3JzLmNvcmVTY3JpcHRzKHN0cmljdENoZWNrKSxcclxuICAgICAgbW9kdWxlU2NyaXB0czogdmFsaWRhdG9ycy5tb2R1bGVTY3JpcHRzKHN0cmljdENoZWNrKSxcclxuICAgICAgaW5kaWNhdG9yU2NyaXB0czogdmFsaWRhdG9ycy5pbmRpY2F0b3JTY3JpcHRzKHN0cmljdENoZWNrKSxcclxuICAgICAgY3VzdG9tU2NyaXB0czogdmFsaWRhdG9ycy5jdXN0b21TY3JpcHRzKHN0cmljdENoZWNrKVxyXG4gICAgfSlcclxuICAgIC5wYXJ0aWFsKCk7XHJcblxyXG4vLyBTY2hlbWEgZm9yIHRoZSBleHBvcnQgc2VjdGlvbiBvZiBvcHRpb25zXHJcbmNvbnN0IEV4cG9ydFNjaGVtYSA9IChzdHJpY3RDaGVjaykgPT5cclxuICB6XHJcbiAgICAub2JqZWN0KHtcclxuICAgICAgaW5maWxlOiB2YWxpZGF0b3JzLmluZmlsZShzdHJpY3RDaGVjayksXHJcbiAgICAgIGluc3RyOiB2YWxpZGF0b3JzLmluc3RyKCksXHJcbiAgICAgIG9wdGlvbnM6IHZhbGlkYXRvcnMub3B0aW9ucygpLFxyXG4gICAgICBzdmc6IHZhbGlkYXRvcnMuc3ZnKCksXHJcbiAgICAgIG91dGZpbGU6IHZhbGlkYXRvcnMub3V0ZmlsZShzdHJpY3RDaGVjayksXHJcbiAgICAgIHR5cGU6IHZhbGlkYXRvcnMudHlwZShzdHJpY3RDaGVjayksXHJcbiAgICAgIGNvbnN0cjogdmFsaWRhdG9ycy5jb25zdHIoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBiNjQ6IHZhbGlkYXRvcnMuYjY0KHN0cmljdENoZWNrKSxcclxuICAgICAgbm9Eb3dubG9hZDogdmFsaWRhdG9ycy5ub0Rvd25sb2FkKHN0cmljdENoZWNrKSxcclxuICAgICAgZGVmYXVsdEhlaWdodDogdmFsaWRhdG9ycy5kZWZhdWx0SGVpZ2h0KHN0cmljdENoZWNrKSxcclxuICAgICAgZGVmYXVsdFdpZHRoOiB2YWxpZGF0b3JzLmRlZmF1bHRXaWR0aChzdHJpY3RDaGVjayksXHJcbiAgICAgIGRlZmF1bHRTY2FsZTogdmFsaWRhdG9ycy5kZWZhdWx0U2NhbGUoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBoZWlnaHQ6IHZhbGlkYXRvcnMuaGVpZ2h0KHN0cmljdENoZWNrKSxcclxuICAgICAgd2lkdGg6IHZhbGlkYXRvcnMud2lkdGgoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBzY2FsZTogdmFsaWRhdG9ycy5zY2FsZShzdHJpY3RDaGVjayksXHJcbiAgICAgIGdsb2JhbE9wdGlvbnM6IHZhbGlkYXRvcnMuZ2xvYmFsT3B0aW9ucygpLFxyXG4gICAgICB0aGVtZU9wdGlvbnM6IHZhbGlkYXRvcnMudGhlbWVPcHRpb25zKCksXHJcbiAgICAgIGJhdGNoOiB2YWxpZGF0b3JzLmJhdGNoKGZhbHNlKSxcclxuICAgICAgcmFzdGVyaXphdGlvblRpbWVvdXQ6IHZhbGlkYXRvcnMucmFzdGVyaXphdGlvblRpbWVvdXQoc3RyaWN0Q2hlY2spXHJcbiAgICB9KVxyXG4gICAgLnBhcnRpYWwoKTtcclxuXHJcbi8vIFNjaGVtYSBmb3IgdGhlIGN1c3RvbUxvZ2ljIHNlY3Rpb24gb2Ygb3B0aW9uc1xyXG5jb25zdCBDdXN0b21Mb2dpY1NjaGVtYSA9IChzdHJpY3RDaGVjaykgPT5cclxuICB6XHJcbiAgICAub2JqZWN0KHtcclxuICAgICAgYWxsb3dDb2RlRXhlY3V0aW9uOiB2YWxpZGF0b3JzLmFsbG93Q29kZUV4ZWN1dGlvbihzdHJpY3RDaGVjayksXHJcbiAgICAgIGFsbG93RmlsZVJlc291cmNlczogdmFsaWRhdG9ycy5hbGxvd0ZpbGVSZXNvdXJjZXMoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBjdXN0b21Db2RlOiB2YWxpZGF0b3JzLmN1c3RvbUNvZGUoZmFsc2UpLFxyXG4gICAgICBjYWxsYmFjazogdmFsaWRhdG9ycy5jYWxsYmFjayhmYWxzZSksXHJcbiAgICAgIHJlc291cmNlczogdmFsaWRhdG9ycy5yZXNvdXJjZXMoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBsb2FkQ29uZmlnOiB2YWxpZGF0b3JzLmxvYWRDb25maWcoZmFsc2UpLFxyXG4gICAgICBjcmVhdGVDb25maWc6IHZhbGlkYXRvcnMuY3JlYXRlQ29uZmlnKGZhbHNlKVxyXG4gICAgfSlcclxuICAgIC5wYXJ0aWFsKCk7XHJcblxyXG4vLyBTY2hlbWEgZm9yIHRoZSBzZXJ2ZXIucHJveHkgc2VjdGlvbiBvZiBvcHRpb25zXHJcbmNvbnN0IFByb3h5U2NoZW1hID0gKHN0cmljdENoZWNrKSA9PlxyXG4gIHpcclxuICAgIC5vYmplY3Qoe1xyXG4gICAgICBob3N0OiB2YWxpZGF0b3JzLnByb3h5SG9zdChmYWxzZSksXHJcbiAgICAgIHBvcnQ6IHZhbGlkYXRvcnMucHJveHlQb3J0KHN0cmljdENoZWNrKSxcclxuICAgICAgdGltZW91dDogdmFsaWRhdG9ycy5wcm94eVRpbWVvdXQoc3RyaWN0Q2hlY2spXHJcbiAgICB9KVxyXG4gICAgLnBhcnRpYWwoKTtcclxuXHJcbi8vIFNjaGVtYSBmb3IgdGhlIHNlcnZlci5yYXRlTGltaXRpbmcgc2VjdGlvbiBvZiBvcHRpb25zXHJcbmNvbnN0IFJhdGVMaW1pdGluZ1NjaGVtYSA9IChzdHJpY3RDaGVjaykgPT5cclxuICB6XHJcbiAgICAub2JqZWN0KHtcclxuICAgICAgZW5hYmxlOiB2YWxpZGF0b3JzLmVuYWJsZVJhdGVMaW1pdGluZyhzdHJpY3RDaGVjayksXHJcbiAgICAgIG1heFJlcXVlc3RzOiB2YWxpZGF0b3JzLm1heFJlcXVlc3RzKHN0cmljdENoZWNrKSxcclxuICAgICAgd2luZG93OiB2YWxpZGF0b3JzLndpbmRvdyhzdHJpY3RDaGVjayksXHJcbiAgICAgIGRlbGF5OiB2YWxpZGF0b3JzLmRlbGF5KHN0cmljdENoZWNrKSxcclxuICAgICAgdHJ1c3RQcm94eTogdmFsaWRhdG9ycy50cnVzdFByb3h5KHN0cmljdENoZWNrKSxcclxuICAgICAgc2tpcEtleTogdmFsaWRhdG9ycy5za2lwS2V5KGZhbHNlKSxcclxuICAgICAgc2tpcFRva2VuOiB2YWxpZGF0b3JzLnNraXBUb2tlbihmYWxzZSlcclxuICAgIH0pXHJcbiAgICAucGFydGlhbCgpO1xyXG5cclxuLy8gU2NoZW1hIGZvciB0aGUgc2VydmVyLnNzbCBzZWN0aW9uIG9mIG9wdGlvbnNcclxuY29uc3QgU3NsU2NoZW1hID0gKHN0cmljdENoZWNrKSA9PlxyXG4gIHpcclxuICAgIC5vYmplY3Qoe1xyXG4gICAgICBlbmFibGU6IHZhbGlkYXRvcnMuZW5hYmxlU3NsKHN0cmljdENoZWNrKSxcclxuICAgICAgZm9yY2U6IHZhbGlkYXRvcnMuc3NsRm9yY2Uoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBwb3J0OiB2YWxpZGF0b3JzLnNzbFBvcnQoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBjZXJ0UGF0aDogdmFsaWRhdG9ycy5zc2xDZXJ0UGF0aChmYWxzZSlcclxuICAgIH0pXHJcbiAgICAucGFydGlhbCgpO1xyXG5cclxuLy8gU2NoZW1hIGZvciB0aGUgc2VydmVyIHNlY3Rpb24gb2Ygb3B0aW9uc1xyXG5jb25zdCBTZXJ2ZXJTY2hlbWEgPSAoc3RyaWN0Q2hlY2spID0+XHJcbiAgei5vYmplY3Qoe1xyXG4gICAgZW5hYmxlOiB2YWxpZGF0b3JzLmVuYWJsZVNlcnZlcihzdHJpY3RDaGVjaykub3B0aW9uYWwoKSxcclxuICAgIGhvc3Q6IHZhbGlkYXRvcnMuaG9zdChzdHJpY3RDaGVjaykub3B0aW9uYWwoKSxcclxuICAgIHBvcnQ6IHZhbGlkYXRvcnMucG9ydChzdHJpY3RDaGVjaykub3B0aW9uYWwoKSxcclxuICAgIHVwbG9hZExpbWl0OiB2YWxpZGF0b3JzLnVwbG9hZExpbWl0KHN0cmljdENoZWNrKS5vcHRpb25hbCgpLFxyXG4gICAgYmVuY2htYXJraW5nOiB2YWxpZGF0b3JzLnNlcnZlckJlbmNobWFya2luZyhzdHJpY3RDaGVjaykub3B0aW9uYWwoKSxcclxuICAgIHByb3h5OiBQcm94eVNjaGVtYShzdHJpY3RDaGVjaykub3B0aW9uYWwoKSxcclxuICAgIHJhdGVMaW1pdGluZzogUmF0ZUxpbWl0aW5nU2NoZW1hKHN0cmljdENoZWNrKS5vcHRpb25hbCgpLFxyXG4gICAgc3NsOiBTc2xTY2hlbWEoc3RyaWN0Q2hlY2spLm9wdGlvbmFsKClcclxuICB9KTtcclxuXHJcbi8vIFNjaGVtYSBmb3IgdGhlIHBvb2wgc2VjdGlvbiBvZiBvcHRpb25zXHJcbmNvbnN0IFBvb2xTY2hlbWEgPSAoc3RyaWN0Q2hlY2spID0+XHJcbiAgelxyXG4gICAgLm9iamVjdCh7XHJcbiAgICAgIG1pbldvcmtlcnM6IHZhbGlkYXRvcnMubWluV29ya2VycyhzdHJpY3RDaGVjayksXHJcbiAgICAgIG1heFdvcmtlcnM6IHZhbGlkYXRvcnMubWF4V29ya2VycyhzdHJpY3RDaGVjayksXHJcbiAgICAgIHdvcmtMaW1pdDogdmFsaWRhdG9ycy53b3JrTGltaXQoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBhY3F1aXJlVGltZW91dDogdmFsaWRhdG9ycy5hY3F1aXJlVGltZW91dChzdHJpY3RDaGVjayksXHJcbiAgICAgIGNyZWF0ZVRpbWVvdXQ6IHZhbGlkYXRvcnMuY3JlYXRlVGltZW91dChzdHJpY3RDaGVjayksXHJcbiAgICAgIGRlc3Ryb3lUaW1lb3V0OiB2YWxpZGF0b3JzLmRlc3Ryb3lUaW1lb3V0KHN0cmljdENoZWNrKSxcclxuICAgICAgaWRsZVRpbWVvdXQ6IHZhbGlkYXRvcnMuaWRsZVRpbWVvdXQoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBjcmVhdGVSZXRyeUludGVydmFsOiB2YWxpZGF0b3JzLmNyZWF0ZVJldHJ5SW50ZXJ2YWwoc3RyaWN0Q2hlY2spLFxyXG4gICAgICByZWFwZXJJbnRlcnZhbDogdmFsaWRhdG9ycy5yZWFwZXJJbnRlcnZhbChzdHJpY3RDaGVjayksXHJcbiAgICAgIGJlbmNobWFya2luZzogdmFsaWRhdG9ycy5wb29sQmVuY2htYXJraW5nKHN0cmljdENoZWNrKVxyXG4gICAgfSlcclxuICAgIC5wYXJ0aWFsKCk7XHJcblxyXG4vLyBTY2hlbWEgZm9yIHRoZSBsb2dnaW5nIHNlY3Rpb24gb2Ygb3B0aW9uc1xyXG5jb25zdCBMb2dnaW5nU2NoZW1hID0gKHN0cmljdENoZWNrKSA9PlxyXG4gIHpcclxuICAgIC5vYmplY3Qoe1xyXG4gICAgICBsZXZlbDogdmFsaWRhdG9ycy5sb2dMZXZlbChzdHJpY3RDaGVjayksXHJcbiAgICAgIGZpbGU6IHZhbGlkYXRvcnMubG9nRmlsZShzdHJpY3RDaGVjayksXHJcbiAgICAgIGRlc3Q6IHZhbGlkYXRvcnMubG9nRGVzdChzdHJpY3RDaGVjayksXHJcbiAgICAgIHRvQ29uc29sZTogdmFsaWRhdG9ycy5sb2dUb0NvbnNvbGUoc3RyaWN0Q2hlY2spLFxyXG4gICAgICB0b0ZpbGU6IHZhbGlkYXRvcnMubG9nVG9GaWxlKHN0cmljdENoZWNrKVxyXG4gICAgfSlcclxuICAgIC5wYXJ0aWFsKCk7XHJcblxyXG4vLyBTY2hlbWEgZm9yIHRoZSB1aSBzZWN0aW9uIG9mIG9wdGlvbnNcclxuY29uc3QgVWlTY2hlbWEgPSAoc3RyaWN0Q2hlY2spID0+XHJcbiAgelxyXG4gICAgLm9iamVjdCh7XHJcbiAgICAgIGVuYWJsZTogdmFsaWRhdG9ycy5lbmFibGVVaShzdHJpY3RDaGVjayksXHJcbiAgICAgIHJvdXRlOiB2YWxpZGF0b3JzLnVpUm91dGUoc3RyaWN0Q2hlY2spXHJcbiAgICB9KVxyXG4gICAgLnBhcnRpYWwoKTtcclxuXHJcbi8vIFNjaGVtYSBmb3IgdGhlIG90aGVyIHNlY3Rpb24gb2Ygb3B0aW9uc1xyXG5jb25zdCBPdGhlclNjaGVtYSA9IChzdHJpY3RDaGVjaykgPT5cclxuICB6XHJcbiAgICAub2JqZWN0KHtcclxuICAgICAgbm9kZUVudjogdmFsaWRhdG9ycy5ub2RlRW52KHN0cmljdENoZWNrKSxcclxuICAgICAgbGlzdGVuVG9Qcm9jZXNzRXhpdHM6IHZhbGlkYXRvcnMubGlzdGVuVG9Qcm9jZXNzRXhpdHMoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBub0xvZ286IHZhbGlkYXRvcnMubm9Mb2dvKHN0cmljdENoZWNrKSxcclxuICAgICAgaGFyZFJlc2V0UGFnZTogdmFsaWRhdG9ycy5oYXJkUmVzZXRQYWdlKHN0cmljdENoZWNrKSxcclxuICAgICAgYnJvd3NlclNoZWxsTW9kZTogdmFsaWRhdG9ycy5icm93c2VyU2hlbGxNb2RlKHN0cmljdENoZWNrKSxcclxuICAgICAgdmFsaWRhdGlvbjogdmFsaWRhdG9ycy52YWxpZGF0aW9uKHN0cmljdENoZWNrKVxyXG4gICAgfSlcclxuICAgIC5wYXJ0aWFsKCk7XHJcblxyXG4vLyBTY2hlbWEgZm9yIHRoZSBkZWJ1ZyBzZWN0aW9uIG9mIG9wdGlvbnNcclxuY29uc3QgRGVidWdTY2hlbWEgPSAoc3RyaWN0Q2hlY2spID0+XHJcbiAgelxyXG4gICAgLm9iamVjdCh7XHJcbiAgICAgIGVuYWJsZTogdmFsaWRhdG9ycy5lbmFibGVEZWJ1ZyhzdHJpY3RDaGVjayksXHJcbiAgICAgIGhlYWRsZXNzOiB2YWxpZGF0b3JzLmhlYWRsZXNzKHN0cmljdENoZWNrKSxcclxuICAgICAgZGV2dG9vbHM6IHZhbGlkYXRvcnMuZGV2dG9vbHMoc3RyaWN0Q2hlY2spLFxyXG4gICAgICBsaXN0ZW5Ub0NvbnNvbGU6IHZhbGlkYXRvcnMubGlzdGVuVG9Db25zb2xlKHN0cmljdENoZWNrKSxcclxuICAgICAgZHVtcGlvOiB2YWxpZGF0b3JzLmR1bXBpbyhzdHJpY3RDaGVjayksXHJcbiAgICAgIHNsb3dNbzogdmFsaWRhdG9ycy5zbG93TW8oc3RyaWN0Q2hlY2spLFxyXG4gICAgICBkZWJ1Z2dpbmdQb3J0OiB2YWxpZGF0b3JzLmRlYnVnZ2luZ1BvcnQoc3RyaWN0Q2hlY2spXHJcbiAgICB9KVxyXG4gICAgLnBhcnRpYWwoKTtcclxuXHJcbi8vIFN0cmljdCBzY2hlbWEgZm9yIHRoZSBjb25maWdcclxuZXhwb3J0IGNvbnN0IFN0cmljdENvbmZpZ1NjaGVtYSA9IHoub2JqZWN0KHtcclxuICByZXF1ZXN0SWQ6IHZhbGlkYXRvcnMucmVxdWVzdElkKCksXHJcbiAgcHVwcGV0ZWVyOiBQdXBwZXRlZXJTY2hlbWEodHJ1ZSksXHJcbiAgaGlnaGNoYXJ0czogSGlnaGNoYXJ0c1NjaGVtYSh0cnVlKSxcclxuICBleHBvcnQ6IEV4cG9ydFNjaGVtYSh0cnVlKSxcclxuICBjdXN0b21Mb2dpYzogQ3VzdG9tTG9naWNTY2hlbWEodHJ1ZSksXHJcbiAgc2VydmVyOiBTZXJ2ZXJTY2hlbWEodHJ1ZSksXHJcbiAgcG9vbDogUG9vbFNjaGVtYSh0cnVlKSxcclxuICBsb2dnaW5nOiBMb2dnaW5nU2NoZW1hKHRydWUpLFxyXG4gIHVpOiBVaVNjaGVtYSh0cnVlKSxcclxuICBvdGhlcjogT3RoZXJTY2hlbWEodHJ1ZSksXHJcbiAgZGVidWc6IERlYnVnU2NoZW1hKHRydWUpXHJcbn0pO1xyXG5cclxuLy8gTG9vc2Ugc2NoZW1hIGZvciB0aGUgY29uZmlnXHJcbmV4cG9ydCBjb25zdCBMb29zZUNvbmZpZ1NjaGVtYSA9IHoub2JqZWN0KHtcclxuICByZXF1ZXN0SWQ6IHZhbGlkYXRvcnMucmVxdWVzdElkKCksXHJcbiAgcHVwcGV0ZWVyOiBQdXBwZXRlZXJTY2hlbWEoZmFsc2UpLFxyXG4gIGhpZ2hjaGFydHM6IEhpZ2hjaGFydHNTY2hlbWEoZmFsc2UpLFxyXG4gIGV4cG9ydDogRXhwb3J0U2NoZW1hKGZhbHNlKSxcclxuICBjdXN0b21Mb2dpYzogQ3VzdG9tTG9naWNTY2hlbWEoZmFsc2UpLFxyXG4gIHNlcnZlcjogU2VydmVyU2NoZW1hKGZhbHNlKSxcclxuICBwb29sOiBQb29sU2NoZW1hKGZhbHNlKSxcclxuICBsb2dnaW5nOiBMb2dnaW5nU2NoZW1hKGZhbHNlKSxcclxuICB1aTogVWlTY2hlbWEoZmFsc2UpLFxyXG4gIG90aGVyOiBPdGhlclNjaGVtYShmYWxzZSksXHJcbiAgZGVidWc6IERlYnVnU2NoZW1hKGZhbHNlKVxyXG59KTtcclxuXHJcbi8vIFNjaGVtYSBmb3IgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcyBjb25maWdcclxuZXhwb3J0IGNvbnN0IEVudlNjaGVtYSA9IHoub2JqZWN0KHtcclxuICAvLyBwdXBwZXRlZXJcclxuICBQVVBQRVRFRVJfQVJHUzogdmFsaWRhdG9ycy5hcmdzKGZhbHNlKSxcclxuXHJcbiAgLy8gaGlnaGNoYXJ0c1xyXG4gIEhJR0hDSEFSVFNfVkVSU0lPTjogdmFsaWRhdG9ycy52ZXJzaW9uKGZhbHNlKSxcclxuICBISUdIQ0hBUlRTX0NETl9VUkw6IHZhbGlkYXRvcnMuY2RuVXJsKGZhbHNlKSxcclxuICBISUdIQ0hBUlRTX0ZPUkNFX0ZFVENIOiB2YWxpZGF0b3JzLmZvcmNlRmV0Y2goZmFsc2UpLFxyXG4gIEhJR0hDSEFSVFNfQ0FDSEVfUEFUSDogdmFsaWRhdG9ycy5jYWNoZVBhdGgoZmFsc2UpLFxyXG4gIEhJR0hDSEFSVFNfQURNSU5fVE9LRU46IHZhbGlkYXRvcnMuYWRtaW5Ub2tlbihmYWxzZSksXHJcbiAgSElHSENIQVJUU19DT1JFX1NDUklQVFM6IHZhbGlkYXRvcnMuY29yZVNjcmlwdHMoZmFsc2UpLFxyXG4gIEhJR0hDSEFSVFNfTU9EVUxFX1NDUklQVFM6IHZhbGlkYXRvcnMubW9kdWxlU2NyaXB0cyhmYWxzZSksXHJcbiAgSElHSENIQVJUU19JTkRJQ0FUT1JfU0NSSVBUUzogdmFsaWRhdG9ycy5pbmRpY2F0b3JTY3JpcHRzKGZhbHNlKSxcclxuICBISUdIQ0hBUlRTX0NVU1RPTV9TQ1JJUFRTOiB2YWxpZGF0b3JzLmN1c3RvbVNjcmlwdHMoZmFsc2UpLFxyXG5cclxuICAvLyBleHBvcnRcclxuICBFWFBPUlRfSU5GSUxFOiB2YWxpZGF0b3JzLmluZmlsZShmYWxzZSksXHJcbiAgRVhQT1JUX0lOU1RSOiB2YWxpZGF0b3JzLmluc3RyKCksXHJcbiAgRVhQT1JUX09QVElPTlM6IHZhbGlkYXRvcnMub3B0aW9ucygpLFxyXG4gIEVYUE9SVF9TVkc6IHZhbGlkYXRvcnMuc3ZnKCksXHJcbiAgRVhQT1JUX0JBVENIOiB2YWxpZGF0b3JzLmJhdGNoKGZhbHNlKSxcclxuICBFWFBPUlRfT1VURklMRTogdmFsaWRhdG9ycy5vdXRmaWxlKGZhbHNlKSxcclxuICBFWFBPUlRfVFlQRTogdmFsaWRhdG9ycy50eXBlKGZhbHNlKSxcclxuICBFWFBPUlRfQ09OU1RSOiB2YWxpZGF0b3JzLmNvbnN0cihmYWxzZSksXHJcbiAgRVhQT1JUX0I2NDogdmFsaWRhdG9ycy5iNjQoZmFsc2UpLFxyXG4gIEVYUE9SVF9OT19ET1dOTE9BRDogdmFsaWRhdG9ycy5ub0Rvd25sb2FkKGZhbHNlKSxcclxuICBFWFBPUlRfSEVJR0hUOiB2YWxpZGF0b3JzLmhlaWdodChmYWxzZSksXHJcbiAgRVhQT1JUX1dJRFRIOiB2YWxpZGF0b3JzLndpZHRoKGZhbHNlKSxcclxuICBFWFBPUlRfU0NBTEU6IHZhbGlkYXRvcnMuc2NhbGUoZmFsc2UpLFxyXG4gIEVYUE9SVF9ERUZBVUxUX0hFSUdIVDogdmFsaWRhdG9ycy5kZWZhdWx0SGVpZ2h0KGZhbHNlKSxcclxuICBFWFBPUlRfREVGQVVMVF9XSURUSDogdmFsaWRhdG9ycy5kZWZhdWx0V2lkdGgoZmFsc2UpLFxyXG4gIEVYUE9SVF9ERUZBVUxUX1NDQUxFOiB2YWxpZGF0b3JzLmRlZmF1bHRTY2FsZShmYWxzZSksXHJcbiAgRVhQT1JUX0dMT0JBTF9PUFRJT05TOiB2YWxpZGF0b3JzLmdsb2JhbE9wdGlvbnMoKSxcclxuICBFWFBPUlRfVEhFTUVfT1BUSU9OUzogdmFsaWRhdG9ycy50aGVtZU9wdGlvbnMoKSxcclxuICBFWFBPUlRfUkFTVEVSSVpBVElPTl9USU1FT1VUOiB2YWxpZGF0b3JzLnJhc3Rlcml6YXRpb25UaW1lb3V0KGZhbHNlKSxcclxuXHJcbiAgLy8gY3VzdG9tXHJcbiAgQ1VTVE9NX0xPR0lDX0FMTE9XX0NPREVfRVhFQ1VUSU9OOiB2YWxpZGF0b3JzLmFsbG93Q29kZUV4ZWN1dGlvbihmYWxzZSksXHJcbiAgQ1VTVE9NX0xPR0lDX0FMTE9XX0ZJTEVfUkVTT1VSQ0VTOiB2YWxpZGF0b3JzLmFsbG93RmlsZVJlc291cmNlcyhmYWxzZSksXHJcbiAgQ1VTVE9NX0xPR0lDX0NVU1RPTV9DT0RFOiB2YWxpZGF0b3JzLmN1c3RvbUNvZGUoZmFsc2UpLFxyXG4gIENVU1RPTV9MT0dJQ19DQUxMQkFDSzogdmFsaWRhdG9ycy5jYWxsYmFjayhmYWxzZSksXHJcbiAgQ1VTVE9NX0xPR0lDX1JFU09VUkNFUzogdmFsaWRhdG9ycy5yZXNvdXJjZXMoZmFsc2UpLFxyXG4gIENVU1RPTV9MT0dJQ19MT0FEX0NPTkZJRzogdmFsaWRhdG9ycy5sb2FkQ29uZmlnKGZhbHNlKSxcclxuICBDVVNUT01fTE9HSUNfQ1JFQVRFX0NPTkZJRzogdmFsaWRhdG9ycy5jcmVhdGVDb25maWcoZmFsc2UpLFxyXG5cclxuICAvLyBzZXJ2ZXJcclxuICBTRVJWRVJfRU5BQkxFOiB2YWxpZGF0b3JzLmVuYWJsZVNlcnZlcihmYWxzZSksXHJcbiAgU0VSVkVSX0hPU1Q6IHZhbGlkYXRvcnMuaG9zdChmYWxzZSksXHJcbiAgU0VSVkVSX1BPUlQ6IHZhbGlkYXRvcnMucG9ydChmYWxzZSksXHJcbiAgU0VSVkVSX1VQTE9BRF9MSU1JVDogdmFsaWRhdG9ycy51cGxvYWRMaW1pdChmYWxzZSksXHJcbiAgU0VSVkVSX0JFTkNITUFSS0lORzogdmFsaWRhdG9ycy5zZXJ2ZXJCZW5jaG1hcmtpbmcoZmFsc2UpLFxyXG5cclxuICAvLyBzZXJ2ZXIgcHJveHlcclxuICBTRVJWRVJfUFJPWFlfSE9TVDogdmFsaWRhdG9ycy5wcm94eUhvc3QoZmFsc2UpLFxyXG4gIFNFUlZFUl9QUk9YWV9QT1JUOiB2YWxpZGF0b3JzLnByb3h5UG9ydChmYWxzZSksXHJcbiAgU0VSVkVSX1BST1hZX1RJTUVPVVQ6IHZhbGlkYXRvcnMucHJveHlUaW1lb3V0KGZhbHNlKSxcclxuXHJcbiAgLy8gc2VydmVyIHJhdGUgbGltaXRpbmdcclxuICBTRVJWRVJfUkFURV9MSU1JVElOR19FTkFCTEU6IHZhbGlkYXRvcnMuZW5hYmxlUmF0ZUxpbWl0aW5nKGZhbHNlKSxcclxuICBTRVJWRVJfUkFURV9MSU1JVElOR19NQVhfUkVRVUVTVFM6IHZhbGlkYXRvcnMubWF4UmVxdWVzdHMoZmFsc2UpLFxyXG4gIFNFUlZFUl9SQVRFX0xJTUlUSU5HX1dJTkRPVzogdmFsaWRhdG9ycy53aW5kb3coZmFsc2UpLFxyXG4gIFNFUlZFUl9SQVRFX0xJTUlUSU5HX0RFTEFZOiB2YWxpZGF0b3JzLmRlbGF5KGZhbHNlKSxcclxuICBTRVJWRVJfUkFURV9MSU1JVElOR19UUlVTVF9QUk9YWTogdmFsaWRhdG9ycy50cnVzdFByb3h5KGZhbHNlKSxcclxuICBTRVJWRVJfUkFURV9MSU1JVElOR19TS0lQX0tFWTogdmFsaWRhdG9ycy5za2lwS2V5KGZhbHNlKSxcclxuICBTRVJWRVJfUkFURV9MSU1JVElOR19TS0lQX1RPS0VOOiB2YWxpZGF0b3JzLnNraXBUb2tlbihmYWxzZSksXHJcblxyXG4gIC8vIHNlcnZlciBzc2xcclxuICBTRVJWRVJfU1NMX0VOQUJMRTogdmFsaWRhdG9ycy5lbmFibGVTc2woZmFsc2UpLFxyXG4gIFNFUlZFUl9TU0xfRk9SQ0U6IHZhbGlkYXRvcnMuc3NsRm9yY2UoZmFsc2UpLFxyXG4gIFNFUlZFUl9TU0xfUE9SVDogdmFsaWRhdG9ycy5zc2xQb3J0KGZhbHNlKSxcclxuICBTRVJWRVJfU1NMX0NFUlRfUEFUSDogdmFsaWRhdG9ycy5zc2xDZXJ0UGF0aChmYWxzZSksXHJcblxyXG4gIC8vIHBvb2xcclxuICBQT09MX01JTl9XT1JLRVJTOiB2YWxpZGF0b3JzLm1pbldvcmtlcnMoZmFsc2UpLFxyXG4gIFBPT0xfTUFYX1dPUktFUlM6IHZhbGlkYXRvcnMubWF4V29ya2VycyhmYWxzZSksXHJcbiAgUE9PTF9XT1JLX0xJTUlUOiB2YWxpZGF0b3JzLndvcmtMaW1pdChmYWxzZSksXHJcbiAgUE9PTF9BQ1FVSVJFX1RJTUVPVVQ6IHZhbGlkYXRvcnMuYWNxdWlyZVRpbWVvdXQoZmFsc2UpLFxyXG4gIFBPT0xfQ1JFQVRFX1RJTUVPVVQ6IHZhbGlkYXRvcnMuY3JlYXRlVGltZW91dChmYWxzZSksXHJcbiAgUE9PTF9ERVNUUk9ZX1RJTUVPVVQ6IHZhbGlkYXRvcnMuZGVzdHJveVRpbWVvdXQoZmFsc2UpLFxyXG4gIFBPT0xfSURMRV9USU1FT1VUOiB2YWxpZGF0b3JzLmlkbGVUaW1lb3V0KGZhbHNlKSxcclxuICBQT09MX0NSRUFURV9SRVRSWV9JTlRFUlZBTDogdmFsaWRhdG9ycy5jcmVhdGVSZXRyeUludGVydmFsKGZhbHNlKSxcclxuICBQT09MX1JFQVBFUl9JTlRFUlZBTDogdmFsaWRhdG9ycy5yZWFwZXJJbnRlcnZhbChmYWxzZSksXHJcbiAgUE9PTF9CRU5DSE1BUktJTkc6IHZhbGlkYXRvcnMucG9vbEJlbmNobWFya2luZyhmYWxzZSksXHJcblxyXG4gIC8vIGxvZ2dpbmdcclxuICBMT0dHSU5HX0xFVkVMOiB2YWxpZGF0b3JzLmxvZ0xldmVsKGZhbHNlKSxcclxuICBMT0dHSU5HX0ZJTEU6IHZhbGlkYXRvcnMubG9nRmlsZShmYWxzZSksXHJcbiAgTE9HR0lOR19ERVNUOiB2YWxpZGF0b3JzLmxvZ0Rlc3QoZmFsc2UpLFxyXG4gIExPR0dJTkdfVE9fQ09OU09MRTogdmFsaWRhdG9ycy5sb2dUb0NvbnNvbGUoZmFsc2UpLFxyXG4gIExPR0dJTkdfVE9fRklMRTogdmFsaWRhdG9ycy5sb2dUb0ZpbGUoZmFsc2UpLFxyXG5cclxuICAvLyB1aVxyXG4gIFVJX0VOQUJMRTogdmFsaWRhdG9ycy5lbmFibGVVaShmYWxzZSksXHJcbiAgVUlfUk9VVEU6IHZhbGlkYXRvcnMudWlSb3V0ZShmYWxzZSksXHJcblxyXG4gIC8vIG90aGVyXHJcbiAgT1RIRVJfTk9ERV9FTlY6IHZhbGlkYXRvcnMubm9kZUVudihmYWxzZSksXHJcbiAgT1RIRVJfTElTVEVOX1RPX1BST0NFU1NfRVhJVFM6IHZhbGlkYXRvcnMubGlzdGVuVG9Qcm9jZXNzRXhpdHMoZmFsc2UpLFxyXG4gIE9USEVSX05PX0xPR086IHZhbGlkYXRvcnMubm9Mb2dvKGZhbHNlKSxcclxuICBPVEhFUl9IQVJEX1JFU0VUX1BBR0U6IHZhbGlkYXRvcnMuaGFyZFJlc2V0UGFnZShmYWxzZSksXHJcbiAgT1RIRVJfQlJPV1NFUl9TSEVMTF9NT0RFOiB2YWxpZGF0b3JzLmJyb3dzZXJTaGVsbE1vZGUoZmFsc2UpLFxyXG4gIE9USEVSX1ZBTElEQVRJT046IHZhbGlkYXRvcnMudmFsaWRhdGlvbihmYWxzZSksXHJcblxyXG4gIC8vIGRlYnVnZ2VyXHJcbiAgREVCVUdfRU5BQkxFOiB2YWxpZGF0b3JzLmVuYWJsZURlYnVnKGZhbHNlKSxcclxuICBERUJVR19IRUFETEVTUzogdmFsaWRhdG9ycy5oZWFkbGVzcyhmYWxzZSksXHJcbiAgREVCVUdfREVWVE9PTFM6IHZhbGlkYXRvcnMuZGV2dG9vbHMoZmFsc2UpLFxyXG4gIERFQlVHX0xJU1RFTl9UT19DT05TT0xFOiB2YWxpZGF0b3JzLmxpc3RlblRvQ29uc29sZShmYWxzZSksXHJcbiAgREVCVUdfRFVNUElPOiB2YWxpZGF0b3JzLmR1bXBpbyhmYWxzZSksXHJcbiAgREVCVUdfU0xPV19NTzogdmFsaWRhdG9ycy5zbG93TW8oZmFsc2UpLFxyXG4gIERFQlVHX0RFQlVHR0lOR19QT1JUOiB2YWxpZGF0b3JzLmRlYnVnZ2luZ1BvcnQoZmFsc2UpXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIG9wdGlvbnMgdXNpbmcgdGhlIEVudlNjaGVtYS5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHByb2Nlc3MuZW52IC0gVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmcm9tIGVudmlyb25tZW50XHJcbiAqIHZhcmlhYmxlcyBmaWxlIHRvIHZhbGlkYXRlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcGFyc2VkIGFuZCB2YWxpZGF0ZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGVudnMgPSBFbnZTY2hlbWEucGFydGlhbCgpLnBhcnNlKHByb2Nlc3MuZW52KTtcclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB1c2luZyB0aGUgYFN0cmljdENvbmZpZ1NjaGVtYWAuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBzdHJpY3RWYWxpZGF0ZVxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnT3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdmFsaWRhdGUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBwYXJzZWQgYW5kIHZhbGlkYXRlZCBjb25maWd1cmF0aW9uIG9wdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RyaWN0VmFsaWRhdGUoY29uZmlnT3B0aW9ucykge1xyXG4gIHJldHVybiBTdHJpY3RDb25maWdTY2hlbWEucGFydGlhbCgpLnBhcnNlKGNvbmZpZ09wdGlvbnMpO1xyXG59XHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdXNpbmcgdGhlIGBMb29zZUNvbmZpZ1NjaGVtYWAuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBsb29zZVZhbGlkYXRlXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdPcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB2YWxpZGF0ZS5cclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIHBhcnNlZCBhbmQgdmFsaWRhdGVkIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsb29zZVZhbGlkYXRlKGNvbmZpZ09wdGlvbnMpIHtcclxuICByZXR1cm4gTG9vc2VDb25maWdTY2hlbWEucGFydGlhbCgpLnBhcnNlKGNvbmZpZ09wdGlvbnMpO1xyXG59XHJcblxyXG4vKipcclxuICogQ3VzdG9tIGVycm9yIG1hcHBpbmcgZnVuY3Rpb24gZm9yIFpvZCBzY2hlbWEgdmFsaWRhdGlvbi5cclxuICpcclxuICogVGhpcyBmdW5jdGlvbiBjdXN0b21pemVzIHRoZSBlcnJvciBtZXNzYWdlcyBwcm9kdWNlZCBieSBab2Qgc2NoZW1hXHJcbiAqIHZhbGlkYXRpb24sIHByb3ZpZGluZyBtb3JlIHNwZWNpZmljIGFuZCB1c2VyLWZyaWVuZGx5IGZlZWRiYWNrIGJhc2VkIG9uIHRoZVxyXG4gKiBpc3N1ZSB0eXBlIGFuZCBjb250ZXh0LlxyXG4gKlxyXG4gKiBUaGUgZnVuY3Rpb24gbW9kaWZpZXMgdGhlIGVycm9yIG1lc3NhZ2VzIGFzIGZvbGxvd3M6XHJcbiAqXHJcbiAqIC0gRm9yIG1pc3NpbmcgcmVxdWlyZWQgdmFsdWVzICh1bmRlZmluZWQpLCBpdCByZXR1cm5zIGEgbWVzc2FnZSBpbmRpY2F0aW5nXHJcbiAqIHRoYXQgbm8gdmFsdWUgd2FzIHByb3ZpZGVkIGZvciB0aGUgc3BlY2lmaWMgcHJvcGVydHkuXHJcbiAqXHJcbiAqIC0gRm9yIGN1c3RvbSB2YWxpZGF0aW9uIGVycm9ycywgaWYgYSBjdXN0b20gZXJyb3IgbWVzc2FnZSBpcyBwcm92aWRlZCBpbiB0aGVcclxuICogaXNzdWUgcGFyYW1ldGVycywgaXQgaW5jbHVkZXMgdGhpcyBtZXNzYWdlIGFsb25nIHdpdGggdGhlIGludmFsaWQgZGF0YVxyXG4gKiByZWNlaXZlZC5cclxuICpcclxuICogLSBGb3IgYWxsIG90aGVyIGVycm9ycywgaXQgYXBwZW5kcyBwcm9wZXJ0eS1zcGVjaWZpYyBpbmZvcm1hdGlvbiB0byB0aGVcclxuICogZGVmYXVsdCBlcnJvciBtZXNzYWdlIHByb3ZpZGVkIGJ5IFpvZC5cclxuICpcclxuICogQGZ1bmN0aW9uIF9jdXN0b21FcnJvck1hcFxyXG4gKlxyXG4gKiBAcGFyYW0ge3ouWm9kSXNzdWV9IGlzc3VlIC0gVGhlIGlzc3VlIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHZhbGlkYXRpb25cclxuICogZXJyb3IuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0IC0gVGhlIGNvbnRleHQgb2JqZWN0IHByb3ZpZGluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXHJcbiAqIGFib3V0IHRoZSB2YWxpZGF0aW9uIGVycm9yLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgY3VzdG9taXplZCBlcnJvciBtZXNzYWdlLlxyXG4gKi9cclxuZnVuY3Rpb24gX2N1c3RvbUVycm9yTWFwKGlzc3VlLCBjb250ZXh0KSB7XHJcbiAgLy8gR2V0IHRoZSBjaGFpbiBvZiBwcm9wZXJ0aWVzIHdoaWNoIGVycm9yIGRpcmVjdGx5IHJlZmVycyB0b1xyXG4gIGNvbnN0IHByb3BlcnR5TmFtZSA9IGlzc3VlLnBhdGguam9pbignLicpO1xyXG5cclxuICAvLyBDcmVhdGUgdGhlIGZpcnN0IHBhcnQgb2YgdGhlIG1lc3NhZ2UgYWJvdXQgdGhlIHByb3BlcnR5IGluZm9ybWF0aW9uXHJcbiAgY29uc3QgcHJvcGVydHlJbmZvID0gYEludmFsaWQgdmFsdWUgZm9yIHRoZSAke3Byb3BlcnR5TmFtZX1gO1xyXG5cclxuICAvLyBNb2RpZmllZCBtZXNzYWdlIGZvciB0aGUgaW52YWxpZCB0eXBlXHJcbiAgaWYgKGlzc3VlLmNvZGUgPT09IHouWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSkge1xyXG4gICAgLy8gTW9kaWZpZWQgbWVzc2FnZSBmb3IgdGhlIHJlcXVpcmVkIHZhbHVlc1xyXG4gICAgaWYgKGlzc3VlLnJlY2VpdmVkID09PSB6LlpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgbWVzc2FnZTogYCR7cHJvcGVydHlJbmZvfSAtIE5vIHZhbHVlIHdhcyBwcm92aWRlZC5gXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTW9kaWZpZWQgbWVzc2FnZSBmb3IgdGhlIHNwZWNpZmljIGludmFsaWQgdHlwZSB3aGVuIHZhbHVlcyBleGlzdFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbWVzc2FnZTogYCR7cHJvcGVydHlJbmZvfSAtIEludmFsaWQgdHlwZS4gJHtjb250ZXh0LmRlZmF1bHRFcnJvcn0uYFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIE1vZGlmaWVkIG1lc3NhZ2UgZm9yIHRoZSBjdXN0b20gdmFsaWRhdGlvblxyXG4gIGlmIChpc3N1ZS5jb2RlID09PSB6LlpvZElzc3VlQ29kZS5jdXN0b20pIHtcclxuICAgIC8vIElmIHRoZSBjdXN0b20gbWVzc2FnZSBmb3IgZXJyb3IgZXhpc3QsIGluY2x1ZGUgaXRcclxuICAgIGlmIChpc3N1ZS5wYXJhbXM/LmVycm9yTWVzc2FnZSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIG1lc3NhZ2U6IGAke3Byb3BlcnR5SW5mb30gLSAke2lzc3VlLnBhcmFtcz8uZXJyb3JNZXNzYWdlfSwgcmVjZWl2ZWQgJyR7Y29udGV4dC5kYXRhfScuYFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTW9kaWZpZWQgbWVzc2FnZSBmb3IgdGhlIGludmFsaWQgdW5pb24gZXJyb3JcclxuICBpZiAoaXNzdWUuY29kZSA9PT0gei5ab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbikge1xyXG4gICAgLy8gQ3JlYXRlIHRoZSBmaXJzdCBwYXJ0IG9mIHRoZSBtZXNzYWdlIGFib3V0IHRoZSBtdWx0aXBsZSBlcnJvcnNcclxuICAgIGxldCBtZXNzYWdlID0gYE11bHRpcGxlIGVycm9ycyBvY2N1cnJlZCBmb3IgdGhlICR7cHJvcGVydHlOYW1lfTpcXG5gO1xyXG5cclxuICAgIC8vIEN5Y2xlIHRocm91Z2ggYWxsIGVycm9ycyBhbmQgY3JlYXRlIGEgY29ycmVjdCBtZXNzYWdlXHJcbiAgICBpc3N1ZS51bmlvbkVycm9ycy5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xyXG4gICAgICBjb25zdCBpbmRleCA9IHZhbHVlLmlzc3Vlc1swXS5tZXNzYWdlLmluZGV4T2YoJy0nKTtcclxuICAgICAgbWVzc2FnZSArPVxyXG4gICAgICAgIGluZGV4ICE9PSAtMVxyXG4gICAgICAgICAgPyBgJHt2YWx1ZS5pc3N1ZXNbMF0ubWVzc2FnZX1cXG5gLnN1YnN0cmluZyhpbmRleClcclxuICAgICAgICAgIDogYCR7dmFsdWUuaXNzdWVzWzBdLm1lc3NhZ2V9XFxuYDtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFJldHVybiB0aGUgZmluYWwgbWVzc2FnZSBmb3IgdGhlIGludmFsaWQgdW5pb24gZXJyb3JcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG1lc3NhZ2VcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBSZXR1cm4gdGhlIGRlZmF1bHQgZXJyb3IgbWVzc2FnZSwgZXh0ZW5kZWQgYnkgdGhlIGluZm8gYWJvdXQgdGhlIHByb3BlcnR5XHJcbiAgcmV0dXJuIHtcclxuICAgIG1lc3NhZ2U6IGAke3Byb3BlcnR5SW5mb30gLSAke2NvbnRleHQuZGVmYXVsdEVycm9yfS5gXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHZhbGlkYXRvcnMsXHJcbiAgU3RyaWN0Q29uZmlnU2NoZW1hLFxyXG4gIExvb3NlQ29uZmlnU2NoZW1hLFxyXG4gIEVudlNjaGVtYSxcclxuICBlbnZzLFxyXG4gIHN0cmljdFZhbGlkYXRlLFxyXG4gIGxvb3NlVmFsaWRhdGVcclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQSBjdXN0b20gZXJyb3IgY2xhc3MgZm9yIGhhbmRsaW5nIGV4cG9ydC1yZWxhdGVkIGVycm9ycy4gRXh0ZW5kcyB0aGUgbmF0aXZlXHJcbiAqIGBFcnJvcmAgY2xhc3MgdG8gaW5jbHVkZSBhZGRpdGlvbmFsIHByb3BlcnRpZXMgbGlrZSBzdGF0dXMgY29kZSBhbmQgc3RhY2tcclxuICogdHJhY2UgZGV0YWlscy5cclxuICovXHJcbmNsYXNzIEV4cG9ydEVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIGBFeHBvcnRFcnJvcmAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIFRoZSBlcnJvciBtZXNzYWdlIHRvIGJlIGRpc3BsYXllZC5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhdHVzQ29kZSAtIE9wdGlvbmFsIEhUVFAgc3RhdHVzIGNvZGUgYXNzb2NpYXRlZFxyXG4gICAqIHdpdGggdGhlIGVycm9yIChlLmcuLCA0MDAsIDUwMCkuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhdHVzQ29kZSkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgdGhpcy5zdGFja01lc3NhZ2UgPSBtZXNzYWdlO1xyXG5cclxuICAgIGlmIChzdGF0dXNDb2RlKSB7XHJcbiAgICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIG9yIHVwZGF0ZXMgdGhlIEhUVFAgc3RhdHVzIGNvZGUgZm9yIHRoZSBlcnJvci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXNDb2RlIC0gVGhlIEhUVFAgc3RhdHVzIGNvZGUgdG8gYXNzaWduIHRvIHRoZSBlcnJvci5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtFeHBvcnRFcnJvcn0gVGhlIHVwZGF0ZWQgaW5zdGFuY2Ugb2YgdGhlIGBFeHBvcnRFcnJvcmAgY2xhc3MuXHJcbiAgICovXHJcbiAgc2V0U3RhdHVzKHN0YXR1c0NvZGUpIHtcclxuICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIGFkZGl0aW9uYWwgZXJyb3IgZGV0YWlscyBiYXNlZCBvbiBhbiBleGlzdGluZyBlcnJvciBvYmplY3QuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvciAtIEFuIGVycm9yIG9iamVjdCBjb250YWluaW5nIGRldGFpbHMgdG8gcG9wdWxhdGVcclxuICAgKiB0aGUgYEV4cG9ydEVycm9yYCBpbnN0YW5jZS5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtFeHBvcnRFcnJvcn0gVGhlIHVwZGF0ZWQgaW5zdGFuY2Ugb2YgdGhlIGBFeHBvcnRFcnJvcmAgY2xhc3MuXHJcbiAgICovXHJcbiAgc2V0RXJyb3IoZXJyb3IpIHtcclxuICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcclxuXHJcbiAgICBpZiAoZXJyb3IubmFtZSkge1xyXG4gICAgICB0aGlzLm5hbWUgPSBlcnJvci5uYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChlcnJvci5zdGF0dXNDb2RlKSB7XHJcbiAgICAgIHRoaXMuc3RhdHVzQ29kZSA9IGVycm9yLnN0YXR1c0NvZGU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVycm9yLnN0YWNrKSB7XHJcbiAgICAgIHRoaXMuc3RhY2tNZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcclxuICAgICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXhwb3J0RXJyb3I7XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBNYW5hZ2VzIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBIaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXIgYnkgbG9hZGluZ1xyXG4gKiBhbmQgbWVyZ2luZyBvcHRpb25zIGZyb20gbXVsdGlwbGUgc291cmNlcywgc3VjaCBhcyBkZWZhdWx0IHNldHRpbmdzLFxyXG4gKiBlbnZpcm9ubWVudCB2YXJpYWJsZXMsIHVzZXItcHJvdmlkZWQgb3B0aW9ucywgYW5kIGNvbW1hbmQtbGluZSBhcmd1bWVudHMuXHJcbiAqIEVuc3VyZXMgdGhlIGdsb2JhbCBvcHRpb25zIGFyZSB1cC10by1kYXRlIHdpdGggdGhlIGhpZ2hlc3QgcHJpb3JpdHkgdmFsdWVzLlxyXG4gKiBQcm92aWRlcyBmdW5jdGlvbnMgZm9yIGFjY2Vzc2luZyBhbmQgdXBkYXRpbmcgY29uZmlndXJhdGlvbi5cclxuICovXHJcblxyXG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7XHJcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcclxuXHJcbmltcG9ydCB7IGxvZywgbG9nV2l0aFN0YWNrLCBsb2dab2RJc3N1ZXMgfSBmcm9tICcuL2xvZ2dlci5qcyc7XHJcbmltcG9ydCB7IF9fZGlybmFtZSwgZGVlcENvcHksIGdldEFic29sdXRlUGF0aCwgaXNPYmplY3QgfSBmcm9tICcuL3V0aWxzLmpzJztcclxuaW1wb3J0IHtcclxuICBlbnZzLFxyXG4gIGxvb3NlVmFsaWRhdGUsXHJcbiAgc3RyaWN0VmFsaWRhdGUsXHJcbiAgdmFsaWRhdG9yc1xyXG59IGZyb20gJy4vdmFsaWRhdGlvbi5qcyc7XHJcblxyXG5pbXBvcnQgeyBkZWZhdWx0Q29uZmlnLCBhYnNvbHV0ZVByb3BzLCBuZXN0ZWRQcm9wcyB9IGZyb20gJy4vc2NoZW1hcy9jb25maWcuanMnO1xyXG5cclxuaW1wb3J0IEV4cG9ydEVycm9yIGZyb20gJy4vZXJyb3JzL0V4cG9ydEVycm9yLmpzJztcclxuXHJcbi8vIFNldHMgdGhlIGdsb2JhbCBvcHRpb25zIHdpdGggaW5pdGlhbCB2YWx1ZXMgZnJvbSB0aGUgZGVmYXVsdCBjb25maWdcclxuY29uc3QgZ2xvYmFsT3B0aW9ucyA9IF9pbml0T3B0aW9ucyhkZWZhdWx0Q29uZmlnKTtcclxuXHJcbi8qKlxyXG4gKiBSZXRyaWV2ZXMgYSBjb3B5IG9mIHRoZSBnbG9iYWwgb3B0aW9ucyBvYmplY3Qgb3IgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbFxyXG4gKiBvcHRpb25zIG9iamVjdCwgYmFzZWQgb24gdGhlIGBnZXRDb3B5YCBmbGFnLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZ2V0T3B0aW9uc1xyXG4gKlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtnZXRDb3B5PXRydWVdIC0gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIGEgY29waWVkXHJcbiAqIG9iamVjdCBvZiB0aGUgZ2xvYmFsIG9wdGlvbnMgKGB0cnVlYCkgb3IgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvcHRpb25zXHJcbiAqIG9iamVjdCAoYGZhbHNlYCkuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IEEgY29weSBvZiB0aGUgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0LCBvciBhIHJlZmVyZW5jZVxyXG4gKiB0byB0aGUgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wdGlvbnMoZ2V0Q29weSA9IHRydWUpIHtcclxuICByZXR1cm4gZ2V0Q29weSA/IGRlZXBDb3B5KGdsb2JhbE9wdGlvbnMpIDogZ2xvYmFsT3B0aW9ucztcclxufVxyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZXMgZWl0aGVyIGEgY29weSBvZiB0aGUgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0IG9yIGEgcmVmZXJlbmNlXHJcbiAqIHRvIHRoZSBnbG9iYWwgb3B0aW9ucyBvYmplY3QsIGRlcGVuZGluZyBvbiB0aGUgZ2V0Q29weSBmbGFnLCB1c2luZ1xyXG4gKiB0aGUgcHJvdmlkZWQgbmV3T3B0aW9ucywgd2hpY2ggbWF5IG9yIG1heSBub3QgYmUgdmFsaWRhdGVkLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gdXBkYXRlT3B0aW9uc1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gbmV3T3B0aW9ucyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBuZXcgb3B0aW9ucyB0byBiZVxyXG4gKiBtZXJnZWQgaW50byB0aGUgZ2xvYmFsIG9wdGlvbnMuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2dldENvcHk9ZmFsc2VdIC0gRGV0ZXJtaW5lcyB3aGV0aGVyIHRvIG1lcmdlIHRoZSBuZXdcclxuICogb3B0aW9ucyBpbnRvIGEgY29weSBvZiB0aGUgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0IChgdHJ1ZWApIG9yIGRpcmVjdGx5IGludG9cclxuICogdGhlIGdsb2JhbCBvcHRpb25zIG9iamVjdCAoYGZhbHNlYCkuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3N0cmljdENoZWNrPXRydWVdIC0gRGV0ZXJtaW5lcyBpZiBzdHJpY3RlciB2YWxpZGF0aW9uXHJcbiAqIHNob3VsZCBiZSBhcHBsaWVkLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgdHJ1ZWAuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSB1cGRhdGVkIG9wdGlvbnMgb2JqZWN0LCBlaXRoZXIgdGhlIG1vZGlmaWVkIGdsb2JhbFxyXG4gKiBvcHRpb25zIG9yIGEgbW9kaWZpZWQgY29weSwgYmFzZWQgb24gdGhlIHZhbHVlIG9mIGBnZXRDb3B5YC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVPcHRpb25zKG5ld09wdGlvbnMsIGdldENvcHkgPSBmYWxzZSwgc3RyaWN0Q2hlY2sgPSB0cnVlKSB7XHJcbiAgLy8gTWVyZ2UgbmV3IG9wdGlvbnMgdG8gdGhlIGdsb2JhbCBvcHRpb25zIG9yIGl0cyBjb3B5IGFuZCByZXR1cm4gdGhlIHJlc3VsdFxyXG4gIHJldHVybiBfbWVyZ2VPcHRpb25zKFxyXG4gICAgLy8gRmlyc3QsIGdldCB0aGUgb3B0aW9uc1xyXG4gICAgZ2V0T3B0aW9ucyhnZXRDb3B5KSxcclxuICAgIC8vIE5leHQsIHZhbGlkYXRlIHRoZSBuZXcgb3B0aW9uc1xyXG4gICAgdmFsaWRhdGVPcHRpb25zKG5ld09wdGlvbnMsIHN0cmljdENoZWNrKVxyXG4gICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBVcGRhdGVzIHRoZSBnbG9iYWwgb3B0aW9ucyB3aXRoIHZhbHVlcyBwcm92aWRlZCB0aHJvdWdoIHRoZSBDTEksIGtlZXBpbmdcclxuICogdGhlIHByaW5jaXBsZSBvZiBvcHRpb25zIGxvYWQgcHJpb3JpdHkuIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhIGBjbGlBcmdzYFxyXG4gKiBhcnJheSBjb250YWluaW5nIGFyZ3VtZW50cyBmcm9tIHRoZSBDTEksIHdoaWNoIHdpbGwgYmUgdmFsaWRhdGVkIGFuZCBhcHBsaWVkXHJcbiAqIGlmIHByb3ZpZGVkLlxyXG4gKlxyXG4gKiBUaGUgcHJpb3JpdHkgb3JkZXIgZm9yIHNldHRpbmcgdmFsdWVzIGlzOlxyXG4gKlxyXG4gKiAxLiBWYWx1ZXMgZnJvbSBhIGN1c3RvbSBKU09OIGZpbGUgKGxvYWRlZCBieSB0aGUgYC0tbG9hZENvbmZpZ2Agb3B0aW9uKS5cclxuICogMi4gVmFsdWVzIGZyb20gdGhlIGNvbW1hbmQgbGluZSBpbnRlcmZhY2UgKENMSSkuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBzZXRDbGlPcHRpb25zXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IGNsaUFyZ3MgLSBBbiBhcnJheSBvZiBjb21tYW5kIGxpbmUgYXJndW1lbnRzIHVzZWRcclxuICogZm9yIGFkZGl0aW9uYWwgY29uZmlndXJhdGlvbi5cclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIHVwZGF0ZWQgZ2xvYmFsIG9wdGlvbnMgb2JqZWN0LCByZWZsZWN0aW5nIHRoZSBtZXJnZWRcclxuICogY29uZmlndXJhdGlvbiBmcm9tIHNvdXJjZXMgcHJvdmlkZWQgdGhyb3VnaCB0aGUgQ0xJLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldENsaU9wdGlvbnMoY2xpQXJncykge1xyXG4gIC8vIE9ubHkgZm9yIHRoZSBDTEkgdXNhZ2VcclxuICBpZiAoY2xpQXJncyAmJiBBcnJheS5pc0FycmF5KGNsaUFyZ3MpICYmIGNsaUFyZ3MubGVuZ3RoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBHZXQgb3B0aW9ucyBmcm9tIHRoZSBjdXN0b20gSlNPTiBsb2FkZWQgdmlhIHRoZSBgLS1sb2FkQ29uZmlnYFxyXG4gICAgICBjb25zdCBjb25maWdPcHRpb25zID0gX2xvYWRDb25maWdGaWxlKGNsaUFyZ3MpO1xyXG5cclxuICAgICAgLy8gVXBkYXRlIGdsb2JhbCBvcHRpb25zIHdpdGggdmFsaWRhdGVkIHZhbHVlcyBmcm9tIHRoZSBgY29uZmlnT3B0aW9uc2BcclxuICAgICAgdXBkYXRlT3B0aW9ucyhjb25maWdPcHRpb25zKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZygyLCAnW3ZhbGlkYXRpb25dIE5vIG9wdGlvbnMgYWRkZWQgZnJvbSB0aGUgYC0tbG9hZENvbmZpZ2Agb3B0aW9uLicpO1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEdldCBvcHRpb25zIGZyb20gdGhlIENMSVxyXG4gICAgICBjb25zdCBjbGlPcHRpb25zID0gX3BhaXJBcmd1bWVudFZhbHVlKG5lc3RlZFByb3BzLCBjbGlBcmdzKTtcclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBnbG9iYWwgb3B0aW9ucyB3aXRoIHZhbGlkYXRlZCB2YWx1ZXMgZnJvbSB0aGUgYGNsaU9wdGlvbnNgXHJcbiAgICAgIHVwZGF0ZU9wdGlvbnMoY2xpT3B0aW9ucywgZmFsc2UsIGZhbHNlKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZygyLCAnW3ZhbGlkYXRpb25dIE5vIG9wdGlvbnMgYWRkZWQgZnJvbSB0aGUgQ0xJIGFyZ3VtZW50cy4nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJldHVybiByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvcHRpb25zXHJcbiAgcmV0dXJuIGdldE9wdGlvbnMoZmFsc2UpO1xyXG59XHJcblxyXG4vKipcclxuICogTWFwcyBvbGQtc3RydWN0dXJlZCBjb25maWd1cmF0aW9uIG9wdGlvbnMgKFBoYW50b21KUykgdG8gYSBuZXcgZm9ybWF0XHJcbiAqIChQdXBwZXRlZXIpLiBUaGlzIGZ1bmN0aW9uIGNvbnZlcnRzIGZsYXQsIG9sZC1zdHJ1Y3R1cmVkIG9wdGlvbnMgaW50b1xyXG4gKiBhIG5ldywgbmVzdGVkIGNvbmZpZ3VyYXRpb24gZm9ybWF0IGJhc2VkIG9uIGEgcHJlZGVmaW5lZCBtYXBwaW5nXHJcbiAqIChgbmVzdGVkUHJvcHNgKS4gVGhlIG5ldyBmb3JtYXQgaXMgdXNlZCBmb3IgUHVwcGV0ZWVyLCB3aGlsZSB0aGUgb2xkIGZvcm1hdFxyXG4gKiB3YXMgdXNlZCBmb3IgUGhhbnRvbUpTLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gbWFwVG9OZXdPcHRpb25zXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvbGRPcHRpb25zIC0gVGhlIG9sZCwgZmxhdCBjb25maWd1cmF0aW9uIG9wdGlvbnNcclxuICogdG8gYmUgY29udmVydGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBIG5ldyBvYmplY3QgY29udGFpbmluZyBvcHRpb25zIHN0cnVjdHVyZWQgYWNjb3JkaW5nXHJcbiAqIHRvIHRoZSBtYXBwaW5nIGRlZmluZWQgaW4gYG5lc3RlZFByb3BzYCBvciBhbiBlbXB0eSBvYmplY3QgaWYgdGhlIHByb3ZpZGVkXHJcbiAqIGBvbGRPcHRpb25zYCBpcyBub3QgYSBjb3JyZWN0IG9iamVjdC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXBUb05ld09wdGlvbnMob2xkT3B0aW9ucykge1xyXG4gIC8vIEFuIG9iamVjdCBmb3IgdGhlIG5ldyBzdHJ1Y3R1cmVkIG9wdGlvbnNcclxuICBjb25zdCBuZXdPcHRpb25zID0ge307XHJcblxyXG4gIC8vIENoZWNrIGlmIHByb3ZpZGVkIHZhbHVlIGlzIGEgY29ycmVjdCBvYmplY3RcclxuICBpZiAoaXNPYmplY3Qob2xkT3B0aW9ucykpIHtcclxuICAgIC8vIEl0ZXJhdGUgb3ZlciBlYWNoIGtleS12YWx1ZSBwYWlyIGluIHRoZSBvbGQtc3RydWN0dXJlZCBvcHRpb25zXHJcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvbGRPcHRpb25zKSkge1xyXG4gICAgICAvLyBJZiB0aGVyZSBpcyBhIG5lc3RlZCBtYXBwaW5nLCBzcGxpdCBpdCBpbnRvIGEgcHJvcGVydGllcyBjaGFpblxyXG4gICAgICBjb25zdCBwcm9wZXJ0aWVzQ2hhaW4gPSBuZXN0ZWRQcm9wc1trZXldXHJcbiAgICAgICAgPyBuZXN0ZWRQcm9wc1trZXldLnNwbGl0KCcuJylcclxuICAgICAgICA6IFtdO1xyXG5cclxuICAgICAgLy8gSWYgaXQgaXMgdGhlIGxhc3QgcHJvcGVydHkgaW4gdGhlIGNoYWluLCBhc3NpZ24gdGhlIHZhbHVlLCBvdGhlcndpc2UsXHJcbiAgICAgIC8vIGNyZWF0ZSBvciByZXVzZSB0aGUgbmVzdGVkIG9iamVjdFxyXG4gICAgICBwcm9wZXJ0aWVzQ2hhaW4ucmVkdWNlKFxyXG4gICAgICAgIChvYmosIHByb3AsIGluZGV4KSA9PlxyXG4gICAgICAgICAgKG9ialtwcm9wXSA9XHJcbiAgICAgICAgICAgIHByb3BlcnRpZXNDaGFpbi5sZW5ndGggLSAxID09PSBpbmRleCA/IHZhbHVlIDogb2JqW3Byb3BdIHx8IHt9KSxcclxuICAgICAgICBuZXdPcHRpb25zXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGxvZyhcclxuICAgICAgMixcclxuICAgICAgJ1tjb25maWddIE5vIGNvcnJlY3Qgb2JqZWN0IHdpdGggb3B0aW9ucyB3YXMgcHJvdmlkZWQuIFJldHVybmluZyBhbiBlbXB0eSBhcnJheS4nXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gUmV0dXJuIHRoZSBuZXcsIHN0cnVjdHVyZWQgb3B0aW9ucyBvYmplY3RcclxuICByZXR1cm4gbmV3T3B0aW9ucztcclxufVxyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyBhIHNwZWNpZmllZCBvcHRpb24gdXNpbmcgdGhlIGNvcnJlc3BvbmRpbmcgdmFsaWRhdG9yIGZyb20gdGhlXHJcbiAqIGNvbmZpZ3VyYXRpb24gb2JqZWN0LiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBvcHRpb24gaWYgdGhlIHZhbGlkYXRpb25cclxuICogaXMgZGlzYWJsZWQgZ2xvYmFsbHkuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiB2YWxpZGF0ZU9wdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBvcHRpb24gdG8gdmFsaWRhdGUuXHJcbiAqIEBwYXJhbSB7YW55fSBjb25maWdPcHRpb24gLSBUaGUgdmFsdWUgb2YgdGhlIG9wdGlvbiB0byB2YWxpZGF0ZS5cclxuICogQHBhcmFtIHtib29sZWFufSBbc3RyaWN0Q2hlY2s9dHJ1ZV0gLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb25cclxuICogc2hvdWxkIGJlIGFwcGxpZWQuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cclxuICpcclxuICogQHJldHVybnMge2FueX0gVGhlIHBhcnNlZCBhbmQgdmFsaWRhdGVkIHZhbHVlIG9mIHRoZSBvcHRpb24uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPcHRpb24obmFtZSwgY29uZmlnT3B0aW9uLCBzdHJpY3RDaGVjayA9IHRydWUpIHtcclxuICAvLyBSZXR1cm4gdGhlIG9yaWdpbmFsIG9wdGlvbiBpZiB0aGUgdmFsaWRhdGlvbiBpcyBkaXNhYmxlZFxyXG4gIGlmICghZ2V0T3B0aW9ucygpLm90aGVyLnZhbGlkYXRpb24pIHtcclxuICAgIHJldHVybiBjb25maWdPcHRpb247XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgLy8gUmV0dXJuIHZhbGlkYXRlZCBvcHRpb25cclxuICAgIHJldHVybiB2YWxpZGF0b3JzW25hbWVdKHN0cmljdENoZWNrKS5wYXJzZShjb25maWdPcHRpb24pO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAvLyBMb2cgWm9kIGlzc3Vlc1xyXG4gICAgbG9nWm9kSXNzdWVzKFxyXG4gICAgICAxLFxyXG4gICAgICBlcnJvci5pc3N1ZXMsXHJcbiAgICAgIGBbdmFsaWRhdGlvbl0gVGhlICR7bmFtZX0gb3B0aW9uIHZhbGlkYXRpb24gZXJyb3JgXHJcbiAgICApO1xyXG5cclxuICAgIC8vIFRocm93IHZhbGlkYXRpb24gZXJyb3JcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgYFt2YWxpZGF0aW9uXSBUaGUgJHtuYW1lfSBvcHRpb24gdmFsaWRhdGlvbiBlcnJvcmAsXHJcbiAgICAgIDQwMFxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIHByb3ZpZGVkIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGV4cG9ydGluZyBwcm9jZXNzLlxyXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBvcHRpb24gaWYgdGhlIHZhbGlkYXRpb24gaXMgZGlzYWJsZWQgZ2xvYmFsbHkuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnNcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ09wdGlvbnMgLSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIGJlIHZhbGlkYXRlZC5cclxuICogQHBhcmFtIHtib29sZWFufSBbc3RyaWN0Q2hlY2s9dHJ1ZV0gLSBEZXRlcm1pbmVzIGlmIHN0cmljdGVyIHZhbGlkYXRpb25cclxuICogc2hvdWxkIGJlIGFwcGxpZWQuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIHBhcnNlZCBhbmQgdmFsaWRhdGVkIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBvYmplY3QuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKGNvbmZpZ09wdGlvbnMsIHN0cmljdENoZWNrID0gdHJ1ZSkge1xyXG4gIC8vIFJldHVybiB0aGUgb3JpZ2luYWwgY29uZmlnIGlmIHRoZSB2YWxpZGF0aW9uIGlzIGRpc2FibGVkXHJcbiAgaWYgKCFnZXRPcHRpb25zKCkub3RoZXIudmFsaWRhdGlvbikge1xyXG4gICAgcmV0dXJuIGNvbmZpZ09wdGlvbnM7XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgLy8gUmV0dXJuIHZhbGlkYXRlZCBvcHRpb25zXHJcbiAgICByZXR1cm4gc3RyaWN0Q2hlY2tcclxuICAgICAgPyBzdHJpY3RWYWxpZGF0ZShjb25maWdPcHRpb25zKVxyXG4gICAgICA6IGxvb3NlVmFsaWRhdGUoY29uZmlnT3B0aW9ucyk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIC8vIExvZyBab2QgaXNzdWVzXHJcbiAgICBsb2dab2RJc3N1ZXMoMSwgZXJyb3IuaXNzdWVzLCAnW3ZhbGlkYXRpb25dIE9wdGlvbnMgdmFsaWRhdGlvbiBlcnJvcicpO1xyXG5cclxuICAgIC8vIFRocm93IHZhbGlkYXRpb24gZXJyb3JcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcignW3ZhbGlkYXRpb25dIE9wdGlvbnMgdmFsaWRhdGlvbiBlcnJvcicsIDQwMCk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzLCBwYXJzZXMsIGFuZCBjaGVja3MgaWYgdGhlIHByb3ZpZGVkIGNvbmZpZyBpcyBhbGxvd2VkIHNldFxyXG4gKiBvZiBvcHRpb25zLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gaXNBbGxvd2VkQ29uZmlnXHJcbiAqXHJcbiAqIEBwYXJhbSB7dW5rbm93bn0gY29uZmlnIC0gVGhlIGNvbmZpZyB0byBiZSB2YWxpZGF0ZWQgYW5kIHBhcnNlZCBhcyBhIHNldFxyXG4gKiBvZiBvcHRpb25zLiBNdXN0IGJlIGVpdGhlciBhbiBvYmplY3Qgb3IgYSBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3RvU3RyaW5nPWZhbHNlXSAtIFdoZXRoZXIgdG8gcmV0dXJuIGEgc3RyaW5naWZpZWQgdmVyc2lvblxyXG4gKiBvZiB0aGUgcGFyc2VkIGNvbmZpZy4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cclxuICogQHBhcmFtIHtib29sZWFufSBbYWxsb3dGdW5jdGlvbnM9ZmFsc2VdIC0gV2hldGhlciB0byBhbGxvdyBmdW5jdGlvbnNcclxuICogaW4gdGhlIHBhcnNlZCBjb25maWcuIElmIHRydWUsIGZ1bmN0aW9ucyBhcmUgcHJlc2VydmVkLiBPdGhlcndpc2UsIHdoZW5cclxuICogYSBmdW5jdGlvbiBpcyBmb3VuZCwgbnVsbCBpcyByZXR1cm5lZC4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cclxuICpcclxuICogQHJldHVybnMgeyhPYmplY3R8c3RyaW5nfG51bGwpfSBSZXR1cm5zIGEgcGFyc2VkIHNldCBvZiBvcHRpb25zIG9iamVjdCxcclxuICogYSBzdHJpbmdpZmllZCBzZXQgb2Ygb3B0aW9ucyBvYmplY3QgaWYgdGhlIGB0b1N0cmluZ2AgaXMgdHJ1ZSwgYW5kIG51bGxcclxuICogaWYgdGhlIGNvbmZpZyBpcyBub3QgYSB2YWxpZCBzZXQgb2Ygb3B0aW9ucyBvciBwYXJzaW5nIGZhaWxzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQWxsb3dlZENvbmZpZyhcclxuICBjb25maWcsXHJcbiAgdG9TdHJpbmcgPSBmYWxzZSxcclxuICBhbGxvd0Z1bmN0aW9ucyA9IGZhbHNlXHJcbikge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBBY2NlcHQgb25seSBvYmplY3RzIGFuZCBzdHJpbmdzXHJcbiAgICBpZiAoIWlzT2JqZWN0KGNvbmZpZykgJiYgdHlwZW9mIGNvbmZpZyAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgLy8gUmV0dXJuIG51bGwgaWYgYW55IG90aGVyIHR5cGVcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0IHRoZSBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9yaWdpbmFsIGNvbmZpZ1xyXG4gICAgY29uc3Qgb2JqZWN0Q29uZmlnID1cclxuICAgICAgdHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZydcclxuICAgICAgICA/IGFsbG93RnVuY3Rpb25zXHJcbiAgICAgICAgICA/IGV2YWwoYCgke2NvbmZpZ30pYClcclxuICAgICAgICAgIDogSlNPTi5wYXJzZShjb25maWcpXHJcbiAgICAgICAgOiBjb25maWc7XHJcblxyXG4gICAgLy8gUHJlc2VydmUgb3IgcmVtb3ZlIHBvdGVudGlhbCBmdW5jdGlvbnMgYmFzZWQgb24gdGhlIGBhbGxvd0Z1bmN0aW9uc2AgZmxhZ1xyXG4gICAgY29uc3Qgc3RyaW5naWZpZWRPcHRpb25zID0gX29wdGlvbnNTdHJpbmdpZnkoXHJcbiAgICAgIG9iamVjdENvbmZpZyxcclxuICAgICAgYWxsb3dGdW5jdGlvbnMsXHJcbiAgICAgIGZhbHNlXHJcbiAgICApO1xyXG5cclxuICAgIC8vIFBhcnNlIHRoZSBjb25maWcgdG8gY2hlY2sgaWYgaXQgaXMgdmFsaWQgc2V0IG9mIG9wdGlvbnNcclxuICAgIGNvbnN0IHBhcnNlZE9wdGlvbnMgPSBhbGxvd0Z1bmN0aW9uc1xyXG4gICAgICA/IEpTT04ucGFyc2UoXHJcbiAgICAgICAgICBfb3B0aW9uc1N0cmluZ2lmeShvYmplY3RDb25maWcsIGFsbG93RnVuY3Rpb25zLCB0cnVlKSxcclxuICAgICAgICAgIChfLCB2YWx1ZSkgPT5cclxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5zdGFydHNXaXRoKCdmdW5jdGlvbicpXHJcbiAgICAgICAgICAgICAgPyBldmFsKGAoJHt2YWx1ZX0pYClcclxuICAgICAgICAgICAgICA6IHZhbHVlXHJcbiAgICAgICAgKVxyXG4gICAgICA6IEpTT04ucGFyc2Uoc3RyaW5naWZpZWRPcHRpb25zKTtcclxuXHJcbiAgICAvLyBSZXR1cm4gc3RyaW5naWZpZWQgb3Igb2JqZWN0IG9wdGlvbnMgYmFzZWQgb24gdGhlIGB0b1N0cmluZ2AgZmxhZ1xyXG4gICAgcmV0dXJuIHRvU3RyaW5nID8gc3RyaW5naWZpZWRPcHRpb25zIDogcGFyc2VkT3B0aW9ucztcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgLy8gUmV0dXJuIG51bGwgaWYgcGFyc2luZyBmYWlsc1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUHJpbnRzIHRoZSBIaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXIgbG9nbywgdmVyc2lvbiwgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBwcmludExpY2Vuc2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmludExpY2Vuc2UoKSB7XHJcbiAgLy8gUHJpbnQgdGhlIGxvZ28gYW5kIHZlcnNpb24gaW5mb3JtYXRpb25cclxuICBwcmludFZlcnNpb24oKTtcclxuXHJcbiAgLy8gUHJpbnQgdGhlIGxpY2Vuc2UgaW5mb3JtYXRpb25cclxuICBjb25zb2xlLmxvZyhcclxuICAgICdUaGlzIHNvZnR3YXJlIHJlcXVpcmVzIGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZS5cXG4nXHJcbiAgICAgIC55ZWxsb3csXHJcbiAgICAnXFxuRm9yIGEgZnVsbCBsaXN0IG9mIENMSSBvcHRpb25zLCB0eXBlOicsXHJcbiAgICAnXFxuaGlnaGNoYXJ0cy1leHBvcnQtc2VydmVyIC0taGVscFxcbicuZ3JlZW4sXHJcbiAgICAnXFxuSWYgeW91IGRvIG5vdCBoYXZlIGEgbGljZW5zZSwgb25lIGNhbiBiZSBvYnRhaW5lZCBoZXJlOicsXHJcbiAgICAnXFxuaHR0cHM6Ly9zaG9wLmhpZ2hzb2Z0LmNvbS9cXG4nLmdyZWVuLFxyXG4gICAgJ1xcblRvIGN1c3RvbWl6ZSB5b3VyIGluc3RhbGxhdGlvbiwgcGxlYXNlIHJlZmVyIHRvIHRoZSBSRUFETUUgZmlsZSBhdDonLFxyXG4gICAgJ1xcbmh0dHBzOi8vZ2l0aHViLmNvbS9oaWdoY2hhcnRzL25vZGUtZXhwb3J0LXNlcnZlciNyZWFkbWVcXG4nLmdyZWVuXHJcbiAgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFByaW50cyB1c2FnZSBpbmZvcm1hdGlvbiBmb3IgQ0xJIGFyZ3VtZW50cywgZGlzcGxheWluZyBhdmFpbGFibGUgb3B0aW9uc1xyXG4gKiBhbmQgdGhlaXIgZGVzY3JpcHRpb25zLiBJdCBjYW4gbGlzdCBwcm9wZXJ0aWVzIHJlY3Vyc2l2ZWx5IGlmIGNhdGVnb3JpZXNcclxuICogY29udGFpbiBuZXN0ZWQgb3B0aW9ucy5cclxuICpcclxuICogQGZ1bmN0aW9uIHByaW50VXNhZ2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmludFVzYWdlKCkge1xyXG4gIC8vIERpc3BsYXkgUkVBRE1FIGFuZCBnZW5lcmFsIHVzYWdlIGluZm9ybWF0aW9uXHJcbiAgY29uc29sZS5sb2coXHJcbiAgICAnXFxuVXNhZ2Ugb2YgQ0xJIGFyZ3VtZW50czonLmJvbGQsXHJcbiAgICAnXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nLFxyXG4gICAgYFxcbkZvciBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uLCB2aXNpdCB0aGUgUkVBRE1FIGZpbGUgYXQ6ICR7J2h0dHBzOi8vZ2l0aHViLmNvbS9oaWdoY2hhcnRzL25vZGUtZXhwb3J0LXNlcnZlciNyZWFkbWUnLmdyZWVufS5cXG5gXHJcbiAgKTtcclxuXHJcbiAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggY2F0ZWdvcnkgaW4gdGhlIGBkZWZhdWx0Q29uZmlnYCBhbmQgZGlzcGxheSB1c2FnZSBpbmZvXHJcbiAgT2JqZWN0LmtleXMoZGVmYXVsdENvbmZpZykuZm9yRWFjaCgoY2F0ZWdvcnkpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGAke2NhdGVnb3J5LnRvVXBwZXJDYXNlKCl9YC5ib2xkLnJlZCk7XHJcbiAgICBfY3ljbGVDYXRlZ29yaWVzKGRlZmF1bHRDb25maWdbY2F0ZWdvcnldKTtcclxuICAgIGNvbnNvbGUubG9nKCcnKTtcclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFByaW50cyB0aGUgSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyIGxvZ28gb3IgdGV4dCB3aXRoIHRoZSB2ZXJzaW9uXHJcbiAqIGluZm9ybWF0aW9uLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gcHJpbnRWZXJzaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW25vTG9nbz1mYWxzZV0gLSBJZiB0cnVlLCBvbmx5IHByaW50cyB0ZXh0IHdpdGggdGhlIHZlcnNpb25cclxuICogaW5mb3JtYXRpb24sIHdpdGhvdXQgdGhlIGxvZ28uIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRWZXJzaW9uKG5vTG9nbyA9IGZhbHNlKSB7XHJcbiAgLy8gR2V0IHBhY2thZ2UgdmVyc2lvbiBlaXRoZXIgZnJvbSBgLmVudmAgb3IgZnJvbSBgcGFja2FnZS5qc29uYFxyXG4gIGNvbnN0IHBhY2thZ2VWZXJzaW9uID0gSlNPTi5wYXJzZShcclxuICAgIHJlYWRGaWxlU3luYyhqb2luKF9fZGlybmFtZSwgJ3BhY2thZ2UuanNvbicpLCAndXRmOCcpXHJcbiAgKS52ZXJzaW9uO1xyXG5cclxuICAvLyBQcmludCB0ZXh0IG9ubHlcclxuICBpZiAobm9Mb2dvKSB7XHJcbiAgICBjb25zb2xlLmxvZyhgSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyIHYke3BhY2thZ2VWZXJzaW9ufWApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBQcmludCB0aGUgbG9nb1xyXG4gICAgY29uc29sZS5sb2coXHJcbiAgICAgIHJlYWRGaWxlU3luYyhqb2luKF9fZGlybmFtZSwgJ21zZycsICdzdGFydHVwLm1zZycpLCAndXRmOCcpLnRvU3RyaW5nKClcclxuICAgICAgICAuYm9sZC55ZWxsb3csXHJcbiAgICAgIGB2JHtwYWNrYWdlVmVyc2lvbn1cXG5gLmJvbGRcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZXMgYW5kIHJldHVybnMgdGhlIGdsb2JhbCBvcHRpb25zIG9iamVjdCBiYXNlZCBvbiB0aGUgcHJvdmlkZWRcclxuICogY29uZmlndXJhdGlvbiwgc2V0dGluZyB2YWx1ZXMgZnJvbSBuZXN0ZWQgcHJvcGVydGllcyByZWN1cnNpdmVseS5cclxuICpcclxuICogVGhlIHByaW9yaXR5IG9yZGVyIGZvciBzZXR0aW5nIHZhbHVlcyBpczpcclxuICpcclxuICogMS4gVmFsdWVzIGZyb20gdGhlIGAuL2xpYi9zY2hlbWFzL2NvbmZpZy5qc2AgZmlsZSAoZGVmYXVsdHMpLlxyXG4gKiAyLiBWYWx1ZXMgZnJvbSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgKHNwZWNpZmllZCBpbiB0aGUgYC5lbnZgIGZpbGUpLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX2luaXRPcHRpb25zXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgdXNlZCBmb3IgaW5pdGlhbGl6aW5nXHJcbiAqIHRoZSBnbG9iYWwgb3B0aW9ucy4gSXQgc2hvdWxkIGluY2x1ZGUgbmVzdGVkIHByb3BlcnRpZXMgd2l0aCBhIGB2YWx1ZWBcclxuICogYW5kIGFuIGBlbnZMaW5rYCBmb3IgbGlua2luZyB0byBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBpbml0aWFsaXplZCBnbG9iYWwgb3B0aW9ucyBvYmplY3QsIHBvcHVsYXRlZCB3aXRoXHJcbiAqIHZhbHVlcyBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgY29uZmlndXJhdGlvbiBhbmQgdGhlIGVzdGFibGlzaGVkIHByaW9yaXR5XHJcbiAqIG9yZGVyLlxyXG4gKi9cclxuZnVuY3Rpb24gX2luaXRPcHRpb25zKGNvbmZpZykge1xyXG4gIC8vIEluaXQgdGhlIG9iamVjdCBmb3Igb3B0aW9uc1xyXG4gIGNvbnN0IG9wdGlvbnMgPSB7fTtcclxuXHJcbiAgLy8gU3RhcnQgaW5pdGlhbGl6aW5nIHRoZSBgb3B0aW9uc2Agb2JqZWN0IHJlY3Vyc2l2ZWx5XHJcbiAgZm9yIChjb25zdCBbbmFtZSwgaXRlbV0gb2YgT2JqZWN0LmVudHJpZXMoY29uZmlnKSkge1xyXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpdGVtLCAndmFsdWUnKSkge1xyXG4gICAgICAvLyBTZXQgdGhlIGNvcnJlY3QgdmFsdWUgYmFzZWQgb24gdGhlIGVzdGFibGlzaGVkIHByaW9yaXR5IG9yZGVyXHJcbiAgICAgIGlmIChlbnZzW2l0ZW0uZW52TGlua10gIT09IHVuZGVmaW5lZCAmJiBlbnZzW2l0ZW0uZW52TGlua10gIT09IG51bGwpIHtcclxuICAgICAgICAvLyBUaGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIHZhbHVlXHJcbiAgICAgICAgb3B0aW9uc1tuYW1lXSA9IGVudnNbaXRlbS5lbnZMaW5rXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBUaGUgdmFsdWUgZnJvbSB0aGUgY29uZmlnIGZpbGVcclxuICAgICAgICBvcHRpb25zW25hbWVdID0gaXRlbS52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gQ3JlYXRlIGEgc2VjdGlvbiBpbiB0aGUgb3B0aW9uc1xyXG4gICAgICBvcHRpb25zW25hbWVdID0gX2luaXRPcHRpb25zKGl0ZW0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUmV0dXJuIHRoZSBjcmVhdGVkIGBvcHRpb25zYCBvYmplY3RcclxuICByZXR1cm4gb3B0aW9ucztcclxufVxyXG5cclxuLyoqXHJcbiAqIE1lcmdlcyB0d28gc2V0cyBvZiBjb25maWd1cmF0aW9uIG9wdGlvbnMsIGNvbnNpZGVyaW5nIGFic29sdXRlIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBfbWVyZ2VPcHRpb25zXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcmlnaW5hbE9wdGlvbnMgLSBPcmlnaW5hbCBjb25maWd1cmF0aW9uIG9wdGlvbnMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBuZXdPcHRpb25zIC0gTmV3IGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byBiZSBtZXJnZWQuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE1lcmdlZCBjb25maWd1cmF0aW9uIG9wdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX21lcmdlT3B0aW9ucyhvcmlnaW5hbE9wdGlvbnMsIG5ld09wdGlvbnMpIHtcclxuICAvLyBDaGVjayBpZiB0aGUgYG9yaWdpbmFsT3B0aW9uc2AgYW5kIGBuZXdPcHRpb25zYCBhcmUgY29ycmVjdCBvYmplY3RzXHJcbiAgaWYgKGlzT2JqZWN0KG9yaWdpbmFsT3B0aW9ucykgJiYgaXNPYmplY3QobmV3T3B0aW9ucykpIHtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG5ld09wdGlvbnMpKSB7XHJcbiAgICAgIG9yaWdpbmFsT3B0aW9uc1trZXldID1cclxuICAgICAgICBpc09iamVjdCh2YWx1ZSkgJiZcclxuICAgICAgICAhYWJzb2x1dGVQcm9wcy5pbmNsdWRlcyhrZXkpICYmXHJcbiAgICAgICAgb3JpZ2luYWxPcHRpb25zW2tleV0gIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgPyBfbWVyZ2VPcHRpb25zKG9yaWdpbmFsT3B0aW9uc1trZXldLCB2YWx1ZSlcclxuICAgICAgICAgIDogdmFsdWUgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICA/IHZhbHVlXHJcbiAgICAgICAgICAgIDogb3JpZ2luYWxPcHRpb25zW2tleV0gfHwgbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJldHVybiB0aGUgb3JpZ2luYWwgKG1vZGlmaWVkIG9yIG5vdCkgb3B0aW9uc1xyXG4gIHJldHVybiBvcmlnaW5hbE9wdGlvbnM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgcHJvdmlkZWQgb3B0aW9ucyBvYmplY3QgdG8gYSBKU09OLWZvcm1hdHRlZCBzdHJpbmdcclxuICogd2l0aCB0aGUgb3B0aW9uIHRvIHByZXNlcnZlIGZ1bmN0aW9ucy4gSW4gb3JkZXIgZm9yIGEgZnVuY3Rpb25cclxuICogdG8gYmUgcHJlc2VydmVkLCBpdCBuZWVkcyB0byBmb2xsb3cgdGhlIGZvcm1hdCBgZnVuY3Rpb24gKC4uLikgey4uLn1gLlxyXG4gKiBTdWNoIGEgZnVuY3Rpb24gY2FuIGFsc28gYmUgc3RyaW5naWZpZWQuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBfb3B0aW9uc1N0cmluZ2lmeVxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIG9iamVjdCB0byBiZSBjb252ZXJ0ZWQgdG8gYSBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWxsb3dGdW5jdGlvbnMgLSBJZiBzZXQgdG8gdHJ1ZSwgZnVuY3Rpb25zIGFyZSBwcmVzZXJ2ZWRcclxuICogaW4gdGhlIG91dHB1dC4gT3RoZXJ3aXNlIGFuIGVycm9yIGlzIHRocm93bi5cclxuICogQHBhcmFtIHtib29sZWFufSBzdHJpbmdpZnlGdW5jdGlvbnMgLSBJZiBzZXQgdG8gdHJ1ZSwgZnVuY3Rpb25zIGFyZSBzYXZlZFxyXG4gKiBhcyBzdHJpbmdzLiBUaGUgYGFsbG93RnVuY3Rpb25zYCBtdXN0IGJlIHNldCB0byB0cnVlIGFzIHdlbGwgZm9yIHRoaXMgdG8gdGFrZVxyXG4gKiBhbiBlZmZlY3QuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBKU09OLWZvcm1hdHRlZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBvcHRpb25zLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gVGhyb3dzIGFuIGBFcnJvcmAgd2hlbiBmdW5jdGlvbnMgYXJlIG5vdCBhbGxvd2VkIGJ1dCBhcmVcclxuICogZm91bmQgaW4gcHJvdmlkZWQgb3B0aW9ucyBvYmplY3QuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX29wdGlvbnNTdHJpbmdpZnkob3B0aW9ucywgYWxsb3dGdW5jdGlvbnMsIHN0cmluZ2lmeUZ1bmN0aW9ucykge1xyXG4gIGNvbnN0IHJlcGxhY2VyQ2FsbGJhY2sgPSAoXywgdmFsdWUpID0+IHtcclxuICAgIC8vIFRyaW0gc3RyaW5nIHZhbHVlc1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiBvciBzdHJpbmdpZmllZCBmdW5jdGlvblxyXG4gICAgaWYgKFxyXG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgfHxcclxuICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICB2YWx1ZS5zdGFydHNXaXRoKCdmdW5jdGlvbicpICYmXHJcbiAgICAgICAgdmFsdWUuZW5kc1dpdGgoJ30nKSlcclxuICAgICkge1xyXG4gICAgICAvLyBJZiBhbGxvd0Z1bmN0aW9ucyBpcyBzZXQgdG8gdHJ1ZSwgcHJlc2VydmUgZnVuY3Rpb25zXHJcbiAgICAgIGlmIChhbGxvd0Z1bmN0aW9ucykge1xyXG4gICAgICAgIC8vIEJhc2VkIG9uIHRoZSBgc3RyaW5naWZ5RnVuY3Rpb25zYCBvcHRpb25zLCBzZXQgZnVuY3Rpb24gdmFsdWVzXHJcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeUZ1bmN0aW9uc1xyXG4gICAgICAgICAgPyAvLyBBcyBzdHJpbmdpZmllZCBmdW5jdGlvbnNcclxuICAgICAgICAgICAgYFwiRVhQX0ZVTiR7KHZhbHVlICsgJycpLnJlcGxhY2VBbGwoL1xccysvZywgJyAnKX1FWFBfRlVOXCJgXHJcbiAgICAgICAgICA6IC8vIEFzIGZ1bmN0aW9uc1xyXG4gICAgICAgICAgICBgRVhQX0ZVTiR7KHZhbHVlICsgJycpLnJlcGxhY2VBbGwoL1xccysvZywgJyAnKX1FWFBfRlVOYDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBUaHJvdyBhbiBlcnJvciBvdGhlcndpc2VcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEluIGFsbCBvdGhlciBjYXNlcywgc2ltcGx5IHJldHVybiB0aGUgdmFsdWVcclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9O1xyXG5cclxuICAvLyBTdHJpbmdpZnkgb3B0aW9ucyBhbmQgaWYgcmVxdWlyZWQsIHJlcGxhY2Ugc3BlY2lhbCBmdW5jdGlvbnMgbWFya3NcclxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob3B0aW9ucywgcmVwbGFjZXJDYWxsYmFjaykucmVwbGFjZUFsbChcclxuICAgIHN0cmluZ2lmeUZ1bmN0aW9ucyA/IC9cXFxcXCJFWFBfRlVOfEVYUF9GVU5cXFxcXCIvZyA6IC9cIkVYUF9GVU58RVhQX0ZVTlwiL2csXHJcbiAgICAnJ1xyXG4gICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMb2FkcyBhZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gZnJvbSBhIHNwZWNpZmllZCBmaWxlIHByb3ZpZGVkIHZpYVxyXG4gKiB0aGUgYC0tbG9hZENvbmZpZ2Agb3B0aW9uIGluIHRoZSBjb21tYW5kLWxpbmUgYXJndW1lbnRzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX2xvYWRDb25maWdGaWxlXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IGNsaUFyZ3MgLSBDb21tYW5kLWxpbmUgYXJndW1lbnRzIHRvIHNlYXJjaFxyXG4gKiBmb3IgdGhlIGAtLWxvYWRDb25maWdgIG9wdGlvbiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgZmlsZSBwYXRoLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgYWRkaXRpb25hbCBjb25maWd1cmF0aW9uIGxvYWRlZCBmcm9tIHRoZSBzcGVjaWZpZWRcclxuICogZmlsZSwgb3IgYW4gZW1wdHkgb2JqZWN0IGlmIHRoZSBmaWxlIGlzIG5vdCBmb3VuZCwgaW52YWxpZCwgb3IgYW4gZXJyb3JcclxuICogb2NjdXJzLlxyXG4gKi9cclxuZnVuY3Rpb24gX2xvYWRDb25maWdGaWxlKGNsaUFyZ3MpIHtcclxuICAvLyBHZXQgdGhlIGFsbG93IGZsYWdzIGZvciB0aGUgY3VzdG9tIGxvZ2ljIGNoZWNrXHJcbiAgY29uc3QgeyBhbGxvd0NvZGVFeGVjdXRpb24sIGFsbG93RmlsZVJlc291cmNlcyB9ID0gZ2V0T3B0aW9ucygpLmN1c3RvbUxvZ2ljO1xyXG5cclxuICAvLyBDaGVjayBpZiB0aGUgYC0tbG9hZENvbmZpZ2Agb3B0aW9uIHdhcyB1c2VkXHJcbiAgY29uc3QgY29uZmlnSW5kZXggPSBjbGlBcmdzLmZpbmRJbmRleChcclxuICAgIChhcmcpID0+IGFyZy5yZXBsYWNlKC8tL2csICcnKSA9PT0gJ2xvYWRDb25maWcnXHJcbiAgKTtcclxuXHJcbiAgLy8gR2V0IHRoZSBgLS1sb2FkQ29uZmlnYCBvcHRpb24gdmFsdWVcclxuICBjb25zdCBjb25maWdGaWxlTmFtZSA9IGNvbmZpZ0luZGV4ID4gLTEgJiYgY2xpQXJnc1tjb25maWdJbmRleCArIDFdO1xyXG5cclxuICAvLyBDaGVjayBpZiB0aGUgYC0tbG9hZENvbmZpZ2AgaXMgcHJlc2VudCBhbmQgaGFzIGEgY29ycmVjdCB2YWx1ZVxyXG4gIGlmIChjb25maWdGaWxlTmFtZSAmJiBhbGxvd0ZpbGVSZXNvdXJjZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIExvYWQgYW4gb3B0aW9uYWwgY3VzdG9tIEpTT04gY29uZmlnIGZpbGVcclxuICAgICAgcmV0dXJuIGlzQWxsb3dlZENvbmZpZyhcclxuICAgICAgICByZWFkRmlsZVN5bmMoZ2V0QWJzb2x1dGVQYXRoKGNvbmZpZ0ZpbGVOYW1lKSwgJ3V0ZjgnKSxcclxuICAgICAgICBmYWxzZSxcclxuICAgICAgICBhbGxvd0NvZGVFeGVjdXRpb25cclxuICAgICAgKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZ1dpdGhTdGFjayhcclxuICAgICAgICAyLFxyXG4gICAgICAgIGVycm9yLFxyXG4gICAgICAgIGBbY29uZmlnXSBVbmFibGUgdG8gbG9hZCB0aGUgY29uZmlndXJhdGlvbiBmcm9tIHRoZSAke2NvbmZpZ0ZpbGVOYW1lfSBmaWxlLmBcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIE5vIGFkZGl0aW9uYWwgb3B0aW9ucyB0byByZXR1cm5cclxuICByZXR1cm4ge307XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQYXJzZXMgY29tbWFuZC1saW5lIGFyZ3VtZW50cyBhbmQgcGFpcnMgZWFjaCBhcmd1bWVudCB3aXRoIGl0cyBjb3JyZXNwb25kaW5nXHJcbiAqIG9wdGlvbiBpbiB0aGUgY29uZmlndXJhdGlvbi4gVGhlIHZhbHVlcyBhcmUgc3RydWN0dXJlZCBpbnRvIGEgbmVzdGVkIG9wdGlvbnNcclxuICogb2JqZWN0LCBiYXNlZCBvbiBwcmVkZWZpbmVkIG1hcHBpbmdzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX3BhaXJBcmd1bWVudFZhbHVlXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IG5lc3RlZFByb3BzIC0gQW4gYXJyYXkgb2YgbmVzdGluZyBsZXZlbCBmb3IgYWxsXHJcbiAqIG9wdGlvbnMuXHJcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IGNsaUFyZ3MgLSBBbiBhcnJheSBvZiBjb21tYW5kLWxpbmUgYXJndW1lbnRzXHJcbiAqIGNvbnRhaW5pbmcgb3B0aW9ucyBhbmQgdGhlaXIgYXNzb2NpYXRlZCB2YWx1ZXMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIHVwZGF0ZWQgb3B0aW9ucyBvYmplY3Qgd2hlcmUgZWFjaCBvcHRpb24gZnJvbVxyXG4gKiB0aGUgY29tbWFuZC1saW5lIGlzIHBhaXJlZCB3aXRoIGl0cyB2YWx1ZSwgc3RydWN0dXJlZCBpbnRvIG5lc3RlZCBvYmplY3RzXHJcbiAqIGFzIGRlZmluZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBfcGFpckFyZ3VtZW50VmFsdWUobmVzdGVkUHJvcHMsIGNsaUFyZ3MpIHtcclxuICAvLyBBbiBlbXB0eSBvYmplY3QgdG8gY29sbGVjdCBhbmQgc3RydWN0dXJpemUgZGF0YSBmcm9tIHRoZSBhcmdzXHJcbiAgY29uc3QgY2xpT3B0aW9ucyA9IHt9O1xyXG5cclxuICAvLyBDeWNsZSB0aHJvdWdoIGFsbCBDTEkgYXJncyBhbmQgZmlsdGVyIHRoZW1cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNsaUFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgIGNvbnN0IG9wdGlvbiA9IGNsaUFyZ3NbaV0ucmVwbGFjZSgvLS9nLCAnJyk7XHJcblxyXG4gICAgLy8gRmluZCB0aGUgcmlnaHQgcGxhY2UgZm9yIHByb3BlcnR5J3MgdmFsdWVcclxuICAgIGNvbnN0IHByb3BlcnRpZXNDaGFpbiA9IG5lc3RlZFByb3BzW29wdGlvbl1cclxuICAgICAgPyBuZXN0ZWRQcm9wc1tvcHRpb25dLnNwbGl0KCcuJylcclxuICAgICAgOiBbXTtcclxuXHJcbiAgICAvLyBDcmVhdGUgb3B0aW9ucyBvYmplY3Qgd2l0aCB2YWx1ZXMgZnJvbSBDTEkgZm9yIGxhdGVyIHBhcnNpbmcgYW5kIG1lcmdpbmdcclxuICAgIHByb3BlcnRpZXNDaGFpbi5yZWR1Y2UoKG9iaiwgcHJvcCwgaW5kZXgpID0+IHtcclxuICAgICAgaWYgKHByb3BlcnRpZXNDaGFpbi5sZW5ndGggLSAxID09PSBpbmRleCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gY2xpQXJnc1srK2ldO1xyXG4gICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgIGxvZyhcclxuICAgICAgICAgICAgMixcclxuICAgICAgICAgICAgYFtjb25maWddIE1pc3NpbmcgdmFsdWUgZm9yIHRoZSBDTEkgJy0tJHtvcHRpb259JyBhcmd1bWVudC4gVXNpbmcgdGhlIGRlZmF1bHQgdmFsdWUuYFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JqW3Byb3BdID0gdmFsdWUgfHwgbnVsbDtcclxuICAgICAgfSBlbHNlIGlmIChvYmpbcHJvcF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIG9ialtwcm9wXSA9IHt9O1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBvYmpbcHJvcF07XHJcbiAgICB9LCBjbGlPcHRpb25zKTtcclxuICB9XHJcblxyXG4gIC8vIFJldHVybiBwYXJzZWQgQ0xJIG9wdGlvbnNcclxuICByZXR1cm4gY2xpT3B0aW9ucztcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlcyB0aGUgb3B0aW9ucyBvYmplY3QgdG8gcHJpbnQgdGhlIHVzYWdlIGluZm9ybWF0aW9uXHJcbiAqIGZvciBlYWNoIG9wdGlvbiBjYXRlZ29yeSBhbmQgaW5kaXZpZHVhbCBvcHRpb24uXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBfY3ljbGVDYXRlZ29yaWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IGNvbnRhaW5pbmcgQ0xJIG9wdGlvbnMuIEl0IG1heVxyXG4gKiBpbmNsdWRlIG5lc3RlZCBjYXRlZ29yaWVzIGFuZCBpbmRpdmlkdWFsIG9wdGlvbnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBfY3ljbGVDYXRlZ29yaWVzKG9wdGlvbnMpIHtcclxuICBmb3IgKGNvbnN0IFtuYW1lLCBvcHRpb25dIG9mIE9iamVjdC5lbnRyaWVzKG9wdGlvbnMpKSB7XHJcbiAgICAvLyBJZiB0aGUgY3VycmVudCBlbnRyeSBpcyBhIGNhdGVnb3J5IGFuZCBub3QgYSBsZWFmIG9wdGlvbiwgcmVjdXJzZSBpbnRvIGl0XHJcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb24sICd2YWx1ZScpKSB7XHJcbiAgICAgIF9jeWNsZUNhdGVnb3JpZXMob3B0aW9uKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFByZXBhcmUgZGVzY3JpcHRpb25cclxuICAgICAgY29uc3QgZGVzY05hbWUgPSBgIC0tJHtvcHRpb24uY2xpTmFtZSB8fCBuYW1lfWA7XHJcblxyXG4gICAgICAvLyBHZXQgdGhlIHZhbHVlXHJcbiAgICAgIGxldCBvcHRpb25WYWx1ZSA9IG9wdGlvbi52YWx1ZTtcclxuXHJcbiAgICAgIC8vIFByZXBhcmUgdmFsdWUgZm9yIG9wdGlvbiB0aGF0IGlzIG5vdCBudWxsIGFuZCBpcyBhcnJheSBvZiBzdHJpbmdzXHJcbiAgICAgIGlmIChvcHRpb25WYWx1ZSAhPT0gbnVsbCAmJiBvcHRpb24udHlwZXMuaW5jbHVkZXMoJ3N0cmluZ1tdJykpIHtcclxuICAgICAgICBvcHRpb25WYWx1ZSA9XHJcbiAgICAgICAgICAnWycgKyBvcHRpb25WYWx1ZS5tYXAoKGl0ZW0pID0+IGAnJHtpdGVtfSdgKS5qb2luKCcsICcpICsgJ10nO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBQcmVwYXJlIHZhbHVlIGZvciBvcHRpb24gdGhhdCBpcyBub3QgbnVsbCBhbmQgaXMgYSBzdHJpbmdcclxuICAgICAgaWYgKG9wdGlvblZhbHVlICE9PSBudWxsICYmIG9wdGlvbi50eXBlcy5pbmNsdWRlcygnc3RyaW5nJykpIHtcclxuICAgICAgICBvcHRpb25WYWx1ZSA9IGAnJHtvcHRpb25WYWx1ZX0nYDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRGlzcGxheSBjb3JyZWN0bHkgYWxpZ25lZCBtZXNzYWdlc1xyXG4gICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICBkZXNjTmFtZS5ncmVlbixcclxuICAgICAgICBgJHsoJzwnICsgb3B0aW9uLnR5cGVzLmpvaW4oJ3wnKSArICc+JykueWVsbG93fWAsXHJcbiAgICAgICAgYCR7U3RyaW5nKG9wdGlvblZhbHVlKS5ib2xkfWAuYmx1ZSxcclxuICAgICAgICBgLSAke29wdGlvbi5kZXNjcmlwdGlvbn0uYFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGdldE9wdGlvbnMsXHJcbiAgdXBkYXRlT3B0aW9ucyxcclxuICBzZXRDbGlPcHRpb25zLFxyXG4gIG1hcFRvTmV3T3B0aW9ucyxcclxuICB2YWxpZGF0ZU9wdGlvbixcclxuICB2YWxpZGF0ZU9wdGlvbnMsXHJcbiAgaXNBbGxvd2VkQ29uZmlnLFxyXG4gIHByaW50TGljZW5zZSxcclxuICBwcmludFVzYWdlLFxyXG4gIHByaW50VmVyc2lvblxyXG59O1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNSwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgSFRUUCB1dGlsaXR5IG1vZHVsZSBmb3IgZmV0Y2hpbmcgYW5kIHBvc3RpbmcgZGF0YS4gU3VwcG9ydHMgYm90aFxyXG4gKiBIVFRQIGFuZCBIVFRQUyBwcm90b2NvbHMsIHByb3ZpZGluZyBtZXRob2RzIHRvIG1ha2UgR0VUIGFuZCBQT1NUIHJlcXVlc3RzXHJcbiAqIHdpdGggY3VzdG9taXphYmxlIG9wdGlvbnMuIEluY2x1ZGVzIHByb3RvY29sIGRldGVybWluYXRpb24gYmFzZWQgb24gVVJMXHJcbiAqIGFuZCBhdWdtZW50cyByZXNwb25zZSBvYmplY3RzIHdpdGggYSAndGV4dCcgcHJvcGVydHkgZm9yIGVhc2llciBkYXRhIGFjY2Vzcy5cclxuICovXHJcblxyXG5pbXBvcnQgaHR0cCBmcm9tICdodHRwJztcclxuaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcclxuXHJcbi8qKlxyXG4gKiBGZXRjaGVzIGRhdGEgZnJvbSB0aGUgc3BlY2lmaWVkIFVSTCB1c2luZyBlaXRoZXIgSFRUUCBvciBIVFRQUyBwcm90b2NvbC5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBmZXRjaFxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIFVSTCB0byBmZXRjaCBkYXRhIGZyb20uXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdE9wdGlvbnM9e31dIC0gT3B0aW9ucyBmb3IgdGhlIEhUVFAvSFRUUFMgcmVxdWVzdC5cclxuICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgYW4gZW1wdHkgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgSFRUUC9IVFRQUyByZXNwb25zZVxyXG4gKiBvYmplY3Qgd2l0aCBhZGRlZCAndGV4dCcgcHJvcGVydHkgb3IgcmVqZWN0aW5nIHdpdGggYW4gZXJyb3IuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2godXJsLCByZXF1ZXN0T3B0aW9ucyA9IHt9KSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIF9nZXRQcm90b2NvbE1vZHVsZSh1cmwpXHJcbiAgICAgIC5nZXQodXJsLCByZXF1ZXN0T3B0aW9ucywgKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgbGV0IHJlc3BvbnNlRGF0YSA9ICcnO1xyXG5cclxuICAgICAgICAvLyBBIGNodW5rIG9mIGRhdGEgaGFzIGJlZW4gcmVjZWl2ZWRcclxuICAgICAgICByZXNwb25zZS5vbignZGF0YScsIChjaHVuaykgPT4ge1xyXG4gICAgICAgICAgcmVzcG9uc2VEYXRhICs9IGNodW5rO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBUaGUgd2hvbGUgcmVzcG9uc2UgaGFzIGJlZW4gcmVjZWl2ZWRcclxuICAgICAgICByZXNwb25zZS5vbignZW5kJywgKCkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFyZXNwb25zZURhdGEpIHtcclxuICAgICAgICAgICAgcmVqZWN0KCdOb3RoaW5nIHdhcyBmZXRjaGVkIGZyb20gdGhlIFVSTC4nKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJlc3BvbnNlLnRleHQgPSByZXNwb25zZURhdGE7XHJcbiAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSlcclxuICAgICAgLm9uKCdlcnJvcicsIChlcnJvcikgPT4ge1xyXG4gICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogU2VuZHMgYSBQT1NUIHJlcXVlc3QgdG8gdGhlIHNwZWNpZmllZCBVUkwgd2l0aCB0aGUgcHJvdmlkZWQgSlNPTiBib2R5IHVzaW5nXHJcbiAqIGVpdGhlciBIVFRQIG9yIEhUVFBTIHByb3RvY29sLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIHBvc3RcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBVUkwgdG8gc2VuZCB0aGUgUE9TVCByZXF1ZXN0IHRvLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gW2JvZHk9e31dIC0gVGhlIEpTT04gYm9keSB0byBpbmNsdWRlIGluIHRoZSBQT1NUIHJlcXVlc3QuXHJcbiAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGFuIGVtcHR5IG9iamVjdC5cclxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0T3B0aW9ucz17fV0gLSBPcHRpb25zIGZvciB0aGUgSFRUUC9IVFRQUyByZXF1ZXN0LlxyXG4gKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBhbiBlbXB0eSBvYmplY3QuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBIVFRQL0hUVFBTIHJlc3BvbnNlXHJcbiAqIG9iamVjdCB3aXRoIGFkZGVkICd0ZXh0JyBwcm9wZXJ0eSBvciByZWplY3Rpbmcgd2l0aCBhbiBlcnJvci5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwb3N0KHVybCwgYm9keSA9IHt9LCByZXF1ZXN0T3B0aW9ucyA9IHt9KSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IGRhdGEgPSBKU09OLnN0cmluZ2lmeShib2R5KTtcclxuXHJcbiAgICAvLyBTZXQgZGVmYXVsdCBoZWFkZXJzIGFuZCBtZXJnZSB3aXRoIHJlcXVlc3RPcHRpb25zXHJcbiAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihcclxuICAgICAge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBkYXRhLmxlbmd0aFxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgcmVxdWVzdE9wdGlvbnNcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgcmVxdWVzdCA9IF9nZXRQcm90b2NvbE1vZHVsZSh1cmwpXHJcbiAgICAgIC5yZXF1ZXN0KHVybCwgb3B0aW9ucywgKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgbGV0IHJlc3BvbnNlRGF0YSA9ICcnO1xyXG5cclxuICAgICAgICAvLyBBIGNodW5rIG9mIGRhdGEgaGFzIGJlZW4gcmVjZWl2ZWRcclxuICAgICAgICByZXNwb25zZS5vbignZGF0YScsIChjaHVuaykgPT4ge1xyXG4gICAgICAgICAgcmVzcG9uc2VEYXRhICs9IGNodW5rO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBUaGUgd2hvbGUgcmVzcG9uc2UgaGFzIGJlZW4gcmVjZWl2ZWRcclxuICAgICAgICByZXNwb25zZS5vbignZW5kJywgKCkgPT4ge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmVzcG9uc2UudGV4dCA9IHJlc3BvbnNlRGF0YTtcclxuICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XHJcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KVxyXG4gICAgICAub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gV3JpdGUgdGhlIHJlcXVlc3QgYm9keSBhbmQgZW5kIHRoZSByZXF1ZXN0XHJcbiAgICByZXF1ZXN0LndyaXRlKGRhdGEpO1xyXG4gICAgcmVxdWVzdC5lbmQoKTtcclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIEhUVFAgb3IgSFRUUFMgcHJvdG9jb2wgbW9kdWxlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBVUkwuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBfZ2V0UHJvdG9jb2xNb2R1bGVcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBVUkwgdG8gZGV0ZXJtaW5lIHRoZSBwcm90b2NvbC5cclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIEhUVFAgb3IgSFRUUFMgcHJvdG9jb2wgbW9kdWxlIChodHRwIG9yIGh0dHBzKS5cclxuICovXHJcbmZ1bmN0aW9uIF9nZXRQcm90b2NvbE1vZHVsZSh1cmwpIHtcclxuICByZXR1cm4gdXJsLnN0YXJ0c1dpdGgoJ2h0dHBzJykgPyBodHRwcyA6IGh0dHA7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBmZXRjaCxcclxuICBwb3N0XHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBUaGUgY2FjaGUgbWFuYWdlciBpcyByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgYW5kIG1hbmFnaW5nXHJcbiAqIHRoZSBIaWdoY2hhcnRzIGxpYnJhcnkgYWxvbmcgd2l0aCBpdHMgZGVwZW5kZW5jaWVzLiBJdCBlbnN1cmVzIHRoYXQgdGhlc2VcclxuICogcmVzb3VyY2VzIGFyZSBzdG9yZWQgYW5kIHJldHJpZXZlZCBlZmZpY2llbnRseSB0byBvcHRpbWl6ZSBwZXJmb3JtYW5jZVxyXG4gKiBhbmQgcmVkdWNlIHJlZHVuZGFudCBuZXR3b3JrIHJlcXVlc3RzLiBUaGUgY2FjaGUgaXMgc3RvcmVkIGluIHRoZSBgLmNhY2hlYFxyXG4gKiBkaXJlY3RvcnkgYnkgZGVmYXVsdCwgd2hpY2ggc2VydmVzIGFzIGEgZGVkaWNhdGVkIGZvbGRlciBmb3Iga2VlcGluZyBjYWNoZWRcclxuICogZmlsZXMuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgZXhpc3RzU3luYywgbWtkaXJTeW5jLCByZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmMgfSBmcm9tICdmcyc7XHJcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcclxuXHJcbmltcG9ydCB7IEh0dHBzUHJveHlBZ2VudCB9IGZyb20gJ2h0dHBzLXByb3h5LWFnZW50JztcclxuXHJcbmltcG9ydCB7IGdldE9wdGlvbnMsIHVwZGF0ZU9wdGlvbnMgfSBmcm9tICcuL2NvbmZpZy5qcyc7XHJcbmltcG9ydCB7IGZldGNoIH0gZnJvbSAnLi9mZXRjaC5qcyc7XHJcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4vbG9nZ2VyLmpzJztcclxuaW1wb3J0IHsgZ2V0QWJzb2x1dGVQYXRoIH0gZnJvbSAnLi91dGlscy5qcyc7XHJcblxyXG5pbXBvcnQgRXhwb3J0RXJyb3IgZnJvbSAnLi9lcnJvcnMvRXhwb3J0RXJyb3IuanMnO1xyXG5cclxuLy8gVGhlIGluaXRpYWwgY2FjaGUgdGVtcGxhdGVcclxuY29uc3QgY2FjaGUgPSB7XHJcbiAgY2RuVXJsOiAnaHR0cHM6Ly9jb2RlLmhpZ2hjaGFydHMuY29tJyxcclxuICBhY3RpdmVNYW5pZmVzdDoge30sXHJcbiAgc291cmNlczogJycsXHJcbiAgaGNWZXJzaW9uOiAnJ1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrcyB0aGUgY2FjaGUgZm9yIEhpZ2hjaGFydHMgZGVwZW5kZW5jaWVzLCB1cGRhdGVzIHRoZSBjYWNoZSBpZiBuZWVkZWQsXHJcbiAqIGFuZCBsb2FkcyB0aGUgc291cmNlcy5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBjaGVja0FuZFVwZGF0ZUNhY2hlXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBoaWdoY2hhcnRzT3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nXHJcbiAqIGBoaWdoY2hhcnRzYCBvcHRpb25zLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gc2VydmVyUHJveHlPcHRpb25zLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbmluZ1xyXG4gKiBgc2VydmVyLnByb3h5YCBvcHRpb25zLlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrQW5kVXBkYXRlQ2FjaGUoXHJcbiAgaGlnaGNoYXJ0c09wdGlvbnMsXHJcbiAgc2VydmVyUHJveHlPcHRpb25zXHJcbikge1xyXG4gIHRyeSB7XHJcbiAgICBsZXQgZmV0Y2hlZE1vZHVsZXM7XHJcblxyXG4gICAgLy8gR2V0IHRoZSBjYWNoZSBwYXRoXHJcbiAgICBjb25zdCBjYWNoZVBhdGggPSBnZXRDYWNoZVBhdGgoKTtcclxuXHJcbiAgICAvLyBQcmVwYXJlIHBhdGhzIHRvIG1hbmlmZXN0IGFuZCBzb3VyY2VzIGZyb20gdGhlIGNhY2hlIGZvbGRlclxyXG4gICAgY29uc3QgbWFuaWZlc3RQYXRoID0gam9pbihjYWNoZVBhdGgsICdtYW5pZmVzdC5qc29uJyk7XHJcbiAgICBjb25zdCBzb3VyY2VQYXRoID0gam9pbihjYWNoZVBhdGgsICdzb3VyY2VzLmpzJyk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBjYWNoZSBkZXN0aW5hdGlvbiBpZiBpdCBkb2Vzbid0IGV4aXN0IGFscmVhZHlcclxuICAgICFleGlzdHNTeW5jKGNhY2hlUGF0aCkgJiYgbWtkaXJTeW5jKGNhY2hlUGF0aCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XHJcblxyXG4gICAgLy8gRmV0Y2ggYWxsIHRoZSBzY3JpcHRzIGVpdGhlciBpZiB0aGUgYG1hbmlmZXN0Lmpzb25gIGRvZXMgbm90IGV4aXN0XHJcbiAgICAvLyBvciBpZiB0aGUgYGZvcmNlRmV0Y2hgIG9wdGlvbiBpcyBlbmFibGVkXHJcbiAgICBpZiAoIWV4aXN0c1N5bmMobWFuaWZlc3RQYXRoKSB8fCBoaWdoY2hhcnRzT3B0aW9ucy5mb3JjZUZldGNoKSB7XHJcbiAgICAgIGxvZygzLCAnW2NhY2hlXSBGZXRjaGluZyBhbmQgY2FjaGluZyBIaWdoY2hhcnRzIGRlcGVuZGVuY2llcy4nKTtcclxuICAgICAgZmV0Y2hlZE1vZHVsZXMgPSBhd2FpdCBfdXBkYXRlQ2FjaGUoXHJcbiAgICAgICAgaGlnaGNoYXJ0c09wdGlvbnMsXHJcbiAgICAgICAgc2VydmVyUHJveHlPcHRpb25zLFxyXG4gICAgICAgIHNvdXJjZVBhdGhcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxldCByZXF1ZXN0VXBkYXRlID0gZmFsc2U7XHJcblxyXG4gICAgICAvLyBSZWFkIHRoZSBtYW5pZmVzdCBKU09OXHJcbiAgICAgIGNvbnN0IG1hbmlmZXN0ID0gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMobWFuaWZlc3RQYXRoKSwgJ3V0ZjgnKTtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBtb2R1bGVzIGlzIGFuIGFycmF5LCBpZiBzbywgd2UgcmV3cml0ZSBpdCB0byBhIG1hcCB0byBtYWtlXHJcbiAgICAgIC8vIGl0IGVhc2llciB0byByZXNvbHZlIG1vZHVsZXMuXHJcbiAgICAgIGlmIChtYW5pZmVzdC5tb2R1bGVzICYmIEFycmF5LmlzQXJyYXkobWFuaWZlc3QubW9kdWxlcykpIHtcclxuICAgICAgICBjb25zdCBtb2R1bGVNYXAgPSB7fTtcclxuICAgICAgICBtYW5pZmVzdC5tb2R1bGVzLmZvckVhY2goKG0pID0+IChtb2R1bGVNYXBbbV0gPSAxKSk7XHJcbiAgICAgICAgbWFuaWZlc3QubW9kdWxlcyA9IG1vZHVsZU1hcDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gR2V0IHRoZSBhY3R1YWwgbnVtYmVyIG9mIHNjcmlwdHMgdG8gYmUgZmV0Y2hlZFxyXG4gICAgICBjb25zdCB7IGNvcmVTY3JpcHRzLCBtb2R1bGVTY3JpcHRzLCBpbmRpY2F0b3JTY3JpcHRzIH0gPVxyXG4gICAgICAgIGhpZ2hjaGFydHNPcHRpb25zO1xyXG4gICAgICBjb25zdCBudW1iZXJPZk1vZHVsZXMgPVxyXG4gICAgICAgIGNvcmVTY3JpcHRzLmxlbmd0aCArIG1vZHVsZVNjcmlwdHMubGVuZ3RoICsgaW5kaWNhdG9yU2NyaXB0cy5sZW5ndGg7XHJcblxyXG4gICAgICAvLyBDb21wYXJlIHRoZSBsb2FkZWQgaGlnaGNoYXJ0cyBjb25maWcgd2l0aCB0aGUgY29udGVudHMgaW4gY2FjaGUuXHJcbiAgICAgIC8vIElmIHRoZXJlIGFyZSBjaGFuZ2VzLCBmZXRjaCByZXF1ZXN0ZWQgbW9kdWxlcyBhbmQgcHJvZHVjdHMsXHJcbiAgICAgIC8vIGFuZCBiYWtlIHRoZW0gaW50byBhIGdpYW50IGJsb2IuIFNhdmUgdGhlIGJsb2IuXHJcbiAgICAgIGlmIChtYW5pZmVzdC52ZXJzaW9uICE9PSBoaWdoY2hhcnRzT3B0aW9ucy52ZXJzaW9uKSB7XHJcbiAgICAgICAgbG9nKFxyXG4gICAgICAgICAgMixcclxuICAgICAgICAgICdbY2FjaGVdIEEgSGlnaGNoYXJ0cyB2ZXJzaW9uIG1pc21hdGNoIGluIHRoZSBjYWNoZSwgbmVlZCB0byByZS1mZXRjaC4nXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXF1ZXN0VXBkYXRlID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICBPYmplY3Qua2V5cyhtYW5pZmVzdC5tb2R1bGVzIHx8IHt9KS5sZW5ndGggIT09IG51bWJlck9mTW9kdWxlc1xyXG4gICAgICApIHtcclxuICAgICAgICBsb2coXHJcbiAgICAgICAgICAyLFxyXG4gICAgICAgICAgJ1tjYWNoZV0gVGhlIGNhY2hlIGFuZCB0aGUgcmVxdWVzdGVkIG1vZHVsZXMgZG8gbm90IG1hdGNoLCBuZWVkIHRvIHJlLWZldGNoLidcclxuICAgICAgICApO1xyXG4gICAgICAgIHJlcXVlc3RVcGRhdGUgPSB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIENoZWNrIGVhY2ggbW9kdWxlLCBpZiBhbnl0aGluZyBpcyBtaXNzaW5nIHJlZmV0Y2ggZXZlcnl0aGluZ1xyXG4gICAgICAgIHJlcXVlc3RVcGRhdGUgPSAobW9kdWxlU2NyaXB0cyB8fCBbXSkuc29tZSgobW9kdWxlTmFtZSkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFtYW5pZmVzdC5tb2R1bGVzW21vZHVsZU5hbWVdKSB7XHJcbiAgICAgICAgICAgIGxvZyhcclxuICAgICAgICAgICAgICAyLFxyXG4gICAgICAgICAgICAgIGBbY2FjaGVdIFRoZSAke21vZHVsZU5hbWV9IGlzIG1pc3NpbmcgaW4gdGhlIGNhY2hlLCBuZWVkIHRvIHJlLWZldGNoLmBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBjYWNoZSBpZiBuZWVkZWRcclxuICAgICAgaWYgKHJlcXVlc3RVcGRhdGUpIHtcclxuICAgICAgICBmZXRjaGVkTW9kdWxlcyA9IGF3YWl0IF91cGRhdGVDYWNoZShcclxuICAgICAgICAgIGhpZ2hjaGFydHNPcHRpb25zLFxyXG4gICAgICAgICAgc2VydmVyUHJveHlPcHRpb25zLFxyXG4gICAgICAgICAgc291cmNlUGF0aFxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbG9nKDMsICdbY2FjaGVdIERlcGVuZGVuY3kgY2FjaGUgaXMgdXAgdG8gZGF0ZSwgcHJvY2VlZGluZy4nKTtcclxuXHJcbiAgICAgICAgLy8gTG9hZCB0aGUgc291cmNlc1xyXG4gICAgICAgIGNhY2hlLnNvdXJjZXMgPSByZWFkRmlsZVN5bmMoc291cmNlUGF0aCwgJ3V0ZjgnKTtcclxuXHJcbiAgICAgICAgLy8gR2V0IGN1cnJlbnQgbW9kdWxlcyBtYXBcclxuICAgICAgICBmZXRjaGVkTW9kdWxlcyA9IG1hbmlmZXN0Lm1vZHVsZXM7XHJcblxyXG4gICAgICAgIC8vIEV4dHJhY3QgYW5kIHNhdmUgdmVyc2lvbiBvZiBjdXJyZW50bHkgdXNlZCBIaWdoY2hhcnRzXHJcbiAgICAgICAgY2FjaGUuaGNWZXJzaW9uID0gZXh0cmFjdFZlcnNpb24oY2FjaGUuc291cmNlcyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBGaW5hbGx5LCBzYXZlIHRoZSBuZXcgbWFuaWZlc3QsIHdoaWNoIGlzIGJhc2ljYWxseSBvdXIgY3VycmVudCBjb25maWdcclxuICAgIC8vIGluIGEgc2xpZ2h0bHkgZGlmZmVyZW50IGZvcm1hdFxyXG4gICAgYXdhaXQgX3NhdmVDb25maWdUb01hbmlmZXN0KGhpZ2hjaGFydHNPcHRpb25zLCBmZXRjaGVkTW9kdWxlcyk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgJ1tjYWNoZV0gQ291bGQgbm90IGNvbmZpZ3VyZSBjYWNoZSBhbmQgY3JlYXRlIG9yIHVwZGF0ZSB0aGUgY29uZmlnIG1hbmlmZXN0LicsXHJcbiAgICAgIDUwMFxyXG4gICAgKS5zZXRFcnJvcihlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgdmVyc2lvbiBvZiBIaWdoY2hhcnRzIGZyb20gdGhlIGNhY2hlLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZ2V0SGlnaGNoYXJ0c1ZlcnNpb25cclxuICpcclxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNhY2hlZCBIaWdoY2hhcnRzIHZlcnNpb24uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGlnaGNoYXJ0c1ZlcnNpb24oKSB7XHJcbiAgcmV0dXJuIGNhY2hlLmhjVmVyc2lvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZXMgdGhlIEhpZ2hjaGFydHMgdmVyc2lvbiBpbiB0aGUgYXBwbGllZCBjb25maWd1cmF0aW9uIGFuZCBjaGVja3NcclxuICogdGhlIGNhY2hlIGZvciB0aGUgbmV3IHZlcnNpb24uXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gdXBkYXRlSGlnaGNoYXJ0c1ZlcnNpb25cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IG5ld1ZlcnNpb24gLSBUaGUgbmV3IEhpZ2hjaGFydHMgdmVyc2lvbiB0byBiZSBhcHBsaWVkLlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUhpZ2hjaGFydHNWZXJzaW9uKG5ld1ZlcnNpb24pIHtcclxuICAvLyBVcGRhdGUgdG8gdGhlIG5ldyB2ZXJzaW9uXHJcbiAgY29uc3Qgb3B0aW9ucyA9IHVwZGF0ZU9wdGlvbnMoe1xyXG4gICAgaGlnaGNoYXJ0czoge1xyXG4gICAgICB2ZXJzaW9uOiBuZXdWZXJzaW9uXHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vIENoZWNrIGlmIGNhY2hlIG5lZWRzIHRvIGJlIHVwZGF0ZWRcclxuICBhd2FpdCBjaGVja0FuZFVwZGF0ZUNhY2hlKG9wdGlvbnMuaGlnaGNoYXJ0cywgb3B0aW9ucy5zZXJ2ZXIucHJveHkpO1xyXG59XHJcblxyXG4vKipcclxuICogRXh0cmFjdHMgSGlnaGNoYXJ0cyB2ZXJzaW9uIGZyb20gdGhlIGNhY2hlJ3Mgc291cmNlcyBzdHJpbmcuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBleHRyYWN0VmVyc2lvblxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGVTb3VyY2VzIC0gVGhlIGNhY2hlIHNvdXJjZXMgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZXh0cmFjdGVkIEhpZ2hjaGFydHMgdmVyc2lvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0VmVyc2lvbihjYWNoZVNvdXJjZXMpIHtcclxuICByZXR1cm4gY2FjaGVTb3VyY2VzXHJcbiAgICAuc3Vic3RyaW5nKDAsIGNhY2hlU291cmNlcy5pbmRleE9mKCcqLycpKVxyXG4gICAgLnJlcGxhY2UoJy8qJywgJycpXHJcbiAgICAucmVwbGFjZSgnKi8nLCAnJylcclxuICAgIC5yZXBsYWNlKC9cXG4vZywgJycpXHJcbiAgICAudHJpbSgpO1xyXG59XHJcblxyXG4vKipcclxuICogRXh0cmFjdHMgdGhlIEhpZ2hjaGFydHMgbW9kdWxlIG5hbWUgYmFzZWQgb24gdGhlIHNjcmlwdFBhdGguXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBleHRyYWN0TW9kdWxlTmFtZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc2NyaXB0UGF0aCAtIFRoZSBwYXRoIG9mIHRoZSBzY3JpcHQgZnJvbSB3aGljaCB0aGUgbW9kdWxlXHJcbiAqIG5hbWUgd2lsbCBiZSBleHRyYWN0ZWQuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBleHRyYWN0ZWQgbW9kdWxlIG5hbWUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdE1vZHVsZU5hbWUoc2NyaXB0UGF0aCkge1xyXG4gIHJldHVybiBzY3JpcHRQYXRoLnJlcGxhY2UoXHJcbiAgICAvKC4qKVxcL3woLiopbW9kdWxlc1xcL3xzdG9ja1xcLyguKilpbmRpY2F0b3JzXFwvfG1hcHNcXC8oLiopbW9kdWxlc1xcLy9naSxcclxuICAgICcnXHJcbiAgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHJpZXZlcyB0aGUgY3VycmVudCBjYWNoZSBvYmplY3QuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBnZXRDYWNoZVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY2FjaGUgb2JqZWN0IGNvbnRhaW5pbmcgdmFyaW91cyBjYWNoZWQgZGF0YS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDYWNoZSgpIHtcclxuICByZXR1cm4gY2FjaGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBjYWNoZSBwYXRoIGZvciBIaWdoY2hhcnRzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZ2V0Q2FjaGVQYXRoXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBhYnNvbHV0ZSBwYXRoIHRvIHRoZSBjYWNoZSBkaXJlY3RvcnkgZm9yIEhpZ2hjaGFydHMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FjaGVQYXRoKCkge1xyXG4gIHJldHVybiBnZXRBYnNvbHV0ZVBhdGgoZ2V0T3B0aW9ucygpLmhpZ2hjaGFydHMuY2FjaGVQYXRoLCAndXRmOCcpOyAvLyAjNTYyXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGZXRjaGVzIGEgc2luZ2xlIHNjcmlwdCBhbmQgdXBkYXRlcyB0aGUgYGZldGNoZWRNb2R1bGVzYCBhY2NvcmRpbmdseS5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBfZmV0Y2hBbmRQcm9jZXNzU2NyaXB0XHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzY3JpcHQgLSBBIHBhdGggdG8gc2NyaXB0IHRvIGdldC5cclxuICogQHBhcmFtIHtPYmplY3R9IHJlcXVlc3RPcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGUgcHJveHkgYWdlbnRcclxuICogdG8gdXNlIGZvciBhIHJlcXVlc3QuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBmZXRjaGVkTW9kdWxlcyAtIEFuIG9iamVjdCB3aGljaCB0cmFja3Mgd2hpY2ggSGlnaGNoYXJ0c1xyXG4gKiBtb2R1bGVzIGhhdmUgYmVlbiBmZXRjaGVkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtzaG91bGRUaHJvd0Vycm9yPWZhbHNlXSAtIEEgZmxhZyB0byBpbmRpY2F0ZSBpZiB0aGUgZXJyb3JcclxuICogc2hvdWxkIGJlIHRocm93bi4gVGhpcyBzaG91bGQgYmUgdXNlZCBvbmx5IGZvciB0aGUgY29yZSBzY3JpcHRzLiBUaGUgZGVmYXVsdFxyXG4gKiB2YWx1ZSBpcyBgZmFsc2VgLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgdGV4dCByZXByZXNlbnRhdGlvblxyXG4gKiBvZiB0aGUgZmV0Y2hlZCBzY3JpcHQuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiB0aGVyZSBpcyBhIHByb2JsZW1cclxuICogd2l0aCBmZXRjaGluZyB0aGUgc2NyaXB0LlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX2ZldGNoQW5kUHJvY2Vzc1NjcmlwdChcclxuICBzY3JpcHQsXHJcbiAgcmVxdWVzdE9wdGlvbnMsXHJcbiAgZmV0Y2hlZE1vZHVsZXMsXHJcbiAgc2hvdWxkVGhyb3dFcnJvciA9IGZhbHNlXHJcbikge1xyXG4gIC8vIEdldCByaWQgb2YgdGhlIC5qcyBmcm9tIHRoZSBjdXN0b20gc3RyaW5nc1xyXG4gIGlmIChzY3JpcHQuZW5kc1dpdGgoJy5qcycpKSB7XHJcbiAgICBzY3JpcHQgPSBzY3JpcHQuc3Vic3RyaW5nKDAsIHNjcmlwdC5sZW5ndGggLSAzKTtcclxuICB9XHJcbiAgbG9nKDQsIGBbY2FjaGVdIEZldGNoaW5nIHNjcmlwdCAtICR7c2NyaXB0fS5qc2ApO1xyXG5cclxuICAvLyBGZXRjaCB0aGUgc2NyaXB0XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtzY3JpcHR9LmpzYCwgcmVxdWVzdE9wdGlvbnMpO1xyXG5cclxuICAvLyBJZiBPSywgcmV0dXJuIGl0cyB0ZXh0IHJlcHJlc2VudGF0aW9uXHJcbiAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDIwMCAmJiB0eXBlb2YgcmVzcG9uc2UudGV4dCA9PSAnc3RyaW5nJykge1xyXG4gICAgaWYgKGZldGNoZWRNb2R1bGVzKSB7XHJcbiAgICAgIGNvbnN0IG1vZHVsZU5hbWUgPSBleHRyYWN0TW9kdWxlTmFtZShzY3JpcHQpO1xyXG4gICAgICBmZXRjaGVkTW9kdWxlc1ttb2R1bGVOYW1lXSA9IDE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzcG9uc2UudGV4dDtcclxuICB9XHJcblxyXG4gIC8vIEJhc2VkIG9uIHRoZSBgc2hvdWxkVGhyb3dFcnJvcmAgZmxhZywgZGVjaWRlIGhvdyB0byBzZXJ2ZSBlcnJvciBtZXNzYWdlXHJcbiAgaWYgKHNob3VsZFRocm93RXJyb3IpIHtcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgYFtjYWNoZV0gQ291bGQgbm90IGZldGNoIHRoZSAke3NjcmlwdH0uanMuIFRoZSBzY3JpcHQgbWlnaHQgbm90IGV4aXN0IGluIHRoZSByZXF1ZXN0ZWQgdmVyc2lvbiAoc3RhdHVzIGNvZGU6ICR7cmVzcG9uc2Uuc3RhdHVzQ29kZX0pLmAsXHJcbiAgICAgIDQwNFxyXG4gICAgKS5zZXRFcnJvcihyZXNwb25zZSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGxvZyhcclxuICAgICAgMixcclxuICAgICAgYFtjYWNoZV0gQ291bGQgbm90IGZldGNoIHRoZSAke3NjcmlwdH0uanMuIFRoZSBzY3JpcHQgbWlnaHQgbm90IGV4aXN0IGluIHRoZSByZXF1ZXN0ZWQgdmVyc2lvbi5gXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFNhdmVzIHRoZSBwcm92aWRlZCBjb25maWd1cmF0aW9uIGFuZCBmZXRjaGVkIG1vZHVsZXMgdG8gdGhlIGNhY2hlIG1hbmlmZXN0XHJcbiAqIGZpbGUuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gX3NhdmVDb25maWdUb01hbmlmZXN0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBoaWdoY2hhcnRzT3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nXHJcbiAqIGBoaWdoY2hhcnRzYCBvcHRpb25zLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gW2ZldGNoZWRNb2R1bGVzPXt9XSAtIEFuIG9iamVjdCB3aGljaCB0cmFja3Mgd2hpY2ggSGlnaGNoYXJ0c1xyXG4gKiBtb2R1bGVzIGhhdmUgYmVlbiBmZXRjaGVkLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBhbiBlbXB0eSBvYmplY3QuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiBhbiBlcnJvciBvY2N1cnMgd2hpbGVcclxuICogd3JpdGluZyB0aGUgY2FjaGUgbWFuaWZlc3QuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfc2F2ZUNvbmZpZ1RvTWFuaWZlc3QoaGlnaGNoYXJ0c09wdGlvbnMsIGZldGNoZWRNb2R1bGVzID0ge30pIHtcclxuICBjb25zdCBuZXdNYW5pZmVzdCA9IHtcclxuICAgIHZlcnNpb246IGhpZ2hjaGFydHNPcHRpb25zLnZlcnNpb24sXHJcbiAgICBtb2R1bGVzOiBmZXRjaGVkTW9kdWxlc1xyXG4gIH07XHJcblxyXG4gIC8vIFVwZGF0ZSBjYWNoZSBvYmplY3Qgd2l0aCB0aGUgY3VycmVudCBtb2R1bGVzXHJcbiAgY2FjaGUuYWN0aXZlTWFuaWZlc3QgPSBuZXdNYW5pZmVzdDtcclxuXHJcbiAgbG9nKDMsICdbY2FjaGVdIFdyaXRpbmcgYSBuZXcgbWFuaWZlc3QuJyk7XHJcbiAgdHJ5IHtcclxuICAgIHdyaXRlRmlsZVN5bmMoXHJcbiAgICAgIGpvaW4oZ2V0Q2FjaGVQYXRoKCksICdtYW5pZmVzdC5qc29uJyksXHJcbiAgICAgIEpTT04uc3RyaW5naWZ5KG5ld01hbmlmZXN0KSxcclxuICAgICAgJ3V0ZjgnXHJcbiAgICApO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICdbY2FjaGVdIEVycm9yIHdyaXRpbmcgdGhlIGNhY2hlIG1hbmlmZXN0LicsXHJcbiAgICAgIDUwMFxyXG4gICAgKS5zZXRFcnJvcihlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogRmV0Y2hlcyBIaWdoY2hhcnRzIGBzY3JpcHRzYCBhbmQgYGN1c3RvbVNjcmlwdHNgIGZyb20gdGhlIGdpdmVuIENETnMuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gX2ZldGNoU2NyaXB0c1xyXG4gKlxyXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+fSBjb3JlU2NyaXB0cyAtIEhpZ2hjaGFydHMgY29yZSBzY3JpcHRzIHRvIGZldGNoLlxyXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+fSBtb2R1bGVTY3JpcHRzIC0gSGlnaGNoYXJ0cyBtb2R1bGVzIHRvIGZldGNoLlxyXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+fSBjdXN0b21TY3JpcHRzIC0gQ3VzdG9tIHNjcmlwdCBwYXRocyB0byBmZXRjaCAoZnVsbFxyXG4gKiBVUkxzKS5cclxuICogQHBhcmFtIHtPYmplY3R9IHNlcnZlclByb3h5T3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nXHJcbiAqIGBzZXJ2ZXIucHJveHlgIG9wdGlvbnMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBmZXRjaGVkTW9kdWxlcyAtIEFuIG9iamVjdCB3aGljaCB0cmFja3Mgd2hpY2ggSGlnaGNoYXJ0c1xyXG4gKiBtb2R1bGVzIGhhdmUgYmVlbiBmZXRjaGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgZmV0Y2hlZCBzY3JpcHRzXHJcbiAqIGNvbnRlbnQgam9pbmVkLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaWYgYW4gZXJyb3Igb2NjdXJzIHdoaWxlXHJcbiAqIHNldHRpbmcgYW4gSFRUUCBBZ2VudCBmb3IgcHJveHkuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfZmV0Y2hTY3JpcHRzKFxyXG4gIGNvcmVTY3JpcHRzLFxyXG4gIG1vZHVsZVNjcmlwdHMsXHJcbiAgY3VzdG9tU2NyaXB0cyxcclxuICBzZXJ2ZXJQcm94eU9wdGlvbnMsXHJcbiAgZmV0Y2hlZE1vZHVsZXNcclxuKSB7XHJcbiAgLy8gQ29uZmlndXJlIHByb3h5IGlmIGV4aXN0c1xyXG4gIGxldCBwcm94eUFnZW50O1xyXG4gIGNvbnN0IHByb3h5SG9zdCA9IHNlcnZlclByb3h5T3B0aW9ucy5ob3N0O1xyXG4gIGNvbnN0IHByb3h5UG9ydCA9IHNlcnZlclByb3h5T3B0aW9ucy5wb3J0O1xyXG5cclxuICAvLyBUcnkgdG8gY3JlYXRlIGEgUHJveHkgQWdlbnRcclxuICBpZiAocHJveHlIb3N0ICYmIHByb3h5UG9ydCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgcHJveHlBZ2VudCA9IG5ldyBIdHRwc1Byb3h5QWdlbnQoe1xyXG4gICAgICAgIGhvc3Q6IHByb3h5SG9zdCxcclxuICAgICAgICBwb3J0OiBwcm94eVBvcnRcclxuICAgICAgfSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgJ1tjYWNoZV0gQ291bGQgbm90IGNyZWF0ZSBhIFByb3h5IEFnZW50LicsXHJcbiAgICAgICAgNTAwXHJcbiAgICAgICkuc2V0RXJyb3IoZXJyb3IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gSWYgZXhpc3RzLCBhZGQgcHJveHkgYWdlbnQgdG8gcmVxdWVzdCBvcHRpb25zXHJcbiAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSBwcm94eUFnZW50XHJcbiAgICA/IHtcclxuICAgICAgICBhZ2VudDogcHJveHlBZ2VudCxcclxuICAgICAgICB0aW1lb3V0OiBzZXJ2ZXJQcm94eU9wdGlvbnMudGltZW91dFxyXG4gICAgICB9XHJcbiAgICA6IHt9O1xyXG5cclxuICBjb25zdCBhbGxGZXRjaFByb21pc2VzID0gW1xyXG4gICAgLi4uY29yZVNjcmlwdHMubWFwKChzY3JpcHQpID0+XHJcbiAgICAgIF9mZXRjaEFuZFByb2Nlc3NTY3JpcHQoYCR7c2NyaXB0fWAsIHJlcXVlc3RPcHRpb25zLCBmZXRjaGVkTW9kdWxlcywgdHJ1ZSlcclxuICAgICksXHJcbiAgICAuLi5tb2R1bGVTY3JpcHRzLm1hcCgoc2NyaXB0KSA9PlxyXG4gICAgICBfZmV0Y2hBbmRQcm9jZXNzU2NyaXB0KGAke3NjcmlwdH1gLCByZXF1ZXN0T3B0aW9ucywgZmV0Y2hlZE1vZHVsZXMpXHJcbiAgICApLFxyXG4gICAgLi4uY3VzdG9tU2NyaXB0cy5tYXAoKHNjcmlwdCkgPT5cclxuICAgICAgX2ZldGNoQW5kUHJvY2Vzc1NjcmlwdChgJHtzY3JpcHR9YCwgcmVxdWVzdE9wdGlvbnMpXHJcbiAgICApXHJcbiAgXTtcclxuXHJcbiAgY29uc3QgZmV0Y2hlZFNjcmlwdHMgPSBhd2FpdCBQcm9taXNlLmFsbChhbGxGZXRjaFByb21pc2VzKTtcclxuICByZXR1cm4gZmV0Y2hlZFNjcmlwdHMuam9pbignO1xcbicpO1xyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlcyB0aGUgbG9jYWwgY2FjaGUgd2l0aCBIaWdoY2hhcnRzIHNjcmlwdHMgYW5kIHRoZWlyIHZlcnNpb25zLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIF91cGRhdGVDYWNoZVxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gaGlnaGNoYXJ0c09wdGlvbnMgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbmluZ1xyXG4gKiBgaGlnaGNoYXJ0c2Agb3B0aW9ucy5cclxuICogQHBhcmFtIHtPYmplY3R9IHNlcnZlclByb3h5T3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nXHJcbiAqIGBzZXJ2ZXIucHJveHlgIG9wdGlvbnMuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VQYXRoIC0gVGhlIHBhdGggdG8gdGhlIHNvdXJjZSBmaWxlIGluIHRoZSBjYWNoZS5cclxuICpcclxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gb2JqZWN0IHJlcHJlc2VudGluZ1xyXG4gKiB0aGUgZmV0Y2hlZCBtb2R1bGVzLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaWYgdGhlcmUgaXMgYW4gaXNzdWUgdXBkYXRpbmdcclxuICogdGhlIGxvY2FsIEhpZ2hjaGFydHMgY2FjaGUuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfdXBkYXRlQ2FjaGUoaGlnaGNoYXJ0c09wdGlvbnMsIHNlcnZlclByb3h5T3B0aW9ucywgc291cmNlUGF0aCkge1xyXG4gIC8vIEdldCBIaWdoY2hhcnRzIHZlcnNpb24gZm9yIHNjcmlwdHNcclxuICBjb25zdCBoY1ZlcnNpb24gPVxyXG4gICAgaGlnaGNoYXJ0c09wdGlvbnMudmVyc2lvbiA9PT0gJ2xhdGVzdCdcclxuICAgICAgPyBudWxsXHJcbiAgICAgIDogYCR7aGlnaGNoYXJ0c09wdGlvbnMudmVyc2lvbn1gO1xyXG5cclxuICAvLyBHZXQgdGhlIENETiB1cmwgZm9yIHNjcmlwdHNcclxuICBjb25zdCBjZG5VcmwgPSBoaWdoY2hhcnRzT3B0aW9ucy5jZG5VcmwgfHwgY2FjaGUuY2RuVXJsO1xyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgZmV0Y2hlZE1vZHVsZXMgPSB7fTtcclxuXHJcbiAgICBsb2coXHJcbiAgICAgIDMsXHJcbiAgICAgIGBbY2FjaGVdIFVwZGF0aW5nIGNhY2hlIHZlcnNpb24gdG8gSGlnaGNoYXJ0czogJHtoY1ZlcnNpb24gfHwgJ2xhdGVzdCd9LmBcclxuICAgICk7XHJcblxyXG4gICAgY2FjaGUuc291cmNlcyA9IGF3YWl0IF9mZXRjaFNjcmlwdHMoXHJcbiAgICAgIFtcclxuICAgICAgICAuLi5oaWdoY2hhcnRzT3B0aW9ucy5jb3JlU2NyaXB0cy5tYXAoKGMpID0+XHJcbiAgICAgICAgICBoY1ZlcnNpb24gPyBgJHtjZG5Vcmx9LyR7aGNWZXJzaW9ufS8ke2N9YCA6IGAke2NkblVybH0vJHtjfWBcclxuICAgICAgICApXHJcbiAgICAgIF0sXHJcbiAgICAgIFtcclxuICAgICAgICAuLi5oaWdoY2hhcnRzT3B0aW9ucy5tb2R1bGVTY3JpcHRzLm1hcCgobSkgPT5cclxuICAgICAgICAgIG0gPT09ICdtYXAnXHJcbiAgICAgICAgICAgID8gaGNWZXJzaW9uXHJcbiAgICAgICAgICAgICAgPyBgJHtjZG5Vcmx9L21hcHMvJHtoY1ZlcnNpb259L21vZHVsZXMvJHttfWBcclxuICAgICAgICAgICAgICA6IGAke2NkblVybH0vbWFwcy9tb2R1bGVzLyR7bX1gXHJcbiAgICAgICAgICAgIDogaGNWZXJzaW9uXHJcbiAgICAgICAgICAgICAgPyBgJHtjZG5Vcmx9LyR7aGNWZXJzaW9ufS9tb2R1bGVzLyR7bX1gXHJcbiAgICAgICAgICAgICAgOiBgJHtjZG5Vcmx9L21vZHVsZXMvJHttfWBcclxuICAgICAgICApLFxyXG4gICAgICAgIC4uLmhpZ2hjaGFydHNPcHRpb25zLmluZGljYXRvclNjcmlwdHMubWFwKChpKSA9PlxyXG4gICAgICAgICAgaGNWZXJzaW9uXHJcbiAgICAgICAgICAgID8gYCR7Y2RuVXJsfS9zdG9jay8ke2hjVmVyc2lvbn0vaW5kaWNhdG9ycy8ke2l9YFxyXG4gICAgICAgICAgICA6IGAke2NkblVybH0vc3RvY2svaW5kaWNhdG9ycy8ke2l9YFxyXG4gICAgICAgIClcclxuICAgICAgXSxcclxuICAgICAgaGlnaGNoYXJ0c09wdGlvbnMuY3VzdG9tU2NyaXB0cyxcclxuICAgICAgc2VydmVyUHJveHlPcHRpb25zLFxyXG4gICAgICBmZXRjaGVkTW9kdWxlc1xyXG4gICAgKTtcclxuXHJcbiAgICAvLyBFeHRyYWN0IGFuZCBzYXZlIHZlcnNpb24gb2YgY3VycmVudGx5IHVzZWQgSGlnaGNoYXJ0c1xyXG4gICAgY2FjaGUuaGNWZXJzaW9uID0gZXh0cmFjdFZlcnNpb24oY2FjaGUuc291cmNlcyk7XHJcblxyXG4gICAgLy8gU2F2ZSB0aGUgZmV0Y2hlZCBtb2R1bGVzIGludG8gY2FjaGVzJyBzb3VyY2UgSlNPTlxyXG4gICAgd3JpdGVGaWxlU3luYyhzb3VyY2VQYXRoLCBjYWNoZS5zb3VyY2VzKTtcclxuICAgIHJldHVybiBmZXRjaGVkTW9kdWxlcztcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAnW2NhY2hlXSBVbmFibGUgdG8gdXBkYXRlIHRoZSBsb2NhbCBIaWdoY2hhcnRzIGNhY2hlLicsXHJcbiAgICAgIDUwMFxyXG4gICAgKS5zZXRFcnJvcihlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgY2hlY2tBbmRVcGRhdGVDYWNoZSxcclxuICBnZXRIaWdoY2hhcnRzVmVyc2lvbixcclxuICB1cGRhdGVIaWdoY2hhcnRzVmVyc2lvbixcclxuICBleHRyYWN0VmVyc2lvbixcclxuICBleHRyYWN0TW9kdWxlTmFtZSxcclxuICBnZXRDYWNoZSxcclxuICBnZXRDYWNoZVBhdGhcclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQG92ZXJ2aWV3IFByb3ZpZGVzIG1ldGhvZHMgZm9yIGluaXRpYWxpemluZyBIaWdoY2hhcnRzIHdpdGggY3VzdG9taXplZFxyXG4gKiBhbmltYXRpb24gc2V0dGluZ3MgYW5kIHRyaWdnZXJpbmcgdGhlIGNyZWF0aW9uIG9mIEhpZ2hjaGFydHMgY2hhcnRzIHdpdGhcclxuICogZXhwb3J0LXNwZWNpZmljIGNvbmZpZ3VyYXRpb25zIGluIHRoZSBwYWdlIGNvbnRleHQuIFN1cHBvcnRzIGR5bmFtaWMgb3B0aW9uXHJcbiAqIG1lcmdpbmcsIGN1c3RvbSBsb2dpYyBpbmplY3Rpb24sIGFuZCBjb250cm9sIG92ZXIgcmVuZGVyaW5nIGJlaGF2aW9ycy4gVXNlZFxyXG4gKiBieSB0aGUgUHVwcGV0ZWVyIHBhZ2UuXHJcbiAqL1xyXG5cclxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cclxuXHJcbi8qKlxyXG4gKiBTZXR0aW5nIHRoZSBgSGlnaGNoYXJ0cy5hbmltT2JqZWN0YCBmdW5jdGlvbi4gQ2FsbGVkIHdoZW4gaW5pdGluZyB0aGUgcGFnZS5cclxuICpcclxuICogQGZ1bmN0aW9uIHNldHVwSGlnaGNoYXJ0c1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwSGlnaGNoYXJ0cygpIHtcclxuICBIaWdoY2hhcnRzLmFuaW1PYmplY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4geyBkdXJhdGlvbjogMCB9O1xyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIHRoZSBhY3R1YWwgSGlnaGNoYXJ0cyBjaGFydCBvbiBhIHBhZ2UuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gY3JlYXRlQ2hhcnRcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IGV4cG9ydE9wdGlvbnMgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbmluZyBgZXhwb3J0YFxyXG4gKiBvcHRpb25zLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gY3VzdG9tTG9naWNPcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmdcclxuICogYGN1c3RvbUxvZ2ljYCBvcHRpb25zLlxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUNoYXJ0KGV4cG9ydE9wdGlvbnMsIGN1c3RvbUxvZ2ljT3B0aW9ucykge1xyXG4gIC8vIEdldCByZXF1aXJlZCBmdW5jdGlvbnNcclxuICBjb25zdCB7IGdldE9wdGlvbnMsIHNldE9wdGlvbnMsIG1lcmdlLCB3cmFwIH0gPSBIaWdoY2hhcnRzO1xyXG5cclxuICAvLyBDcmVhdGUgYSBzZXBhcmF0ZSBvYmplY3QgZm9yIGEgcG90ZW50aWFsIGBzZXRPcHRpb25zYCB1c2FnZXMgaW4gb3JkZXJcclxuICAvLyB0byBwcmV2ZW50IGZyb20gcG9sbHV0aW5nIG90aGVyIGV4cG9ydHMgdGhhdCBjYW4gaGFwcGVuIG9uIHRoZSBzYW1lIHBhZ2VcclxuICBIaWdoY2hhcnRzLnNldE9wdGlvbnNPYmogPSBtZXJnZShmYWxzZSwge30sIGdldE9wdGlvbnMoKSk7XHJcblxyXG4gIC8vIE5PVEU6IElzIHRoaXMgdXNlZCBmb3IgYW55dGhpbmcgdXNlZnVsP1xyXG4gIHdpbmRvdy5pc1JlbmRlckNvbXBsZXRlID0gZmFsc2U7XHJcbiAgd3JhcChIaWdoY2hhcnRzLkNoYXJ0LnByb3RvdHlwZSwgJ2luaXQnLCBmdW5jdGlvbiAocHJvY2VlZCwgdXNlck9wdGlvbnMsIGNiKSB7XHJcbiAgICAvLyBPdmVycmlkZSB0aGUgYHVzZXJPcHRpb25zYCB3aXRoIGltYWdlIGZyaWVuZGx5IG9wdGlvbnNcclxuICAgIHVzZXJPcHRpb25zID0gbWVyZ2UodXNlck9wdGlvbnMsIHtcclxuICAgICAgZXhwb3J0aW5nOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgcGxvdE9wdGlvbnM6IHtcclxuICAgICAgICBzZXJpZXM6IHtcclxuICAgICAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICAvKiBFeHBlY3RzIHRvb2x0aXAgaW4gdGhlIGB1c2VyT3B0aW9uc2Agd2hlbiBgZm9yRXhwb3J0YCBpcyB0cnVlLlxyXG4gICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9oaWdoY2hhcnRzL2hpZ2hjaGFydHMvYmxvYi8zYWQ0MzBhMzUzYjgwNTZiOWU3NjRhYTRlNWNkNjgyOGFhNDc5ZGIyL2pzL3BhcnRzL0NoYXJ0LmpzI0wyNDFcclxuICAgICAgICAqL1xyXG4gICAgICB0b29sdGlwOiB7fVxyXG4gICAgfSk7XHJcblxyXG4gICAgKHVzZXJPcHRpb25zLnNlcmllcyB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAoc2VyaWVzKSB7XHJcbiAgICAgIHNlcmllcy5hbmltYXRpb24gPSBmYWxzZTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFkZCBmbGFnIHRvIGtub3cgaWYgY2hhcnQgcmVuZGVyIGhhcyBiZWVuIGNhbGxlZC5cclxuICAgIGlmICghd2luZG93Lm9uSGlnaGNoYXJ0c1JlbmRlcikge1xyXG4gICAgICB3aW5kb3cub25IaWdoY2hhcnRzUmVuZGVyID0gSGlnaGNoYXJ0cy5hZGRFdmVudCh0aGlzLCAncmVuZGVyJywgKCkgPT4ge1xyXG4gICAgICAgIHdpbmRvdy5pc1JlbmRlckNvbXBsZXRlID0gdHJ1ZTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvY2VlZC5hcHBseSh0aGlzLCBbdXNlck9wdGlvbnMsIGNiXSk7XHJcbiAgfSk7XHJcblxyXG4gIHdyYXAoSGlnaGNoYXJ0cy5TZXJpZXMucHJvdG90eXBlLCAnaW5pdCcsIGZ1bmN0aW9uIChwcm9jZWVkLCBjaGFydCwgb3B0aW9ucykge1xyXG4gICAgcHJvY2VlZC5hcHBseSh0aGlzLCBbY2hhcnQsIG9wdGlvbnNdKTtcclxuICB9KTtcclxuXHJcbiAgLy8gU29tZSBtYW5kYXRvcnkgYWRkaXRpb25hbCBgY2hhcnRgIGFuZCBgZXhwb3J0aW5nYCBvcHRpb25zXHJcbiAgY29uc3QgYWRkaXRpb25hbE9wdGlvbnMgPSB7XHJcbiAgICBjaGFydDoge1xyXG4gICAgICAvLyBCeSBkZWZhdWx0IGFuaW1hdGlvbiBpcyBkaXNhYmxlZFxyXG4gICAgICBhbmltYXRpb246IGZhbHNlLFxyXG4gICAgICAvLyBHZXQgdGhlIHJpZ2h0IHNpemUgdmFsdWVzXHJcbiAgICAgIGhlaWdodDogZXhwb3J0T3B0aW9ucy5oZWlnaHQsXHJcbiAgICAgIHdpZHRoOiBleHBvcnRPcHRpb25zLndpZHRoXHJcbiAgICB9LFxyXG4gICAgZXhwb3J0aW5nOiB7XHJcbiAgICAgIC8vIE5vIG5lZWQgZm9yIHRoZSBleHBvcnRpbmcgYnV0dG9uXHJcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gR2V0IHRoZSBpbnB1dCB0byBleHBvcnQgZnJvbSB0aGUgYGluc3RyYCBvcHRpb25cclxuICBjb25zdCB1c2VyT3B0aW9ucyA9IG5ldyBGdW5jdGlvbihgcmV0dXJuICR7ZXhwb3J0T3B0aW9ucy5pbnN0cn1gKSgpO1xyXG5cclxuICAvLyBHZXQgdGhlIGB0aGVtZU9wdGlvbnNgIG9wdGlvblxyXG4gIGNvbnN0IHRoZW1lT3B0aW9ucyA9IG5ldyBGdW5jdGlvbihgcmV0dXJuICR7ZXhwb3J0T3B0aW9ucy50aGVtZU9wdGlvbnN9YCkoKTtcclxuXHJcbiAgLy8gR2V0IHRoZSBgZ2xvYmFsT3B0aW9uc2Agb3B0aW9uXHJcbiAgY29uc3QgZ2xvYmFsT3B0aW9ucyA9IG5ldyBGdW5jdGlvbihgcmV0dXJuICR7ZXhwb3J0T3B0aW9ucy5nbG9iYWxPcHRpb25zfWApKCk7XHJcblxyXG4gIC8vIE1lcmdlIHRoZSBmb2xsb3dpbmcgb3B0aW9ucyBvYmplY3RzIHRvIGNyZWF0ZSBmaW5hbCBvcHRpb25zXHJcbiAgY29uc3QgZmluYWxPcHRpb25zID0gbWVyZ2UoXHJcbiAgICBmYWxzZSxcclxuICAgIHRoZW1lT3B0aW9ucyxcclxuICAgIHVzZXJPcHRpb25zLFxyXG4gICAgLy8gUGxhY2VkIGl0IGhlcmUgaW5zdGVhZCBpbiB0aGUgaW5pdCBiZWNhdXNlIG9mIHRoZSBzaXplIGlzc3Vlc1xyXG4gICAgYWRkaXRpb25hbE9wdGlvbnNcclxuICApO1xyXG5cclxuICAvLyBQcmVwYXJlIHRoZSBgY2FsbGJhY2tgIG9wdGlvblxyXG4gIGNvbnN0IGZpbmFsQ2FsbGJhY2sgPSBjdXN0b21Mb2dpY09wdGlvbnMuY2FsbGJhY2tcclxuICAgID8gbmV3IEZ1bmN0aW9uKGByZXR1cm4gJHtjdXN0b21Mb2dpY09wdGlvbnMuY2FsbGJhY2t9YCkoKVxyXG4gICAgOiBudWxsO1xyXG5cclxuICAvLyBUcmlnZ2VyIHRoZSBgY3VzdG9tQ29kZWAgb3B0aW9uXHJcbiAgaWYgKGN1c3RvbUxvZ2ljT3B0aW9ucy5jdXN0b21Db2RlKSB7XHJcbiAgICBuZXcgRnVuY3Rpb24oJ29wdGlvbnMnLCBjdXN0b21Mb2dpY09wdGlvbnMuY3VzdG9tQ29kZSkodXNlck9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLy8gU2V0IHRoZSBnbG9iYWwgb3B0aW9ucyBpZiBleGlzdFxyXG4gIGlmIChnbG9iYWxPcHRpb25zKSB7XHJcbiAgICBzZXRPcHRpb25zKGdsb2JhbE9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2FsbCB0aGUgY2hhcnQgY3JlYXRpb25cclxuICBIaWdoY2hhcnRzW2V4cG9ydE9wdGlvbnMuY29uc3RyXSgnY29udGFpbmVyJywgZmluYWxPcHRpb25zLCBmaW5hbENhbGxiYWNrKTtcclxuXHJcbiAgLy8gR2V0IHRoZSBjdXJyZW50IGdsb2JhbCBvcHRpb25zXHJcbiAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSBnZXRPcHRpb25zKCk7XHJcblxyXG4gIC8vIENsZWFyIGl0IGp1c3QgaW4gY2FzZSAoZS5nLiB0aGUgYHNldE9wdGlvbnNgIHdhcyB1c2VkIGluIHRoZSBgY3VzdG9tQ29kZWApXHJcbiAgZm9yIChjb25zdCBwcm9wIGluIGRlZmF1bHRPcHRpb25zKSB7XHJcbiAgICBpZiAodHlwZW9mIGRlZmF1bHRPcHRpb25zW3Byb3BdICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIGRlbGV0ZSBkZWZhdWx0T3B0aW9uc1twcm9wXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFNldCB0aGUgZGVmYXVsdCBvcHRpb25zIGJhY2tcclxuICBzZXRPcHRpb25zKEhpZ2hjaGFydHMuc2V0T3B0aW9uc09iaik7XHJcblxyXG4gIC8vIEVtcHR5IHRoZSBjdXN0b20gZ2xvYmFsIG9wdGlvbnMgb2JqZWN0XHJcbiAgSGlnaGNoYXJ0cy5zZXRPcHRpb25zT2JqID0ge307XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBzZXR1cEhpZ2hjaGFydHMsXHJcbiAgY3JlYXRlQ2hhcnRcclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQG92ZXJ2aWV3IFRoaXMgbW9kdWxlIHByb3ZpZGVzIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgUHVwcGV0ZWVyIGJyb3dzZXJcclxuICogaW5zdGFuY2UsIGNyZWF0aW5nIGFuZCBjbGVhcmluZyBwYWdlcywgaW5qZWN0aW5nIGN1c3RvbSByZXNvdXJjZXMsXHJcbiAqIGFuZCBzZXR0aW5nIHVwIEhpZ2hjaGFydHMgZm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy4gVGhlIG1vZHVsZSBlbnN1cmVzXHJcbiAqIHRoYXQgcmVzb3VyY2VzIGFyZSBjb3JyZWN0bHkgbWFuYWdlZCBhbmQgY2FuIGhhbmRsZSBmYWlsdXJlcyBkdXJpbmdcclxuICogb3BlcmF0aW9ucyBsaWtlIGxhdW5jaGluZyB0aGUgYnJvd3NlciBvciBjcmVhdGluZyBuZXcgcGFnZXMuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnO1xyXG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XHJcblxyXG5pbXBvcnQgcHVwcGV0ZWVyIGZyb20gJ3B1cHBldGVlcic7XHJcblxyXG5pbXBvcnQgeyBnZXRDYWNoZVBhdGggfSBmcm9tICcuL2NhY2hlLmpzJztcclxuaW1wb3J0IHsgZ2V0T3B0aW9ucyB9IGZyb20gJy4vY29uZmlnLmpzJztcclxuaW1wb3J0IHsgc2V0dXBIaWdoY2hhcnRzIH0gZnJvbSAnLi9oaWdoY2hhcnRzLmpzJztcclxuaW1wb3J0IHsgbG9nLCBsb2dXaXRoU3RhY2sgfSBmcm9tICcuL2xvZ2dlci5qcyc7XHJcbmltcG9ydCB7IF9fZGlybmFtZSwgZ2V0QWJzb2x1dGVQYXRoIH0gZnJvbSAnLi91dGlscy5qcyc7XHJcblxyXG5pbXBvcnQgRXhwb3J0RXJyb3IgZnJvbSAnLi9lcnJvcnMvRXhwb3J0RXJyb3IuanMnO1xyXG5cclxuLy8gR2V0IHRoZSB0ZW1wbGF0ZSBmb3IgcGFnZXNcclxuY29uc3QgdGVtcGxhdGUgPSByZWFkRmlsZVN5bmMoXHJcbiAgam9pbihfX2Rpcm5hbWUsICd0ZW1wbGF0ZXMnLCAndGVtcGxhdGUuaHRtbCcpLFxyXG4gICd1dGY4J1xyXG4pO1xyXG5cclxuLy8gVG8gc2F2ZSB0aGUgYnJvd3NlclxyXG5sZXQgYnJvd3NlciA9IG51bGw7XHJcblxyXG4vKipcclxuICogUmV0cmlldmVzIHRoZSBleGlzdGluZyBQdXBwZXRlZXIgYnJvd3NlciBpbnN0YW5jZS5cclxuICpcclxuICogQGZ1bmN0aW9uIGdldEJyb3dzZXJcclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIFB1cHBldGVlciBicm93c2VyIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaWYgbm8gdmFsaWQgYnJvd3NlclxyXG4gKiBoYXMgYmVlbiBjcmVhdGVkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEJyb3dzZXIoKSB7XHJcbiAgaWYgKCFicm93c2VyKSB7XHJcbiAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoJ1ticm93c2VyXSBObyB2YWxpZCBicm93c2VyIGhhcyBiZWVuIGNyZWF0ZWQuJywgNTAwKTtcclxuICB9XHJcbiAgcmV0dXJuIGJyb3dzZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgUHVwcGV0ZWVyIGJyb3dzZXIgaW5zdGFuY2Ugd2l0aCB0aGUgc3BlY2lmaWVkIGFyZ3VtZW50cy5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBjcmVhdGVCcm93c2VyXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IHB1cHBldGVlckFyZ3MgLSBBZGRpdGlvbmFsIGFyZ3VtZW50cyBmb3IgUHVwcGV0ZWVyXHJcbiAqIGxhdW5jaC5cclxuICpcclxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGNyZWF0ZWQgUHVwcGV0ZWVyXHJcbiAqIGJyb3dzZXIgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiBtYXggcmV0cmllcyB0byBvcGVuXHJcbiAqIGEgYnJvd3NlciBpbnN0YW5jZSBhcmUgcmVhY2hlZCwgb3IgaWYgbm8gYnJvd3NlciBpbnN0YW5jZSBpcyBmb3VuZCBhZnRlclxyXG4gKiByZXRyaWVzLlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXIocHVwcGV0ZWVyQXJncykge1xyXG4gIC8vIEdldCBgZGVidWdgIGFuZCBgb3RoZXJgIG9wdGlvbnNcclxuICBjb25zdCB7IGRlYnVnLCBvdGhlciB9ID0gZ2V0T3B0aW9ucygpO1xyXG5cclxuICAvLyBHZXQgdGhlIGBkZWJ1Z2Agb3B0aW9uc1xyXG4gIGNvbnN0IHsgZW5hYmxlOiBlbmFibGVkRGVidWcsIC4uLmRlYnVnT3B0aW9ucyB9ID0gZGVidWc7XHJcblxyXG4gIC8vIExhdW5jaCBvcHRpb25zIGZvciB0aGUgYnJvd3NlciBpbnN0YW5jZVxyXG4gIGNvbnN0IGxhdW5jaE9wdGlvbnMgPSB7XHJcbiAgICBoZWFkbGVzczogb3RoZXIuYnJvd3NlclNoZWxsTW9kZSA/ICdzaGVsbCcgOiB0cnVlLFxyXG4gICAgdXNlckRhdGFEaXI6ICd0bXAnLFxyXG4gICAgYXJnczogcHVwcGV0ZWVyQXJncyB8fCBbXSxcclxuICAgIGhhbmRsZVNJR0lOVDogZmFsc2UsXHJcbiAgICBoYW5kbGVTSUdURVJNOiBmYWxzZSxcclxuICAgIGhhbmRsZVNJR0hVUDogZmFsc2UsXHJcbiAgICB3YWl0Rm9ySW5pdGlhbFBhZ2U6IGZhbHNlLFxyXG4gICAgZGVmYXVsdFZpZXdwb3J0OiBudWxsLFxyXG4gICAgLi4uKGVuYWJsZWREZWJ1ZyAmJiBkZWJ1Z09wdGlvbnMpXHJcbiAgfTtcclxuXHJcbiAgLy8gQ3JlYXRlIGEgYnJvd3NlclxyXG4gIGlmICghYnJvd3Nlcikge1xyXG4gICAgLy8gQSBjb3VudGVyIGZvciB0aGUgYnJvd3NlcidzIGxhdW5jaCByZXRyaWVzXHJcbiAgICBsZXQgdHJ5Q291bnQgPSAwO1xyXG5cclxuICAgIGNvbnN0IG9wZW4gPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgbG9nKFxyXG4gICAgICAgICAgMyxcclxuICAgICAgICAgIGBbYnJvd3Nlcl0gQXR0ZW1wdGluZyB0byBnZXQgYSBicm93c2VyIGluc3RhbmNlICh0cnkgJHsrK3RyeUNvdW50fSkuYFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIExhdW5jaCB0aGUgYnJvd3NlclxyXG4gICAgICAgIGJyb3dzZXIgPSBhd2FpdCBwdXBwZXRlZXIubGF1bmNoKGxhdW5jaE9wdGlvbnMpO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGxvZ1dpdGhTdGFjayhcclxuICAgICAgICAgIDEsXHJcbiAgICAgICAgICBlcnJvcixcclxuICAgICAgICAgICdbYnJvd3Nlcl0gRmFpbGVkIHRvIGxhdW5jaCBhIGJyb3dzZXIgaW5zdGFuY2UuJ1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIFJldHJ5IHRvIGxhdW5jaCBicm93c2VyIHVudGlsIHJlYWNoaW5nIG1heCBhdHRlbXB0c1xyXG4gICAgICAgIGlmICh0cnlDb3VudCA8IDI1KSB7XHJcbiAgICAgICAgICBsb2coMywgYFticm93c2VyXSBSZXRyeSB0byBvcGVuIGEgYnJvd3NlciAoJHt0cnlDb3VudH0gb3V0IG9mIDI1KS5gKTtcclxuXHJcbiAgICAgICAgICAvLyBXYWl0IGZvciBhIDQgc2Vjb25kcyBiZWZvcmUgdHJ5aW5nIGFnYWluXHJcbiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzcG9uc2UpID0+IHNldFRpbWVvdXQocmVzcG9uc2UsIDQwMDApKTtcclxuICAgICAgICAgIGF3YWl0IG9wZW4oKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGF3YWl0IG9wZW4oKTtcclxuXHJcbiAgICAgIC8vIFNoZWxsIG1vZGUgaW5mb3JtXHJcbiAgICAgIGlmIChsYXVuY2hPcHRpb25zLmhlYWRsZXNzID09PSAnc2hlbGwnKSB7XHJcbiAgICAgICAgbG9nKDMsIGBbYnJvd3Nlcl0gTGF1bmNoZWQgYnJvd3NlciBpbiBzaGVsbCBtb2RlLmApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBEZWJ1ZyBtb2RlIGluZm9ybVxyXG4gICAgICBpZiAoZW5hYmxlZERlYnVnKSB7XHJcbiAgICAgICAgbG9nKDMsIGBbYnJvd3Nlcl0gTGF1bmNoZWQgYnJvd3NlciBpbiBkZWJ1ZyBtb2RlLmApO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgJ1ticm93c2VyXSBNYXhpbXVtIHJldHJpZXMgdG8gb3BlbiBhIGJyb3dzZXIgaW5zdGFuY2UgcmVhY2hlZC4nLFxyXG4gICAgICAgIDUwMFxyXG4gICAgICApLnNldEVycm9yKGVycm9yKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWJyb3dzZXIpIHtcclxuICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKCdbYnJvd3Nlcl0gQ2Fubm90IGZpbmQgYSBicm93c2VyIHRvIG9wZW4uJywgNTAwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJldHVybiBhIGJyb3dzZXIgaW5zdGFuY2VcclxuICByZXR1cm4gYnJvd3NlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENsb3NlcyB0aGUgUHVwcGV0ZWVyIGJyb3dzZXIgaW5zdGFuY2UgaWYgaXQgaXMgY29ubmVjdGVkLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIGNsb3NlQnJvd3NlclxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsb3NlQnJvd3NlcigpIHtcclxuICAvLyBDbG9zZSB0aGUgYnJvd3NlciB3aGVuIGNvbm5lY3RlZFxyXG4gIGlmIChicm93c2VyICYmIGJyb3dzZXIuY29ubmVjdGVkKSB7XHJcbiAgICBhd2FpdCBicm93c2VyLmNsb3NlKCk7XHJcbiAgfVxyXG4gIGJyb3dzZXIgPSBudWxsO1xyXG4gIGxvZyg0LCAnW2Jyb3dzZXJdIENsb3NlZCB0aGUgYnJvd3Nlci4nKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgUHVwcGV0ZWVyIHBhZ2Ugd2l0aGluIGFuIGV4aXN0aW5nIGJyb3dzZXIgaW5zdGFuY2UuXHJcbiAqIFRoZSBmdW5jdGlvbiBjcmVhdGVzIGEgbmV3IHBhZ2UsIGRpc2FibGVzIGNhY2hpbmcsIHNldHMgY29udGVudCB1c2luZ1xyXG4gKiB0aGUgYF9zZXRQYWdlQ29udGVudCgpYCwgYW5kIHJldHVybnMgdGhlIGNyZWF0ZWQgUHVwcGV0ZWVyIHBhZ2UuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gbmV3UGFnZVxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcG9vbFJlc291cmNlIC0gVGhlIHBvb2wgcmVzb3VyY2UgdGhhdCBjb250YWlucyBgaWRgLFxyXG4gKiBgd29ya0NvdW50YCwgYW5kIGBwYWdlYC5cclxuICpcclxuICogQHRocm93cyB7RXhwb3J0RXJyb3J9IFRocm93cyBhbiBgRXhwb3J0RXJyb3JgIGlmIG5vIHZhbGlkIGJyb3dzZXJcclxuICogaGFzIGJlZW4gY29ubmVjdGVkIG9yIGlmIGEgcGFnZSBpcyBpbnZhbGlkIG9yIGNsb3NlZC5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBuZXdQYWdlKHBvb2xSZXNvdXJjZSkge1xyXG4gIC8vIEVycm9yIGluIGNhc2Ugb2Ygbm8gY29ubmVjdGVkIGJyb3dzZXJcclxuICBpZiAoIWJyb3dzZXIgfHwgIWJyb3dzZXIuY29ubmVjdGVkKSB7XHJcbiAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoYFticm93c2VyXSBCcm93c2VyIGlzIG5vdCB5ZXQgY29ubmVjdGVkLmAsIDUwMCk7XHJcbiAgfVxyXG5cclxuICAvLyBDcmVhdGUgYSBwYWdlXHJcbiAgcG9vbFJlc291cmNlLnBhZ2UgPSBhd2FpdCBicm93c2VyLm5ld1BhZ2UoKTtcclxuXHJcbiAgLy8gRGlzYWJsZSBjYWNoZVxyXG4gIGF3YWl0IHBvb2xSZXNvdXJjZS5wYWdlLnNldENhY2hlRW5hYmxlZChmYWxzZSk7XHJcblxyXG4gIC8vIFNldCB0aGUgY29udGVudFxyXG4gIGF3YWl0IF9zZXRQYWdlQ29udGVudChwb29sUmVzb3VyY2UucGFnZSk7XHJcblxyXG4gIC8vIFNldCBwYWdlIGV2ZW50c1xyXG4gIF9zZXRQYWdlRXZlbnRzKHBvb2xSZXNvdXJjZS5wYWdlKTtcclxuXHJcbiAgLy8gQ2hlY2sgaWYgdGhlIHBhZ2UgaXMgY29ycmVjdGx5IGNyZWF0ZWRcclxuICBpZiAoIXBvb2xSZXNvdXJjZS5wYWdlIHx8IHBvb2xSZXNvdXJjZS5wYWdlLmlzQ2xvc2VkKCkpIHtcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcignW2Jyb3dzZXJdIFRoZSBwYWdlIGlzIGludmFsaWQgb3IgY2xvc2VkLicsIDQwMCk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ2xlYXJzIHRoZSBjb250ZW50IG9mIGEgUHVwcGV0ZWVyIFBhZ2UgYmFzZWQgb24gdGhlIHNwZWNpZmllZCBtb2RlLiBMb2dzXHJcbiAqIHRocm93biBlcnJvciBpZiBjbGVhcmluZyBvZiBhIHBhZ2UncyBjb250ZW50IGZhaWxzLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIGNsZWFyUGFnZVxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcG9vbFJlc291cmNlIC0gVGhlIHBvb2wgcmVzb3VyY2UgdGhhdCBjb250YWlucyBwYWdlIGFuZCBpZC5cclxuICogQHBhcmFtIHtib29sZWFufSBbaGFyZFJlc2V0PWZhbHNlXSAtIEEgZmxhZyBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIGNsZWFyaW5nXHJcbiAqIHRvIGJlIHBlcmZvcm1lZC4gSWYgdHJ1ZSwgbmF2aWdhdGVzIHRvIGBhYm91dDpibGFua2AgYW5kIHJlc2V0cyBjb250ZW50XHJcbiAqIGFuZCBzY3JpcHRzLiBJZiBmYWxzZSwgY2xlYXJzIHRoZSBib2R5IGNvbnRlbnQgYnkgc2V0dGluZyBhIHByZWRlZmluZWQgSFRNTFxyXG4gKiBzdHJ1Y3R1cmUuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0cnVlIHdoZW4gcGFnZVxyXG4gKiBpcyBjb3JyZWN0bHkgY2xlYXJlZCBhbmQgZmFsc2Ugd2hlbiBpdCBpcyBub3QuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xlYXJQYWdlKHBvb2xSZXNvdXJjZSwgaGFyZFJlc2V0ID0gZmFsc2UpIHtcclxuICB0cnkge1xyXG4gICAgaWYgKHBvb2xSZXNvdXJjZS5wYWdlICYmICFwb29sUmVzb3VyY2UucGFnZS5pc0Nsb3NlZCgpKSB7XHJcbiAgICAgIGlmIChoYXJkUmVzZXQpIHtcclxuICAgICAgICAvLyBOYXZpZ2F0ZSB0byBgYWJvdXQ6YmxhbmtgXHJcbiAgICAgICAgYXdhaXQgcG9vbFJlc291cmNlLnBhZ2UuZ290bygnYWJvdXQ6YmxhbmsnLCB7XHJcbiAgICAgICAgICB3YWl0VW50aWw6ICdkb21jb250ZW50bG9hZGVkJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBTZXQgdGhlIGNvbnRlbnQgYW5kIGFuZCBzY3JpcHRzIGFnYWluXHJcbiAgICAgICAgYXdhaXQgX3NldFBhZ2VDb250ZW50KHBvb2xSZXNvdXJjZS5wYWdlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBDbGVhciBib2R5IGNvbnRlbnRcclxuICAgICAgICBhd2FpdCBwb29sUmVzb3VyY2UucGFnZS5ldmFsdWF0ZSgoKSA9PiB7XHJcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9XHJcbiAgICAgICAgICAgICc8ZGl2IGlkPVwiY2hhcnQtY29udGFpbmVyXCI+PGRpdiBpZD1cImNvbnRhaW5lclwiPjwvZGl2PjwvZGl2Pic7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGxvZ1dpdGhTdGFjayhcclxuICAgICAgMixcclxuICAgICAgZXJyb3IsXHJcbiAgICAgIGBbcG9vbF0gUG9vbCByZXNvdXJjZSBbJHtwb29sUmVzb3VyY2UuaWR9XSAtIENvbnRlbnQgb2YgdGhlIHBhZ2UgY291bGQgbm90IGJlIGNsZWFyZWQuYFxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGB3b3JrTGltaXRgIHRvIGV4Y2VlZGVkIGluIG9yZGVyIHRvIHJlY3JlYXRlIHRoZSByZXNvdXJjZVxyXG4gICAgcG9vbFJlc291cmNlLndvcmtDb3VudCA9IGdldE9wdGlvbnMoKS5wb29sLndvcmtMaW1pdCArIDE7XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHMgY3VzdG9tIEpTIGFuZCBDU1MgcmVzb3VyY2VzIHRvIGEgUHVwcGV0ZWVyIFBhZ2UgYmFzZWQgb24gdGhlIHNwZWNpZmllZFxyXG4gKiBvcHRpb25zLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIGFkZFBhZ2VSZXNvdXJjZXNcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHBhZ2UgLSBUaGUgUHVwcGV0ZWVyIHBhZ2Ugb2JqZWN0IHRvIHdoaWNoIHJlc291cmNlcyB3aWxsXHJcbiAqIGJlIGFkZGVkLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gY3VzdG9tTG9naWNPcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmdcclxuICogYGN1c3RvbUxvZ2ljYCBvcHRpb25zLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxBcnJheS48T2JqZWN0Pj59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIGFycmF5XHJcbiAqIG9mIGluamVjdGVkIHJlc291cmNlcy5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhZGRQYWdlUmVzb3VyY2VzKHBhZ2UsIGN1c3RvbUxvZ2ljT3B0aW9ucykge1xyXG4gIC8vIEluamVjdGVkIHJlc291cmNlcyBhcnJheVxyXG4gIGNvbnN0IGluamVjdGVkUmVzb3VyY2VzID0gW107XHJcblxyXG4gIC8vIFVzZSByZXNvdXJjZXNcclxuICBjb25zdCByZXNvdXJjZXMgPSBjdXN0b21Mb2dpY09wdGlvbnMucmVzb3VyY2VzO1xyXG4gIGlmIChyZXNvdXJjZXMpIHtcclxuICAgIGNvbnN0IGluamVjdGVkSnMgPSBbXTtcclxuXHJcbiAgICAvLyBMb2FkIGN1c3RvbSBKUyBjb2RlXHJcbiAgICBpZiAocmVzb3VyY2VzLmpzKSB7XHJcbiAgICAgIGluamVjdGVkSnMucHVzaCh7XHJcbiAgICAgICAgY29udGVudDogcmVzb3VyY2VzLmpzXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIExvYWQgc2NyaXB0cyBmcm9tIGFsbCBjdXN0b20gZmlsZXNcclxuICAgIGlmIChyZXNvdXJjZXMuZmlsZXMpIHtcclxuICAgICAgZm9yIChjb25zdCBmaWxlIG9mIHJlc291cmNlcy5maWxlcykge1xyXG4gICAgICAgIGNvbnN0IGlzTG9jYWwgPSBmaWxlLnN0YXJ0c1dpdGgoJ2h0dHAnKSA/IGZhbHNlIDogdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8gQWRkIGVhY2ggY3VzdG9tIHNjcmlwdCBmcm9tIHJlc291cmNlcycgZmlsZXNcclxuICAgICAgICBpbmplY3RlZEpzLnB1c2goXHJcbiAgICAgICAgICBpc0xvY2FsXHJcbiAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgY29udGVudDogcmVhZEZpbGVTeW5jKGdldEFic29sdXRlUGF0aChmaWxlKSwgJ3V0ZjgnKVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgOiB7XHJcbiAgICAgICAgICAgICAgICB1cmw6IGZpbGVcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QganNSZXNvdXJjZSBvZiBpbmplY3RlZEpzKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgaW5qZWN0ZWRSZXNvdXJjZXMucHVzaChhd2FpdCBwYWdlLmFkZFNjcmlwdFRhZyhqc1Jlc291cmNlKSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgbG9nV2l0aFN0YWNrKDIsIGVycm9yLCBgW2Jyb3dzZXJdIFRoZSBKUyByZXNvdXJjZSBjYW5ub3QgYmUgbG9hZGVkLmApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpbmplY3RlZEpzLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgLy8gTG9hZCBDU1NcclxuICAgIGNvbnN0IGluamVjdGVkQ3NzID0gW107XHJcbiAgICBpZiAocmVzb3VyY2VzLmNzcykge1xyXG4gICAgICBsZXQgY3NzSW1wb3J0cyA9IHJlc291cmNlcy5jc3MubWF0Y2goL0BpbXBvcnRcXHMqKFteO10qKTsvZyk7XHJcbiAgICAgIGlmIChjc3NJbXBvcnRzKSB7XHJcbiAgICAgICAgLy8gSGFuZGxlIGNzcyBzZWN0aW9uXHJcbiAgICAgICAgZm9yIChsZXQgY3NzSW1wb3J0UGF0aCBvZiBjc3NJbXBvcnRzKSB7XHJcbiAgICAgICAgICBpZiAoY3NzSW1wb3J0UGF0aCkge1xyXG4gICAgICAgICAgICBjc3NJbXBvcnRQYXRoID0gY3NzSW1wb3J0UGF0aFxyXG4gICAgICAgICAgICAgIC5yZXBsYWNlKCd1cmwoJywgJycpXHJcbiAgICAgICAgICAgICAgLnJlcGxhY2UoJ0BpbXBvcnQnLCAnJylcclxuICAgICAgICAgICAgICAucmVwbGFjZSgvXCIvZywgJycpXHJcbiAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgJycpXHJcbiAgICAgICAgICAgICAgLnJlcGxhY2UoLzsvLCAnJylcclxuICAgICAgICAgICAgICAucmVwbGFjZSgvXFwpL2csICcnKVxyXG4gICAgICAgICAgICAgIC50cmltKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgZWFjaCBjdXN0b20gY3NzIGZyb20gcmVzb3VyY2VzXHJcbiAgICAgICAgICAgIGlmIChjc3NJbXBvcnRQYXRoLnN0YXJ0c1dpdGgoJ2h0dHAnKSkge1xyXG4gICAgICAgICAgICAgIGluamVjdGVkQ3NzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgdXJsOiBjc3NJbXBvcnRQYXRoXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VzdG9tTG9naWNPcHRpb25zLmFsbG93RmlsZVJlc291cmNlcykge1xyXG4gICAgICAgICAgICAgIGluamVjdGVkQ3NzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgcGF0aDogZ2V0QWJzb2x1dGVQYXRoKGNzc0ltcG9ydFBhdGgpXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFRoZSByZXN0IG9mIHRoZSBDU1Mgc2VjdGlvbiB3aWxsIGJlIGNvbnRlbnQgYnkgbm93XHJcbiAgICAgIGluamVjdGVkQ3NzLnB1c2goe1xyXG4gICAgICAgIGNvbnRlbnQ6IHJlc291cmNlcy5jc3MucmVwbGFjZSgvQGltcG9ydFxccyooW147XSopOy9nLCAnJykgfHwgJyAnXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZm9yIChjb25zdCBjc3NSZXNvdXJjZSBvZiBpbmplY3RlZENzcykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBpbmplY3RlZFJlc291cmNlcy5wdXNoKGF3YWl0IHBhZ2UuYWRkU3R5bGVUYWcoY3NzUmVzb3VyY2UpKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgbG9nV2l0aFN0YWNrKFxyXG4gICAgICAgICAgICAyLFxyXG4gICAgICAgICAgICBlcnJvcixcclxuICAgICAgICAgICAgYFticm93c2VyXSBUaGUgQ1NTIHJlc291cmNlIGNhbm5vdCBiZSBsb2FkZWQuYFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaW5qZWN0ZWRDc3MubGVuZ3RoID0gMDtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGluamVjdGVkUmVzb3VyY2VzO1xyXG59XHJcblxyXG4vKipcclxuICogQ2xlYXJzIG91dCBhbGwgc3RhdGUgc2V0IG9uIHRoZSBwYWdlIHdpdGggYGFkZFNjcmlwdFRhZ2AgYW5kIGBhZGRTdHlsZVRhZ2AuXHJcbiAqIFJlbW92ZXMgaW5qZWN0ZWQgcmVzb3VyY2VzIGFuZCByZXNldHMgQ1NTIGFuZCBzY3JpcHQgdGFncyBvbiB0aGUgcGFnZS5cclxuICogQWRkaXRpb25hbGx5LCBpdCBkZXN0cm95cyBwcmV2aW91c2x5IGV4aXN0aW5nIGNoYXJ0cy5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBjbGVhclBhZ2VSZXNvdXJjZXNcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHBhZ2UgLSBUaGUgUHVwcGV0ZWVyIHBhZ2Ugb2JqZWN0IGZyb20gd2hpY2ggcmVzb3VyY2VzIHdpbGxcclxuICogYmUgY2xlYXJlZC5cclxuICogQHBhcmFtIHtBcnJheS48T2JqZWN0Pn0gaW5qZWN0ZWRSZXNvdXJjZXMgLSBBcnJheSBvZiBpbmplY3RlZCByZXNvdXJjZXNcclxuICogdG8gYmUgY2xlYXJlZC5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhclBhZ2VSZXNvdXJjZXMocGFnZSwgaW5qZWN0ZWRSZXNvdXJjZXMpIHtcclxuICB0cnkge1xyXG4gICAgZm9yIChjb25zdCByZXNvdXJjZSBvZiBpbmplY3RlZFJlc291cmNlcykge1xyXG4gICAgICBhd2FpdCByZXNvdXJjZS5kaXNwb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGVzdHJveSBvbGQgY2hhcnRzIGFmdGVyIGV4cG9ydCBpcyBkb25lIGFuZCByZXNldCBhbGwgQ1NTIGFuZCBzY3JpcHQgdGFnc1xyXG4gICAgYXdhaXQgcGFnZS5ldmFsdWF0ZSgoKSA9PiB7XHJcbiAgICAgIC8vIFdlIGFyZSBub3QgZ3VhcmFudGVlZCB0aGF0IEhpZ2hjaGFydHMgaXMgbG9hZGVkLCB3aGVuIGRvaW5nIFNWRyBleHBvcnRzXHJcbiAgICAgIGlmICh0eXBlb2YgSGlnaGNoYXJ0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgICAgICBjb25zdCBvbGRDaGFydHMgPSBIaWdoY2hhcnRzLmNoYXJ0cztcclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaW4gYW55IGFscmVhZHkgZXhpc3RpbmcgY2hhcnRzXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2xkQ2hhcnRzKSAmJiBvbGRDaGFydHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAvLyBEZXN0cm95IG9sZCBjaGFydHNcclxuICAgICAgICAgIGZvciAoY29uc3Qgb2xkQ2hhcnQgb2Ygb2xkQ2hhcnRzKSB7XHJcbiAgICAgICAgICAgIG9sZENoYXJ0ICYmIG9sZENoYXJ0LmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICAgICAgICAgIEhpZ2hjaGFydHMuY2hhcnRzLnNoaWZ0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgICAgY29uc3QgWy4uLnNjcmlwdHNUb1JlbW92ZV0gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxyXG4gICAgICBjb25zdCBbLCAuLi5zdHlsZXNUb1JlbW92ZV0gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3R5bGUnKTtcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICAgIGNvbnN0IFsuLi5saW5rc1RvUmVtb3ZlXSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdsaW5rJyk7XHJcblxyXG4gICAgICAvLyBSZW1vdmUgdGFnc1xyXG4gICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgW1xyXG4gICAgICAgIC4uLnNjcmlwdHNUb1JlbW92ZSxcclxuICAgICAgICAuLi5zdHlsZXNUb1JlbW92ZSxcclxuICAgICAgICAuLi5saW5rc1RvUmVtb3ZlXHJcbiAgICAgIF0pIHtcclxuICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgbG9nV2l0aFN0YWNrKDIsIGVycm9yLCBgW2Jyb3dzZXJdIENvdWxkIG5vdCBjbGVhciBwYWdlJ3MgcmVzb3VyY2VzLmApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFNldHMgdGhlIGNvbnRlbnQgZm9yIGEgUHVwcGV0ZWVyIFBhZ2UgdXNpbmcgYSBwcmVkZWZpbmVkIHRlbXBsYXRlXHJcbiAqIGFuZCBhZGRpdGlvbmFsIHNjcmlwdHMuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gX3NldFBhZ2VDb250ZW50XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWdlIC0gVGhlIFB1cHBldGVlciBwYWdlIG9iamVjdCB0byB3aGljaCB0aGUgY29udGVudFxyXG4gKiBpcyBiZWluZyBzZXQuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfc2V0UGFnZUNvbnRlbnQocGFnZSkge1xyXG4gIC8vIFNldCB0aGUgaW5pdGlhbCBwYWdlIGNvbnRlbnRcclxuICBhd2FpdCBwYWdlLnNldENvbnRlbnQodGVtcGxhdGUsIHsgd2FpdFVudGlsOiAnZG9tY29udGVudGxvYWRlZCcgfSk7XHJcblxyXG4gIC8vIEFkZCBhbGwgcmVnaXN0ZXJlZCBIaWdjaGFydHMgc2NyaXB0cywgcXVpdGUgZGVtYW5kaW5nXHJcbiAgYXdhaXQgcGFnZS5hZGRTY3JpcHRUYWcoeyBwYXRoOiBqb2luKGdldENhY2hlUGF0aCgpLCAnc291cmNlcy5qcycpIH0pO1xyXG5cclxuICAvLyBTZXQgdGhlIGluaXRpYWwgYGFuaW1PYmplY3RgIGZvciBIaWdoY2hhcnRzXHJcbiAgYXdhaXQgcGFnZS5ldmFsdWF0ZShzZXR1cEhpZ2hjaGFydHMpO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IGV2ZW50cyAobGlrZSBgcGFnZWVycm9yYCBhbmQgYGNvbnNvbGVgKSBmb3IgYSBQdXBwZXRlZXIgUGFnZSBpbiBvcmRlclxyXG4gKiB0byBjYXRjaCBhbmQgZGlzcGxheSBlcnJvcnMgYW5kIGNvbnNvbGUgbG9ncyBmcm9tIHRoZSB3aW5kb3cgY29udGV4dC5cclxuICpcclxuICogQGZ1bmN0aW9uIF9zZXRQYWdlRXZlbnRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWdlIC0gVGhlIFB1cHBldGVlciBwYWdlIG9iamVjdCB0byB3aGljaCB0aGUgbGlzdGVuZXJzXHJcbiAqIGFyZSBiZWluZyBzZXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBfc2V0UGFnZUV2ZW50cyhwYWdlKSB7XHJcbiAgLy8gR2V0IGBkZWJ1Z2Agb3B0aW9uc1xyXG4gIGNvbnN0IHsgZGVidWcgfSA9IGdldE9wdGlvbnMoKTtcclxuXHJcbiAgLy8gU2V0IHRoZSBgcGFnZWVycm9yYCBsaXN0ZW5lclxyXG4gIHBhZ2Uub24oJ3BhZ2VlcnJvcicsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIEl0IHdvdWxkIHNlZW0gbGlrZSB0aGlzIG1heSBmaXJlIGF0IHRoZSBzYW1lIHRpbWUgb3Igc2hvcnRseSBiZWZvcmVcclxuICAgIC8vIGEgcGFnZSBpcyBjbG9zZWQuXHJcbiAgICBpZiAocGFnZS5pc0Nsb3NlZCgpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy8gU2V0IHRoZSBgY29uc29sZWAgbGlzdGVuZXIsIGlmIG5lZWRlZFxyXG4gIGlmIChkZWJ1Zy5lbmFibGUgJiYgZGVidWcubGlzdGVuVG9Db25zb2xlKSB7XHJcbiAgICBwYWdlLm9uKCdjb25zb2xlJywgKG1lc3NhZ2UpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coYFtkZWJ1Z10gJHttZXNzYWdlLnRleHQoKX1gKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGdldEJyb3dzZXIsXHJcbiAgY3JlYXRlQnJvd3NlcixcclxuICBjbG9zZUJyb3dzZXIsXHJcbiAgbmV3UGFnZSxcclxuICBjbGVhclBhZ2UsXHJcbiAgYWRkUGFnZVJlc291cmNlcyxcclxuICBjbGVhclBhZ2VSZXNvdXJjZXNcclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogVGhlIENTUyB0byBiZSB1c2VkIG9uIHRoZSBleHBvcnRlZCBwYWdlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgQ1NTIGNvbmZpZ3VyYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCAoKSA9PiBgXHJcblxyXG5odG1sLCBib2R5IHtcclxuICBtYXJnaW46IDA7XHJcbiAgcGFkZGluZzogMDtcclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcblxyXG4jdGFibGUtZGl2LCAjc2xpZGVycywgI2RhdGF0YWJsZSwgI2NvbnRyb2xzLCAubGQtcm93IHtcclxuICBkaXNwbGF5OiBub25lO1xyXG4gIGhlaWdodDogMDtcclxufVxyXG5cclxuI2NoYXJ0LWNvbnRhaW5lciB7XHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICBtYXJnaW46IDA7XHJcbiAgb3ZlcmZsb3c6IGF1dG87XHJcbiAgZm9udC1zaXplOiAwO1xyXG59XHJcblxyXG4jY2hhcnQtY29udGFpbmVyID4gZmlndXJlLCBkaXYge1xyXG4gIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcclxuICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbmA7XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuaW1wb3J0IGNzc1RlbXBsYXRlIGZyb20gJy4vY3NzLmpzJztcclxuXHJcbi8qKlxyXG4gKiBUaGUgU1ZHIHRlbXBsYXRlIHRvIHVzZSB3aGVuIGxvYWRpbmcgU1ZHIGNvbnRlbnQgdG8gYmUgZXhwb3J0ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdmcgLSBUaGUgU1ZHIGlucHV0IGNvbnRlbnQgdG8gYmUgZXhwb3J0ZWQuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBTVkcgdGVtcGxhdGUuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCAoc3ZnKSA9PiBgXHJcbjwhRE9DVFlQRSBodG1sPlxyXG48aHRtbCBsYW5nPSdlbi1VUyc+XHJcbiAgPGhlYWQ+XHJcbiAgICA8bWV0YSBodHRwLWVxdWl2PVwiQ29udGVudC1UeXBlXCIgY29udGVudD1cInRleHQvaHRtbDsgY2hhcnNldD11dGYtOFwiPlxyXG4gICAgPHRpdGxlPkhpZ2hjaGFydHMgRXhwb3J0PC90aXRsZT5cclxuICA8L2hlYWQ+XHJcbiAgPHN0eWxlPlxyXG4gICAgJHtjc3NUZW1wbGF0ZSgpfVxyXG4gIDwvc3R5bGU+XHJcbiAgPGJvZHk+XHJcbiAgICA8ZGl2IGlkPVwiY2hhcnQtY29udGFpbmVyXCI+XHJcbiAgICAgICR7c3ZnfVxyXG4gICAgPC9kaXY+XHJcbiAgPC9ib2R5PlxyXG48L2h0bWw+XHJcblxyXG5gO1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNSwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgVGhpcyBtb2R1bGUgaGFuZGxlcyBjaGFydCBleHBvcnQgZnVuY3Rpb25hbGl0eSB1c2luZyBQdXBwZXRlZXIuXHJcbiAqIEl0IHN1cHBvcnRzIGV4cG9ydGluZyBjaGFydHMgYXMgU1ZHLCBQTkcsIEpQRUcsIGFuZCBQREYgZm9ybWF0cy4gVGhlIG1vZHVsZVxyXG4gKiBtYW5hZ2VzIHBhZ2UgcmVzb3VyY2VzLCBzZXRzIHVwIHRoZSBleHBvcnQgZW52aXJvbm1lbnQsIGFuZCBwcm9jZXNzZXMgY2hhcnRcclxuICogY29uZmlndXJhdGlvbnMgb3IgU1ZHIGlucHV0cyBmb3IgcmVuZGVyaW5nLiBFeHBvcnRzIHRvIGEgY2hhcnQgZnJvbSBhIHBhZ2VcclxuICogdXNpbmcgUHVwcGV0ZWVyLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGFkZFBhZ2VSZXNvdXJjZXMsIGNsZWFyUGFnZVJlc291cmNlcyB9IGZyb20gJy4vYnJvd3Nlci5qcyc7XHJcbmltcG9ydCB7IGNyZWF0ZUNoYXJ0IH0gZnJvbSAnLi9oaWdoY2hhcnRzLmpzJztcclxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi9sb2dnZXIuanMnO1xyXG5cclxuaW1wb3J0IHN2Z1RlbXBsYXRlIGZyb20gJy4uL3RlbXBsYXRlcy9zdmdFeHBvcnQvc3ZnRXhwb3J0LmpzJztcclxuXHJcbmltcG9ydCBFeHBvcnRFcnJvciBmcm9tICcuL2Vycm9ycy9FeHBvcnRFcnJvci5qcyc7XHJcblxyXG4vKipcclxuICogRXhwb3J0cyB0byBhIGNoYXJ0IGZyb20gYSBwYWdlIHVzaW5nIFB1cHBldGVlci5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBwdXBwZXRlZXJFeHBvcnRcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHBhZ2UgLSBQdXBwZXRlZXIgcGFnZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBleHBvcnRPcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmcgYGV4cG9ydGBcclxuICogb3B0aW9ucy5cclxuICogQHBhcmFtIHtPYmplY3R9IGN1c3RvbUxvZ2ljT3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nXHJcbiAqIGBjdXN0b21Mb2dpY2Agb3B0aW9ucy5cclxuICpcclxuICogQHJldHVybnMge1Byb21pc2U8KHN0cmluZ3xCdWZmZXJ8RXhwb3J0RXJyb3IpPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXNcclxuICogdG8gdGhlIGV4cG9ydGVkIGRhdGEgb3IgcmVqZWN0aW5nIHdpdGggYW4gYEV4cG9ydEVycm9yYC5cclxuICpcclxuICogQHRocm93cyB7RXhwb3J0RXJyb3J9IFRocm93cyBhbiBgRXhwb3J0RXJyb3JgIGlmIGV4cG9ydCB0byBhbiB1bnN1cHBvcnRlZFxyXG4gKiBvdXRwdXQgZm9ybWF0IG9jY3Vycy5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwdXBwZXRlZXJFeHBvcnQocGFnZSwgZXhwb3J0T3B0aW9ucywgY3VzdG9tTG9naWNPcHRpb25zKSB7XHJcbiAgLy8gSW5qZWN0ZWQgcmVzb3VyY2VzIGFycmF5IChhZGRpdGlvbmFsIEpTIGFuZCBDU1MpXHJcbiAgY29uc3QgaW5qZWN0ZWRSZXNvdXJjZXMgPSBbXTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGxldCBpc1NWRyA9IGZhbHNlO1xyXG5cclxuICAgIC8vIERlY2lkZSBvbiB0aGUgZXhwb3J0IG1ldGhvZFxyXG4gICAgaWYgKGV4cG9ydE9wdGlvbnMuc3ZnKSB7XHJcbiAgICAgIGxvZyg0LCAnW2V4cG9ydF0gVHJlYXRpbmcgYXMgU1ZHIGlucHV0LicpO1xyXG5cclxuICAgICAgLy8gSWYgdGhlIGB0eXBlYCBpcyBhbHNvIFNWRywgcmV0dXJuIHRoZSBpbnB1dFxyXG4gICAgICBpZiAoZXhwb3J0T3B0aW9ucy50eXBlID09PSAnc3ZnJykge1xyXG4gICAgICAgIHJldHVybiBleHBvcnRPcHRpb25zLnN2ZztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTWFyayBhcyBTVkcgZXhwb3J0IGZvciB0aGUgbGF0ZXIgc2l6ZSBjb3JyZWN0aW9uc1xyXG4gICAgICBpc1NWRyA9IHRydWU7XHJcblxyXG4gICAgICAvLyBTVkcgZXhwb3J0XHJcbiAgICAgIGF3YWl0IHBhZ2Uuc2V0Q29udGVudChzdmdUZW1wbGF0ZShleHBvcnRPcHRpb25zLnN2ZyksIHtcclxuICAgICAgICB3YWl0VW50aWw6ICdkb21jb250ZW50bG9hZGVkJ1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxvZyg0LCAnW2V4cG9ydF0gVHJlYXRpbmcgYXMgSlNPTiBjb25maWcuJyk7XHJcblxyXG4gICAgICAvLyBPcHRpb25zIGV4cG9ydFxyXG4gICAgICBhd2FpdCBwYWdlLmV2YWx1YXRlKGNyZWF0ZUNoYXJ0LCBleHBvcnRPcHRpb25zLCBjdXN0b21Mb2dpY09wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEtlZXBzIHRyYWNrIG9mIGFsbCByZXNvdXJjZXMgYWRkZWQgb24gdGhlIHBhZ2Ugd2l0aCBhZGRYWFhUYWcuIGV0Y1xyXG4gICAgLy8gSXQncyBWSVRBTCB0aGF0IGFsbCBhZGRlZCByZXNvdXJjZXMgZW5kcyB1cCBoZXJlIHNvIHdlIGNhbiBjbGVhciB0aGluZ3NcclxuICAgIC8vIG91dCB3aGVuIGRvaW5nIGEgbmV3IGV4cG9ydCBpbiB0aGUgc2FtZSBwYWdlIVxyXG4gICAgaW5qZWN0ZWRSZXNvdXJjZXMucHVzaChcclxuICAgICAgLi4uKGF3YWl0IGFkZFBhZ2VSZXNvdXJjZXMocGFnZSwgY3VzdG9tTG9naWNPcHRpb25zKSlcclxuICAgICk7XHJcblxyXG4gICAgLy8gR2V0IHRoZSByZWFsIGNoYXJ0IHNpemUgYW5kIHNldCB0aGUgem9vbSBhY2NvcmRpbmdseVxyXG4gICAgY29uc3Qgc2l6ZSA9IGlzU1ZHXHJcbiAgICAgID8gYXdhaXQgcGFnZS5ldmFsdWF0ZSgoc2NhbGUpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHN2Z0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgICAnI2NoYXJ0LWNvbnRhaW5lciBzdmc6Zmlyc3Qtb2YtdHlwZSdcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgLy8gR2V0IHRoZSB2YWx1ZXMgY29ycmVjdGx5IHNjYWxlZFxyXG4gICAgICAgICAgY29uc3QgY2hhcnRIZWlnaHQgPSBzdmdFbGVtZW50LmhlaWdodC5iYXNlVmFsLnZhbHVlICogc2NhbGU7XHJcbiAgICAgICAgICBjb25zdCBjaGFydFdpZHRoID0gc3ZnRWxlbWVudC53aWR0aC5iYXNlVmFsLnZhbHVlICogc2NhbGU7XHJcblxyXG4gICAgICAgICAgLy8gSW4gY2FzZSBvZiBTVkcgdGhlIHpvb20gbXVzdCBiZSBzZXQgZGlyZWN0bHkgZm9yIGJvZHkgYXMgc2NhbGVcclxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxyXG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS56b29tID0gc2NhbGU7XHJcblxyXG4gICAgICAgICAgLy8gU2V0IHRoZSBtYXJnaW4gdG8gMHB4XHJcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUubWFyZ2luID0gJzBweCc7XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY2hhcnRIZWlnaHQsXHJcbiAgICAgICAgICAgIGNoYXJ0V2lkdGhcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSwgcGFyc2VGbG9hdChleHBvcnRPcHRpb25zLnNjYWxlKSlcclxuICAgICAgOiBhd2FpdCBwYWdlLmV2YWx1YXRlKCgpID0+IHtcclxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxyXG4gICAgICAgICAgY29uc3QgeyBjaGFydEhlaWdodCwgY2hhcnRXaWR0aCB9ID0gd2luZG93LkhpZ2hjaGFydHMuY2hhcnRzWzBdO1xyXG5cclxuICAgICAgICAgIC8vIE5vIG5lZWQgZm9yIHN1Y2ggc2NhbGUgbWFuaXB1bGF0aW9uIGluIGNhc2Ugb2Ygb3RoZXIgdHlwZXNcclxuICAgICAgICAgIC8vIG9mIGV4cG9ydHMuIFJlc2V0IHRoZSB6b29tIGZvciBvdGhlciBleHBvcnRzIHRoYW4gdG8gU1ZHc1xyXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnpvb20gPSAxO1xyXG5cclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNoYXJ0SGVpZ2h0LFxyXG4gICAgICAgICAgICBjaGFydFdpZHRoXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vIEdldCB0aGUgY2xpcCByZWdpb24gZm9yIHRoZSBwYWdlXHJcbiAgICBjb25zdCB7IHgsIHkgfSA9IGF3YWl0IF9nZXRDbGlwUmVnaW9uKHBhZ2UpO1xyXG5cclxuICAgIC8vIFNldCBmaW5hbCBgaGVpZ2h0YCBmb3Igdmlld3BvcnRcclxuICAgIGNvbnN0IHZpZXdwb3J0SGVpZ2h0ID0gTWF0aC5hYnMoXHJcbiAgICAgIE1hdGguY2VpbChzaXplLmNoYXJ0SGVpZ2h0IHx8IGV4cG9ydE9wdGlvbnMuaGVpZ2h0KVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBTZXQgZmluYWwgYHdpZHRoYCBmb3Igdmlld3BvcnRcclxuICAgIGNvbnN0IHZpZXdwb3J0V2lkdGggPSBNYXRoLmFicyhcclxuICAgICAgTWF0aC5jZWlsKHNpemUuY2hhcnRXaWR0aCB8fCBleHBvcnRPcHRpb25zLndpZHRoKVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGZpbmFsIHZpZXdwb3J0IG5vdyB0aGF0IHdlIGhhdmUgdGhlIHJlYWwgaGVpZ2h0XHJcbiAgICBhd2FpdCBwYWdlLnNldFZpZXdwb3J0KHtcclxuICAgICAgaGVpZ2h0OiB2aWV3cG9ydEhlaWdodCxcclxuICAgICAgd2lkdGg6IHZpZXdwb3J0V2lkdGgsXHJcbiAgICAgIGRldmljZVNjYWxlRmFjdG9yOiBpc1NWRyA/IDEgOiBwYXJzZUZsb2F0KGV4cG9ydE9wdGlvbnMuc2NhbGUpXHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgcmVzdWx0O1xyXG4gICAgLy8gUmFzdGVyaXphdGlvbiBwcm9jZXNzXHJcbiAgICBzd2l0Y2ggKGV4cG9ydE9wdGlvbnMudHlwZSkge1xyXG4gICAgICBjYXNlICdzdmcnOlxyXG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IF9jcmVhdGVTVkcocGFnZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3BuZyc6XHJcbiAgICAgIGNhc2UgJ2pwZWcnOlxyXG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IF9jcmVhdGVJbWFnZShcclxuICAgICAgICAgIHBhZ2UsXHJcbiAgICAgICAgICBleHBvcnRPcHRpb25zLnR5cGUsXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHdpZHRoOiB2aWV3cG9ydFdpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHZpZXdwb3J0SGVpZ2h0LFxyXG4gICAgICAgICAgICB4LFxyXG4gICAgICAgICAgICB5XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZXhwb3J0T3B0aW9ucy5yYXN0ZXJpemF0aW9uVGltZW91dFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3BkZic6XHJcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgX2NyZWF0ZVBERihcclxuICAgICAgICAgIHBhZ2UsXHJcbiAgICAgICAgICB2aWV3cG9ydEhlaWdodCxcclxuICAgICAgICAgIHZpZXdwb3J0V2lkdGgsXHJcbiAgICAgICAgICBleHBvcnRPcHRpb25zLnJhc3Rlcml6YXRpb25UaW1lb3V0XHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgICBgW2V4cG9ydF0gVW5zdXBwb3J0ZWQgb3V0cHV0IGZvcm1hdDogJHtleHBvcnRPcHRpb25zLnR5cGV9LmAsXHJcbiAgICAgICAgICA0MDBcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENsZWFyIHByZXZpb3VzbHkgaW5qZWN0ZWQgSlMgYW5kIENTUyByZXNvdXJjZXNcclxuICAgIGF3YWl0IGNsZWFyUGFnZVJlc291cmNlcyhwYWdlLCBpbmplY3RlZFJlc291cmNlcyk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBhd2FpdCBjbGVhclBhZ2VSZXNvdXJjZXMocGFnZSwgaW5qZWN0ZWRSZXNvdXJjZXMpO1xyXG4gICAgcmV0dXJuIGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHJpZXZlcyB0aGUgY2xpcHBpbmcgcmVnaW9uIGNvb3JkaW5hdGVzIG9mIHRoZSBzcGVjaWZpZWQgcGFnZSBlbGVtZW50XHJcbiAqIHdpdGggdGhlICdjaGFydC1jb250YWluZXInIGlkLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIF9nZXRDbGlwUmVnaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWdlIC0gUHVwcGV0ZWVyIHBhZ2Ugb2JqZWN0LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBvYmplY3QgY29udGFpbmluZ1xyXG4gKiBgeGAsIGB5YCwgYHdpZHRoYCwgYW5kIGBoZWlnaHRgIHByb3BlcnRpZXMuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfZ2V0Q2xpcFJlZ2lvbihwYWdlKSB7XHJcbiAgcmV0dXJuIHBhZ2UuJGV2YWwoJyNjaGFydC1jb250YWluZXInLCAoZWxlbWVudCkgPT4ge1xyXG4gICAgY29uc3QgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeCxcclxuICAgICAgeSxcclxuICAgICAgd2lkdGgsXHJcbiAgICAgIGhlaWdodDogTWF0aC50cnVuYyhoZWlnaHQgPiAxID8gaGVpZ2h0IDogNTAwKVxyXG4gICAgfTtcclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gU1ZHIGJ5IGV2YWx1YXRpbmcgdGhlIGBvdXRlckhUTUxgIG9mIHRoZSBmaXJzdCAnc3ZnJyBlbGVtZW50XHJcbiAqIGluc2lkZSBhbiBlbGVtZW50IHdpdGggdGhlIGlkICdjb250YWluZXInLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIF9jcmVhdGVTVkdcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHBhZ2UgLSBQdXBwZXRlZXIgcGFnZSBvYmplY3QuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBTVkcgc3RyaW5nLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX2NyZWF0ZVNWRyhwYWdlKSB7XHJcbiAgcmV0dXJuIHBhZ2UuJGV2YWwoXHJcbiAgICAnI2NvbnRhaW5lciBzdmc6Zmlyc3Qtb2YtdHlwZScsXHJcbiAgICAoZWxlbWVudCkgPT4gZWxlbWVudC5vdXRlckhUTUxcclxuICApO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhbiBpbWFnZSB1c2luZyBQdXBwZXRlZXIncyBwYWdlIGBzY3JlZW5zaG90YCBmdW5jdGlvbmFsaXR5IHdpdGhcclxuICogc3BlY2lmaWVkIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gX2NyZWF0ZUltYWdlXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWdlIC0gUHVwcGV0ZWVyIHBhZ2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIEltYWdlIHR5cGUuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjbGlwIC0gQ2xpcHBpbmcgcmVnaW9uIGNvb3JkaW5hdGVzLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gcmFzdGVyaXphdGlvblRpbWVvdXQgLSBUaW1lb3V0IGZvciByYXN0ZXJpemF0aW9uXHJcbiAqIGluIG1pbGxpc2Vjb25kcy5cclxuICpcclxuICogQHJldHVybnMge1Byb21pc2U8QnVmZmVyPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGltYWdlIGJ1ZmZlclxyXG4gKiBvciByZWplY3Rpbmcgd2l0aCBhbiBgRXhwb3J0RXJyb3JgIGZvciB0aW1lb3V0LlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX2NyZWF0ZUltYWdlKHBhZ2UsIHR5cGUsIGNsaXAsIHJhc3Rlcml6YXRpb25UaW1lb3V0KSB7XHJcbiAgcmV0dXJuIFByb21pc2UucmFjZShbXHJcbiAgICBwYWdlLnNjcmVlbnNob3Qoe1xyXG4gICAgICB0eXBlLFxyXG4gICAgICBjbGlwLFxyXG4gICAgICBlbmNvZGluZzogJ2Jhc2U2NCcsXHJcbiAgICAgIGZ1bGxQYWdlOiBmYWxzZSxcclxuICAgICAgb3B0aW1pemVGb3JTcGVlZDogdHJ1ZSxcclxuICAgICAgY2FwdHVyZUJleW9uZFZpZXdwb3J0OiB0cnVlLFxyXG4gICAgICAuLi4odHlwZSAhPT0gJ3BuZycgPyB7IHF1YWxpdHk6IDgwIH0gOiB7fSksXHJcbiAgICAgIC8vIEFsd2F5cyByZW5kZXIgb24gYSB0cmFuc3BhcmVudCBwYWdlIGlmIHRoZSBleHBlY3RlZCB0eXBlIGZvcm1hdCBpcyBQTkdcclxuICAgICAgb21pdEJhY2tncm91bmQ6IHR5cGUgPT0gJ3BuZycgLy8gIzQ0NywgIzQ2M1xyXG4gICAgfSksXHJcbiAgICBuZXcgUHJvbWlzZSgoX3Jlc29sdmUsIHJlamVjdCkgPT5cclxuICAgICAgc2V0VGltZW91dChcclxuICAgICAgICAoKSA9PiByZWplY3QobmV3IEV4cG9ydEVycm9yKCdSYXN0ZXJpemF0aW9uIHRpbWVvdXQnLCA0MDgpKSxcclxuICAgICAgICByYXN0ZXJpemF0aW9uVGltZW91dCB8fCAxNTAwXHJcbiAgICAgIClcclxuICAgIClcclxuICBdKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBQREYgdXNpbmcgUHVwcGV0ZWVyJ3MgcGFnZSBgcGRmYCBmdW5jdGlvbmFsaXR5IHdpdGggc3BlY2lmaWVkXHJcbiAqIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gX2NyZWF0ZVBERlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcGFnZSAtIFB1cHBldGVlciBwYWdlIG9iamVjdC5cclxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFBERiBoZWlnaHQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFBERiB3aWR0aC5cclxuICogQHBhcmFtIHtudW1iZXJ9IHJhc3Rlcml6YXRpb25UaW1lb3V0IC0gVGltZW91dCBmb3IgcmFzdGVyaXphdGlvblxyXG4gKiBpbiBtaWxsaXNlY29uZHMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPEJ1ZmZlcj59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBQREYgYnVmZmVyLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX2NyZWF0ZVBERihwYWdlLCBoZWlnaHQsIHdpZHRoLCByYXN0ZXJpemF0aW9uVGltZW91dCkge1xyXG4gIGF3YWl0IHBhZ2UuZW11bGF0ZU1lZGlhVHlwZSgnc2NyZWVuJyk7XHJcbiAgcmV0dXJuIHBhZ2UucGRmKHtcclxuICAgIC8vIFRoaXMgd2lsbCByZW1vdmUgYW4gZXh0cmEgZW1wdHkgcGFnZSBpbiBQREYgZXhwb3J0c1xyXG4gICAgaGVpZ2h0OiBoZWlnaHQgKyAxLFxyXG4gICAgd2lkdGgsXHJcbiAgICBlbmNvZGluZzogJ2Jhc2U2NCcsXHJcbiAgICB0aW1lb3V0OiByYXN0ZXJpemF0aW9uVGltZW91dCB8fCAxNTAwXHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBwdXBwZXRlZXJFeHBvcnRcclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQG92ZXJ2aWV3IFRoaXMgbW9kdWxlIHByb3ZpZGVzIGEgd29ya2VyIHBvb2wgaW1wbGVtZW50YXRpb24gZm9yIG1hbmFnaW5nXHJcbiAqIHRoZSBicm93c2VyIGluc3RhbmNlIGFuZCBwYWdlcywgc3BlY2lmaWNhbGx5IGRlc2lnbmVkIGZvciB1c2Ugd2l0aFxyXG4gKiB0aGUgSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyLiBJdCBvcHRpbWl6ZXMgcmVzb3VyY2VzIHVzYWdlIGFuZCBwZXJmb3JtYW5jZVxyXG4gKiBieSBtYWludGFpbmluZyBhIHBvb2wgb2Ygd29ya2VycyB0aGF0IGNhbiBoYW5kbGUgY29uY3VycmVudCBleHBvcnQgdGFza3NcclxuICogdXNpbmcgUHVwcGV0ZWVyLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFBvb2wgfSBmcm9tICd0YXJuJztcclxuaW1wb3J0IHsgdjQgYXMgdXVpZCB9IGZyb20gJ3V1aWQnO1xyXG5cclxuaW1wb3J0IHsgY2xlYXJQYWdlLCBjcmVhdGVCcm93c2VyLCBjbG9zZUJyb3dzZXIsIG5ld1BhZ2UgfSBmcm9tICcuL2Jyb3dzZXIuanMnO1xyXG5pbXBvcnQgeyBwdXBwZXRlZXJFeHBvcnQgfSBmcm9tICcuL2V4cG9ydC5qcyc7XHJcbmltcG9ydCB7IGxvZywgbG9nV2l0aFN0YWNrIH0gZnJvbSAnLi9sb2dnZXIuanMnO1xyXG5pbXBvcnQgeyBnZXROZXdEYXRlVGltZSwgbWVhc3VyZVRpbWUgfSBmcm9tICcuL3V0aWxzLmpzJztcclxuXHJcbmltcG9ydCBFeHBvcnRFcnJvciBmcm9tICcuL2Vycm9ycy9FeHBvcnRFcnJvci5qcyc7XHJcblxyXG4vLyBUaGUgcG9vbCBpbnN0YW5jZVxyXG5sZXQgcG9vbCA9IG51bGw7XHJcblxyXG4vLyBQb29sIHN0YXRpc3RpY3NcclxuY29uc3QgcG9vbFN0YXRzID0ge1xyXG4gIGV4cG9ydHNBdHRlbXB0ZWQ6IDAsXHJcbiAgZXhwb3J0c1BlcmZvcm1lZDogMCxcclxuICBleHBvcnRzRHJvcHBlZDogMCxcclxuICBleHBvcnRzRnJvbVN2ZzogMCxcclxuICBleHBvcnRzRnJvbU9wdGlvbnM6IDAsXHJcbiAgZXhwb3J0c0Zyb21TdmdBdHRlbXB0czogMCxcclxuICBleHBvcnRzRnJvbU9wdGlvbnNBdHRlbXB0czogMCxcclxuICB0aW1lU3BlbnQ6IDAsXHJcbiAgdGltZVNwZW50QXZlcmFnZTogMFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemVzIHRoZSBleHBvcnQgcG9vbCB3aXRoIHRoZSBwcm92aWRlZCBjb25maWd1cmF0aW9uLCBjcmVhdGluZ1xyXG4gKiBhIGJyb3dzZXIgaW5zdGFuY2UgYW5kIHNldHRpbmcgdXAgd29ya2VyIHJlc291cmNlcy5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBpbml0UG9vbFxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcG9vbE9wdGlvbnMgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbmluZyBgcG9vbGBcclxuICogb3B0aW9ucy5cclxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gcHVwcGV0ZWVyQXJncyAtIEFkZGl0aW9uYWwgYXJndW1lbnRzIGZvciBQdXBwZXRlZXJcclxuICogbGF1bmNoLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gZW5kaW5nIHRoZSBmdW5jdGlvblxyXG4gKiBleGVjdXRpb24gd2hlbiBhbiBhbHJlYWR5IGluaXRpYWxpemVkIHBvb2wgb2YgcmVzb3VyY2VzIGlzIGZvdW5kLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaWYgY291bGQgbm90IGNyZWF0ZSB0aGUgcG9vbFxyXG4gKiBvZiB3b3JrZXJzLlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRQb29sKHBvb2xPcHRpb25zLCBwdXBwZXRlZXJBcmdzKSB7XHJcbiAgLy8gQ3JlYXRlIGEgYnJvd3NlciBpbnN0YW5jZSB3aXRoIHRoZSBwdXBwZXRlZXIgYXJndW1lbnRzXHJcbiAgYXdhaXQgY3JlYXRlQnJvd3NlcihwdXBwZXRlZXJBcmdzKTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGxvZyhcclxuICAgICAgMyxcclxuICAgICAgYFtwb29sXSBJbml0aWFsaXppbmcgcG9vbCB3aXRoIHdvcmtlcnM6IG1pbiAke3Bvb2xPcHRpb25zLm1pbldvcmtlcnN9LCBtYXggJHtwb29sT3B0aW9ucy5tYXhXb3JrZXJzfS5gXHJcbiAgICApO1xyXG5cclxuICAgIGlmIChwb29sKSB7XHJcbiAgICAgIGxvZyhcclxuICAgICAgICA0LFxyXG4gICAgICAgICdbcG9vbF0gQWxyZWFkeSBpbml0aWFsaXplZCwgcGxlYXNlIGtpbGwgaXQgYmVmb3JlIGNyZWF0aW5nIGEgbmV3IG9uZS4nXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBLZWVwIGFuIGV5ZSBvbiBhIGNvcnJlY3QgbWluIGFuZCBtYXggd29ya2VycyBudW1iZXJcclxuICAgIGlmIChwb29sT3B0aW9ucy5taW5Xb3JrZXJzID4gcG9vbE9wdGlvbnMubWF4V29ya2Vycykge1xyXG4gICAgICBwb29sT3B0aW9ucy5taW5Xb3JrZXJzID0gcG9vbE9wdGlvbnMubWF4V29ya2VycztcclxuICAgIH1cclxuXHJcbiAgICAvLyBDcmVhdGUgYSBwb29sIGFsb25nIHdpdGggYSBtaW5pbWFsIG51bWJlciBvZiByZXNvdXJjZXNcclxuICAgIHBvb2wgPSBuZXcgUG9vbCh7XHJcbiAgICAgIC8vIEdldCB0aGUgYGNyZWF0ZWAsIGB2YWxpZGF0ZWAsIGFuZCBgZGVzdHJveWAgZnVuY3Rpb25zXHJcbiAgICAgIC4uLl9mYWN0b3J5KHBvb2xPcHRpb25zKSxcclxuICAgICAgbWluOiBwb29sT3B0aW9ucy5taW5Xb3JrZXJzLFxyXG4gICAgICBtYXg6IHBvb2xPcHRpb25zLm1heFdvcmtlcnMsXHJcbiAgICAgIGFjcXVpcmVUaW1lb3V0TWlsbGlzOiBwb29sT3B0aW9ucy5hY3F1aXJlVGltZW91dCxcclxuICAgICAgY3JlYXRlVGltZW91dE1pbGxpczogcG9vbE9wdGlvbnMuY3JlYXRlVGltZW91dCxcclxuICAgICAgZGVzdHJveVRpbWVvdXRNaWxsaXM6IHBvb2xPcHRpb25zLmRlc3Ryb3lUaW1lb3V0LFxyXG4gICAgICBpZGxlVGltZW91dE1pbGxpczogcG9vbE9wdGlvbnMuaWRsZVRpbWVvdXQsXHJcbiAgICAgIGNyZWF0ZVJldHJ5SW50ZXJ2YWxNaWxsaXM6IHBvb2xPcHRpb25zLmNyZWF0ZVJldHJ5SW50ZXJ2YWwsXHJcbiAgICAgIHJlYXBJbnRlcnZhbE1pbGxpczogcG9vbE9wdGlvbnMucmVhcGVySW50ZXJ2YWwsXHJcbiAgICAgIHByb3BhZ2F0ZUNyZWF0ZUVycm9yOiBmYWxzZVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gU2V0IGV2ZW50c1xyXG4gICAgcG9vbC5vbigncmVsZWFzZScsIGFzeW5jIChyZXNvdXJjZSkgPT4ge1xyXG4gICAgICAvLyBDbGVhciBwYWdlXHJcbiAgICAgIGNvbnN0IGNsZWFyU3RhdHVzID0gYXdhaXQgY2xlYXJQYWdlKHJlc291cmNlLCBmYWxzZSk7XHJcbiAgICAgIGxvZyhcclxuICAgICAgICA0LFxyXG4gICAgICAgIGBbcG9vbF0gUG9vbCByZXNvdXJjZSBbJHtyZXNvdXJjZS5pZH1dIC0gUmVsZWFzaW5nIGEgd29ya2VyLiBDbGVhciBwYWdlIHN0YXR1czogJHtjbGVhclN0YXR1c30uYFxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcG9vbC5vbignZGVzdHJveVN1Y2Nlc3MnLCAoX2V2ZW50SWQsIHJlc291cmNlKSA9PiB7XHJcbiAgICAgIGxvZyhcclxuICAgICAgICA0LFxyXG4gICAgICAgIGBbcG9vbF0gUG9vbCByZXNvdXJjZSBbJHtyZXNvdXJjZS5pZH1dIC0gRGVzdHJveWVkIGEgd29ya2VyIHN1Y2Nlc3NmdWxseS5gXHJcbiAgICAgICk7XHJcbiAgICAgIHJlc291cmNlLnBhZ2UgPSBudWxsO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgaW5pdGlhbFJlc291cmNlcyA9IFtdO1xyXG4gICAgLy8gQ3JlYXRlIGFuIGluaXRpYWwgbnVtYmVyIG9mIHJlc291cmNlc1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb29sT3B0aW9ucy5taW5Xb3JrZXJzOyBpKyspIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXNvdXJjZSA9IGF3YWl0IHBvb2wuYWNxdWlyZSgpLnByb21pc2U7XHJcbiAgICAgICAgaW5pdGlhbFJlc291cmNlcy5wdXNoKHJlc291cmNlKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBsb2dXaXRoU3RhY2soMiwgZXJyb3IsICdbcG9vbF0gQ291bGQgbm90IGNyZWF0ZSBhbiBpbml0aWFsIHJlc291cmNlLicpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVsZWFzZSB0aGUgaW5pdGlhbCBudW1iZXIgb2YgcmVzb3VyY2VzIGJhY2sgdG8gdGhlIHBvb2xcclxuICAgIGluaXRpYWxSZXNvdXJjZXMuZm9yRWFjaCgocmVzb3VyY2UpID0+IHtcclxuICAgICAgcG9vbC5yZWxlYXNlKHJlc291cmNlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGxvZyhcclxuICAgICAgMyxcclxuICAgICAgYFtwb29sXSBUaGUgcG9vbCBpcyByZWFkeSR7aW5pdGlhbFJlc291cmNlcy5sZW5ndGggPyBgIHdpdGggJHtpbml0aWFsUmVzb3VyY2VzLmxlbmd0aH0gaW5pdGlhbCByZXNvdXJjZXMgd2FpdGluZy5gIDogJy4nfWBcclxuICAgICk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgJ1twb29sXSBDb3VsZCBub3QgY29uZmlndXJlIGFuZCBjcmVhdGUgdGhlIHBvb2wgb2Ygd29ya2Vycy4nLFxyXG4gICAgICA1MDBcclxuICAgICkuc2V0RXJyb3IoZXJyb3IpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRlcm1pbmF0ZXMgYWxsIHdvcmtlcnMgaW4gdGhlIHBvb2wsIGRlc3Ryb3lzIHRoZSBwb29sLCBhbmQgY2xvc2VzIHRoZSBicm93c2VyXHJcbiAqIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIGtpbGxQb29sXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyBvbmNlIGFsbCB3b3JrZXJzIGFyZVxyXG4gKiB0ZXJtaW5hdGVkLCB0aGUgcG9vbCBpcyBkZXN0cm95ZWQsIGFuZCB0aGUgYnJvd3NlciBpcyBzdWNjZXNzZnVsbHkgY2xvc2VkLlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGtpbGxQb29sKCkge1xyXG4gIGxvZygzLCAnW3Bvb2xdIEtpbGxpbmcgcG9vbCB3aXRoIGFsbCB3b3JrZXJzIGFuZCBjbG9zaW5nIGJyb3dzZXIuJyk7XHJcblxyXG4gIC8vIElmIHN0aWxsIGFsaXZlLCBkZXN0cm95IHRoZSBwb29sIG9mIHBhZ2VzIGJlZm9yZSBjbG9zaW5nIGEgYnJvd3NlclxyXG4gIGlmIChwb29sKSB7XHJcbiAgICAvLyBGcmVlIHVwIG5vdCByZWxlYXNlZCB3b3JrZXJzXHJcbiAgICBmb3IgKGNvbnN0IHdvcmtlciBvZiBwb29sLnVzZWQpIHtcclxuICAgICAgcG9vbC5yZWxlYXNlKHdvcmtlci5yZXNvdXJjZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGVzdHJveSB0aGUgcG9vbCBpZiBpdCBpcyBzdGlsbCBhdmFpbGFibGVcclxuICAgIGlmICghcG9vbC5kZXN0cm95ZWQpIHtcclxuICAgICAgYXdhaXQgcG9vbC5kZXN0cm95KCk7XHJcbiAgICAgIGxvZyg0LCAnW3Bvb2xdIERlc3Ryb3llZCB0aGUgcG9vbCBvZiByZXNvdXJjZXMuJyk7XHJcbiAgICB9XHJcbiAgICBwb29sID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8vIENsb3NlIHRoZSBicm93c2VyIGluc3RhbmNlXHJcbiAgYXdhaXQgY2xvc2VCcm93c2VyKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQcm9jZXNzZXMgdGhlIGV4cG9ydCB3b3JrIHVzaW5nIGEgd29ya2VyIGZyb20gdGhlIHBvb2wuIEFjcXVpcmVzIGEgd29ya2VyXHJcbiAqIGhhbmRsZSBmcm9tIHRoZSBwb29sLCBwZXJmb3JtcyB0aGUgZXhwb3J0IHVzaW5nIHB1cHBldGVlciwgYW5kIHJlbGVhc2VzXHJcbiAqIHRoZSB3b3JrZXIgaGFuZGxlIGJhY2sgdG8gdGhlIHBvb2wuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gcG9zdFdvcmtcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbmluZyBjb21wbGV0ZSBzZXRcclxuICogb2Ygb3B0aW9ucy5cclxuICpcclxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGV4cG9ydCByZXN1bHRcclxuICogYW5kIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiBhbiBlcnJvciBvY2N1cnMgZHVyaW5nXHJcbiAqIHRoZSBleHBvcnQgcHJvY2Vzcy5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwb3N0V29yayhvcHRpb25zKSB7XHJcbiAgbGV0IHdvcmtlckhhbmRsZTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGxvZyg0LCAnW3Bvb2xdIFdvcmsgcmVjZWl2ZWQsIHN0YXJ0aW5nIHRvIHByb2Nlc3MuJyk7XHJcblxyXG4gICAgLy8gQW4gZXhwb3J0IGF0dGVtcHQgY291bnRlZFxyXG4gICAgKytwb29sU3RhdHMuZXhwb3J0c0F0dGVtcHRlZDtcclxuXHJcbiAgICAvLyBEaXNwbGF5IHRoZSBwb29sIGluZm9ybWF0aW9uIGlmIG5lZWRlZFxyXG4gICAgaWYgKG9wdGlvbnMucG9vbC5iZW5jaG1hcmtpbmcpIHtcclxuICAgICAgZ2V0UG9vbEluZm8oKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUaHJvdyBhbiBlcnJvciBpbiBjYXNlIG9mIGxhY2tpbmcgdGhlIHBvb2wgaW5zdGFuY2VcclxuICAgIGlmICghcG9vbCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgJ1twb29sXSBXb3JrIHJlY2VpdmVkLCBidXQgcG9vbCBoYXMgbm90IGJlZW4gc3RhcnRlZC4nLFxyXG4gICAgICAgIDUwMFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRoZSBhY3F1aXJlIGNvdW50ZXJcclxuICAgIGNvbnN0IGFjcXVpcmVDb3VudGVyID0gbWVhc3VyZVRpbWUoKTtcclxuXHJcbiAgICAvLyBUcnkgdG8gYWNxdWlyZSB0aGUgd29ya2VyIGFsb25nIHdpdGggdGhlIGlkLCB3b3JrcyBjb3VudCBhbmQgcGFnZVxyXG4gICAgdHJ5IHtcclxuICAgICAgbG9nKDQsICdbcG9vbF0gQWNxdWlyaW5nIGEgd29ya2VyIGhhbmRsZS4nKTtcclxuXHJcbiAgICAgIC8vIEFjcXVpcmUgYSBwb29sIHJlc291cmNlXHJcbiAgICAgIHdvcmtlckhhbmRsZSA9IGF3YWl0IHBvb2wuYWNxdWlyZSgpLnByb21pc2U7XHJcblxyXG4gICAgICAvLyBDaGVjayB0aGUgcGFnZSBhY3F1aXJlIHRpbWVcclxuICAgICAgaWYgKG9wdGlvbnMuc2VydmVyLmJlbmNobWFya2luZykge1xyXG4gICAgICAgIGxvZyhcclxuICAgICAgICAgIDUsXHJcbiAgICAgICAgICBgW2JlbmNobWFya10gJHtvcHRpb25zLnJlcXVlc3RJZCA/IGBSZXF1ZXN0IFske29wdGlvbnMucmVxdWVzdElkfV0gLSBgIDogJyd9YCxcclxuICAgICAgICAgIGBBY3F1aXJpbmcgYSB3b3JrZXIgaGFuZGxlIHRvb2sgJHthY3F1aXJlQ291bnRlcigpfW1zLmBcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgYFtwb29sXSAke1xyXG4gICAgICAgICAgb3B0aW9ucy5yZXF1ZXN0SWQgPyBgUmVxdWVzdCBbJHtvcHRpb25zLnJlcXVlc3RJZH1dIC0gYCA6ICcnXHJcbiAgICAgICAgfUVycm9yIGVuY291bnRlcmVkIHdoZW4gYWNxdWlyaW5nIGFuIGF2YWlsYWJsZSBlbnRyeTogJHthY3F1aXJlQ291bnRlcigpfW1zLmAsXHJcbiAgICAgICAgNDAwXHJcbiAgICAgICkuc2V0RXJyb3IoZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgbG9nKDQsICdbcG9vbF0gQWNxdWlyZWQgYSB3b3JrZXIgaGFuZGxlLicpO1xyXG5cclxuICAgIGlmICghd29ya2VySGFuZGxlLnBhZ2UpIHtcclxuICAgICAgLy8gU2V0IHRoZSBgd29ya0xpbWl0YCB0byBleGNlZWRlZCBpbiBvcmRlciB0byByZWNyZWF0ZSB0aGUgcmVzb3VyY2VcclxuICAgICAgd29ya2VySGFuZGxlLndvcmtDb3VudCA9IG9wdGlvbnMucG9vbC53b3JrTGltaXQgKyAxO1xyXG4gICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgJ1twb29sXSBSZXNvbHZlZCB3b3JrZXIgcGFnZSBpcyBpbnZhbGlkOiB0aGUgcG9vbCBzZXR1cCBpcyB3b25reS4nLFxyXG4gICAgICAgIDQwMFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNhdmUgdGhlIHN0YXJ0IHRpbWVcclxuICAgIGNvbnN0IHdvcmtTdGFydCA9IGdldE5ld0RhdGVUaW1lKCk7XHJcblxyXG4gICAgbG9nKFxyXG4gICAgICA0LFxyXG4gICAgICBgW3Bvb2xdIFBvb2wgcmVzb3VyY2UgWyR7d29ya2VySGFuZGxlLmlkfV0gLSBTdGFydGluZyB3b3JrIG9uIHRoaXMgcG9vbCBlbnRyeS5gXHJcbiAgICApO1xyXG5cclxuICAgIC8vIFN0YXJ0IG1lYXN1cmluZyBleHBvcnQgdGltZVxyXG4gICAgY29uc3QgZXhwb3J0Q291bnRlciA9IG1lYXN1cmVUaW1lKCk7XHJcblxyXG4gICAgLy8gUGVyZm9ybSBhbiBleHBvcnQgb24gYSBwdXBwZXRlZXIgbGV2ZWxcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHB1cHBldGVlckV4cG9ydChcclxuICAgICAgd29ya2VySGFuZGxlLnBhZ2UsXHJcbiAgICAgIG9wdGlvbnMuZXhwb3J0LFxyXG4gICAgICBvcHRpb25zLmN1c3RvbUxvZ2ljXHJcbiAgICApO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIGl0J3MgYW4gZXJyb3JcclxuICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAvLyBOT1RFOlxyXG4gICAgICAvLyBJZiB0aGVyZSdzIGEgcmFzdGVyaXphdGlvbiB0aW1lb3V0LCB3ZSB3YW50IG5lZWQgdG8gZmx1c2ggdGhlIHBhZ2UuXHJcbiAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGUgcGFnZSBtYXkgYmUgaW4gYSBzdGF0ZSB3aGVyZSBpdCdzIHdhaXRpbmcgZm9yXHJcbiAgICAgIC8vIHRoZSBzY3JlZW5zaG90IHRvIGZpbmlzaCBldmVuIHRob3VnaCB0aGUgdGltZW91dCBoYXMgb2NjdXJlZC5cclxuICAgICAgLy8gV2hpY2ggb2YgY291cnNlIGNhdXNlcyBhIGxvdCBvZiBpc3N1ZXMgd2l0aCB0aGUgZXZlbnQgc3lzdGVtLFxyXG4gICAgICAvLyBhbmQgcGFnZSBjb25zaXN0ZW5jeS5cclxuICAgICAgLy9cclxuICAgICAgLy8gTk9URTpcclxuICAgICAgLy8gT25seSBwYWdlLnNjcmVlbnNob3Qgd2lsbCB0aHJvdyB0aGlzLCB0aW1lb3V0cyBmb3IgUERGJ3MgYXJlXHJcbiAgICAgIC8vIGhhbmRsZWQgYnkgdGhlIHBhZ2UucGRmIGZ1bmN0aW9uIGl0c2VsZi5cclxuICAgICAgLy9cclxuICAgICAgLy8gLi4ueWVzLCB0aGlzIGlzIHVnbHkuXHJcbiAgICAgIGlmIChyZXN1bHQubWVzc2FnZSA9PT0gJ1Jhc3Rlcml6YXRpb24gdGltZW91dCcpIHtcclxuICAgICAgICAvLyBTZXQgdGhlIGB3b3JrTGltaXRgIHRvIGV4Y2VlZGVkIGluIG9yZGVyIHRvIHJlY3JlYXRlIHRoZSByZXNvdXJjZVxyXG4gICAgICAgIHdvcmtlckhhbmRsZS53b3JrQ291bnQgPSBvcHRpb25zLnBvb2wud29ya0xpbWl0ICsgMTtcclxuICAgICAgICB3b3JrZXJIYW5kbGUucGFnZSA9IG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChcclxuICAgICAgICByZXN1bHQubmFtZSA9PT0gJ1RpbWVvdXRFcnJvcicgfHxcclxuICAgICAgICByZXN1bHQubWVzc2FnZSA9PT0gJ1Jhc3Rlcml6YXRpb24gdGltZW91dCdcclxuICAgICAgKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgICAgYFtwb29sXSAke1xyXG4gICAgICAgICAgICBvcHRpb25zLnJlcXVlc3RJZCA/IGBSZXF1ZXN0IFske29wdGlvbnMucmVxdWVzdElkfV0gLSBgIDogJydcclxuICAgICAgICAgIH1SYXN0ZXJpemF0aW9uIHRpbWVvdXQ6IHlvdXIgY2hhcnQgbWF5IGJlIHRvbyBjb21wbGV4IG9yIGxhcmdlLCBhbmQgZmFpbGVkIHRvIHJlbmRlciB3aXRoaW4gdGhlIGFsbG90dGVkIHRpbWUuYFxyXG4gICAgICAgICkuc2V0RXJyb3IocmVzdWx0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgICBgW3Bvb2xdICR7XHJcbiAgICAgICAgICAgIG9wdGlvbnMucmVxdWVzdElkID8gYFJlcXVlc3QgWyR7b3B0aW9ucy5yZXF1ZXN0SWR9XSAtIGAgOiAnJ1xyXG4gICAgICAgICAgfUVycm9yIGVuY291bnRlcmVkIGR1cmluZyBleHBvcnQ6ICR7ZXhwb3J0Q291bnRlcigpfW1zLmBcclxuICAgICAgICApLnNldEVycm9yKHJlc3VsdCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayB0aGUgUHVwcGV0ZWVyIGV4cG9ydCB0aW1lXHJcbiAgICBpZiAob3B0aW9ucy5zZXJ2ZXIuYmVuY2htYXJraW5nKSB7XHJcbiAgICAgIGxvZyhcclxuICAgICAgICA1LFxyXG4gICAgICAgIGBbYmVuY2htYXJrXSAke29wdGlvbnMucmVxdWVzdElkID8gYFJlcXVlc3QgWyR7b3B0aW9ucy5yZXF1ZXN0SWR9XSAtIGAgOiAnJ31gLFxyXG4gICAgICAgIGBFeHBvcnRpbmcgYSBjaGFydCBzdWNlc3NmdWxseSB0b29rICR7ZXhwb3J0Q291bnRlcigpfW1zLmBcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZWxlYXNlIHRoZSByZXNvdXJjZSBiYWNrIHRvIHRoZSBwb29sXHJcbiAgICBwb29sLnJlbGVhc2Uod29ya2VySGFuZGxlKTtcclxuXHJcbiAgICAvLyBVc2VkIGZvciBzdGF0aXN0aWNzIGluIGF2ZXJhZ2VUaW1lIGFuZCBwcm9jZXNzZWRXb3JrQ291bnQsIHdoaWNoXHJcbiAgICAvLyBpbiB0dXJuIGlzIHVzZWQgYnkgdGhlIC9oZWFsdGggcm91dGUuXHJcbiAgICBjb25zdCB3b3JrRW5kID0gZ2V0TmV3RGF0ZVRpbWUoKTtcclxuICAgIGNvbnN0IGV4cG9ydFRpbWUgPSB3b3JrRW5kIC0gd29ya1N0YXJ0O1xyXG5cclxuICAgIHBvb2xTdGF0cy50aW1lU3BlbnQgKz0gZXhwb3J0VGltZTtcclxuICAgIHBvb2xTdGF0cy50aW1lU3BlbnRBdmVyYWdlID1cclxuICAgICAgcG9vbFN0YXRzLnRpbWVTcGVudCAvICsrcG9vbFN0YXRzLmV4cG9ydHNQZXJmb3JtZWQ7XHJcblxyXG4gICAgbG9nKDQsIGBbcG9vbF0gV29yayBjb21wbGV0ZWQgaW4gJHtleHBvcnRUaW1lfW1zLmApO1xyXG5cclxuICAgIC8vIE90aGVyd2lzZSByZXR1cm4gdGhlIHJlc3VsdFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdWx0LFxyXG4gICAgICBvcHRpb25zXHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICArK3Bvb2xTdGF0cy5leHBvcnRzRHJvcHBlZDtcclxuXHJcbiAgICBpZiAod29ya2VySGFuZGxlKSB7XHJcbiAgICAgIHBvb2wucmVsZWFzZSh3b3JrZXJIYW5kbGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHJpZXZlcyB0aGUgY3VycmVudCBwb29sIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZ2V0UG9vbFxyXG4gKlxyXG4gKiBAcmV0dXJucyB7KE9iamVjdHxudWxsKX0gVGhlIGN1cnJlbnQgcG9vbCBpbnN0YW5jZSBpZiBpbml0aWFsaXplZCwgb3IgbnVsbFxyXG4gKiBpZiB0aGUgcG9vbCBoYXMgbm90IGJlZW4gY3JlYXRlZC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQb29sKCkge1xyXG4gIHJldHVybiBwb29sO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgc3RhdGlzdGljIG9mIGEgcG9vbCBpbnN0YWNlIGFib3V0IGV4cG9ydHMuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBnZXRQb29sU3RhdHNcclxuICpcclxuICogQHJldHVybnMge09iamVjdH0gVGhlIGN1cnJlbnQgcG9vbCBzdGF0aXN0aWNzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBvb2xTdGF0cygpIHtcclxuICByZXR1cm4gcG9vbFN0YXRzO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0cmlldmVzIHBvb2wgaW5mb3JtYXRpb24gaW4gSlNPTiBmb3JtYXQsIGluY2x1ZGluZyBtaW5pbXVtIGFuZCBtYXhpbXVtXHJcbiAqIHdvcmtlcnMsIGF2YWlsYWJsZSB3b3JrZXJzLCB3b3JrZXJzIGluIHVzZSwgYW5kIHBlbmRpbmcgYWNxdWlyZSByZXF1ZXN0cy5cclxuICpcclxuICogQGZ1bmN0aW9uIGdldFBvb2xJbmZvSlNPTlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBQb29sIGluZm9ybWF0aW9uIGluIEpTT04gZm9ybWF0LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBvb2xJbmZvSlNPTigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgbWluOiBwb29sLm1pbixcclxuICAgIG1heDogcG9vbC5tYXgsXHJcbiAgICB1c2VkOiBwb29sLm51bVVzZWQoKSxcclxuICAgIGF2YWlsYWJsZTogcG9vbC5udW1GcmVlKCksXHJcbiAgICBhbGxDcmVhdGVkOiBwb29sLm51bVVzZWQoKSArIHBvb2wubnVtRnJlZSgpLFxyXG4gICAgcGVuZGluZ0FjcXVpcmVzOiBwb29sLm51bVBlbmRpbmdBY3F1aXJlcygpLFxyXG4gICAgcGVuZGluZ0NyZWF0ZXM6IHBvb2wubnVtUGVuZGluZ0NyZWF0ZXMoKSxcclxuICAgIHBlbmRpbmdWYWxpZGF0aW9uczogcG9vbC5udW1QZW5kaW5nVmFsaWRhdGlvbnMoKSxcclxuICAgIHBlbmRpbmdEZXN0cm95czogcG9vbC5wZW5kaW5nRGVzdHJveXMubGVuZ3RoLFxyXG4gICAgYWJzb2x1dGVBbGw6XHJcbiAgICAgIHBvb2wubnVtVXNlZCgpICtcclxuICAgICAgcG9vbC5udW1GcmVlKCkgK1xyXG4gICAgICBwb29sLm51bVBlbmRpbmdBY3F1aXJlcygpICtcclxuICAgICAgcG9vbC5udW1QZW5kaW5nQ3JlYXRlcygpICtcclxuICAgICAgcG9vbC5udW1QZW5kaW5nVmFsaWRhdGlvbnMoKSArXHJcbiAgICAgIHBvb2wucGVuZGluZ0Rlc3Ryb3lzLmxlbmd0aFxyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMb2dzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBwb29sLCBpbmNsdWRpbmcgdGhlIG1pbmltdW1cclxuICogYW5kIG1heGltdW0gd29ya2VycywgYXZhaWxhYmxlIHdvcmtlcnMsIHdvcmtlcnMgaW4gdXNlLCBhbmQgcGVuZGluZyBhY3F1aXJlXHJcbiAqIHJlcXVlc3RzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZ2V0UG9vbEluZm9cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQb29sSW5mbygpIHtcclxuICBjb25zdCB7XHJcbiAgICBtaW4sXHJcbiAgICBtYXgsXHJcbiAgICB1c2VkLFxyXG4gICAgYXZhaWxhYmxlLFxyXG4gICAgYWxsQ3JlYXRlZCxcclxuICAgIHBlbmRpbmdBY3F1aXJlcyxcclxuICAgIHBlbmRpbmdDcmVhdGVzLFxyXG4gICAgcGVuZGluZ1ZhbGlkYXRpb25zLFxyXG4gICAgcGVuZGluZ0Rlc3Ryb3lzLFxyXG4gICAgYWJzb2x1dGVBbGxcclxuICB9ID0gZ2V0UG9vbEluZm9KU09OKCk7XHJcblxyXG4gIGxvZyg1LCBgW3Bvb2xdIFRoZSBtaW5pbXVtIG51bWJlciBvZiByZXNvdXJjZXMgYWxsb3dlZCBieSBwb29sOiAke21pbn0uYCk7XHJcbiAgbG9nKDUsIGBbcG9vbF0gVGhlIG1heGltdW0gbnVtYmVyIG9mIHJlc291cmNlcyBhbGxvd2VkIGJ5IHBvb2w6ICR7bWF4fS5gKTtcclxuICBsb2coNSwgYFtwb29sXSBUaGUgbnVtYmVyIG9mIHVzZWQgcmVzb3VyY2VzOiAke3VzZWR9LmApO1xyXG4gIGxvZyg1LCBgW3Bvb2xdIFRoZSBudW1iZXIgb2YgZnJlZSByZXNvdXJjZXM6ICR7YXZhaWxhYmxlfS5gKTtcclxuICBsb2coXHJcbiAgICA1LFxyXG4gICAgYFtwb29sXSBUaGUgbnVtYmVyIG9mIGFsbCBjcmVhdGVkICh1c2VkIGFuZCBmcmVlKSByZXNvdXJjZXM6ICR7YWxsQ3JlYXRlZH0uYFxyXG4gICk7XHJcbiAgbG9nKFxyXG4gICAgNSxcclxuICAgIGBbcG9vbF0gVGhlIG51bWJlciBvZiByZXNvdXJjZXMgd2FpdGluZyB0byBiZSBhY3F1aXJlZDogJHtwZW5kaW5nQWNxdWlyZXN9LmBcclxuICApO1xyXG4gIGxvZyhcclxuICAgIDUsXHJcbiAgICBgW3Bvb2xdIFRoZSBudW1iZXIgb2YgcmVzb3VyY2VzIHdhaXRpbmcgdG8gYmUgY3JlYXRlZDogJHtwZW5kaW5nQ3JlYXRlc30uYFxyXG4gICk7XHJcbiAgbG9nKFxyXG4gICAgNSxcclxuICAgIGBbcG9vbF0gVGhlIG51bWJlciBvZiByZXNvdXJjZXMgd2FpdGluZyB0byBiZSB2YWxpZGF0ZWQ6ICR7cGVuZGluZ1ZhbGlkYXRpb25zfS5gXHJcbiAgKTtcclxuICBsb2coXHJcbiAgICA1LFxyXG4gICAgYFtwb29sXSBUaGUgbnVtYmVyIG9mIHJlc291cmNlcyB3YWl0aW5nIHRvIGJlIGRlc3Ryb3llZDogJHtwZW5kaW5nRGVzdHJveXN9LmBcclxuICApO1xyXG4gIGxvZyg1LCBgW3Bvb2xdIFRoZSBudW1iZXIgb2YgYWxsIHJlc291cmNlczogJHthYnNvbHV0ZUFsbH0uYCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgY3JlYXRlYCwgYHZhbGlkYXRlYCxcclxuICogYW5kIGBkZXN0cm95YCBmdW5jdGlvbnMgZm9yIHRoZSBwb29sIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX2ZhY3RvcnlcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHBvb2xPcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmcgYHBvb2xgXHJcbiAqIG9wdGlvbnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBfZmFjdG9yeShwb29sT3B0aW9ucykge1xyXG4gIHJldHVybiB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgd29ya2VyIHBhZ2UgZm9yIHRoZSBleHBvcnQgcG9vbC5cclxuICAgICAqXHJcbiAgICAgKiBAYXN5bmNcclxuICAgICAqIEBmdW5jdGlvbiBjcmVhdGVcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBvYmplY3RcclxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHdvcmtlciBJRCwgYSByZWZlcmVuY2UgdG8gdGhlIGJyb3dzZXIgcGFnZSwgYW5kIGluaXRpYWxcclxuICAgICAqIHdvcmsgY291bnQuXHJcbiAgICAgKlxyXG4gICAgICogQHRocm93cyB7RXhwb3J0RXJyb3J9IFRocm93cyBhbiBgRXhwb3J0RXJyb3JgIGlmIHRoZXJlIGlzIGFuIGVycm9yIGR1cmluZ1xyXG4gICAgICogdGhlIGNyZWF0aW9uIG9mIHRoZSBuZXcgcGFnZS5cclxuICAgICAqL1xyXG4gICAgY3JlYXRlOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgIC8vIEluaXQgdGhlIHJlc291cmNlIHdpdGggdW5pcXVlIGlkIGFuZCB3b3JrIGNvdW50XHJcbiAgICAgIGNvbnN0IHBvb2xSZXNvdXJjZSA9IHtcclxuICAgICAgICBpZDogdXVpZCgpLFxyXG4gICAgICAgIC8vIFRyeSB0byBkaXN0cmlidXRlIHRoZSBpbml0aWFsIHdvcmsgY291bnRcclxuICAgICAgICB3b3JrQ291bnQ6IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIChwb29sT3B0aW9ucy53b3JrTGltaXQgLyAyKSlcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgLy8gU3RhcnQgbWVhc3VyaW5nIGEgcGFnZSBjcmVhdGlvbiB0aW1lXHJcbiAgICAgICAgY29uc3Qgc3RhcnREYXRlID0gZ2V0TmV3RGF0ZVRpbWUoKTtcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHBhZ2VcclxuICAgICAgICBhd2FpdCBuZXdQYWdlKHBvb2xSZXNvdXJjZSk7XHJcblxyXG4gICAgICAgIC8vIE1lYXN1cmUgdGhlIHRpbWUgb2YgZnVsbCBjcmVhdGlvbiBhbmQgY29uZmlndXJhdGlvbiBvZiBhIHBhZ2VcclxuICAgICAgICBsb2coXHJcbiAgICAgICAgICAzLFxyXG4gICAgICAgICAgYFtwb29sXSBQb29sIHJlc291cmNlIFske3Bvb2xSZXNvdXJjZS5pZH1dIC0gU3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgYSB3b3JrZXIsIHRvb2sgJHtcclxuICAgICAgICAgICAgZ2V0TmV3RGF0ZVRpbWUoKSAtIHN0YXJ0RGF0ZVxyXG4gICAgICAgICAgfW1zLmBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gcmVhZHkgcG9vbCByZXNvdXJjZVxyXG4gICAgICAgIHJldHVybiBwb29sUmVzb3VyY2U7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgbG9nKFxyXG4gICAgICAgICAgMyxcclxuICAgICAgICAgIGBbcG9vbF0gUG9vbCByZXNvdXJjZSBbJHtwb29sUmVzb3VyY2UuaWR9XSAtIEVycm9yIGVuY291bnRlcmVkIHdoZW4gY3JlYXRpbmcgYSBuZXcgcGFnZS5gXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFZhbGlkYXRlcyBhIHdvcmtlciBwYWdlIGluIHRoZSBleHBvcnQgcG9vbCwgY2hlY2tpbmcgaWYgaXQgaGFzIGV4Y2VlZGVkXHJcbiAgICAgKiB0aGUgd29yayBsaW1pdC5cclxuICAgICAqXHJcbiAgICAgKiBAYXN5bmNcclxuICAgICAqIEBmdW5jdGlvbiB2YWxpZGF0ZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb29sUmVzb3VyY2UgLSBUaGUgaGFuZGxlIHRvIHRoZSB3b3JrZXIsIGNvbnRhaW5pbmdcclxuICAgICAqIHRoZSB3b3JrZXIncyBJRCwgYSByZWZlcmVuY2UgdG8gdGhlIGJyb3dzZXIgcGFnZSwgYW5kIHdvcmsgY291bnQuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRydWUgaWYgdGhlIHdvcmtlclxyXG4gICAgICogaXMgdmFsaWQgYW5kIHdpdGhpbiB0aGUgd29yayBsaW1pdDsgb3RoZXJ3aXNlLCB0byBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgdmFsaWRhdGU6IGFzeW5jIChwb29sUmVzb3VyY2UpID0+IHtcclxuICAgICAgLy8gTk9URTpcclxuICAgICAgLy8gSW4gY2VydGFpbiBjYXNlcyBhY3F1aXJpbmcgdGhyb3dzIGEgVGFyZ2V0Q2xvc2VFcnJvciwgd2hpY2ggbWF5XHJcbiAgICAgIC8vIGJlIGNhdXNlZCBieSB0d28gdGhpbmdzOlxyXG4gICAgICAvLyAtIFRoZSBwYWdlIGlzIGNsb3NlZCBhbmQgYXR0ZW1wdGVkIHRvIGJlIHJldXNlZC5cclxuICAgICAgLy8gLSBMb3N0IGNvbnRhY3Qgd2l0aCB0aGUgYnJvd3Nlci5cclxuICAgICAgLy9cclxuICAgICAgLy8gV2hhdCB3ZSdyZSBzZWVpbmcgaW4gbG9ncyBpcyB0aGF0IHN1Y2Nlc3NpdmUgZXhwb3J0cyB0eXBpY2FsbHlcclxuICAgICAgLy8gc3VjY2VlZHMsIGFuZCB0aGUgc2VydmVyIHJlY292ZXJzLCBpbmRpY2F0aW5nIHRoYXQgaXQncyBsaWtlbHlcclxuICAgICAgLy8gdGhlIGZpcnN0IGNhc2UuIFRoaXMgaXMgYW4gYXR0ZW1wdCBhdCBhbGxpZXZhdGluZyB0aGUgaXNzdWUgYnlcclxuICAgICAgLy8gc2ltcGx5IG5vdCB2YWxpZGF0aW5nIHRoZSB3b3JrZXIgaWYgdGhlIHBhZ2UgaXMgbnVsbCBvciBjbG9zZWQuXHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIFRoZSBhY3R1YWwgcmVzdWx0IGZyb20gd2hlbiB0aGlzIGhhcHBlbmVkLCB3YXMgdGhhdCBhIHdvcmtlciB3b3VsZFxyXG4gICAgICAvLyBiZSBjb21wbGV0ZWx5IGxvY2tlZCwgc3RvcHBpbmcgaXQgZnJvbSBiZWluZyBhY3F1aXJlZCB1bnRpbFxyXG4gICAgICAvLyBpdHMgd29yayBjb3VudCByZWFjaGVkIHRoZSBsaW1pdC5cclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBgcGFnZWAgaXMgdmFsaWRcclxuICAgICAgaWYgKCFwb29sUmVzb3VyY2UucGFnZSkge1xyXG4gICAgICAgIGxvZyhcclxuICAgICAgICAgIDMsXHJcbiAgICAgICAgICBgW3Bvb2xdIFBvb2wgcmVzb3VyY2UgWyR7cG9vbFJlc291cmNlLmlkfV0gLSBWYWxpZGF0aW9uIGZhaWxlZCAobm8gdmFsaWQgcGFnZSBpcyBmb3VuZCkuYFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiB0aGUgYHBhZ2VgIGlzIGNsb3NlZFxyXG4gICAgICBpZiAocG9vbFJlc291cmNlLnBhZ2UuaXNDbG9zZWQoKSkge1xyXG4gICAgICAgIGxvZyhcclxuICAgICAgICAgIDMsXHJcbiAgICAgICAgICBgW3Bvb2xdIFBvb2wgcmVzb3VyY2UgWyR7cG9vbFJlc291cmNlLmlkfV0gLSBWYWxpZGF0aW9uIGZhaWxlZCAocGFnZSBpcyBjbG9zZWQgb3IgaW52YWxpZCkuYFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiB0aGUgYG1haW5GcmFtZWAgaXMgZGV0YWNoZWRcclxuICAgICAgaWYgKHBvb2xSZXNvdXJjZS5wYWdlLm1haW5GcmFtZSgpLmRldGFjaGVkKSB7XHJcbiAgICAgICAgbG9nKFxyXG4gICAgICAgICAgMyxcclxuICAgICAgICAgIGBbcG9vbF0gUG9vbCByZXNvdXJjZSBbJHtwb29sUmVzb3VyY2UuaWR9XSAtIFZhbGlkYXRpb24gZmFpbGVkIChwYWdlJ3MgZnJhbWUgaXMgZGV0YWNoZWQpLmBcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGB3b3JrTGltaXRgIGlzIGV4Y2VlZGVkXHJcbiAgICAgIGlmIChcclxuICAgICAgICBwb29sT3B0aW9ucy53b3JrTGltaXQgJiZcclxuICAgICAgICArK3Bvb2xSZXNvdXJjZS53b3JrQ291bnQgPiBwb29sT3B0aW9ucy53b3JrTGltaXRcclxuICAgICAgKSB7XHJcbiAgICAgICAgbG9nKFxyXG4gICAgICAgICAgMyxcclxuICAgICAgICAgIGBbcG9vbF0gUG9vbCByZXNvdXJjZSBbJHtwb29sUmVzb3VyY2UuaWR9XSAtIFZhbGlkYXRpb24gZmFpbGVkIChleGNlZWRlZCB0aGUgJHtwb29sT3B0aW9ucy53b3JrTGltaXR9IHdvcmtzIHBlciByZXNvdXJjZSBsaW1pdCkuYFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBUaGUgYHBvb2xSZXNvdXJjZWAgaXMgdmFsaWRhdGVkXHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlc3Ryb3lzIGEgd29ya2VyIGVudHJ5IGluIHRoZSBleHBvcnQgcG9vbCwgY2xvc2luZyBpdHMgYXNzb2NpYXRlZCBwYWdlLlxyXG4gICAgICpcclxuICAgICAqIEBhc3luY1xyXG4gICAgICogQGZ1bmN0aW9uIGRlc3Ryb3lcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9vbFJlc291cmNlIC0gVGhlIGhhbmRsZSB0byB0aGUgd29ya2VyLCBjb250YWluaW5nXHJcbiAgICAgKiB0aGUgd29ya2VyJ3MgSUQsIGEgcmVmZXJlbmNlIHRvIHRoZSBicm93c2VyIHBhZ2UsIGFuZCB3b3JrIGNvdW50LlxyXG4gICAgICovXHJcbiAgICBkZXN0cm95OiBhc3luYyAocG9vbFJlc291cmNlKSA9PiB7XHJcbiAgICAgIGxvZyhcclxuICAgICAgICAzLFxyXG4gICAgICAgIGBbcG9vbF0gUG9vbCByZXNvdXJjZSBbJHtwb29sUmVzb3VyY2UuaWR9XSAtIERlc3Ryb3lpbmcgYSB3b3JrZXIuYFxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKHBvb2xSZXNvdXJjZS5wYWdlICYmICFwb29sUmVzb3VyY2UucGFnZS5pc0Nsb3NlZCgpKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIC8vIFJlbW92ZSBhbGwgYXR0YWNoZWQgZXZlbnQgbGlzdGVuZXJzIGZyb20gdGhlIHJlc291cmNlXHJcbiAgICAgICAgICBwb29sUmVzb3VyY2UucGFnZS5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3BhZ2VlcnJvcicpO1xyXG4gICAgICAgICAgcG9vbFJlc291cmNlLnBhZ2UucmVtb3ZlQWxsTGlzdGVuZXJzKCdjb25zb2xlJyk7XHJcbiAgICAgICAgICBwb29sUmVzb3VyY2UucGFnZS5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2ZyYW1lZGV0YWNoZWQnKTtcclxuXHJcbiAgICAgICAgICAvLyBXZSBuZWVkIHRvIHdhaXQgYXJvdW5kIGZvciB0aGlzXHJcbiAgICAgICAgICBhd2FpdCBwb29sUmVzb3VyY2UucGFnZS5jbG9zZSgpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICBsb2coXHJcbiAgICAgICAgICAgIDMsXHJcbiAgICAgICAgICAgIGBbcG9vbF0gUG9vbCByZXNvdXJjZSBbJHtwb29sUmVzb3VyY2UuaWR9XSAtIFBhZ2UgY291bGQgbm90IGJlIGNsb3NlZCB1cG9uIGRlc3Ryb3lpbmcuYFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBpbml0UG9vbCxcclxuICBraWxsUG9vbCxcclxuICBwb3N0V29yayxcclxuICBnZXRQb29sLFxyXG4gIGdldFBvb2xTdGF0cyxcclxuICBnZXRQb29sSW5mbyxcclxuICBnZXRQb29sSW5mb0pTT05cclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQG92ZXJ2aWV3IFVzZWQgdG8gc2FuaXRpemUgdGhlIHN0cmluZ3MgY29taW5nIGZyb20gdGhlIGV4cG9ydGluZyBtb2R1bGVcclxuICogdG8gcHJldmVudCBYU1MgYXR0YWNrcyAod2l0aCB0aGUgRE9NUHVyaWZ5IGxpYnJhcnkpLlxyXG4gKi9cclxuXHJcbmltcG9ydCBET01QdXJpZnkgZnJvbSAnZG9tcHVyaWZ5JztcclxuaW1wb3J0IHsgSlNET00gfSBmcm9tICdqc2RvbSc7XHJcblxyXG4vKipcclxuICogU2FuaXRpemVzIGEgZ2l2ZW4gSFRNTCBzdHJpbmcgYnkgcmVtb3ZpbmcgPHNjcmlwdD4gdGFncy4gVGhpcyBmdW5jdGlvbiB1c2VzXHJcbiAqIGEgcmVndWxhciBleHByZXNzaW9uIHRvIGZpbmQgYW5kIHJlbW92ZSBhbGwgb2NjdXJyZW5jZXMgb2YgPHNjcmlwdD48L3NjcmlwdD5cclxuICogdGFncyBhbmQgYW55IGNvbnRlbnQgd2l0aGluIHRoZW0uXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBzYW5pdGl6ZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgLSBUaGUgSFRNTCBzdHJpbmcgdG8gYmUgc2FuaXRpemVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgc2FuaXRpemVkIEhUTUwgc3RyaW5nLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplKGlucHV0KSB7XHJcbiAgLy8gR2V0IHRoZSB2aXJ0dWFsIERPTVxyXG4gIGNvbnN0IHdpbmRvdyA9IG5ldyBKU0RPTSgnJykud2luZG93O1xyXG5cclxuICAvLyBDcmVhdGUgYSBwdXJpZnlpbmcgaW5zdGFuY2VcclxuICBjb25zdCBwdXJpZnkgPSBET01QdXJpZnkod2luZG93KTtcclxuXHJcbiAgLy8gUmV0dXJuIHNhbml0aXplZCBpbnB1dFxyXG4gIHJldHVybiBwdXJpZnkuc2FuaXRpemUoaW5wdXQsIHsgQUREX1RBR1M6IFsnZm9yZWlnbk9iamVjdCddIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgc2FuaXRpemVcclxufTtcclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQG92ZXJ2aWV3IFRoaXMgbW9kdWxlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0byBwcmVwYXJlIGZvciB0aGUgZXhwb3J0aW5nIGNoYXJ0c1xyXG4gKiBpbnRvIHZhcmlvdXMgaW1hZ2Ugb3V0cHV0IGZvcm1hdHMgc3VjaCBhcyBKUEVHLCBQTkcsIFBERiwgYW5kIFNWR3MuXHJcbiAqIEl0IHN1cHBvcnRzIHNpbmdsZSBhbmQgYmF0Y2ggZXhwb3J0IG9wZXJhdGlvbnMgYW5kIGFsbG93cyBjdXN0b21pemF0aW9uXHJcbiAqIHRocm91Z2ggb3B0aW9ucyBwYXNzZWQgZnJvbSBjb25maWd1cmF0aW9ucyBvciBBUElzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IHJlYWRGaWxlU3luYywgd3JpdGVGaWxlU3luYyB9IGZyb20gJ2ZzJztcclxuXHJcbmltcG9ydCB7IGlzQWxsb3dlZENvbmZpZywgdXBkYXRlT3B0aW9ucywgdmFsaWRhdGVPcHRpb24gfSBmcm9tICcuL2NvbmZpZy5qcyc7XHJcbmltcG9ydCB7IGxvZywgbG9nV2l0aFN0YWNrIH0gZnJvbSAnLi9sb2dnZXIuanMnO1xyXG5pbXBvcnQgeyBnZXRQb29sU3RhdHMsIGtpbGxQb29sLCBwb3N0V29yayB9IGZyb20gJy4vcG9vbC5qcyc7XHJcbmltcG9ydCB7IHNhbml0aXplIH0gZnJvbSAnLi9zYW5pdGl6ZS5qcyc7XHJcbmltcG9ydCB7XHJcbiAgZml4Q29uc3RyLFxyXG4gIGZpeE91dGZpbGUsXHJcbiAgZml4VHlwZSxcclxuICBnZXRBYnNvbHV0ZVBhdGgsXHJcbiAgZ2V0QmFzZTY0LFxyXG4gIGlzT2JqZWN0LFxyXG4gIHJvdW5kTnVtYmVyLFxyXG4gIHdyYXBBcm91bmRcclxufSBmcm9tICcuL3V0aWxzLmpzJztcclxuXHJcbmltcG9ydCBFeHBvcnRFcnJvciBmcm9tICcuL2Vycm9ycy9FeHBvcnRFcnJvci5qcyc7XHJcblxyXG4vLyBUaGUgZ2xvYmFsIGZsYWcgZm9yIHRoZSBjb2RlIGV4ZWN1dGlvbiBwZXJtaXNzaW9uXHJcbmxldCBhbGxvd0NvZGVFeGVjdXRpb24gPSBmYWxzZTtcclxuXHJcbi8qKlxyXG4gKiBTdGFydHMgYSBzaW5nbGUgZXhwb3J0IHByb2Nlc3MgYmFzZWQgb24gdGhlIHNwZWNpZmllZCBvcHRpb25zIGFuZCBzYXZlc1xyXG4gKiB0aGUgcmVzdWx0aW5nIGltYWdlIHRvIHRoZSBwcm92aWRlZCBvdXRwdXQgZmlsZS5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBzaW5nbGVFeHBvcnRcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgYG9wdGlvbnNgIG9iamVjdCwgd2hpY2ggc2hvdWxkIGluY2x1ZGUgc2V0dGluZ3NcclxuICogZnJvbSB0aGUgYGV4cG9ydGAgYW5kIGBjdXN0b21Mb2dpY2Agc2VjdGlvbnMuIEl0IGNhbiBiZSBhIHBhcnRpYWwgb3IgY29tcGxldGVcclxuICogc2V0IG9mIG9wdGlvbnMgZnJvbSB0aGVzZSBzZWN0aW9ucy4gVGhlIG9iamVjdCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lXHJcbiAqIG9mIHRoZSBmb2xsb3dpbmcgYGV4cG9ydGAgcHJvcGVydGllczogYGluZmlsZWAsIGBpbnN0cmAsIGBvcHRpb25zYCwgb3IgYHN2Z2BcclxuICogdG8gZ2VuZXJhdGUgYSB2YWxpZCBpbWFnZS5cclxuICpcclxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uY2UgdGhlIHNpbmdsZSBleHBvcnRcclxuICogcHJvY2VzcyBpcyBjb21wbGV0ZWQuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiBhbiBlcnJvciBvY2N1cnMgZHVyaW5nXHJcbiAqIHRoZSBzaW5nbGUgZXhwb3J0IHByb2Nlc3MuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2luZ2xlRXhwb3J0KG9wdGlvbnMpIHtcclxuICAvLyBDaGVjayBpZiB0aGUgZXhwb3J0IG1ha2VzIHNlbnNlXHJcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5leHBvcnQpIHtcclxuICAgIC8vIFBlcmZvcm0gYW4gZXhwb3J0XHJcbiAgICBhd2FpdCBzdGFydEV4cG9ydChcclxuICAgICAgeyBleHBvcnQ6IG9wdGlvbnMuZXhwb3J0LCBjdXN0b21Mb2dpYzogb3B0aW9ucy5jdXN0b21Mb2dpYyB9LFxyXG4gICAgICBhc3luYyAoZXJyb3IsIGRhdGEpID0+IHtcclxuICAgICAgICAvLyBFeGl0IHByb2Nlc3Mgd2hlbiBlcnJvciBleGlzdHNcclxuICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBgYjY0YCwgYG91dGZpbGVgLCBhbmQgYHR5cGVgIGZvciBhIGNoYXJ0XHJcbiAgICAgICAgY29uc3QgeyBiNjQsIG91dGZpbGUsIHR5cGUgfSA9IGRhdGEub3B0aW9ucy5leHBvcnQ7XHJcblxyXG4gICAgICAgIC8vIFNhdmUgdGhlIHJlc3VsdFxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBpZiAoYjY0KSB7XHJcbiAgICAgICAgICAgIC8vIEFzIGEgQmFzZTY0IHN0cmluZyB0byBhIHR4dCBmaWxlXHJcbiAgICAgICAgICAgIHdyaXRlRmlsZVN5bmMoXHJcbiAgICAgICAgICAgICAgYCR7b3V0ZmlsZS5zcGxpdCgnLicpLnNoaWZ0KCkgfHwgJ2NoYXJ0J30udHh0YCxcclxuICAgICAgICAgICAgICBnZXRCYXNlNjQoZGF0YS5yZXN1bHQsIHR5cGUpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBBcyBhIGNvcnJlY3QgaW1hZ2UgZm9ybWF0XHJcbiAgICAgICAgICAgIHdyaXRlRmlsZVN5bmMoXHJcbiAgICAgICAgICAgICAgb3V0ZmlsZSB8fCBgY2hhcnQuJHt0eXBlfWAsXHJcbiAgICAgICAgICAgICAgdHlwZSAhPT0gJ3N2ZycgPyBCdWZmZXIuZnJvbShkYXRhLnJlc3VsdCwgJ2Jhc2U2NCcpIDogZGF0YS5yZXN1bHRcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgICAgICAnW2NoYXJ0XSBFcnJvciB3aGlsZSBzYXZpbmcgYSBjaGFydC4nLFxyXG4gICAgICAgICAgICA1MDBcclxuICAgICAgICAgICkuc2V0RXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gS2lsbCBwb29sIGFuZCBjbG9zZSBicm93c2VyIGFmdGVyIGZpbmlzaGluZyBzaW5nbGUgZXhwb3J0XHJcbiAgICAgICAgYXdhaXQga2lsbFBvb2woKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAnW2NoYXJ0XSBObyBleHBlY3RlZCBgZXhwb3J0YCBvcHRpb25zIHdlcmUgZm91bmQuIFBsZWFzZSBwcm92aWRlIG9uZSBvZiB0aGUgZm9sbG93aW5nIG9wdGlvbnM6IGBpbmZpbGVgLCBgaW5zdHJgLCBgb3B0aW9uc2AsIG9yIGBzdmdgIHRvIGdlbmVyYXRlIGEgdmFsaWQgaW1hZ2UuJyxcclxuICAgICAgNDAwXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFN0YXJ0cyBhIGJhdGNoIGV4cG9ydCBwcm9jZXNzIGZvciBtdWx0aXBsZSBjaGFydHMgYmFzZWQgb24gaW5mb3JtYXRpb25cclxuICogcHJvdmlkZWQgaW4gdGhlIGBiYXRjaGAgb3B0aW9uLiBUaGUgYGJhdGNoYCBpcyBhIHN0cmluZyBpbiB0aGUgZm9sbG93aW5nXHJcbiAqIGZvcm1hdDogXCJpbmZpbGUxLmpzb249b3V0ZmlsZTEucG5nO2luZmlsZTIuanNvbj1vdXRmaWxlMi5wbmc7Li4uXCIuIFJlc3VsdHNcclxuICogYXJlIHNhdmVkIHRvIHRoZSBzcGVjaWZpZWQgb3V0cHV0IGZpbGVzLlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIGJhdGNoRXhwb3J0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIGBvcHRpb25zYCBvYmplY3QsIHdoaWNoIHNob3VsZCBpbmNsdWRlIHNldHRpbmdzXHJcbiAqIGZyb20gdGhlIGBleHBvcnRgIGFuZCBgY3VzdG9tTG9naWNgIHNlY3Rpb25zLiBJdCBjYW4gYmUgYSBwYXJ0aWFsIG9yIGNvbXBsZXRlXHJcbiAqIHNldCBvZiBvcHRpb25zIGZyb20gdGhlc2Ugc2VjdGlvbnMuIEl0IG11c3QgY29udGFpbiB0aGUgYGJhdGNoYCBvcHRpb24gZnJvbVxyXG4gKiB0aGUgYGV4cG9ydGAgc2VjdGlvbiB0byBnZW5lcmF0ZSB2YWxpZCBpbWFnZXMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyBvbmNlIHRoZSBiYXRjaCBleHBvcnRcclxuICogcHJvY2Vzc2VzIGFyZSBjb21wbGV0ZWQuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiBhbiBlcnJvciBvY2N1cnMgZHVyaW5nXHJcbiAqIGFueSBvZiB0aGUgYmF0Y2ggZXhwb3J0IHByb2Nlc3MuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYmF0Y2hFeHBvcnQob3B0aW9ucykge1xyXG4gIC8vIENoZWNrIGlmIHRoZSBleHBvcnQgbWFrZXMgc2Vuc2VcclxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmV4cG9ydCAmJiBvcHRpb25zLmV4cG9ydC5iYXRjaCkge1xyXG4gICAgLy8gQW4gYXJyYXkgZm9yIGNvbGxlY3RpbmcgYmF0Y2ggZXhwb3J0c1xyXG4gICAgY29uc3QgYmF0Y2hGdW5jdGlvbnMgPSBbXTtcclxuXHJcbiAgICAvLyBTcGxpdCBhbmQgcGFpciB0aGUgYGJhdGNoYCBhcmd1bWVudHNcclxuICAgIGZvciAobGV0IHBhaXIgb2Ygb3B0aW9ucy5leHBvcnQuYmF0Y2guc3BsaXQoJzsnKSB8fCBbXSkge1xyXG4gICAgICBwYWlyID0gcGFpci5zcGxpdCgnPScpO1xyXG4gICAgICBpZiAocGFpci5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICBiYXRjaEZ1bmN0aW9ucy5wdXNoKFxyXG4gICAgICAgICAgc3RhcnRFeHBvcnQoXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBleHBvcnQ6IHtcclxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMuZXhwb3J0LFxyXG4gICAgICAgICAgICAgICAgaW5maWxlOiBwYWlyWzBdLFxyXG4gICAgICAgICAgICAgICAgb3V0ZmlsZTogcGFpclsxXVxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgY3VzdG9tTG9naWM6IG9wdGlvbnMuY3VzdG9tTG9naWNcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKGVycm9yLCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgLy8gRXhpdCBwcm9jZXNzIHdoZW4gZXJyb3IgZXhpc3RzXHJcbiAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIC8vIEdldCB0aGUgYGI2NGAsIGBvdXRmaWxlYCwgYW5kIGB0eXBlYCBmb3IgYSBjaGFydFxyXG4gICAgICAgICAgICAgIGNvbnN0IHsgYjY0LCBvdXRmaWxlLCB0eXBlIH0gPSBkYXRhLm9wdGlvbnMuZXhwb3J0O1xyXG5cclxuICAgICAgICAgICAgICAvLyBTYXZlIHRoZSByZXN1bHRcclxuICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGI2NCkge1xyXG4gICAgICAgICAgICAgICAgICAvLyBBcyBhIEJhc2U2NCBzdHJpbmcgdG8gYSB0eHQgZmlsZVxyXG4gICAgICAgICAgICAgICAgICB3cml0ZUZpbGVTeW5jKFxyXG4gICAgICAgICAgICAgICAgICAgIGAke291dGZpbGUuc3BsaXQoJy4nKS5zaGlmdCgpIHx8ICdjaGFydCd9LnR4dGAsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0QmFzZTY0KGRhdGEucmVzdWx0LCB0eXBlKVxyXG4gICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgLy8gQXMgYSBjb3JyZWN0IGltYWdlIGZvcm1hdFxyXG4gICAgICAgICAgICAgICAgICB3cml0ZUZpbGVTeW5jKFxyXG4gICAgICAgICAgICAgICAgICAgIG91dGZpbGUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSAhPT0gJ3N2ZydcclxuICAgICAgICAgICAgICAgICAgICAgID8gQnVmZmVyLmZyb20oZGF0YS5yZXN1bHQsICdiYXNlNjQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgOiBkYXRhLnJlc3VsdFxyXG4gICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICdbY2hhcnRdIEVycm9yIHdoaWxlIHNhdmluZyBhIGNoYXJ0LicsXHJcbiAgICAgICAgICAgICAgICAgIDUwMFxyXG4gICAgICAgICAgICAgICAgKS5zZXRFcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsb2coMiwgJ1tjaGFydF0gTm8gY29ycmVjdCBwYWlyIGZvdW5kIGZvciB0aGUgYmF0Y2ggZXhwb3J0LicpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQXdhaXQgYWxsIGV4cG9ydHMgYXJlIGRvbmVcclxuICAgIGNvbnN0IGJhdGNoUmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsU2V0dGxlZChiYXRjaEZ1bmN0aW9ucyk7XHJcblxyXG4gICAgLy8gS2lsbCBwb29sIGFuZCBjbG9zZSBicm93c2VyIGFmdGVyIGZpbmlzaGluZyBiYXRjaCBleHBvcnRcclxuICAgIGF3YWl0IGtpbGxQb29sKCk7XHJcblxyXG4gICAgLy8gTG9nIGVycm9ycyBpZiBmb3VuZFxyXG4gICAgYmF0Y2hSZXN1bHRzLmZvckVhY2goKHJlc3VsdCwgaW5kZXgpID0+IHtcclxuICAgICAgLy8gTG9nIHRoZSBlcnJvciB3aXRoIHN0YWNrIGFib3V0IHRoZSBzcGVjaWZpYyBiYXRjaCBleHBvcnRcclxuICAgICAgaWYgKHJlc3VsdC5yZWFzb24pIHtcclxuICAgICAgICBsb2dXaXRoU3RhY2soXHJcbiAgICAgICAgICAxLFxyXG4gICAgICAgICAgcmVzdWx0LnJlYXNvbixcclxuICAgICAgICAgIGBbY2hhcnRdIEJhdGNoIGV4cG9ydCBudW1iZXIgJHtpbmRleCArIDF9IGNvdWxkIG5vdCBiZSBjb3JyZWN0bHkgY29tcGxldGVkLmBcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAnW2NoYXJ0XSBObyBleHBlY3RlZCBgZXhwb3J0YCBvcHRpb25zIHdlcmUgZm91bmQuIFBsZWFzZSBwcm92aWRlIHRoZSBgYmF0Y2hgIG9wdGlvbiB0byBnZW5lcmF0ZSB2YWxpZCBpbWFnZXMuJyxcclxuICAgICAgNDAwXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFN0YXJ0cyBhbiBleHBvcnQgcHJvY2Vzcy4gVGhlIGBpbWFnZU9wdGlvbnNgIHBhcmFtZXRlciBpcyBhbiBvYmplY3QgdGhhdFxyXG4gKiBzaG91bGQgaW5jbHVkZSBzZXR0aW5ncyBmcm9tIHRoZSBgZXhwb3J0YCBhbmQgYGN1c3RvbUxvZ2ljYCBzZWN0aW9ucy4gSXQgY2FuXHJcbiAqIGJlIGEgcGFydGlhbCBvciBjb21wbGV0ZSBzZXQgb2Ygb3B0aW9ucyBmcm9tIHRoZXNlIHNlY3Rpb25zLiBJZiBwYXJ0aWFsXHJcbiAqIG9wdGlvbnMgYXJlIHByb3ZpZGVkLCBtaXNzaW5nIHZhbHVlcyB3aWxsIGJlIG1lcmdlZCB3aXRoIHRoZSBjdXJyZW50IGdsb2JhbFxyXG4gKiBvcHRpb25zLlxyXG4gKlxyXG4gKiBUaGUgYGVuZENhbGxiYWNrYCBmdW5jdGlvbiBpcyBpbnZva2VkIHVwb24gdGhlIGNvbXBsZXRpb24gb2YgdGhlIGV4cG9ydCxcclxuICogZWl0aGVyIHN1Y2Nlc3NmdWxseSBvciB3aXRoIGFuIGVycm9yLiBUaGUgYGVycm9yYCBvYmplY3QgaXMgcHJvdmlkZWRcclxuICogYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCBhbmQgdGhlIGBkYXRhYCBvYmplY3QgaXMgdGhlIHNlY29uZCwgY29udGFpbmluZ1xyXG4gKiB0aGUgQmFzZTY0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjaGFydCBpbiB0aGUgYHJlc3VsdGAgcHJvcGVydHlcclxuICogYW5kIHRoZSBjb21wbGV0ZSBzZXQgb2Ygb3B0aW9ucyBpbiB0aGUgYG9wdGlvbnNgIHByb3BlcnR5LlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIHN0YXJ0RXhwb3J0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZU9wdGlvbnMgLSBUaGUgYGltYWdlT3B0aW9uc2Agb2JqZWN0LCB3aGljaCBzaG91bGRcclxuICogaW5jbHVkZSBzZXR0aW5ncyBmcm9tIHRoZSBgZXhwb3J0YCBhbmQgYGN1c3RvbUxvZ2ljYCBzZWN0aW9ucy4gSXQgY2FuXHJcbiAqIGJlIGEgcGFydGlhbCBvciBjb21wbGV0ZSBzZXQgb2Ygb3B0aW9ucyBmcm9tIHRoZXNlIHNlY3Rpb25zLiBJZiB0aGUgcHJvdmlkZWRcclxuICogb3B0aW9ucyBhcmUgcGFydGlhbCwgbWlzc2luZyB2YWx1ZXMgd2lsbCBiZSBtZXJnZWQgd2l0aCB0aGUgY3VycmVudCBnbG9iYWxcclxuICogb3B0aW9ucy5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5kQ2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgaW52b2tlZCB1cG9uXHJcbiAqIGZpbmFsaXppbmcgdGhlIGV4cG9ydCBwcm9jZXNzIG9yIHVwb24gZW5jb3VudGVyaW5nIGFuIGVycm9yLiBUaGUgZmlyc3RcclxuICogYXJndW1lbnQgaXMgdGhlIGBlcnJvcmAgb2JqZWN0LCBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCBpcyB0aGUgYGRhdGFgIG9iamVjdCxcclxuICogd2hpY2ggaW5jbHVkZXMgdGhlIEJhc2U2NCByZXByZXNlbnRhdGlvbiBvZiB0aGUgY2hhcnQgaW4gdGhlIGByZXN1bHRgXHJcbiAqIHByb3BlcnR5IGFuZCB0aGUgZnVsbCBzZXQgb2Ygb3B0aW9ucyBpbiB0aGUgYG9wdGlvbnNgIHByb3BlcnR5LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCByZXR1cm4gYSB2YWx1ZSBkaXJlY3RseS5cclxuICogSW5zdGVhZCwgaXQgY29tbXVuaWNhdGVzIHJlc3VsdHMgdmlhIHRoZSBgZW5kQ2FsbGJhY2tgLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaWYgdGhlcmUgaXMgYSBwcm9ibGVtIHdpdGhcclxuICogcHJvY2Vzc2luZyBpbnB1dCBvZiBhbnkgdHlwZS4gVGhlIGVycm9yIGlzIHBhc3NlZCBpbnRvIHRoZSBgZW5kQ2FsbGJhY2tgXHJcbiAqIGZ1bmN0aW9uIGFuZCBwcm9jZXNzZWQgdGhlcmUuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRFeHBvcnQoaW1hZ2VPcHRpb25zLCBlbmRDYWxsYmFjaykge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBDaGVjayBpZiBwcm92aWRlZCBvcHRpb25zIGFyZSBpbiBhbiBvYmplY3RcclxuICAgIGlmICghaXNPYmplY3QoaW1hZ2VPcHRpb25zKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgJ1tjaGFydF0gSW5jb3JyZWN0IHZhbHVlIG9mIHRoZSBwcm92aWRlZCBgaW1hZ2VPcHRpb25zYC4gTmVlZHMgdG8gYmUgYW4gb2JqZWN0LicsXHJcbiAgICAgICAgNDAwXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWVyZ2UgYWRkaXRpb25hbCBvcHRpb25zIHRvIHRoZSBjb3B5IG9mIHRoZSBpbnN0YW5jZSBvcHRpb25zXHJcbiAgICBjb25zdCBvcHRpb25zID0gdXBkYXRlT3B0aW9ucyhcclxuICAgICAge1xyXG4gICAgICAgIGV4cG9ydDogaW1hZ2VPcHRpb25zLmV4cG9ydCxcclxuICAgICAgICBjdXN0b21Mb2dpYzogaW1hZ2VPcHRpb25zLmN1c3RvbUxvZ2ljXHJcbiAgICAgIH0sXHJcbiAgICAgIHRydWVcclxuICAgICk7XHJcblxyXG4gICAgLy8gR2V0IHRoZSBgZXhwb3J0YCBvcHRpb25zXHJcbiAgICBjb25zdCBleHBvcnRPcHRpb25zID0gb3B0aW9ucy5leHBvcnQ7XHJcblxyXG4gICAgLy8gU3RhcnRpbmcgZXhwb3J0aW5nIHByb2Nlc3MgbWVzc2FnZVxyXG4gICAgbG9nKDQsICdbY2hhcnRdIFN0YXJ0aW5nIHRoZSBleHBvcnRpbmcgcHJvY2Vzcy4nKTtcclxuXHJcbiAgICAvLyBFeHBvcnQgdXNpbmcgb3B0aW9ucyBmcm9tIHRoZSBmaWxlIGFzIGFuIGlucHV0XHJcbiAgICBpZiAoZXhwb3J0T3B0aW9ucy5pbmZpbGUgIT09IG51bGwpIHtcclxuICAgICAgbG9nKDQsICdbY2hhcnRdIEF0dGVtcHRpbmcgdG8gZXhwb3J0IGZyb20gYSBmaWxlIGlucHV0LicpO1xyXG5cclxuICAgICAgbGV0IGZpbGVDb250ZW50O1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIFRyeSB0byByZWFkIHRoZSBmaWxlIHRvIGdldCB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uXHJcbiAgICAgICAgZmlsZUNvbnRlbnQgPSByZWFkRmlsZVN5bmMoXHJcbiAgICAgICAgICBnZXRBYnNvbHV0ZVBhdGgoZXhwb3J0T3B0aW9ucy5pbmZpbGUpLFxyXG4gICAgICAgICAgJ3V0ZjgnXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgICAnW2NoYXJ0XSBFcnJvciBsb2FkaW5nIGNvbnRlbnQgZnJvbSBhIGZpbGUgaW5wdXQuJyxcclxuICAgICAgICAgIDQwMFxyXG4gICAgICAgICkuc2V0RXJyb3IoZXJyb3IpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayB0aGUgZmlsZSdzIGV4dGVuc2lvblxyXG4gICAgICBpZiAoZXhwb3J0T3B0aW9ucy5pbmZpbGUuZW5kc1dpdGgoJy5zdmcnKSkge1xyXG4gICAgICAgIC8vIFNldCB0byB0aGUgYHN2Z2Agb3B0aW9uXHJcbiAgICAgICAgZXhwb3J0T3B0aW9ucy5zdmcgPSB2YWxpZGF0ZU9wdGlvbignc3ZnJywgZmlsZUNvbnRlbnQpO1xyXG4gICAgICB9IGVsc2UgaWYgKGV4cG9ydE9wdGlvbnMuaW5maWxlLmVuZHNXaXRoKCcuanNvbicpKSB7XHJcbiAgICAgICAgLy8gU2V0IHRvIHRoZSBgaW5zdHJgIG9wdGlvblxyXG4gICAgICAgIGV4cG9ydE9wdGlvbnMuaW5zdHIgPSB2YWxpZGF0ZU9wdGlvbignaW5zdHInLCBmaWxlQ29udGVudCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgICAgJ1tjaGFydF0gSW5jb3JyZWN0IHZhbHVlIG9mIHRoZSBgaW5maWxlYCBvcHRpb24uJyxcclxuICAgICAgICAgIDQwMFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBFeHBvcnQgdXNpbmcgU1ZHIGFzIGFuIGlucHV0XHJcbiAgICBpZiAoZXhwb3J0T3B0aW9ucy5zdmcgIT09IG51bGwpIHtcclxuICAgICAgbG9nKDQsICdbY2hhcnRdIEF0dGVtcHRpbmcgdG8gZXhwb3J0IGZyb20gYW4gU1ZHIGlucHV0LicpO1xyXG5cclxuICAgICAgLy8gU1ZHIGV4cG9ydHMgYXR0ZW1wdHMgY291bnRlclxyXG4gICAgICArK2dldFBvb2xTdGF0cygpLmV4cG9ydHNGcm9tU3ZnQXR0ZW1wdHM7XHJcblxyXG4gICAgICAvLyBFeHBvcnQgZnJvbSBhbiBTVkcgc3RyaW5nXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IF9leHBvcnRGcm9tU3ZnKFxyXG4gICAgICAgIHNhbml0aXplKGV4cG9ydE9wdGlvbnMuc3ZnKSwgLy8gIzIwOVxyXG4gICAgICAgIG9wdGlvbnNcclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIFNWRyBleHBvcnRzIGNvdW50ZXJcclxuICAgICAgKytnZXRQb29sU3RhdHMoKS5leHBvcnRzRnJvbVN2ZztcclxuXHJcbiAgICAgIC8vIFBhc3MgU1ZHIGV4cG9ydCByZXN1bHQgdG8gdGhlIGVuZCBjYWxsYmFja1xyXG4gICAgICByZXR1cm4gZW5kQ2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBFeHBvcnQgdXNpbmcgb3B0aW9ucyBhcyBhbiBpbnB1dFxyXG4gICAgaWYgKGV4cG9ydE9wdGlvbnMuaW5zdHIgIT09IG51bGwgfHwgZXhwb3J0T3B0aW9ucy5vcHRpb25zICE9PSBudWxsKSB7XHJcbiAgICAgIGxvZyg0LCAnW2NoYXJ0XSBBdHRlbXB0aW5nIHRvIGV4cG9ydCBmcm9tIG9wdGlvbnMgaW5wdXQuJyk7XHJcblxyXG4gICAgICAvLyBPcHRpb25zIGV4cG9ydHMgYXR0ZW1wdHMgY291bnRlclxyXG4gICAgICArK2dldFBvb2xTdGF0cygpLmV4cG9ydHNGcm9tT3B0aW9uc0F0dGVtcHRzO1xyXG5cclxuICAgICAgLy8gRXhwb3J0IGZyb20gb3B0aW9uc1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBfZXhwb3J0RnJvbU9wdGlvbnMoXHJcbiAgICAgICAgZXhwb3J0T3B0aW9ucy5pbnN0ciB8fCBleHBvcnRPcHRpb25zLm9wdGlvbnMsXHJcbiAgICAgICAgb3B0aW9uc1xyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gT3B0aW9ucyBleHBvcnRzIGNvdW50ZXJcclxuICAgICAgKytnZXRQb29sU3RhdHMoKS5leHBvcnRzRnJvbU9wdGlvbnM7XHJcblxyXG4gICAgICAvLyBQYXNzIG9wdGlvbnMgZXhwb3J0IHJlc3VsdCB0byB0aGUgZW5kIGNhbGxiYWNrXHJcbiAgICAgIHJldHVybiBlbmRDYWxsYmFjayhudWxsLCByZXN1bHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vIGlucHV0IHNwZWNpZmllZCwgcGFzcyBhbiBlcnJvciBtZXNzYWdlIHRvIHRoZSBjYWxsYmFja1xyXG4gICAgcmV0dXJuIGVuZENhbGxiYWNrKFxyXG4gICAgICBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgYFtjaGFydF0gTm8gdmFsaWQgaW5wdXQgc3BlY2lmaWVkLiBDaGVjayBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzIGlzIGNvcnJlY3RseSBzZXQ6ICdpbmZpbGUnLCAnaW5zdHInLCAnb3B0aW9ucycsIG9yICdzdmcnLmAsXHJcbiAgICAgICAgNDAwXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJldHVybiBlbmRDYWxsYmFjayhlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmV0cmlldmVzIGFuZCByZXR1cm5zIHRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgY29kZSBleGVjdXRpb24gcGVybWlzc2lvbi5cclxuICpcclxuICogQGZ1bmN0aW9uIGdldEFsbG93Q29kZUV4ZWN1dGlvblxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVGhlIHZhbHVlIG9mIHRoZSBnbG9iYWwgYGFsbG93Q29kZUV4ZWN1dGlvbmAgb3B0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbG93Q29kZUV4ZWN1dGlvbigpIHtcclxuICByZXR1cm4gYWxsb3dDb2RlRXhlY3V0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0cyB0aGUgY29kZSBleGVjdXRpb24gcGVybWlzc2lvbiBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgYm9vbGVhbiB2YWx1ZS5cclxuICpcclxuICogQGZ1bmN0aW9uIHNldEFsbG93Q29kZUV4ZWN1dGlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIC0gVGhlIGJvb2xlYW4gdmFsdWUgdG8gYmUgYXNzaWduZWQgdG8gdGhlIGdsb2JhbFxyXG4gKiBgYWxsb3dDb2RlRXhlY3V0aW9uYCBvcHRpb24uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0QWxsb3dDb2RlRXhlY3V0aW9uKHZhbHVlKSB7XHJcbiAgYWxsb3dDb2RlRXhlY3V0aW9uID0gdmFsdWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFeHBvcnRzIGZyb20gYW4gU1ZHIGJhc2VkIGlucHV0IHdpdGggdGhlIHByb3ZpZGVkIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gX2V4cG9ydEZyb21TdmdcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0VG9FeHBvcnQgLSBUaGUgU1ZHIGJhc2VkIGlucHV0IHRvIGJlIGV4cG9ydGVkLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nIGNvbXBsZXRlIHNldFxyXG4gKiBvZiBvcHRpb25zLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx1bmtub3duPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSByZXN1bHQgb2YgdGhlIGV4cG9ydFxyXG4gKiBwcm9jZXNzLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaWYgdGhlcmUgaXMgbm90IGEgY29ycmVjdCBTVkdcclxuICogaW5wdXQuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfZXhwb3J0RnJvbVN2ZyhpbnB1dFRvRXhwb3J0LCBvcHRpb25zKSB7XHJcbiAgLy8gQ2hlY2sgaWYgaXQgaXMgU1ZHXHJcbiAgaWYgKFxyXG4gICAgdHlwZW9mIGlucHV0VG9FeHBvcnQgPT09ICdzdHJpbmcnICYmXHJcbiAgICAoaW5wdXRUb0V4cG9ydC5pbmRleE9mKCc8c3ZnJykgPj0gMCB8fCBpbnB1dFRvRXhwb3J0LmluZGV4T2YoJzw/eG1sJykgPj0gMClcclxuICApIHtcclxuICAgIGxvZyg0LCAnW2NoYXJ0XSBQYXJzaW5nIGlucHV0IGFzIFNWRy4nKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGV4cG9ydCBpbnB1dCBhcyBTVkdcclxuICAgIG9wdGlvbnMuZXhwb3J0LnN2ZyA9IGlucHV0VG9FeHBvcnQ7XHJcblxyXG4gICAgLy8gUmVzZXQgdGhlIHJlc3Qgb2YgdGhlIGV4cG9ydCBpbnB1dCBvcHRpb25zXHJcbiAgICBvcHRpb25zLmV4cG9ydC5pbnN0ciA9IG51bGw7XHJcbiAgICBvcHRpb25zLmV4cG9ydC5vcHRpb25zID0gbnVsbDtcclxuXHJcbiAgICAvLyBDYWxsIHRoZSBmdW5jdGlvbiB3aXRoIGFuIFNWRyBzdHJpbmcgYXMgYW4gZXhwb3J0IGlucHV0XHJcbiAgICByZXR1cm4gX3ByZXBhcmVFeHBvcnQob3B0aW9ucyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcignW2NoYXJ0XSBOb3QgYSBjb3JyZWN0IFNWRyBpbnB1dC4nLCA0MDApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEV4cG9ydHMgZnJvbSBhbiBvcHRpb25zIGJhc2VkIGlucHV0IHdpdGggdGhlIHByb3ZpZGVkIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gX2V4cG9ydEZyb21PcHRpb25zXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dFRvRXhwb3J0IC0gVGhlIG9wdGlvbnMgYmFzZWQgaW5wdXQgdG8gYmUgZXhwb3J0ZWQuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmcgY29tcGxldGUgc2V0XHJcbiAqIG9mIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPHVua25vd24+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIHJlc3VsdCBvZiB0aGUgZXhwb3J0XHJcbiAqIHByb2Nlc3MuXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiB0aGVyZSBpcyBub3QgYSBjb3JyZWN0XHJcbiAqIGNoYXJ0IG9wdGlvbnMgaW5wdXQuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfZXhwb3J0RnJvbU9wdGlvbnMoaW5wdXRUb0V4cG9ydCwgb3B0aW9ucykge1xyXG4gIGxvZyg0LCAnW2NoYXJ0XSBQYXJzaW5nIGlucHV0IGZyb20gb3B0aW9ucy4nKTtcclxuXHJcbiAgLy8gVHJ5IHRvIGNoZWNrLCB2YWxpZGF0ZSBhbmQgcGFyc2UgdG8gc3RyaW5naWZpZWQgb3B0aW9uc1xyXG4gIGNvbnN0IHN0cmluZ2lmaWVkT3B0aW9ucyA9IGlzQWxsb3dlZENvbmZpZyhcclxuICAgIGlucHV0VG9FeHBvcnQsXHJcbiAgICB0cnVlLFxyXG4gICAgb3B0aW9ucy5jdXN0b21Mb2dpYy5hbGxvd0NvZGVFeGVjdXRpb25cclxuICApO1xyXG5cclxuICAvLyBDaGVjayBpZiBhIGNvcnJlY3Qgc3RyaW5naWZpZWQgb3B0aW9uc1xyXG4gIGlmIChcclxuICAgIHN0cmluZ2lmaWVkT3B0aW9ucyA9PT0gbnVsbCB8fFxyXG4gICAgdHlwZW9mIHN0cmluZ2lmaWVkT3B0aW9ucyAhPT0gJ3N0cmluZycgfHxcclxuICAgICFzdHJpbmdpZmllZE9wdGlvbnMuc3RhcnRzV2l0aCgneycpIHx8XHJcbiAgICAhc3RyaW5naWZpZWRPcHRpb25zLmVuZHNXaXRoKCd9JylcclxuICApIHtcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgJ1tjaGFydF0gSW52YWxpZCBjb25maWd1cmF0aW9uIHByb3ZpZGVkIC0gT25seSBvcHRpb25zIGNvbmZpZ3VyYXRpb25zIGFuZCBTVkcgYXJlIGFsbG93ZWQgZm9yIHRoaXMgc2VydmVyLiBJZiB0aGlzIGlzIHlvdXIgc2VydmVyLCBKYXZhU2NyaXB0IGN1c3RvbSBjb2RlIGNhbiBiZSBlbmFibGVkIGJ5IHN0YXJ0aW5nIHRoZSBzZXJ2ZXIgd2l0aCB0aGUgYGFsbG93Q29kZUV4ZWN1dGlvbmAgb3B0aW9ucyBzZXQgdG8gdHJ1ZS4nLFxyXG4gICAgICA0MDNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBTZXQgdGhlIGV4cG9ydCBpbnB1dCBhcyBhIHN0cmluZ2lmaWVkIGNoYXJ0IG9wdGlvbnNcclxuICBvcHRpb25zLmV4cG9ydC5pbnN0ciA9IHN0cmluZ2lmaWVkT3B0aW9ucztcclxuXHJcbiAgLy8gUmVzZXQgdGhlIHJlc3Qgb2YgdGhlIGV4cG9ydCBpbnB1dCBvcHRpb25zXHJcbiAgb3B0aW9ucy5leHBvcnQuc3ZnID0gbnVsbDtcclxuXHJcbiAgLy8gQ2FsbCB0aGUgZnVuY3Rpb24gd2l0aCBhIHN0cmluZ2lmaWVkIGNoYXJ0IG9wdGlvbnNcclxuICByZXR1cm4gX3ByZXBhcmVFeHBvcnQob3B0aW9ucyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGdW5jdGlvbiBmb3IgZmluYWxpemluZyBvcHRpb25zIGFuZCBjb25maWd1cmF0aW9ucyBiZWZvcmUgZXhwb3J0LlxyXG4gKlxyXG4gKiBAYXN5bmNcclxuICogQGZ1bmN0aW9uIF9wcmVwYXJlRXhwb3J0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmcgY29tcGxldGUgc2V0XHJcbiAqIG9mIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPHVua25vd24+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIHJlc3VsdCBvZiB0aGUgZXhwb3J0XHJcbiAqIHByb2Nlc3MuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfcHJlcGFyZUV4cG9ydChvcHRpb25zKSB7XHJcbiAgY29uc3QgeyBleHBvcnQ6IGV4cG9ydE9wdGlvbnMsIGN1c3RvbUxvZ2ljOiBjdXN0b21Mb2dpY09wdGlvbnMgfSA9IG9wdGlvbnM7XHJcblxyXG4gIC8vIFByZXBhcmUgdGhlIGB0eXBlYCBvcHRpb25cclxuICBleHBvcnRPcHRpb25zLnR5cGUgPSBmaXhUeXBlKGV4cG9ydE9wdGlvbnMudHlwZSwgZXhwb3J0T3B0aW9ucy5vdXRmaWxlKTtcclxuXHJcbiAgLy8gUHJlcGFyZSB0aGUgYG91dGZpbGVgIG9wdGlvblxyXG4gIGV4cG9ydE9wdGlvbnMub3V0ZmlsZSA9IGZpeE91dGZpbGUoZXhwb3J0T3B0aW9ucy50eXBlLCBleHBvcnRPcHRpb25zLm91dGZpbGUpO1xyXG5cclxuICAvLyBQcmVwYXJlIHRoZSBgY29uc3RyYCBvcHRpb25cclxuICBleHBvcnRPcHRpb25zLmNvbnN0ciA9IGZpeENvbnN0cihleHBvcnRPcHRpb25zLmNvbnN0cik7XHJcblxyXG4gIC8vIE5vdGlmeSBhYm91dCB0aGUgY3VzdG9tIGxvZ2ljIHVzYWdlIHN0YXR1c1xyXG4gIGxvZyhcclxuICAgIDMsXHJcbiAgICBgW2NoYXJ0XSBUaGUgY3VzdG9tIGxvZ2ljIGlzICR7Y3VzdG9tTG9naWNPcHRpb25zLmFsbG93Q29kZUV4ZWN1dGlvbiA/ICdhbGxvd2VkJyA6ICdkaXNhbGxvd2VkJ30uYFxyXG4gICk7XHJcblxyXG4gIC8vIFByZXBhcmUgdGhlIGN1c3RvbSBsb2dpYyBvcHRpb25zIChgY3VzdG9tQ29kZWAsIGBjYWxsYmFja2AsIGByZXNvdXJjZXNgKVxyXG4gIF9oYW5kbGVDdXN0b21Mb2dpYyhjdXN0b21Mb2dpY09wdGlvbnMsIGN1c3RvbUxvZ2ljT3B0aW9ucy5hbGxvd0NvZGVFeGVjdXRpb24pO1xyXG5cclxuICAvLyBQcmVwYXJlIHRoZSBgZ2xvYmFsT3B0aW9uc2AgYW5kIGB0aGVtZU9wdGlvbnNgIG9wdGlvbnNcclxuICBfaGFuZGxlR2xvYmFsQW5kVGhlbWUoXHJcbiAgICBleHBvcnRPcHRpb25zLFxyXG4gICAgY3VzdG9tTG9naWNPcHRpb25zLmFsbG93RmlsZVJlc291cmNlcyxcclxuICAgIGN1c3RvbUxvZ2ljT3B0aW9ucy5hbGxvd0NvZGVFeGVjdXRpb25cclxuICApO1xyXG5cclxuICAvLyBQcmVwYXJlIHRoZSBgaGVpZ2h0YCwgYHdpZHRoYCwgYW5kIGBzY2FsZWAgb3B0aW9uc1xyXG4gIG9wdGlvbnMuZXhwb3J0ID0ge1xyXG4gICAgLi4uZXhwb3J0T3B0aW9ucyxcclxuICAgIC4uLl9maW5kQ2hhcnRTaXplKGV4cG9ydE9wdGlvbnMpXHJcbiAgfTtcclxuXHJcbiAgLy8gUG9zdCB0aGUgd29yayB0byB0aGUgcG9vbFxyXG4gIHJldHVybiBwb3N0V29yayhvcHRpb25zKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGBoZWlnaHRgLCBgd2lkdGhgIGFuZCBgc2NhbGVgIGZvciBjaGFydCBleHBvcnRzIGJhc2VkXHJcbiAqIG9uIHRoZSBwcm92aWRlZCBleHBvcnQgb3B0aW9ucy5cclxuICpcclxuICogVGhlIGZ1bmN0aW9uIHByaW9yaXRpemVzIHZhbHVlcyBpbiB0aGUgZm9sbG93aW5nIG9yZGVyOlxyXG4gKiAxLiBUaGUgYGhlaWdodGAsIGB3aWR0aGAsIGBzY2FsZWAgZnJvbSB0aGUgYGV4cG9ydE9wdGlvbnNgLlxyXG4gKiAyLiBPcHRpb25zIGZyb20gdGhlIGNoYXJ0IGNvbmZpZ3VyYXRpb24gKGZyb20gYGV4cG9ydGluZ2AgYW5kIGBjaGFydGApLlxyXG4gKiAzLiBPcHRpb25zIGZyb20gdGhlIGdsb2JhbCBvcHRpb25zIChmcm9tIGBleHBvcnRpbmdgIGFuZCBgY2hhcnRgKS5cclxuICogNC4gT3B0aW9ucyBmcm9tIHRoZSB0aGVtZSBvcHRpb25zIChmcm9tIGBleHBvcnRpbmdgIGFuZCBgY2hhcnRgIHNlY3Rpb25zKS5cclxuICogNS4gRmFsbGJhY2sgZGVmYXVsdCB2YWx1ZXMgKGBoZWlnaHQgPSA0MDBgLCBgd2lkdGggPSA2MDBgLCBgc2NhbGUgPSAxYCkuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBfZmluZENoYXJ0U2l6ZVxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gZXhwb3J0T3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nIGBleHBvcnRgXHJcbiAqIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBvYmplY3QgY29udGFpbmluZyBjYWxjdWxhdGVkIGBoZWlnaHRgLCBgd2lkdGhgXHJcbiAqIGFuZCBgc2NhbGVgIHZhbHVlcyBmb3IgdGhlIGNoYXJ0IGV4cG9ydC5cclxuICovXHJcbmZ1bmN0aW9uIF9maW5kQ2hhcnRTaXplKGV4cG9ydE9wdGlvbnMpIHtcclxuICAvLyBDaGVjayB0aGUgYG9wdGlvbnNgIGFuZCBgaW5zdHJgIGZvciBjaGFydCBhbmQgZXhwb3J0aW5nIHNlY3Rpb25zXHJcbiAgY29uc3QgeyBjaGFydDogb3B0aW9uc0NoYXJ0LCBleHBvcnRpbmc6IG9wdGlvbnNFeHBvcnRpbmcgfSA9XHJcbiAgICBleHBvcnRPcHRpb25zLm9wdGlvbnMgfHwgaXNBbGxvd2VkQ29uZmlnKGV4cG9ydE9wdGlvbnMuaW5zdHIpIHx8IGZhbHNlO1xyXG5cclxuICAvLyBDaGVjayB0aGUgYGdsb2JhbE9wdGlvbnNgIGZvciBjaGFydCBhbmQgZXhwb3J0aW5nIHNlY3Rpb25zXHJcbiAgY29uc3QgeyBjaGFydDogZ2xvYmFsT3B0aW9uc0NoYXJ0LCBleHBvcnRpbmc6IGdsb2JhbE9wdGlvbnNFeHBvcnRpbmcgfSA9XHJcbiAgICBpc0FsbG93ZWRDb25maWcoZXhwb3J0T3B0aW9ucy5nbG9iYWxPcHRpb25zKSB8fCBmYWxzZTtcclxuXHJcbiAgLy8gQ2hlY2sgdGhlIGB0aGVtZU9wdGlvbnNgIGZvciBjaGFydCBhbmQgZXhwb3J0aW5nIHNlY3Rpb25zXHJcbiAgY29uc3QgeyBjaGFydDogdGhlbWVPcHRpb25zQ2hhcnQsIGV4cG9ydGluZzogdGhlbWVPcHRpb25zRXhwb3J0aW5nIH0gPVxyXG4gICAgaXNBbGxvd2VkQ29uZmlnKGV4cG9ydE9wdGlvbnMudGhlbWVPcHRpb25zKSB8fCBmYWxzZTtcclxuXHJcbiAgLy8gRmluZCB0aGUgYHNjYWxlYCB2YWx1ZTpcclxuICAvLyAtIEl0IGNhbm5vdCBiZSBsb3dlciB0aGFuIDAuMVxyXG4gIC8vIC0gSXQgY2Fubm90IGJlIGhpZ2hlciB0aGFuIDUuMFxyXG4gIC8vIC0gSXQgbXVzdCBiZSByb3VuZGVkIHRvIDIgZGVjaW1hbCBwbGFjZXMgKGUuZy4gMC4yMzIzNCAtPiAwLjIzKVxyXG4gIGNvbnN0IHNjYWxlID0gcm91bmROdW1iZXIoXHJcbiAgICBNYXRoLm1heChcclxuICAgICAgMC4xLFxyXG4gICAgICBNYXRoLm1pbihcclxuICAgICAgICBleHBvcnRPcHRpb25zLnNjYWxlIHx8XHJcbiAgICAgICAgICBvcHRpb25zRXhwb3J0aW5nPy5zY2FsZSB8fFxyXG4gICAgICAgICAgZ2xvYmFsT3B0aW9uc0V4cG9ydGluZz8uc2NhbGUgfHxcclxuICAgICAgICAgIHRoZW1lT3B0aW9uc0V4cG9ydGluZz8uc2NhbGUgfHxcclxuICAgICAgICAgIGV4cG9ydE9wdGlvbnMuZGVmYXVsdFNjYWxlIHx8XHJcbiAgICAgICAgICAxLFxyXG4gICAgICAgIDUuMFxyXG4gICAgICApXHJcbiAgICApLFxyXG4gICAgMlxyXG4gICk7XHJcblxyXG4gIC8vIEZpbmQgdGhlIGBoZWlnaHRgIHZhbHVlXHJcbiAgY29uc3QgaGVpZ2h0ID1cclxuICAgIGV4cG9ydE9wdGlvbnMuaGVpZ2h0IHx8XHJcbiAgICBvcHRpb25zRXhwb3J0aW5nPy5zb3VyY2VIZWlnaHQgfHxcclxuICAgIG9wdGlvbnNDaGFydD8uaGVpZ2h0IHx8XHJcbiAgICBnbG9iYWxPcHRpb25zRXhwb3J0aW5nPy5zb3VyY2VIZWlnaHQgfHxcclxuICAgIGdsb2JhbE9wdGlvbnNDaGFydD8uaGVpZ2h0IHx8XHJcbiAgICB0aGVtZU9wdGlvbnNFeHBvcnRpbmc/LnNvdXJjZUhlaWdodCB8fFxyXG4gICAgdGhlbWVPcHRpb25zQ2hhcnQ/LmhlaWdodCB8fFxyXG4gICAgZXhwb3J0T3B0aW9ucy5kZWZhdWx0SGVpZ2h0IHx8XHJcbiAgICA0MDA7XHJcblxyXG4gIC8vIEZpbmQgdGhlIGB3aWR0aGAgdmFsdWVcclxuICBjb25zdCB3aWR0aCA9XHJcbiAgICBleHBvcnRPcHRpb25zLndpZHRoIHx8XHJcbiAgICBvcHRpb25zRXhwb3J0aW5nPy5zb3VyY2VXaWR0aCB8fFxyXG4gICAgb3B0aW9uc0NoYXJ0Py53aWR0aCB8fFxyXG4gICAgZ2xvYmFsT3B0aW9uc0V4cG9ydGluZz8uc291cmNlV2lkdGggfHxcclxuICAgIGdsb2JhbE9wdGlvbnNDaGFydD8ud2lkdGggfHxcclxuICAgIHRoZW1lT3B0aW9uc0V4cG9ydGluZz8uc291cmNlV2lkdGggfHxcclxuICAgIHRoZW1lT3B0aW9uc0NoYXJ0Py53aWR0aCB8fFxyXG4gICAgZXhwb3J0T3B0aW9ucy5kZWZhdWx0V2lkdGggfHxcclxuICAgIDYwMDtcclxuXHJcbiAgLy8gR2F0aGVyIGBoZWlnaHRgLCBgd2lkdGhgIGFuZCBgc2NhbGVgIGluZm9ybWF0aW9uIGluIG9uZSBvYmplY3RcclxuICBjb25zdCBzaXplID0geyBoZWlnaHQsIHdpZHRoLCBzY2FsZSB9O1xyXG5cclxuICAvLyBHZXQgcmlkIG9mIHBvdGVudGlhbCBgcHhgIGFuZCBgJWBcclxuICBmb3IgKGxldCBbcGFyYW0sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzaXplKSkge1xyXG4gICAgc2l6ZVtwYXJhbV0gPVxyXG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gK3ZhbHVlLnJlcGxhY2UoL3B4fCUvZ2ksICcnKSA6IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLy8gUmV0dXJuIHRoZSBzaXplIG9iamVjdFxyXG4gIHJldHVybiBzaXplO1xyXG59XHJcblxyXG4vKipcclxuICogSGFuZGxlcyB0aGUgZXhlY3V0aW9uIG9mIGN1c3RvbSBsb2dpYyBvcHRpb25zLCBpbmNsdWRpbmcgbG9hZGluZyBgcmVzb3VyY2VzYCxcclxuICogYGN1c3RvbUNvZGVgLCBhbmQgYGNhbGxiYWNrYC4gSWYgY29kZSBleGVjdXRpb24gaXMgYWxsb3dlZCwgaXQgcHJvY2Vzc2VzXHJcbiAqIHRoZSBjdXN0b20gbG9naWMgb3B0aW9ucyBhY2NvcmRpbmdseS4gSWYgY29kZSBleGVjdXRpb24gaXMgbm90IGFsbG93ZWQsXHJcbiAqIGl0IGRpc2FibGVzIHRoZSB1c2FnZSBvZiByZXNvdXJjZXMsIGN1c3RvbSBjb2RlIGFuZCBjYWxsYmFjay5cclxuICpcclxuICogQGZ1bmN0aW9uIF9oYW5kbGVDdXN0b21Mb2dpY1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gY3VzdG9tTG9naWNPcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmdcclxuICogYGN1c3RvbUxvZ2ljYCBvcHRpb25zLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFsbG93Q29kZUV4ZWN1dGlvbiAtIEEgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgY29kZVxyXG4gKiBleGVjdXRpb24gaXMgYWxsb3dlZC5cclxuICpcclxuICogQHRocm93cyB7RXhwb3J0RXJyb3J9IFRocm93cyBhbiBgRXhwb3J0RXJyb3JgIGlmIGNvZGUgZXhlY3V0aW9uXHJcbiAqIGlzIG5vdCBhbGxvd2VkIGJ1dCBjdXN0b20gbG9naWMgb3B0aW9ucyBhcmUgc3RpbGwgcHJvdmlkZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBfaGFuZGxlQ3VzdG9tTG9naWMoY3VzdG9tTG9naWNPcHRpb25zLCBhbGxvd0NvZGVFeGVjdXRpb24pIHtcclxuICAvLyBJbiBjYXNlIG9mIGFsbG93aW5nIGNvZGUgZXhlY3V0aW9uXHJcbiAgaWYgKGFsbG93Q29kZUV4ZWN1dGlvbikge1xyXG4gICAgLy8gUHJvY2VzcyB0aGUgYHJlc291cmNlc2Agb3B0aW9uXHJcbiAgICBpZiAodHlwZW9mIGN1c3RvbUxvZ2ljT3B0aW9ucy5yZXNvdXJjZXMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIC8vIEN1c3RvbSBzdHJpbmdpZmllZCByZXNvdXJjZXNcclxuICAgICAgY3VzdG9tTG9naWNPcHRpb25zLnJlc291cmNlcyA9IF9oYW5kbGVSZXNvdXJjZXMoXHJcbiAgICAgICAgY3VzdG9tTG9naWNPcHRpb25zLnJlc291cmNlcyxcclxuICAgICAgICBjdXN0b21Mb2dpY09wdGlvbnMuYWxsb3dGaWxlUmVzb3VyY2VzLFxyXG4gICAgICAgIHRydWVcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSBpZiAoIWN1c3RvbUxvZ2ljT3B0aW9ucy5yZXNvdXJjZXMpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICAvLyBMb2FkIHRoZSBkZWZhdWx0IG9uZVxyXG4gICAgICAgIGN1c3RvbUxvZ2ljT3B0aW9ucy5yZXNvdXJjZXMgPSBfaGFuZGxlUmVzb3VyY2VzKFxyXG4gICAgICAgICAgcmVhZEZpbGVTeW5jKGdldEFic29sdXRlUGF0aCgncmVzb3VyY2VzLmpzb24nKSwgJ3V0ZjgnKSxcclxuICAgICAgICAgIGN1c3RvbUxvZ2ljT3B0aW9ucy5hbGxvd0ZpbGVSZXNvdXJjZXMsXHJcbiAgICAgICAgICB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBsb2coMiwgJ1tjaGFydF0gVW5hYmxlIHRvIGxvYWQgdGhlIGRlZmF1bHQgYHJlc291cmNlcy5qc29uYCBmaWxlLicpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHJvY2VzcyB0aGUgYGN1c3RvbUNvZGVgIG9wdGlvblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gVHJ5IHRvIGxvYWQgY3VzdG9tIGNvZGUgYW5kIHdyYXAgYXJvdW5kIGl0IGluIGEgc2VsZiBpbnZva2luZyBmdW5jdGlvblxyXG4gICAgICBjdXN0b21Mb2dpY09wdGlvbnMuY3VzdG9tQ29kZSA9IHdyYXBBcm91bmQoXHJcbiAgICAgICAgY3VzdG9tTG9naWNPcHRpb25zLmN1c3RvbUNvZGUsXHJcbiAgICAgICAgY3VzdG9tTG9naWNPcHRpb25zLmFsbG93RmlsZVJlc291cmNlc1xyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gVmFsaWRhdGUgdGhlIG9wdGlvblxyXG4gICAgICBjdXN0b21Mb2dpY09wdGlvbnMuY3VzdG9tQ29kZSA9IHZhbGlkYXRlT3B0aW9uKFxyXG4gICAgICAgICdjdXN0b21Db2RlJyxcclxuICAgICAgICBjdXN0b21Mb2dpY09wdGlvbnMuY3VzdG9tQ29kZVxyXG4gICAgICApO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgbG9nV2l0aFN0YWNrKDIsIGVycm9yLCAnW2NoYXJ0XSBUaGUgYGN1c3RvbUNvZGVgIGNhbm5vdCBiZSBsb2FkZWQuJyk7XHJcblxyXG4gICAgICAvLyBJbiBjYXNlIG9mIGFuIGVycm9yLCBzZXQgdGhlIG9wdGlvbiB3aXRoIG51bGxcclxuICAgICAgY3VzdG9tTG9naWNPcHRpb25zLmN1c3RvbUNvZGUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFByb2Nlc3MgdGhlIGBjYWxsYmFja2Agb3B0aW9uXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBUcnkgdG8gbG9hZCBjYWxsYmFjayBmdW5jdGlvblxyXG4gICAgICBjdXN0b21Mb2dpY09wdGlvbnMuY2FsbGJhY2sgPSB3cmFwQXJvdW5kKFxyXG4gICAgICAgIGN1c3RvbUxvZ2ljT3B0aW9ucy5jYWxsYmFjayxcclxuICAgICAgICBjdXN0b21Mb2dpY09wdGlvbnMuYWxsb3dGaWxlUmVzb3VyY2VzLFxyXG4gICAgICAgIHRydWVcclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIFZhbGlkYXRlIHRoZSBvcHRpb25cclxuICAgICAgY3VzdG9tTG9naWNPcHRpb25zLmNhbGxiYWNrID0gdmFsaWRhdGVPcHRpb24oXHJcbiAgICAgICAgJ2NhbGxiYWNrJyxcclxuICAgICAgICBjdXN0b21Mb2dpY09wdGlvbnMuY2FsbGJhY2tcclxuICAgICAgKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZ1dpdGhTdGFjaygyLCBlcnJvciwgJ1tjaGFydF0gVGhlIGBjYWxsYmFja2AgY2Fubm90IGJlIGxvYWRlZC4nKTtcclxuXHJcbiAgICAgIC8vIEluIGNhc2Ugb2YgYW4gZXJyb3IsIHNldCB0aGUgb3B0aW9uIHdpdGggbnVsbFxyXG4gICAgICBjdXN0b21Mb2dpY09wdGlvbnMuY2FsbGJhY2sgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIHRoZSBgY3VzdG9tQ29kZWAgcHJlc2VudFxyXG4gICAgaWYgKFtudWxsLCB1bmRlZmluZWRdLmluY2x1ZGVzKGN1c3RvbUxvZ2ljT3B0aW9ucy5jdXN0b21Db2RlKSkge1xyXG4gICAgICBsb2coMywgJ1tjaGFydF0gTm8gdmFsdWUgZm9yIHRoZSBgY3VzdG9tQ29kZWAgb3B0aW9uIGZvdW5kLicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIHRoZSBgY2FsbGJhY2tgIHByZXNlbnRcclxuICAgIGlmIChbbnVsbCwgdW5kZWZpbmVkXS5pbmNsdWRlcyhjdXN0b21Mb2dpY09wdGlvbnMuY2FsbGJhY2spKSB7XHJcbiAgICAgIGxvZygzLCAnW2NoYXJ0XSBObyB2YWx1ZSBmb3IgdGhlIGBjYWxsYmFja2Agb3B0aW9uIGZvdW5kLicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIHRoZSBgcmVzb3VyY2VzYCBwcmVzZW50XHJcbiAgICBpZiAoW251bGwsIHVuZGVmaW5lZF0uaW5jbHVkZXMoY3VzdG9tTG9naWNPcHRpb25zLnJlc291cmNlcykpIHtcclxuICAgICAgbG9nKDMsICdbY2hhcnRdIE5vIHZhbHVlIGZvciB0aGUgYHJlc291cmNlc2Agb3B0aW9uIGZvdW5kLicpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBJZiB0aGUgYGFsbG93Q29kZUV4ZWN1dGlvbmAgZmxhZyBpcyBzZXQgdG8gZmFsc2UsIHdlIHNob3VsZCByZWZ1c2VcclxuICAgIC8vIHRoZSB1c2FnZSBvZiB0aGUgYGNhbGxiYWNrYCwgYHJlc291cmNlc2AsIGFuZCBgY3VzdG9tQ29kZWAgb3B0aW9ucy5cclxuICAgIC8vIEFkZGl0aW9uYWxseSwgdGhlIHdvcmtlciB3aWxsIHJlZnVzZSB0byBydW4gYXJiaXRyYXJ5IEphdmFTY3JpcHQuXHJcbiAgICBpZiAoXHJcbiAgICAgIGN1c3RvbUxvZ2ljT3B0aW9ucy5jYWxsYmFjayB8fFxyXG4gICAgICBjdXN0b21Mb2dpY09wdGlvbnMucmVzb3VyY2VzIHx8XHJcbiAgICAgIGN1c3RvbUxvZ2ljT3B0aW9ucy5jdXN0b21Db2RlXHJcbiAgICApIHtcclxuICAgICAgLy8gUmVzZXQgYWxsIGN1c3RvbSBjb2RlIG9wdGlvbnNcclxuICAgICAgY3VzdG9tTG9naWNPcHRpb25zLmNhbGxiYWNrID0gbnVsbDtcclxuICAgICAgY3VzdG9tTG9naWNPcHRpb25zLnJlc291cmNlcyA9IG51bGw7XHJcbiAgICAgIGN1c3RvbUxvZ2ljT3B0aW9ucy5jdXN0b21Db2RlID0gbnVsbDtcclxuXHJcbiAgICAgIC8vIFNlbmQgYSBtZXNzYWdlIHNheWluZyB0aGF0IHRoZSBleHBvcnRlciBkb2VzIG5vdCBzdXBwb3J0IHRoZXNlIHNldHRpbmdzXHJcbiAgICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgICBgW2NoYXJ0XSBUaGUgJ2NhbGxiYWNrJywgJ3Jlc291cmNlcycsIGFuZCAnY3VzdG9tQ29kZScgb3B0aW9ucyBoYXZlIGJlZW4gZGlzYWJsZWQgZm9yIHRoaXMgc2VydmVyLmAsXHJcbiAgICAgICAgNDAzXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogSGFuZGxlcyBhbmQgdmFsaWRhdGVzIHJlc291cmNlcyBmcm9tIHRoZSBgcmVzb3VyY2VzYCBvcHRpb24gZm9yIGV4cG9ydC5cclxuICpcclxuICogQGZ1bmN0aW9uIF9oYW5kbGVSZXNvdXJjZXNcclxuICpcclxuICogQHBhcmFtIHsoT2JqZWN0fHN0cmluZ3xudWxsKX0gW3Jlc291cmNlcz1udWxsXSAtIFRoZSByZXNvdXJjZXMgdG8gYmUgaGFuZGxlZC5cclxuICogQ2FuIGJlIGVpdGhlciBhIEpTT04gb2JqZWN0LCBzdHJpbmdpZmllZCBKU09OLCBhIHBhdGggdG8gYSBKU09OIGZpbGUsXHJcbiAqIG9yIG51bGwuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGBudWxsYC5cclxuICogQHBhcmFtIHtib29sZWFufSBhbGxvd0ZpbGVSZXNvdXJjZXMgLSBBIGZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIGxvYWRpbmdcclxuICogcmVzb3VyY2VzIGZyb20gZmlsZXMgaXMgYWxsb3dlZC5cclxuICogQHBhcmFtIHtib29sZWFufSBhbGxvd0NvZGVFeGVjdXRpb24gLSBBIGZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIGNvZGVcclxuICogZXhlY3V0aW9uIGlzIGFsbG93ZWQuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHsoT2JqZWN0fG51bGwpfSBUaGUgaGFuZGxlZCByZXNvdXJjZXMgb3IgbnVsbCBpZiBubyB2YWxpZCByZXNvdXJjZXNcclxuICogYXJlIGZvdW5kLlxyXG4gKi9cclxuZnVuY3Rpb24gX2hhbmRsZVJlc291cmNlcyhcclxuICByZXNvdXJjZXMgPSBudWxsLFxyXG4gIGFsbG93RmlsZVJlc291cmNlcyxcclxuICBhbGxvd0NvZGVFeGVjdXRpb25cclxuKSB7XHJcbiAgLy8gTGlzdCBvZiBhbGxvd2VkIHNlY3Rpb25zIGluIHRoZSByZXNvdXJjZXMgSlNPTlxyXG4gIGNvbnN0IGFsbG93ZWRQcm9wcyA9IFsnanMnLCAnY3NzJywgJ2ZpbGVzJ107XHJcblxyXG4gIGxldCBoYW5kbGVkUmVzb3VyY2VzID0gcmVzb3VyY2VzO1xyXG4gIGxldCBjb3JyZWN0UmVzb3VyY2VzID0gZmFsc2U7XHJcblxyXG4gIC8vIFRyeSB0byBsb2FkIHJlc291cmNlcyBmcm9tIGEgZmlsZVxyXG4gIGlmIChhbGxvd0ZpbGVSZXNvdXJjZXMgJiYgcmVzb3VyY2VzLmVuZHNXaXRoKCcuanNvbicpKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBoYW5kbGVkUmVzb3VyY2VzID0gaXNBbGxvd2VkQ29uZmlnKFxyXG4gICAgICAgIHJlYWRGaWxlU3luYyhnZXRBYnNvbHV0ZVBhdGgocmVzb3VyY2VzKSwgJ3V0ZjgnKSxcclxuICAgICAgICBmYWxzZSxcclxuICAgICAgICBhbGxvd0NvZGVFeGVjdXRpb25cclxuICAgICAgKTtcclxuICAgIH0gY2F0Y2gge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgLy8gVHJ5IHRvIGdldCBKU09OXHJcbiAgICBoYW5kbGVkUmVzb3VyY2VzID0gaXNBbGxvd2VkQ29uZmlnKHJlc291cmNlcywgZmFsc2UsIGFsbG93Q29kZUV4ZWN1dGlvbik7XHJcblxyXG4gICAgLy8gR2V0IHJpZCBvZiB0aGUgZmlsZXMgc2VjdGlvblxyXG4gICAgaWYgKGhhbmRsZWRSZXNvdXJjZXMgJiYgIWFsbG93RmlsZVJlc291cmNlcykge1xyXG4gICAgICBkZWxldGUgaGFuZGxlZFJlc291cmNlcy5maWxlcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEZpbHRlciBmcm9tIHVubmVjZXNzYXJ5IHByb3BlcnRpZXNcclxuICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIGhhbmRsZWRSZXNvdXJjZXMpIHtcclxuICAgIGlmICghYWxsb3dlZFByb3BzLmluY2x1ZGVzKHByb3BOYW1lKSkge1xyXG4gICAgICBkZWxldGUgaGFuZGxlZFJlc291cmNlc1twcm9wTmFtZV07XHJcbiAgICB9IGVsc2UgaWYgKCFjb3JyZWN0UmVzb3VyY2VzKSB7XHJcbiAgICAgIGNvcnJlY3RSZXNvdXJjZXMgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgYXQgbGVhc3Qgb25lIG9mIGFsbG93ZWQgcHJvcGVydGllcyBpcyBwcmVzZW50XHJcbiAgaWYgKCFjb3JyZWN0UmVzb3VyY2VzKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIC8vIEhhbmRsZSBmaWxlcyBzZWN0aW9uXHJcbiAgaWYgKGhhbmRsZWRSZXNvdXJjZXMuZmlsZXMpIHtcclxuICAgIGhhbmRsZWRSZXNvdXJjZXMuZmlsZXMgPSBoYW5kbGVkUmVzb3VyY2VzLmZpbGVzLm1hcCgoaXRlbSkgPT4gaXRlbS50cmltKCkpO1xyXG4gICAgaWYgKCFoYW5kbGVkUmVzb3VyY2VzLmZpbGVzIHx8IGhhbmRsZWRSZXNvdXJjZXMuZmlsZXMubGVuZ3RoIDw9IDApIHtcclxuICAgICAgZGVsZXRlIGhhbmRsZWRSZXNvdXJjZXMuZmlsZXM7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBWYWxpZGF0ZSBvcHRpb25cclxuICBoYW5kbGVkUmVzb3VyY2VzID0gdmFsaWRhdGVPcHRpb24oJ3Jlc291cmNlcycsIGhhbmRsZWRSZXNvdXJjZXMpO1xyXG5cclxuICAvLyBSZXR1cm4gcmVzb3VyY2VzXHJcbiAgcmV0dXJuIGhhbmRsZWRSZXNvdXJjZXM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIHRoZSBsb2FkaW5nIGFuZCB2YWxpZGF0aW9uIG9mIHRoZSBgZ2xvYmFsT3B0aW9uc2AgYW5kIGB0aGVtZU9wdGlvbnNgXHJcbiAqIGluIHRoZSBleHBvcnQgb3B0aW9ucy4gSWYgdGhlIG9wdGlvbiBpcyBhIHN0cmluZyBhbmQgcmVmZXJlbmNlcyBhIEpTT04gZmlsZVxyXG4gKiAod2hlbiB0aGUgYGFsbG93RmlsZVJlc291cmNlc2AgaXMgdHJ1ZSksIGl0IHJlYWRzIGFuZCBwYXJzZXMgdGhlIGZpbGUuXHJcbiAqIE90aGVyd2lzZSwgaXQgYXR0ZW1wdHMgdG8gcGFyc2UgdGhlIHN0cmluZyBvciBvYmplY3QgYXMgSlNPTi4gSWYgYW55IGVycm9yc1xyXG4gKiBvY2N1ciBkdXJpbmcgdGhpcyBwcm9jZXNzLCB0aGUgb3B0aW9uIGlzIHNldCB0byBudWxsLiBJZiB0aGVyZSBpcyBhbiBlcnJvclxyXG4gKiBsb2FkaW5nIG9yIHBhcnNpbmcgdGhlIGBnbG9iYWxPcHRpb25zYCBvciBgdGhlbWVPcHRpb25zYCwgdGhlIGVycm9yIGlzIGxvZ2dlZFxyXG4gKiBhbmQgdGhlIG9wdGlvbiBpcyBzZXQgdG8gbnVsbC5cclxuICpcclxuICogQGZ1bmN0aW9uIF9oYW5kbGVHbG9iYWxBbmRUaGVtZVxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gZXhwb3J0T3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWluaW5nIGBleHBvcnRgXHJcbiAqIG9wdGlvbnMuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWxsb3dGaWxlUmVzb3VyY2VzIC0gQSBmbGFnIGluZGljYXRpbmcgd2hldGhlciBsb2FkaW5nXHJcbiAqIHJlc291cmNlcyBmcm9tIGZpbGVzIGlzIGFsbG93ZWQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWxsb3dDb2RlRXhlY3V0aW9uIC0gQSBmbGFnIGluZGljYXRpbmcgd2hldGhlciBjb2RlXHJcbiAqIGV4ZWN1dGlvbiBpcyBhbGxvd2VkLlxyXG4gKi9cclxuZnVuY3Rpb24gX2hhbmRsZUdsb2JhbEFuZFRoZW1lKFxyXG4gIGV4cG9ydE9wdGlvbnMsXHJcbiAgYWxsb3dGaWxlUmVzb3VyY2VzLFxyXG4gIGFsbG93Q29kZUV4ZWN1dGlvblxyXG4pIHtcclxuICAvLyBDaGVjayB0aGUgYGdsb2JhbE9wdGlvbnNgIGFuZCBgdGhlbWVPcHRpb25zYCBvcHRpb25zXHJcbiAgWydnbG9iYWxPcHRpb25zJywgJ3RoZW1lT3B0aW9ucyddLmZvckVhY2goKG9wdGlvbnNOYW1lKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBDaGVjayBpZiB0aGUgb3B0aW9uIGV4aXN0c1xyXG4gICAgICBpZiAoZXhwb3J0T3B0aW9uc1tvcHRpb25zTmFtZV0pIHtcclxuICAgICAgICAvLyBDaGVjayBpZiBpdCBpcyBhIHN0cmluZyBhbmQgYSBmaWxlIG5hbWUgd2l0aCB0aGUgYC5qc29uYCBleHRlbnNpb25cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBhbGxvd0ZpbGVSZXNvdXJjZXMgJiZcclxuICAgICAgICAgIHR5cGVvZiBleHBvcnRPcHRpb25zW29wdGlvbnNOYW1lXSA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgIGV4cG9ydE9wdGlvbnNbb3B0aW9uc05hbWVdLmVuZHNXaXRoKCcuanNvbicpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgZmlsZSBjb250ZW50IGNhbiBiZSBhIGNvbmZpZywgYW5kIHNhdmUgaXQgYXMgYSBzdHJpbmdcclxuICAgICAgICAgIGV4cG9ydE9wdGlvbnNbb3B0aW9uc05hbWVdID0gaXNBbGxvd2VkQ29uZmlnKFxyXG4gICAgICAgICAgICByZWFkRmlsZVN5bmMoZ2V0QWJzb2x1dGVQYXRoKGV4cG9ydE9wdGlvbnNbb3B0aW9uc05hbWVdKSwgJ3V0ZjgnKSxcclxuICAgICAgICAgICAgdHJ1ZSxcclxuICAgICAgICAgICAgYWxsb3dDb2RlRXhlY3V0aW9uXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgdmFsdWUgY2FuIGJlIGEgY29uZmlnLCBhbmQgc2F2ZSBpdCBhcyBhIHN0cmluZ1xyXG4gICAgICAgICAgZXhwb3J0T3B0aW9uc1tvcHRpb25zTmFtZV0gPSBpc0FsbG93ZWRDb25maWcoXHJcbiAgICAgICAgICAgIGV4cG9ydE9wdGlvbnNbb3B0aW9uc05hbWVdLFxyXG4gICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICBhbGxvd0NvZGVFeGVjdXRpb25cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBWYWxpZGF0ZSB0aGUgb3B0aW9uXHJcbiAgICAgICAgZXhwb3J0T3B0aW9uc1tvcHRpb25zTmFtZV0gPSB2YWxpZGF0ZU9wdGlvbihcclxuICAgICAgICAgIG9wdGlvbnNOYW1lLFxyXG4gICAgICAgICAgZXhwb3J0T3B0aW9uc1tvcHRpb25zTmFtZV1cclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBsb2dXaXRoU3RhY2soXHJcbiAgICAgICAgMixcclxuICAgICAgICBlcnJvcixcclxuICAgICAgICBgW2NoYXJ0XSBUaGUgXFxgJHtvcHRpb25zTmFtZX1cXGAgY2Fubm90IGJlIGxvYWRlZC5gXHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBJbiBjYXNlIG9mIGFuIGVycm9yLCBzZXQgdGhlIG9wdGlvbiB3aXRoIG51bGxcclxuICAgICAgZXhwb3J0T3B0aW9uc1tvcHRpb25zTmFtZV0gPSBudWxsO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAvLyBDaGVjayBpZiB0aGVyZSBpcyB0aGUgYGdsb2JhbE9wdGlvbnNgIHByZXNlbnRcclxuICBpZiAoW251bGwsIHVuZGVmaW5lZF0uaW5jbHVkZXMoZXhwb3J0T3B0aW9ucy5nbG9iYWxPcHRpb25zKSkge1xyXG4gICAgbG9nKDMsICdbY2hhcnRdIE5vIHZhbHVlIGZvciB0aGUgYGdsb2JhbE9wdGlvbnNgIG9wdGlvbiBmb3VuZC4nKTtcclxuICB9XHJcblxyXG4gIC8vIENoZWNrIGlmIHRoZXJlIGlzIHRoZSBgdGhlbWVPcHRpb25zYCBwcmVzZW50XHJcbiAgaWYgKFtudWxsLCB1bmRlZmluZWRdLmluY2x1ZGVzKGV4cG9ydE9wdGlvbnMudGhlbWVPcHRpb25zKSkge1xyXG4gICAgbG9nKDMsICdbY2hhcnRdIE5vIHZhbHVlIGZvciB0aGUgYHRoZW1lT3B0aW9uc2Agb3B0aW9uIGZvdW5kLicpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHNpbmdsZUV4cG9ydCxcclxuICBiYXRjaEV4cG9ydCxcclxuICBzdGFydEV4cG9ydCxcclxuICBnZXRBbGxvd0NvZGVFeGVjdXRpb24sXHJcbiAgc2V0QWxsb3dDb2RlRXhlY3V0aW9uXHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBUaGlzIG1vZHVsZSBwcm92aWRlcyB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgaW50ZXJ2YWxzXHJcbiAqIGFuZCB0aW1lb3V0cyBpbiBhIGNlbnRyYWxpemVkIG1hbm5lci4gSXQgbWFpbnRhaW5zIGEgcmVnaXN0cnkgb2YgYWxsIGFjdGl2ZVxyXG4gKiB0aW1lcnMgYW5kIGFsbG93cyBmb3IgdGhlaXIgZWZmaWNpZW50IGNsZWFudXAgd2hlbiBuZWVkZWQuIFRoaXMgY2FuIGJlIHVzZWZ1bFxyXG4gKiBpbiBhcHBsaWNhdGlvbnMgd2hlcmUgcHJvcGVyIHJlc291cmNlIG1hbmFnZW1lbnQgYW5kIGNsZWFuIHNodXRkb3duIG9mIHRpbWVyc1xyXG4gKiBhcmUgY3JpdGljYWwgdG8gYXZvaWQgbWVtb3J5IGxlYWtzIG9yIHVuaW50ZW5kZWQgYmVoYXZpb3IuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi9sb2dnZXIuanMnO1xyXG5cclxuLy8gQXJyYXkgdGhhdCBjb250YWlucyBpZHMgb2YgYWxsIG9uZ29pbmcgaW50ZXJ2YWxzIGFuZCB0aW1lb3V0c1xyXG5jb25zdCB0aW1lcklkcyA9IFtdO1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgaWQgb2YgdGhlIGBzZXRJbnRlcnZhbGAgb3IgYHNldFRpbWVvdXRgIGFuZCB0byB0aGUgYHRpbWVySWRzYCBhcnJheS5cclxuICpcclxuICogQGZ1bmN0aW9uIGFkZFRpbWVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7Tm9kZUpTLlRpbWVvdXR9IGlkIC0gSWQgb2YgYW4gaW50ZXJ2YWwgb3IgYSB0aW1lb3V0LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFRpbWVyKGlkKSB7XHJcbiAgdGltZXJJZHMucHVzaChpZCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgYWxsIG9mIG9uZ29pbmcgaW50ZXJ2YWxzIGFuZCB0aW1lb3V0cyBieSBpZHMgZ2F0aGVyZWRcclxuICogaW4gdGhlIGB0aW1lcklkc2AgYXJyYXkuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBjbGVhckFsbFRpbWVyc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyQWxsVGltZXJzKCkge1xyXG4gIGxvZyg0LCBgW3RpbWVyXSBDbGVhcmluZyBhbGwgcmVnaXN0ZXJlZCBpbnRlcnZhbHMgYW5kIHRpbWVvdXRzLmApO1xyXG4gIGZvciAoY29uc3QgaWQgb2YgdGltZXJJZHMpIHtcclxuICAgIGNsZWFySW50ZXJ2YWwoaWQpO1xyXG4gICAgY2xlYXJUaW1lb3V0KGlkKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBhZGRUaW1lcixcclxuICBjbGVhckFsbFRpbWVyc1xyXG59O1xyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNSwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgUHJvdmlkZXMgbWlkZGxld2FyZSBmdW5jdGlvbnMgZm9yIGxvZ2dpbmcgZXJyb3JzIHdpdGggc3RhY2sgdHJhY2VzXHJcbiAqIGFuZCBoYW5kbGluZyBlcnJvciByZXNwb25zZXMgaW4gYW4gRXhwcmVzcyBhcHBsaWNhdGlvbi5cclxuICovXHJcblxyXG5pbXBvcnQgeyBnZXRPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29uZmlnLmpzJztcclxuaW1wb3J0IHsgbG9nV2l0aFN0YWNrIH0gZnJvbSAnLi4vLi4vbG9nZ2VyLmpzJztcclxuXHJcbi8qKlxyXG4gKiBNaWRkbGV3YXJlIGZvciBsb2dnaW5nIGVycm9ycyB3aXRoIHN0YWNrIHRyYWNlIGFuZCBoYW5kbGluZyBlcnJvciByZXNwb25zZS5cclxuICpcclxuICogQGZ1bmN0aW9uIGxvZ0Vycm9yTWlkZGxld2FyZVxyXG4gKlxyXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciAtIFRoZSBlcnJvciBvYmplY3QuXHJcbiAqIEBwYXJhbSB7RXhwcmVzcy5SZXF1ZXN0fSByZXF1ZXN0IC0gVGhlIEV4cHJlc3MgcmVxdWVzdCBvYmplY3QuXHJcbiAqIEBwYXJhbSB7RXhwcmVzcy5SZXNwb25zZX0gcmVzcG9uc2UgLSBUaGUgRXhwcmVzcyByZXNwb25zZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHQgLSBUaGUgbmV4dCBtaWRkbGV3YXJlIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfSBUaGUgY2FsbCB0byB0aGUgbmV4dCBtaWRkbGV3YXJlIGZ1bmN0aW9uIHdpdGhcclxuICogdGhlIHBhc3NlZCBlcnJvci5cclxuICovXHJcbmZ1bmN0aW9uIGxvZ0Vycm9yTWlkZGxld2FyZShlcnJvciwgcmVxdWVzdCwgcmVzcG9uc2UsIG5leHQpIHtcclxuICAvLyBEaXNwbGF5IHRoZSBlcnJvciB3aXRoIHN0YWNrIGluIGEgY29ycmVjdCBmb3JtYXRcclxuICBsb2dXaXRoU3RhY2soMSwgZXJyb3IpO1xyXG5cclxuICAvLyBEZWxldGUgdGhlIHN0YWNrIGZvciB0aGUgZW52aXJvbm1lbnQgb3RoZXIgdGhhbiB0aGUgZGV2ZWxvcG1lbnRcclxuICBpZiAoZ2V0T3B0aW9ucygpLm90aGVyLm5vZGVFbnYgIT09ICdkZXZlbG9wbWVudCcpIHtcclxuICAgIGRlbGV0ZSBlcnJvci5zdGFjaztcclxuICB9XHJcblxyXG4gIC8vIENhbGwgdGhlIGByZXR1cm5FcnJvck1pZGRsZXdhcmVgIG1pZGRsZXdhcmVcclxuICByZXR1cm4gbmV4dChlcnJvcik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNaWRkbGV3YXJlIGZvciByZXR1cm5pbmcgZXJyb3IgcmVzcG9uc2UuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiByZXR1cm5FcnJvck1pZGRsZXdhcmVcclxuICpcclxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgLSBUaGUgZXJyb3Igb2JqZWN0LlxyXG4gKiBAcGFyYW0ge0V4cHJlc3MuUmVxdWVzdH0gcmVxdWVzdCAtIFRoZSBFeHByZXNzIHJlcXVlc3Qgb2JqZWN0LlxyXG4gKiBAcGFyYW0ge0V4cHJlc3MuUmVzcG9uc2V9IHJlc3BvbnNlIC0gVGhlIEV4cHJlc3MgcmVzcG9uc2Ugb2JqZWN0LlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0IC0gVGhlIG5leHQgbWlkZGxld2FyZSBmdW5jdGlvbi5cclxuICovXHJcbmZ1bmN0aW9uIHJldHVybkVycm9yTWlkZGxld2FyZShlcnJvciwgcmVxdWVzdCwgcmVzcG9uc2UsIG5leHQpIHtcclxuICAvLyBHYXRoZXIgYWxsIHJlcXVpZWQgaW5mb3JtYXRpb24gZm9yIHRoZSByZXNwb25zZVxyXG4gIGNvbnN0IHsgbWVzc2FnZSwgc3RhY2sgfSA9IGVycm9yO1xyXG5cclxuICAvLyBVc2UgdGhlIGVycm9yJ3Mgc3RhdHVzIGNvZGUgb3IgdGhlIGRlZmF1bHQgNDAwXHJcbiAgY29uc3Qgc3RhdHVzQ29kZSA9IGVycm9yLnN0YXR1c0NvZGUgfHwgNDAwO1xyXG5cclxuICAvLyBTZXQgYW5kIHJldHVybiByZXNwb25zZVxyXG4gIHJlc3BvbnNlLnN0YXR1cyhzdGF0dXNDb2RlKS5qc29uKHsgc3RhdHVzQ29kZSwgbWVzc2FnZSwgc3RhY2sgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHRoZSBlcnJvciBtaWRkbGV3YXJlcyB0byB0aGUgcGFzc2VkIGV4cHJlc3MgYXBwIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0V4cHJlc3N9IGFwcCAtIFRoZSBFeHByZXNzIGFwcCBpbnN0YW5jZS5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVycm9yTWlkZGxld2FyZShhcHApIHtcclxuICAvLyBBZGQgbG9nIGVycm9yIG1pZGRsZXdhcmVcclxuICBhcHAudXNlKGxvZ0Vycm9yTWlkZGxld2FyZSk7XHJcblxyXG4gIC8vIEFkZCBzZXQgc3RhdHVzIGFuZCByZXR1cm4gZXJyb3IgbWlkZGxld2FyZVxyXG4gIGFwcC51c2UocmV0dXJuRXJyb3JNaWRkbGV3YXJlKTtcclxufVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNSwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgUHJvdmlkZXMgbWlkZGxld2FyZSBmdW5jdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIGFuZCBlbmFibGluZyByYXRlXHJcbiAqIGxpbWl0aW5nIGluIGFuIEV4cHJlc3MgYXBwbGljYXRpb24uXHJcbiAqL1xyXG5cclxuaW1wb3J0IHJhdGVMaW1pdCBmcm9tICdleHByZXNzLXJhdGUtbGltaXQnO1xyXG5cclxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi4vLi4vbG9nZ2VyLmpzJztcclxuXHJcbmltcG9ydCBFeHBvcnRFcnJvciBmcm9tICcuLi8uLi9lcnJvcnMvRXhwb3J0RXJyb3IuanMnO1xyXG5cclxuLyoqXHJcbiAqIE1pZGRsZXdhcmUgZm9yIGVuYWJsaW5nIHJhdGUgbGltaXRpbmcgb24gdGhlIHNwZWNpZmllZCBFeHByZXNzIGFwcC5cclxuICpcclxuICogQHBhcmFtIHtFeHByZXNzfSBhcHAgLSBUaGUgRXhwcmVzcyBhcHAgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSByYXRlTGltaXRpbmdPcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5pbmdcclxuICogYHJhdGVMaW1pdGluZ2Agb3B0aW9ucy5cclxuICpcclxuICogQHRocm93cyB7RXhwb3J0RXJyb3J9IFRocm93cyBhbiBgRXhwb3J0RXJyb3JgIGlmIGNvdWxkIG5vdCBjb25maWd1cmUgYW5kIHNldFxyXG4gKiB0aGUgcmF0ZSBsaW1pdGluZyBvcHRpb25zLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmF0ZUxpbWl0aW5nTWlkZGxld2FyZShhcHAsIHJhdGVMaW1pdGluZ09wdGlvbnMpIHtcclxuICB0cnkge1xyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIHJhdGUgbGltaXRpbmcgaXMgZW5hYmxlZCBhbmQgdGhlIGFwcCBleGlzdHNcclxuICAgIGlmIChhcHAgJiYgcmF0ZUxpbWl0aW5nT3B0aW9ucy5lbmFibGUpIHtcclxuICAgICAgY29uc3QgbWVzc2FnZSA9XHJcbiAgICAgICAgJ1RvbyBtYW55IHJlcXVlc3RzLCB5b3UgaGF2ZSBiZWVuIHJhdGUgbGltaXRlZC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4nO1xyXG5cclxuICAgICAgLy8gT3B0aW9ucyBmb3IgdGhlIHJhdGUgbGltaXRlclxyXG4gICAgICBjb25zdCByYXRlT3B0aW9ucyA9IHtcclxuICAgICAgICB3aW5kb3c6IHJhdGVMaW1pdGluZ09wdGlvbnMud2luZG93IHx8IDEsXHJcbiAgICAgICAgbWF4UmVxdWVzdHM6IHJhdGVMaW1pdGluZ09wdGlvbnMubWF4UmVxdWVzdHMgfHwgMzAsXHJcbiAgICAgICAgZGVsYXk6IHJhdGVMaW1pdGluZ09wdGlvbnMuZGVsYXkgfHwgMCxcclxuICAgICAgICB0cnVzdFByb3h5OiByYXRlTGltaXRpbmdPcHRpb25zLnRydXN0UHJveHkgfHwgZmFsc2UsXHJcbiAgICAgICAgc2tpcEtleTogcmF0ZUxpbWl0aW5nT3B0aW9ucy5za2lwS2V5IHx8IG51bGwsXHJcbiAgICAgICAgc2tpcFRva2VuOiByYXRlTGltaXRpbmdPcHRpb25zLnNraXBUb2tlbiB8fCBudWxsXHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLyBTZXQgaWYgYmVoaW5kIGEgcHJveHlcclxuICAgICAgaWYgKHJhdGVPcHRpb25zLnRydXN0UHJveHkpIHtcclxuICAgICAgICBhcHAuZW5hYmxlKCd0cnVzdCBwcm94eScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDcmVhdGUgYSBsaW1pdGVyXHJcbiAgICAgIGNvbnN0IGxpbWl0ZXIgPSByYXRlTGltaXQoe1xyXG4gICAgICAgIC8vIFRpbWUgZnJhbWUgZm9yIHdoaWNoIHJlcXVlc3RzIGFyZSBjaGVja2VkIGFuZCByZW1lbWJlcmVkXHJcbiAgICAgICAgd2luZG93TXM6IHJhdGVPcHRpb25zLndpbmRvdyAqIDYwICogMTAwMCxcclxuICAgICAgICAvLyBMaW1pdCBlYWNoIElQIHRvIDEwMCByZXF1ZXN0cyBwZXIgYHdpbmRvd01zYFxyXG4gICAgICAgIGxpbWl0OiByYXRlT3B0aW9ucy5tYXhSZXF1ZXN0cyxcclxuICAgICAgICAvLyBEaXNhYmxlIGRlbGF5aW5nLCBmdWxsIHNwZWVkIHVudGlsIHRoZSBtYXggbGltaXQgaXMgcmVhY2hlZFxyXG4gICAgICAgIGRlbGF5TXM6IHJhdGVPcHRpb25zLmRlbGF5LFxyXG4gICAgICAgIGhhbmRsZXI6IChyZXF1ZXN0LCByZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgcmVzcG9uc2UuZm9ybWF0KHtcclxuICAgICAgICAgICAganNvbjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJlc3BvbnNlLnN0YXR1cyg0MjkpLnNlbmQoeyBtZXNzYWdlIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgcmVzcG9uc2Uuc3RhdHVzKDQyOSkuc2VuZChtZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBza2lwOiAocmVxdWVzdCkgPT4ge1xyXG4gICAgICAgICAgLy8gQWxsb3cgYnlwYXNzaW5nIHRoZSBsaW1pdGVyIGlmIGEgdmFsaWQga2V5L3Rva2VuIGhhcyBiZWVuIHNlbnRcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgcmF0ZU9wdGlvbnMuc2tpcEtleSAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICByYXRlT3B0aW9ucy5za2lwVG9rZW4gIT09IG51bGwgJiZcclxuICAgICAgICAgICAgcmVxdWVzdC5xdWVyeS5rZXkgPT09IHJhdGVPcHRpb25zLnNraXBLZXkgJiZcclxuICAgICAgICAgICAgcmVxdWVzdC5xdWVyeS5hY2Nlc3NfdG9rZW4gPT09IHJhdGVPcHRpb25zLnNraXBUb2tlblxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGxvZyg0LCAnW3JhdGUgbGltaXRpbmddIFNraXBwaW5nIHJhdGUgbGltaXRlci4nKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFVzZSBhIGxpbWl0ZXIgYXMgYSBtaWRkbGV3YXJlXHJcbiAgICAgIGFwcC51c2UobGltaXRlcik7XHJcblxyXG4gICAgICBsb2coXHJcbiAgICAgICAgMyxcclxuICAgICAgICBgW3JhdGUgbGltaXRpbmddIEVuYWJsZWQgcmF0ZSBsaW1pdGluZyB3aXRoICR7cmF0ZU9wdGlvbnMubWF4UmVxdWVzdHN9IHJlcXVlc3RzIHBlciAke3JhdGVPcHRpb25zLndpbmRvd30gbWludXRlIGZvciBlYWNoIElQLCB0cnVzdGluZyBwcm94eTogJHtyYXRlT3B0aW9ucy50cnVzdFByb3h5fS5gXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgJ1tyYXRlIGxpbWl0aW5nXSBDb3VsZCBub3QgY29uZmlndXJlIGFuZCBzZXQgdGhlIHJhdGUgbGltaXRpbmcgb3B0aW9ucy4nLFxyXG4gICAgICA1MDBcclxuICAgICkuc2V0RXJyb3IoZXJyb3IpO1xyXG4gIH1cclxufVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNSwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgUHJvdmlkZXMgbWlkZGxld2FyZSBmdW5jdGlvbnMgZm9yIHZhbGlkYXRpbmcgaW5jb21pbmcgSFRUUCByZXF1ZXN0c1xyXG4gKiBpbiBhbiBFeHByZXNzIGFwcGxpY2F0aW9uLiBUaGlzIG1vZHVsZSBlbnN1cmVzIHRoYXQgcmVxdWVzdHMgY29udGFpblxyXG4gKiBhcHByb3ByaWF0ZSBjb250ZW50IHR5cGVzIGFuZCB2YWxpZCByZXF1ZXN0IGJvZGllcywgaW5jbHVkaW5nIHByb3BlciBKU09OXHJcbiAqIHN0cnVjdHVyZXMgYW5kIGNoYXJ0IGRhdGEgZm9yIGV4cG9ydHMuIEl0IGNoZWNrcyBmb3IgcG90ZW50aWFsIGlzc3VlcyBzdWNoXHJcbiAqIGFzIG1pc3Npbmcgb3IgbWFsZm9ybWVkIGRhdGEsIHByaXZhdGUgcmFuZ2UgVVJMcyBpbiBTVkcgcGF5bG9hZHMsIGFuZCBhbGxvd3NcclxuICogZm9yIGZsZXhpYmxlIG9wdGlvbnMgdmFsaWRhdGlvbi4gVGhlIG1pZGRsZXdhcmUgbG9ncyBkZXRhaWxlZCBpbmZvcm1hdGlvblxyXG4gKiBhbmQgaGFuZGxlcyBlcnJvcnMgcmVsYXRlZCB0byBpbmNvcnJlY3QgcGF5bG9hZHMsIGNoYXJ0IGRhdGEsIGFuZCBwcml2YXRlIFVSTFxyXG4gKiB1c2FnZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyB2NCBhcyB1dWlkIH0gZnJvbSAndXVpZCc7XHJcblxyXG5pbXBvcnQgeyBnZXRBbGxvd0NvZGVFeGVjdXRpb24gfSBmcm9tICcuLi8uLi9jaGFydC5qcyc7XHJcbmltcG9ydCB7IGlzQWxsb3dlZENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy5qcyc7XHJcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4uLy4uL2xvZ2dlci5qcyc7XHJcbmltcG9ydCB7IGlzT2JqZWN0RW1wdHksIGlzUHJpdmF0ZVJhbmdlVXJsRm91bmQgfSBmcm9tICcuLi8uLi91dGlscy5qcyc7XHJcblxyXG5pbXBvcnQgRXhwb3J0RXJyb3IgZnJvbSAnLi4vLi4vZXJyb3JzL0V4cG9ydEVycm9yLmpzJztcclxuXHJcbi8qKlxyXG4gKiBNaWRkbGV3YXJlIGZvciB2YWxpZGF0aW5nIHRoZSBjb250ZW50LXR5cGUgaGVhZGVyLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gY29udGVudFR5cGVNaWRkbGV3YXJlXHJcbiAqXHJcbiAqIEBwYXJhbSB7RXhwcmVzcy5SZXF1ZXN0fSByZXF1ZXN0IC0gVGhlIEV4cHJlc3MgcmVxdWVzdCBvYmplY3QuXHJcbiAqIEBwYXJhbSB7RXhwcmVzcy5SZXNwb25zZX0gcmVzcG9uc2UgLSBUaGUgRXhwcmVzcyByZXNwb25zZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHQgLSBUaGUgbmV4dCBtaWRkbGV3YXJlIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfSBUaGUgY2FsbCB0byB0aGUgbmV4dCBtaWRkbGV3YXJlIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaWYgdGhlIGNvbnRlbnQtdHlwZVxyXG4gKiBpcyBub3QgY29ycmVjdC5cclxuICovXHJcbmZ1bmN0aW9uIGNvbnRlbnRUeXBlTWlkZGxld2FyZShyZXF1ZXN0LCByZXNwb25zZSwgbmV4dCkge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBHZXQgdGhlIGNvbnRlbnQgdHlwZSBoZWFkZXJcclxuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gcmVxdWVzdC5oZWFkZXJzWydjb250ZW50LXR5cGUnXSB8fCAnJztcclxuXHJcbiAgICAvLyBBbGxvdyBvbmx5IEpTT04sIFVSTC1lbmNvZGVkIGFuZCBmb3JtIGRhdGEgd2l0aG91dCBmaWxlcyB0eXBlcyBvZiBkYXRhXHJcbiAgICBpZiAoXHJcbiAgICAgICFjb250ZW50VHlwZS5pbmNsdWRlcygnYXBwbGljYXRpb24vanNvbicpICYmXHJcbiAgICAgICFjb250ZW50VHlwZS5pbmNsdWRlcygnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykgJiZcclxuICAgICAgIWNvbnRlbnRUeXBlLmluY2x1ZGVzKCdtdWx0aXBhcnQvZm9ybS1kYXRhJylcclxuICAgICkge1xyXG4gICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgJ1t2YWxpZGF0aW9uXSBDb250ZW50LVR5cGUgbXVzdCBiZSBhcHBsaWNhdGlvbi9qc29uLCBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQsIG9yIG11bHRpcGFydC9mb3JtLWRhdGEuJyxcclxuICAgICAgICA0MTVcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDYWxsIHRoZSBgcmVxdWVzdEJvZHlNaWRkbGV3YXJlYCBtaWRkbGV3YXJlXHJcbiAgICByZXR1cm4gbmV4dCgpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICByZXR1cm4gbmV4dChlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogTWlkZGxld2FyZSBmb3IgdmFsaWRhdGluZyB0aGUgcmVxdWVzdCdzIGJvZHkuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiByZXF1ZXN0Qm9keU1pZGRsZXdhcmVcclxuICpcclxuICogQHBhcmFtIHtFeHByZXNzLlJlcXVlc3R9IHJlcXVlc3QgLSBUaGUgRXhwcmVzcyByZXF1ZXN0IG9iamVjdC5cclxuICogQHBhcmFtIHtFeHByZXNzLlJlc3BvbnNlfSByZXNwb25zZSAtIFRoZSBFeHByZXNzIHJlc3BvbnNlIG9iamVjdC5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dCAtIFRoZSBuZXh0IG1pZGRsZXdhcmUgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9IFRoZSBjYWxsIHRvIHRoZSBuZXh0IG1pZGRsZXdhcmUgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpZiB0aGUgYm9keSBpcyBub3QgY29ycmVjdC5cclxuICogQHRocm93cyB7RXhwb3J0RXJyb3J9IFRocm93cyBhbiBgRXhwb3J0RXJyb3JgIGlmIHRoZSBjaGFydCBkYXRhIGZyb20gdGhlIGJvZHlcclxuICogaXMgbm90IGNvcnJlY3QuXHJcbiAqIEB0aHJvd3Mge0V4cG9ydEVycm9yfSBUaHJvd3MgYW4gYEV4cG9ydEVycm9yYCBpbiBjYXNlIG9mIHRoZSBwcml2YXRlIHJhbmdlXHJcbiAqIHVybCBlcnJvci5cclxuICovXHJcbmZ1bmN0aW9uIHJlcXVlc3RCb2R5TWlkZGxld2FyZShyZXF1ZXN0LCByZXNwb25zZSwgbmV4dCkge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBHZXQgdGhlIHJlcXVlc3QgYm9keVxyXG4gICAgY29uc3QgYm9keSA9IHJlcXVlc3QuYm9keTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSB1bmlxdWUgSUQgZm9yIGEgcmVxdWVzdFxyXG4gICAgY29uc3QgcmVxdWVzdElkID0gdXVpZCgpO1xyXG5cclxuICAgIC8vIFRocm93IGFuIGVycm9yIGlmIHRoZXJlIGlzIG5vIGNvcnJlY3QgYm9keVxyXG4gICAgaWYgKCFib2R5IHx8IGlzT2JqZWN0RW1wdHkoYm9keSkpIHtcclxuICAgICAgbG9nKFxyXG4gICAgICAgIDIsXHJcbiAgICAgICAgYFt2YWxpZGF0aW9uXSBSZXF1ZXN0IFske3JlcXVlc3RJZH1dIC0gVGhlIHJlcXVlc3QgZnJvbSAke1xyXG4gICAgICAgICAgcmVxdWVzdC5oZWFkZXJzWyd4LWZvcndhcmRlZC1mb3InXSB8fCByZXF1ZXN0LmNvbm5lY3Rpb24ucmVtb3RlQWRkcmVzc1xyXG4gICAgICAgIH0gd2FzIGluY29ycmVjdC4gUmVjZWl2ZWQgcGF5bG9hZCBpcyBlbXB0eS5gXHJcbiAgICAgICk7XHJcblxyXG4gICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgYFt2YWxpZGF0aW9uXSBSZXF1ZXN0IFske3JlcXVlc3RJZH1dIC0gVGhlIHJlcXVlc3QgYm9keSBpcyByZXF1aXJlZC4gUGxlYXNlIGVuc3VyZSB0aGF0IHlvdXIgQ29udGVudC1UeXBlIGhlYWRlciBpcyBjb3JyZWN0LiBBY2NlcHRlZCB0eXBlcyBhcmUgJ2FwcGxpY2F0aW9uL2pzb24nIGFuZCAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScuYCxcclxuICAgICAgICA0MDBcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBHZXQgdGhlIGBhbGxvd0NvZGVFeGVjdXRpb25gIG9wdGlvbiBmb3IgdGhlIHNlcnZlclxyXG4gICAgY29uc3QgYWxsb3dDb2RlRXhlY3V0aW9uID0gZ2V0QWxsb3dDb2RlRXhlY3V0aW9uKCk7XHJcblxyXG4gICAgLy8gRmluZCBhIGNvcnJlY3QgY2hhcnQgb3B0aW9uc1xyXG4gICAgY29uc3QgaW5zdHIgPSBpc0FsbG93ZWRDb25maWcoXHJcbiAgICAgIC8vIFVzZSBvbmUgb2YgdGhlIGJlbG93XHJcbiAgICAgIGJvZHkuaW5zdHIgfHwgYm9keS5vcHRpb25zIHx8IGJvZHkuaW5maWxlIHx8IGJvZHkuZGF0YSxcclxuICAgICAgLy8gU3RyaW5naWZ5IG9wdGlvbnNcclxuICAgICAgdHJ1ZSxcclxuICAgICAgLy8gQWxsb3cgb3IgZGlzYWxsb3cgZnVuY3Rpb25zXHJcbiAgICAgIGFsbG93Q29kZUV4ZWN1dGlvblxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBUaHJvdyBhbiBlcnJvciBpZiB0aGVyZSBpcyBubyBjb3JyZWN0IGNoYXJ0IGRhdGFcclxuICAgIGlmIChpbnN0ciA9PT0gbnVsbCAmJiAhYm9keS5zdmcpIHtcclxuICAgICAgbG9nKFxyXG4gICAgICAgIDIsXHJcbiAgICAgICAgYFt2YWxpZGF0aW9uXSBSZXF1ZXN0IFske3JlcXVlc3RJZH1dIC0gVGhlIHJlcXVlc3QgZnJvbSAke1xyXG4gICAgICAgICAgcmVxdWVzdC5oZWFkZXJzWyd4LWZvcndhcmRlZC1mb3InXSB8fCByZXF1ZXN0LmNvbm5lY3Rpb24ucmVtb3RlQWRkcmVzc1xyXG4gICAgICAgIH0gd2FzIGluY29ycmVjdC4gUmVjZWl2ZWQgcGF5bG9hZCBpcyBtaXNzaW5nIGNvcnJlY3QgY2hhcnQgZGF0YSBmb3IgZXhwb3J0OiAke0pTT04uc3RyaW5naWZ5KGJvZHkpfS5gXHJcbiAgICAgICk7XHJcblxyXG4gICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgYFJlcXVlc3QgWyR7cmVxdWVzdElkfV0gLSBbdmFsaWRhdGlvbl0gTm8gY29ycmVjdCBjaGFydCBkYXRhIGZvdW5kLiBFbnN1cmUgdGhhdCB5b3UgYXJlIHVzaW5nIGVpdGhlciBhcHBsaWNhdGlvbi9qc29uIG9yIG11bHRpcGFydC9mb3JtLWRhdGEgaGVhZGVycy4gSWYgc2VuZGluZyBKU09OLCBtYWtlIHN1cmUgdGhlIGNoYXJ0IGRhdGEgaXMgaW4gdGhlICdpbmZpbGUnLCAnb3B0aW9ucycsIG9yICdkYXRhJyBhdHRyaWJ1dGUuIElmIHNlbmRpbmcgU1ZHLCBlbnN1cmUgaXQgaXMgaW4gdGhlICdzdmcnIGF0dHJpYnV0ZS5gLFxyXG4gICAgICAgIDQwMFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRocm93IGFuIGVycm9yIGlmIHRlc3Qgb2YgeGxpbms6aHJlZiBlbGVtZW50cyBmcm9tIHBheWxvYWQncyBTVkcgZmFpbHNcclxuICAgIGlmIChib2R5LnN2ZyAmJiBpc1ByaXZhdGVSYW5nZVVybEZvdW5kKGJvZHkuc3ZnKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgYFJlcXVlc3QgWyR7cmVxdWVzdElkfV0gLSBbdmFsaWRhdGlvbl0gU1ZHIHBvdGVudGlhbGx5IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGZvcmJpZGRlbiBVUkwgaW4gJ3hsaW5rOmhyZWYnIGVsZW1lbnQuIFBsZWFzZSByZXZpZXcgdGhlIFNWRyBjb250ZW50IGFuZCBlbnN1cmUgdGhhdCBhbGwgcmVmZXJlbmNlZCBVUkxzIGNvbXBseSB3aXRoIHNlY3VyaXR5IHBvbGljaWVzLmAsXHJcbiAgICAgICAgNDAwXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0IGFuZCBwcmUtdmFsaWRhdGUgdGhlIG9wdGlvbnMgYW5kIHN0b3JlIHRoZW0gaW4gdGhlIHJlcXVlc3RcclxuICAgIHJlcXVlc3QudmFsaWRhdGVkT3B0aW9ucyA9IHtcclxuICAgICAgLy8gU2V0IHRoZSBjcmVhdGVkIElEIGFzIGEgYHJlcXVlc3RJZGAgcHJvcGVydHkgaW4gdGhlIG9wdGlvbnNcclxuICAgICAgcmVxdWVzdElkLFxyXG4gICAgICBleHBvcnQ6IHtcclxuICAgICAgICBpbnN0cixcclxuICAgICAgICBzdmc6IGJvZHkuc3ZnLFxyXG4gICAgICAgIG91dGZpbGU6XHJcbiAgICAgICAgICBib2R5Lm91dGZpbGUgfHxcclxuICAgICAgICAgIGAke3JlcXVlc3QucGFyYW1zLmZpbGVuYW1lIHx8ICdjaGFydCd9LiR7Ym9keS50eXBlIHx8ICdwbmcnfWAsXHJcbiAgICAgICAgdHlwZTogYm9keS50eXBlLFxyXG4gICAgICAgIGNvbnN0cjogYm9keS5jb25zdHIsXHJcbiAgICAgICAgYjY0OiBib2R5LmI2NCxcclxuICAgICAgICBub0Rvd25sb2FkOiBib2R5Lm5vRG93bmxvYWQsXHJcbiAgICAgICAgaGVpZ2h0OiBib2R5LmhlaWdodCxcclxuICAgICAgICB3aWR0aDogYm9keS53aWR0aCxcclxuICAgICAgICBzY2FsZTogYm9keS5zY2FsZSxcclxuICAgICAgICBnbG9iYWxPcHRpb25zOiBpc0FsbG93ZWRDb25maWcoXHJcbiAgICAgICAgICBib2R5Lmdsb2JhbE9wdGlvbnMsXHJcbiAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgYWxsb3dDb2RlRXhlY3V0aW9uXHJcbiAgICAgICAgKSxcclxuICAgICAgICB0aGVtZU9wdGlvbnM6IGlzQWxsb3dlZENvbmZpZyhcclxuICAgICAgICAgIGJvZHkudGhlbWVPcHRpb25zLFxyXG4gICAgICAgICAgdHJ1ZSxcclxuICAgICAgICAgIGFsbG93Q29kZUV4ZWN1dGlvblxyXG4gICAgICAgIClcclxuICAgICAgfSxcclxuICAgICAgY3VzdG9tTG9naWM6IHtcclxuICAgICAgICBhbGxvd0NvZGVFeGVjdXRpb24sXHJcbiAgICAgICAgYWxsb3dGaWxlUmVzb3VyY2VzOiBmYWxzZSxcclxuICAgICAgICBjdXN0b21Db2RlOiBib2R5LmN1c3RvbUNvZGUsXHJcbiAgICAgICAgY2FsbGJhY2s6IGJvZHkuY2FsbGJhY2ssXHJcbiAgICAgICAgcmVzb3VyY2VzOiBpc0FsbG93ZWRDb25maWcoYm9keS5yZXNvdXJjZXMsIHRydWUsIGFsbG93Q29kZUV4ZWN1dGlvbilcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBDYWxsIHRoZSBuZXh0IG1pZGRsZXdhcmVcclxuICAgIHJldHVybiBuZXh0KCk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJldHVybiBuZXh0KGVycm9yKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHRoZSB2YWxpZGF0aW9uIG1pZGRsZXdhcmVzIHRvIHRoZSBwYXNzZWQgZXhwcmVzcyBhcHAgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RXhwcmVzc30gYXBwIC0gVGhlIEV4cHJlc3MgYXBwIGluc3RhbmNlLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmFsaWRhdGlvbk1pZGRsZXdhcmUoYXBwKSB7XHJcbiAgLy8gQWRkIGNvbnRlbnQgdHlwZSB2YWxpZGF0aW9uIG1pZGRsZXdhcmVcclxuICBhcHAucG9zdChbJy8nLCAnLzpmaWxlbmFtZSddLCBjb250ZW50VHlwZU1pZGRsZXdhcmUpO1xyXG5cclxuICAvLyBBZGQgcmVxdWVzdCBib2R5IHJlcXVlc3QgdmFsaWRhdGlvbiBtaWRkbGV3YXJlXHJcbiAgYXBwLnBvc3QoWycvJywgJy86ZmlsZW5hbWUnXSwgcmVxdWVzdEJvZHlNaWRkbGV3YXJlKTtcclxufVxyXG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuSGlnaGNoYXJ0cyBFeHBvcnQgU2VydmVyXHJcblxyXG5Db3B5cmlnaHQgKGMpIDIwMTYtMjAyNSwgSGlnaHNvZnRcclxuXHJcbkxpY2VuY2VkIHVuZGVyIHRoZSBNSVQgbGljZW5jZS5cclxuXHJcbkFkZGl0aW9uYWxseSBhIHZhbGlkIEhpZ2hjaGFydHMgbGljZW5zZSBpcyByZXF1aXJlZCBmb3IgdXNlLlxyXG5cclxuU2VlIExJQ0VOU0UgZmlsZSBpbiByb290IGZvciBkZXRhaWxzLlxyXG5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnZpZXcgRGVmaW5lcyB0aGUgZXhwb3J0IHJvdXRlcyBhbmQgbG9naWMgZm9yIGhhbmRsaW5nIGNoYXJ0IGV4cG9ydFxyXG4gKiByZXF1ZXN0cyBpbiBhbiBFeHByZXNzIHNlcnZlci4gVGhpcyBtb2R1bGUgcHJvY2Vzc2VzIGluY29taW5nIHJlcXVlc3RzXHJcbiAqIHRvIGV4cG9ydCBjaGFydHMgaW4gdmFyaW91cyBmb3JtYXRzIChlLmcuIEpQRUcsIFBORywgUERGLCBTVkcpLiBJdCBpbnRlZ3JhdGVzXHJcbiAqIHdpdGggSGlnaGNoYXJ0cycgY29yZSBmdW5jdGlvbmFsaXRpZXMgYW5kIHN1cHBvcnRzIGJvdGggaW1tZWRpYXRlIGRvd25sb2FkXHJcbiAqIHJlc3BvbnNlcyBhbmQgQmFzZTY0LWVuY29kZWQgY29udGVudCByZXR1cm5zLiBUaGUgY29kZSBhbHNvIGZlYXR1cmVzXHJcbiAqIGJlbmNobWFya2luZyBmb3IgcGVyZm9ybWFuY2UgbW9uaXRvcmluZy5cclxuICovXHJcblxyXG5pbXBvcnQgeyBzdGFydEV4cG9ydCB9IGZyb20gJy4uLy4uL2NoYXJ0LmpzJztcclxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi4vLi4vbG9nZ2VyLmpzJztcclxuaW1wb3J0IHsgZ2V0QmFzZTY0LCBtZWFzdXJlVGltZSB9IGZyb20gJy4uLy4uL3V0aWxzLmpzJztcclxuXHJcbmltcG9ydCBFeHBvcnRFcnJvciBmcm9tICcuLi8uLi9lcnJvcnMvRXhwb3J0RXJyb3IuanMnO1xyXG5cclxuLy8gUmV2ZXJzZWQgTUlNRSB0eXBlc1xyXG5jb25zdCByZXZlcnNlZE1pbWUgPSB7XHJcbiAgcG5nOiAnaW1hZ2UvcG5nJyxcclxuICBqcGVnOiAnaW1hZ2UvanBlZycsXHJcbiAgZ2lmOiAnaW1hZ2UvZ2lmJyxcclxuICBwZGY6ICdhcHBsaWNhdGlvbi9wZGYnLFxyXG4gIHN2ZzogJ2ltYWdlL3N2Zyt4bWwnXHJcbn07XHJcblxyXG4vKipcclxuICogSGFuZGxlcyB0aGUgZXhwb3J0IHJlcXVlc3RzIGZyb20gdGhlIGNsaWVudC5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiByZXF1ZXN0RXhwb3J0XHJcbiAqXHJcbiAqIEBwYXJhbSB7RXhwcmVzcy5SZXF1ZXN0fSByZXF1ZXN0IC0gVGhlIEV4cHJlc3MgcmVxdWVzdCBvYmplY3QuXHJcbiAqIEBwYXJhbSB7RXhwcmVzcy5SZXNwb25zZX0gcmVzcG9uc2UgLSBUaGUgRXhwcmVzcyByZXNwb25zZSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHQgLSBUaGUgbmV4dCBtaWRkbGV3YXJlIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSB0aGUgZXhwb3J0IHByb2Nlc3NcclxuICogaXMgY29tcGxldGUuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiByZXF1ZXN0RXhwb3J0KHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0KSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIFN0YXJ0IGNvdW50aW5nIHRpbWUgZm9yIGEgcmVxdWVzdFxyXG4gICAgY29uc3QgcmVxdWVzdENvdW50ZXIgPSBtZWFzdXJlVGltZSgpO1xyXG5cclxuICAgIC8vIEluIGNhc2UgdGhlIGNvbm5lY3Rpb24gaXMgY2xvc2VkLCBmb3JjZSB0byBhYm9ydCBmdXJ0aGVyIGFjdGlvbnNcclxuICAgIGxldCBjb25uZWN0aW9uQWJvcnRlZCA9IGZhbHNlO1xyXG4gICAgcmVxdWVzdC5zb2NrZXQub24oJ2Nsb3NlJywgKGhhZEVycm9ycykgPT4ge1xyXG4gICAgICBpZiAoaGFkRXJyb3JzKSB7XHJcbiAgICAgICAgY29ubmVjdGlvbkFib3J0ZWQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBHZXQgdGhlIG9wdGlvbnMgcHJldmlvdXNseSB2YWxpZGF0ZWQgaW4gdGhlIHZhbGlkYXRpb24gbWlkZGxld2FyZVxyXG4gICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSByZXF1ZXN0LnZhbGlkYXRlZE9wdGlvbnM7XHJcblxyXG4gICAgLy8gR2V0IHRoZSByZXF1ZXN0IGlkXHJcbiAgICBjb25zdCByZXF1ZXN0SWQgPSByZXF1ZXN0T3B0aW9ucy5yZXF1ZXN0SWQ7XHJcblxyXG4gICAgLy8gSW5mbyBhYm91dCBhbiBpbmNvbWluZyByZXF1ZXN0IHdpdGggY29ycmVjdCBkYXRhXHJcbiAgICBsb2coNCwgYFtleHBvcnRdIFJlcXVlc3QgWyR7cmVxdWVzdElkfV0gLSBHb3QgYW4gaW5jb21pbmcgSFRUUCByZXF1ZXN0LmApO1xyXG5cclxuICAgIC8vIFN0YXJ0IHRoZSBleHBvcnQgcHJvY2Vzc1xyXG4gICAgYXdhaXQgc3RhcnRFeHBvcnQocmVxdWVzdE9wdGlvbnMsIChlcnJvciwgZGF0YSkgPT4ge1xyXG4gICAgICAvLyBSZW1vdmUgdGhlIGNsb3NlIGV2ZW50IGZyb20gdGhlIHNvY2tldFxyXG4gICAgICByZXF1ZXN0LnNvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2Nsb3NlJyk7XHJcblxyXG4gICAgICAvLyBJZiB0aGUgY29ubmVjdGlvbiB3YXMgY2xvc2VkLCBkbyBub3RoaW5nXHJcbiAgICAgIGlmIChjb25uZWN0aW9uQWJvcnRlZCkge1xyXG4gICAgICAgIGxvZyhcclxuICAgICAgICAgIDMsXHJcbiAgICAgICAgICBgW2V4cG9ydF0gUmVxdWVzdCBbJHtyZXF1ZXN0SWR9XSAtIFRoZSBjbGllbnQgY2xvc2VkIHRoZSBjb25uZWN0aW9uIGJlZm9yZSB0aGUgY2hhcnQgZmluaXNoZWQgcHJvY2Vzc2luZy5gXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIElmIGVycm9yLCBsb2cgaXQgYW5kIHNlbmQgaXQgdG8gdGhlIGVycm9yIG1pZGRsZXdhcmVcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIElmIGRhdGEgaXMgbWlzc2luZywgbG9nIHRoZSBtZXNzYWdlIGFuZCBzZW5kIGl0IHRvIHRoZSBlcnJvciBtaWRkbGV3YXJlXHJcbiAgICAgIGlmICghZGF0YSB8fCAhZGF0YS5yZXN1bHQpIHtcclxuICAgICAgICBsb2coXHJcbiAgICAgICAgICAyLFxyXG4gICAgICAgICAgYFtleHBvcnRdIFJlcXVlc3QgWyR7cmVxdWVzdElkfV0gLSBSZXF1ZXN0IGZyb20gJHtcclxuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzWyd4LWZvcndhcmRlZC1mb3InXSB8fFxyXG4gICAgICAgICAgICByZXF1ZXN0LmNvbm5lY3Rpb24ucmVtb3RlQWRkcmVzc1xyXG4gICAgICAgICAgfSB3YXMgaW5jb3JyZWN0LiBSZWNlaXZlZCByZXN1bHQgaXMgJHtkYXRhLnJlc3VsdH0uYFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgICAgIGBbZXhwb3J0XSBSZXF1ZXN0IFske3JlcXVlc3RJZH1dIC0gVW5leHBlY3RlZCByZXR1cm4gb2YgdGhlIGV4cG9ydCByZXN1bHQgZnJvbSB0aGUgY2hhcnQgZ2VuZXJhdGlvbi4gUGxlYXNlIGNoZWNrIHlvdXIgcmVxdWVzdCBkYXRhLmAsXHJcbiAgICAgICAgICA0MDBcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBSZXR1cm4gdGhlIHJlc3VsdCBpbiBhbiBhcHByb3ByaWF0ZSBmb3JtYXRcclxuICAgICAgaWYgKGRhdGEucmVzdWx0KSB7XHJcbiAgICAgICAgbG9nKFxyXG4gICAgICAgICAgMyxcclxuICAgICAgICAgIGBbZXhwb3J0XSBSZXF1ZXN0IFske3JlcXVlc3RJZH1dIC0gVGhlIHdob2xlIGV4cG9ydGluZyBwcm9jZXNzIHRvb2sgJHtyZXF1ZXN0Q291bnRlcigpfW1zLmBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIGB0eXBlYCwgYGI2NGAsIGBub0Rvd25sb2FkYCwgYW5kIGBvdXRmaWxlYCBmcm9tIG9wdGlvbnNcclxuICAgICAgICBjb25zdCB7IHR5cGUsIGI2NCwgbm9Eb3dubG9hZCwgb3V0ZmlsZSB9ID0gZGF0YS5vcHRpb25zLmV4cG9ydDtcclxuXHJcbiAgICAgICAgLy8gSWYgb25seSBCYXNlNjQgaXMgcmVxdWlyZWQsIHJldHVybiBpdFxyXG4gICAgICAgIGlmIChiNjQpIHtcclxuICAgICAgICAgIHJldHVybiByZXNwb25zZS5zZW5kKGdldEJhc2U2NChkYXRhLnJlc3VsdCwgdHlwZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU2V0IGNvcnJlY3QgY29udGVudCB0eXBlXHJcbiAgICAgICAgcmVzcG9uc2UuaGVhZGVyKCdDb250ZW50LVR5cGUnLCByZXZlcnNlZE1pbWVbdHlwZV0gfHwgJ2ltYWdlL3BuZycpO1xyXG5cclxuICAgICAgICAvLyBEZWNpZGUgd2hldGhlciB0byBkb3dubG9hZCBvciBub3QgY2hhcnQgZmlsZVxyXG4gICAgICAgIGlmICghbm9Eb3dubG9hZCkge1xyXG4gICAgICAgICAgcmVzcG9uc2UuYXR0YWNobWVudChvdXRmaWxlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIFNWRywgcmV0dXJuIHBsYWluIGNvbnRlbnQsIG90aGVyd2lzZSBhIGI2NCBzdHJpbmcgZnJvbSBhIGJ1ZmZlclxyXG4gICAgICAgIHJldHVybiB0eXBlID09PSAnc3ZnJ1xyXG4gICAgICAgICAgPyByZXNwb25zZS5zZW5kKGRhdGEucmVzdWx0KVxyXG4gICAgICAgICAgOiByZXNwb25zZS5zZW5kKEJ1ZmZlci5mcm9tKGRhdGEucmVzdWx0LCAnYmFzZTY0JykpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgcmV0dXJuIG5leHQoZXJyb3IpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHMgdGhlIGBleHBvcnRgIHJvdXRlcy5cclxuICpcclxuICogQGZ1bmN0aW9uIGV4cG9ydFJvdXRlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge0V4cHJlc3N9IGFwcCAtIFRoZSBFeHByZXNzIGFwcCBpbnN0YW5jZS5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4cG9ydFJvdXRlcyhhcHApIHtcclxuICAvKipcclxuICAgKiBBZGRzIHRoZSBQT1NUICcvJyAtIEEgcm91dGUgZm9yIGhhbmRsaW5nIFBPU1QgcmVxdWVzdHMgYXQgdGhlIHJvb3RcclxuICAgKiBlbmRwb2ludC5cclxuICAgKi9cclxuICBhcHAucG9zdCgnLycsIHJlcXVlc3RFeHBvcnQpO1xyXG5cclxuICAvKipcclxuICAgKiBBZGRzIHRoZSBQT1NUICcvOmZpbGVuYW1lJyAtIEEgcm91dGUgZm9yIGhhbmRsaW5nIFBPU1QgcmVxdWVzdHMgd2l0aFxyXG4gICAqIGEgc3BlY2lmaWVkIGZpbGVuYW1lIHBhcmFtZXRlci5cclxuICAgKi9cclxuICBhcHAucG9zdCgnLzpmaWxlbmFtZScsIHJlcXVlc3RFeHBvcnQpO1xyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBEZWZpbmVzIGFuIEV4cHJlc3Mgcm91dGUgZm9yIHNlcnZlciBoZWFsdGggbW9uaXRvcmluZywgaW5jbHVkaW5nXHJcbiAqIHVwdGltZSwgc3VjY2VzcyByYXRlcywgYW5kIG90aGVyIHNlcnZlciBzdGF0aXN0aWNzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJztcclxuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xyXG5cclxuaW1wb3J0IHsgZ2V0SGlnaGNoYXJ0c1ZlcnNpb24gfSBmcm9tICcuLi8uLi9jYWNoZS5qcyc7XHJcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4uLy4uL2xvZ2dlci5qcyc7XHJcbmltcG9ydCB7IGdldFBvb2xJbmZvSlNPTiwgZ2V0UG9vbFN0YXRzIH0gZnJvbSAnLi4vLi4vcG9vbC5qcyc7XHJcbmltcG9ydCB7IGFkZFRpbWVyIH0gZnJvbSAnLi4vLi4vdGltZXIuanMnO1xyXG5pbXBvcnQgeyBfX2Rpcm5hbWUsIGdldE5ld0RhdGVUaW1lIH0gZnJvbSAnLi4vLi4vdXRpbHMuanMnO1xyXG5cclxuLy8gU2V0IHRoZSBzdGFydCBkYXRlIG9mIHRoZSBzZXJ2ZXJcclxuY29uc3Qgc2VydmVyU3RhcnRUaW1lID0gbmV3IERhdGUoKTtcclxuXHJcbi8vIEdldCB0aGUgYHBhY2thZ2UuanNvbmAgY29udGVudFxyXG5jb25zdCBwYWNrYWdlRmlsZSA9IEpTT04ucGFyc2UoXHJcbiAgcmVhZEZpbGVTeW5jKGpvaW4oX19kaXJuYW1lLCAncGFja2FnZS5qc29uJyksICd1dGY4JylcclxuKTtcclxuXHJcbi8vIEFuIGFycmF5IGZvciBzdWNjZXNzIHJhdGUgcmF0aW9zXHJcbmNvbnN0IHN1Y2Nlc3NSYXRlcyA9IFtdO1xyXG5cclxuLy8gUmVjb3JkIGV2ZXJ5IG1pbnV0ZVxyXG5jb25zdCByZWNvcmRJbnRlcnZhbCA9IDYwICogMTAwMDtcclxuXHJcbi8vIDMwIG1pbnV0ZXNcclxuY29uc3Qgd2luZG93U2l6ZSA9IDMwO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgbW92aW5nIGF2ZXJhZ2UgaW5kaWNhdG9yIGJhc2VkIG9uIHRoZSBkYXRhIGZyb20gdGhlIGBzdWNjZXNzUmF0ZXNgXHJcbiAqIGFycmF5LlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gX2NhbGN1bGF0ZU1vdmluZ0F2ZXJhZ2VcclxuICpcclxuICogQHJldHVybnMge251bWJlcn0gQSBtb3ZpbmcgYXZlcmFnZSBmb3Igc3VjY2VzcyByYXRpbyBvZiB0aGUgc2VydmVyIGV4cG9ydHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBfY2FsY3VsYXRlTW92aW5nQXZlcmFnZSgpIHtcclxuICByZXR1cm4gc3VjY2Vzc1JhdGVzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApIC8gc3VjY2Vzc1JhdGVzLmxlbmd0aDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFN0YXJ0cyB0aGUgaW50ZXJ2YWwgcmVzcG9uc2libGUgZm9yIGNhbGN1bGF0aW5nIGN1cnJlbnQgc3VjY2VzcyByYXRlIHJhdGlvXHJcbiAqIGFuZCBjb2xsZWN0cyByZWNvcmRzIHRvIHRoZSBgc3VjY2Vzc1JhdGVzYCBhcnJheS5cclxuICpcclxuICogQGZ1bmN0aW9uIF9zdGFydFN1Y2Nlc3NSYXRlXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtOb2RlSlMuVGltZW91dH0gSWQgb2YgYW4gaW50ZXJ2YWwuXHJcbiAqL1xyXG5mdW5jdGlvbiBfc3RhcnRTdWNjZXNzUmF0ZSgpIHtcclxuICByZXR1cm4gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgY29uc3Qgc3RhdHMgPSBnZXRQb29sU3RhdHMoKTtcclxuICAgIGNvbnN0IHN1Y2Nlc3NSYXRpbyA9XHJcbiAgICAgIHN0YXRzLmV4cG9ydHNBdHRlbXB0ZWQgPT09IDBcclxuICAgICAgICA/IDFcclxuICAgICAgICA6IChzdGF0cy5leHBvcnRzUGVyZm9ybWVkIC8gc3RhdHMuZXhwb3J0c0F0dGVtcHRlZCkgKiAxMDA7XHJcblxyXG4gICAgc3VjY2Vzc1JhdGVzLnB1c2goc3VjY2Vzc1JhdGlvKTtcclxuICAgIGlmIChzdWNjZXNzUmF0ZXMubGVuZ3RoID4gd2luZG93U2l6ZSkge1xyXG4gICAgICBzdWNjZXNzUmF0ZXMuc2hpZnQoKTtcclxuICAgIH1cclxuICB9LCByZWNvcmRJbnRlcnZhbCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHRoZSBgaGVhbHRoYCByb3V0ZXMuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBoZWFsdGhSb3V0ZXNcclxuICpcclxuICogQHBhcmFtIHtFeHByZXNzfSBhcHAgLSBUaGUgRXhwcmVzcyBhcHAgaW5zdGFuY2UuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoZWFsdGhSb3V0ZXMoYXBwKSB7XHJcbiAgLy8gU3RhcnQgcHJvY2Vzc2luZyBzdWNjZXNzIHJhdGUgcmF0aW8gaW50ZXJ2YWwgYW5kIHNhdmUgaXRzIGlkIHRvIHRoZSBhcnJheVxyXG4gIC8vIGZvciB0aGUgZ3JhY2VmdWwgY2xlYXJpbmcgb24gc2h1dGRvd24gd2l0aCBpbmplY3RlZCBgYWRkVGltZXJgIGZ1bnRpb25cclxuICBhZGRUaW1lcihfc3RhcnRTdWNjZXNzUmF0ZSgpKTtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyB0aGUgR0VUICcvaGVhbHRoJyAtIEEgcm91dGUgZm9yIGdldHRpbmcgdGhlIGJhc2ljIHN0YXRzIG9mIHRoZSBzZXJ2ZXIuXHJcbiAgICovXHJcbiAgYXBwLmdldCgnL2hlYWx0aCcsIChyZXF1ZXN0LCByZXNwb25zZSwgbmV4dCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgbG9nKDQsICdbaGVhbHRoXSBSZXR1cm5pbmcgc2VydmVyIGhlYWx0aC4nKTtcclxuXHJcbiAgICAgIGNvbnN0IHN0YXRzID0gZ2V0UG9vbFN0YXRzKCk7XHJcbiAgICAgIGNvbnN0IHBlcmlvZCA9IHN1Y2Nlc3NSYXRlcy5sZW5ndGg7XHJcbiAgICAgIGNvbnN0IG1vdmluZ0F2ZXJhZ2UgPSBfY2FsY3VsYXRlTW92aW5nQXZlcmFnZSgpO1xyXG5cclxuICAgICAgLy8gU2VuZCB0aGUgc2VydmVyJ3Mgc3RhdGlzdGljc1xyXG4gICAgICByZXNwb25zZS5zZW5kKHtcclxuICAgICAgICAvLyBTdGF0dXMgYW5kIHRpbWVzXHJcbiAgICAgICAgc3RhdHVzOiAnT0snLFxyXG4gICAgICAgIGJvb3RUaW1lOiBzZXJ2ZXJTdGFydFRpbWUsXHJcbiAgICAgICAgdXB0aW1lOiBgJHtNYXRoLmZsb29yKChnZXROZXdEYXRlVGltZSgpIC0gc2VydmVyU3RhcnRUaW1lLmdldFRpbWUoKSkgLyAxMDAwIC8gNjApfSBtaW51dGVzYCxcclxuXHJcbiAgICAgICAgLy8gVmVyc2lvbnNcclxuICAgICAgICBzZXJ2ZXJWZXJzaW9uOiBwYWNrYWdlRmlsZS52ZXJzaW9uLFxyXG4gICAgICAgIGhpZ2hjaGFydHNWZXJzaW9uOiBnZXRIaWdoY2hhcnRzVmVyc2lvbigpLFxyXG5cclxuICAgICAgICAvLyBFeHBvcnRzXHJcbiAgICAgICAgYXZlcmFnZUV4cG9ydFRpbWU6IHN0YXRzLnRpbWVTcGVudEF2ZXJhZ2UsXHJcbiAgICAgICAgYXR0ZW1wdGVkRXhwb3J0czogc3RhdHMuZXhwb3J0c0F0dGVtcHRlZCxcclxuICAgICAgICBwZXJmb3JtZWRFeHBvcnRzOiBzdGF0cy5leHBvcnRzUGVyZm9ybWVkLFxyXG4gICAgICAgIGZhaWxlZEV4cG9ydHM6IHN0YXRzLmV4cG9ydHNEcm9wcGVkLFxyXG4gICAgICAgIHN1Y2Vzc1JhdGlvOiAoc3RhdHMuZXhwb3J0c1BlcmZvcm1lZCAvIHN0YXRzLmV4cG9ydHNBdHRlbXB0ZWQpICogMTAwLFxyXG5cclxuICAgICAgICAvLyBQb29sXHJcbiAgICAgICAgcG9vbDogZ2V0UG9vbEluZm9KU09OKCksXHJcblxyXG4gICAgICAgIC8vIE1vdmluZyBhdmVyYWdlXHJcbiAgICAgICAgcGVyaW9kLFxyXG4gICAgICAgIG1vdmluZ0F2ZXJhZ2UsXHJcbiAgICAgICAgbWVzc2FnZTpcclxuICAgICAgICAgIGlzTmFOKG1vdmluZ0F2ZXJhZ2UpIHx8ICFzdWNjZXNzUmF0ZXMubGVuZ3RoXHJcbiAgICAgICAgICAgID8gJ1RvbyBlYXJseSB0byByZXBvcnQuIE5vIGV4cG9ydHMgbWFkZSB5ZXQuIFBsZWFzZSBjaGVjayBiYWNrIHNvb24uJ1xyXG4gICAgICAgICAgICA6IGBMYXN0ICR7cGVyaW9kfSBtaW51dGVzIGhhZCBhIHN1Y2Nlc3MgcmF0ZSBvZiAke21vdmluZ0F2ZXJhZ2UudG9GaXhlZCgyKX0lLmAsXHJcblxyXG4gICAgICAgIC8vIFNWRyBhbmQgSlNPTiBleHBvcnRzXHJcbiAgICAgICAgc3ZnRXhwb3J0czogc3RhdHMuZXhwb3J0c0Zyb21TdmcsXHJcbiAgICAgICAganNvbkV4cG9ydHM6IHN0YXRzLmV4cG9ydHNGcm9tT3B0aW9ucyxcclxuICAgICAgICBzdmdFeHBvcnRzQXR0ZW1wdHM6IHN0YXRzLmV4cG9ydHNGcm9tU3ZnQXR0ZW1wdHMsXHJcbiAgICAgICAganNvbkV4cG9ydHNBdHRlbXB0czogc3RhdHMuZXhwb3J0c0Zyb21PcHRpb25zQXR0ZW1wdHNcclxuICAgICAgfSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICByZXR1cm4gbmV4dChlcnJvcik7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbkhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlclxyXG5cclxuQ29weXJpZ2h0IChjKSAyMDE2LTIwMjUsIEhpZ2hzb2Z0XHJcblxyXG5MaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXHJcblxyXG5BZGRpdGlvbmFsbHkgYSB2YWxpZCBIaWdoY2hhcnRzIGxpY2Vuc2UgaXMgcmVxdWlyZWQgZm9yIHVzZS5cclxuXHJcblNlZSBMSUNFTlNFIGZpbGUgaW4gcm9vdCBmb3IgZGV0YWlscy5cclxuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vKipcclxuICogQG92ZXJ2aWV3IERlZmluZXMgYW4gRXhwcmVzcyByb3V0ZSBmb3Igc2VydmluZyB0aGUgVUkgZm9yIHRoZSBleHBvcnQgc2VydmVyXHJcbiAqIHdoZW4gZW5hYmxlZC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XHJcblxyXG5pbXBvcnQgeyBnZXRPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29uZmlnLmpzJztcclxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi4vLi4vbG9nZ2VyLmpzJztcclxuaW1wb3J0IHsgX19kaXJuYW1lIH0gZnJvbSAnLi4vLi4vdXRpbHMuanMnO1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgdGhlIGB1aWAgcm91dGVzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gdWlSb3V0ZXNcclxuICpcclxuICogQHBhcmFtIHtFeHByZXNzfSBhcHAgLSBUaGUgRXhwcmVzcyBhcHAgaW5zdGFuY2UuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1aVJvdXRlcyhhcHApIHtcclxuICAvKipcclxuICAgKiBBZGRzIHRoZSBHRVQgJy8nIC0gQSByb3V0ZSBmb3IgYSBVSSB3aGVuIGVuYWJsZWQgb24gdGhlIGV4cG9ydCBzZXJ2ZXIuXHJcbiAgICovXHJcbiAgYXBwLmdldChnZXRPcHRpb25zKCkudWkucm91dGUgfHwgJy8nLCAocmVxdWVzdCwgcmVzcG9uc2UsIG5leHQpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGxvZyg0LCAnW3VpXSBSZXR1cm5pbmcgVUkgZm9yIHRoZSBleHBvcnQuJyk7XHJcblxyXG4gICAgICByZXNwb25zZS5zZW5kRmlsZShqb2luKF9fZGlybmFtZSwgJ3B1YmxpYycsICdpbmRleC5odG1sJyksIHtcclxuICAgICAgICBhY2NlcHRSYW5nZXM6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIG5leHQoZXJyb3IpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBEZWZpbmVzIGFuIEV4cHJlc3Mgcm91dGUgZm9yIHVwZGF0aW5nIHRoZSBIaWdoY2hhcnRzIHZlcnNpb25cclxuICogb24gdGhlIHNlcnZlciwgd2l0aCBhdXRoZW50aWNhdGlvbiBhbmQgdmFsaWRhdGlvbi5cclxuICovXHJcblxyXG5pbXBvcnQgeyBnZXRIaWdoY2hhcnRzVmVyc2lvbiwgdXBkYXRlSGlnaGNoYXJ0c1ZlcnNpb24gfSBmcm9tICcuLi8uLi9jYWNoZS5qcyc7XHJcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4uLy4uL2xvZ2dlci5qcyc7XHJcbmltcG9ydCB7IGVudnMgfSBmcm9tICcuLi8uLi92YWxpZGF0aW9uLmpzJztcclxuXHJcbmltcG9ydCBFeHBvcnRFcnJvciBmcm9tICcuLi8uLi9lcnJvcnMvRXhwb3J0RXJyb3IuanMnO1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgdGhlIGB2ZXJzaW9uX2NoYW5nZWAgcm91dGVzLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gdmVyc2lvbkNoYW5nZVJvdXRlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge0V4cHJlc3N9IGFwcCAtIFRoZSBFeHByZXNzIGFwcCBpbnN0YW5jZS5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcnNpb25DaGFuZ2VSb3V0ZXMoYXBwKSB7XHJcbiAgLyoqXHJcbiAgICogQWRkcyB0aGUgUE9TVCAnL3ZlcnNpb25fY2hhbmdlLzpuZXdWZXJzaW9uJyAtIEEgcm91dGUgZm9yIGNoYW5naW5nXHJcbiAgICogdGhlIEhpZ2hjaGFydHMgdmVyc2lvbiBvbiB0aGUgc2VydmVyLlxyXG4gICAqL1xyXG4gIGFwcC5wb3N0KCcvdmVyc2lvbl9jaGFuZ2UvOm5ld1ZlcnNpb24nLCBhc3luYyAocmVxdWVzdCwgcmVzcG9uc2UsIG5leHQpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGxvZyg0LCAnW3ZlcnNpb25dIENoYW5naW5nIEhpZ2hjaGFydHMgdmVyc2lvbi4nKTtcclxuXHJcbiAgICAgIC8vIEdldCB0aGUgdG9rZW4gZGlyZWN0bHkgZnJvbSBlbnZzXHJcbiAgICAgIGNvbnN0IGFkbWluVG9rZW4gPSBlbnZzLkhJR0hDSEFSVFNfQURNSU5fVE9LRU47XHJcblxyXG4gICAgICAvLyBDaGVjayB0aGUgZXhpc3RlbmNlIG9mIHRoZSB0b2tlblxyXG4gICAgICBpZiAoIWFkbWluVG9rZW4gfHwgIWFkbWluVG9rZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgICAgJ1t2ZXJzaW9uXSBUaGUgc2VydmVyIGlzIG5vdCBjb25maWd1cmVkIHRvIHBlcmZvcm0gcnVuLXRpbWUgdmVyc2lvbiBjaGFuZ2VzOiBISUdIQ0hBUlRTX0FETUlOX1RPS0VOIGlzIG5vdCBzZXQuJyxcclxuICAgICAgICAgIDQwMVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEdldCB0aGUgdG9rZW4gZnJvbSB0aGUgaGMtYXV0aCBoZWFkZXJcclxuICAgICAgY29uc3QgdG9rZW4gPSByZXF1ZXN0LmdldCgnaGMtYXV0aCcpO1xyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGhjLWF1dGggaGVhZGVyIGNvbnRhaW4gYSBjb3JyZWN0IHRva2VuXHJcbiAgICAgIGlmICghdG9rZW4gfHwgdG9rZW4gIT09IGFkbWluVG9rZW4pIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXhwb3J0RXJyb3IoXHJcbiAgICAgICAgICAnW3ZlcnNpb25dIEludmFsaWQgb3IgbWlzc2luZyB0b2tlbjogU2V0IHRoZSB0b2tlbiBpbiB0aGUgaGMtYXV0aCBoZWFkZXIuJyxcclxuICAgICAgICAgIDQwMVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENvbXBhcmUgdmVyc2lvbnNcclxuICAgICAgY29uc3QgbmV3VmVyc2lvbiA9IHJlcXVlc3QucGFyYW1zLm5ld1ZlcnNpb247XHJcblxyXG4gICAgICAvLyBXaGVuIGEgY29ycmVjdCB2YWx1ZSBmb3VuZFxyXG4gICAgICBpZiAobmV3VmVyc2lvbikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAvLyBVcGRhdGUgdmVyc2lvblxyXG4gICAgICAgICAgYXdhaXQgdXBkYXRlSGlnaGNoYXJ0c1ZlcnNpb24obmV3VmVyc2lvbik7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgICAgICAgYFt2ZXJzaW9uXSBWZXJzaW9uIGNoYW5nZTogJHtlcnJvci5tZXNzYWdlfWAsXHJcbiAgICAgICAgICAgIDQwMFxyXG4gICAgICAgICAgKS5zZXRFcnJvcihlcnJvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTdWNjZXNzXHJcbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzKDIwMCkuc2VuZCh7XHJcbiAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXHJcbiAgICAgICAgICBoaWdoY2hhcnRzVmVyc2lvbjogZ2V0SGlnaGNoYXJ0c1ZlcnNpb24oKSxcclxuICAgICAgICAgIG1lc3NhZ2U6IGBTdWNjZXNzZnVsbHkgdXBkYXRlZCBIaWdoY2hhcnRzIHRvIHZlcnNpb246ICR7bmV3VmVyc2lvbn0uYFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIE5vIHZlcnNpb24gc3BlY2lmaWVkXHJcbiAgICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKCdbdmVyc2lvbl0gTm8gbmV3IHZlcnNpb24gc3VwcGxpZWQuJywgNDAwKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIG5leHQoZXJyb3IpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBBIG1vZHVsZSB0aGF0IHNldHMgdXAgYW5kIG1hbmFnZXMgSFRUUCBhbmQgSFRUUFMgc2VydmVyc1xyXG4gKiBmb3IgdGhlIEhpZ2hjaGFydHMgRXhwb3J0IFNlcnZlci4gSXQgaGFuZGxlcyBzZXJ2ZXIgaW5pdGlhbGl6YXRpb24sXHJcbiAqIGNvbmZpZ3VyYXRpb24sIGVycm9yIGhhbmRsaW5nLCBtaWRkbGV3YXJlIHNldHVwLCByb3V0ZSBkZWZpbml0aW9uLCBhbmQgcmF0ZVxyXG4gKiBsaW1pdGluZy4gVGhlIG1vZHVsZSBleHBvcnRzIGZ1bmN0aW9ucyB0byBzdGFydCwgc3RvcCwgYW5kIG1hbmFnZSBzZXJ2ZXJcclxuICogaW5zdGFuY2VzLCBhcyB3ZWxsIGFzIHV0aWxpdHkgZnVuY3Rpb25zIGZvciBkZWZpbmluZyByb3V0ZXMgYW5kIGF0dGFjaGluZ1xyXG4gKiBtaWRkbGV3YXJlcy5cclxuICovXHJcblxyXG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7XHJcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcclxuXHJcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xyXG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcclxuaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XHJcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XHJcbmltcG9ydCBtdWx0ZXIgZnJvbSAnbXVsdGVyJztcclxuXHJcbmltcG9ydCB7IHVwZGF0ZU9wdGlvbnMgfSBmcm9tICcuLi9jb25maWcuanMnO1xyXG5pbXBvcnQgeyBsb2csIGxvZ1dpdGhTdGFjayB9IGZyb20gJy4uL2xvZ2dlci5qcyc7XHJcbmltcG9ydCB7IF9fZGlybmFtZSwgZ2V0QWJzb2x1dGVQYXRoIH0gZnJvbSAnLi4vdXRpbHMuanMnO1xyXG5cclxuaW1wb3J0IGVycm9yTWlkZGxld2FyZSBmcm9tICcuL21pZGRsZXdhcmVzL2Vycm9yLmpzJztcclxuaW1wb3J0IHJhdGVMaW1pdGluZ01pZGRsZXdhcmUgZnJvbSAnLi9taWRkbGV3YXJlcy9yYXRlTGltaXRpbmcuanMnO1xyXG5pbXBvcnQgdmFsaWRhdGlvbk1pZGRsZXdhcmUgZnJvbSAnLi9taWRkbGV3YXJlcy92YWxpZGF0aW9uLmpzJztcclxuXHJcbmltcG9ydCBleHBvcnRSb3V0ZXMgZnJvbSAnLi9yb3V0ZXMvZXhwb3J0LmpzJztcclxuaW1wb3J0IGhlYWx0aFJvdXRlcyBmcm9tICcuL3JvdXRlcy9oZWFsdGguanMnO1xyXG5pbXBvcnQgdWlSb3V0ZXMgZnJvbSAnLi9yb3V0ZXMvdWkuanMnO1xyXG5pbXBvcnQgdmVyc2lvbkNoYW5nZVJvdXRlcyBmcm9tICcuL3JvdXRlcy92ZXJzaW9uQ2hhbmdlLmpzJztcclxuXHJcbmltcG9ydCBFeHBvcnRFcnJvciBmcm9tICcuLi9lcnJvcnMvRXhwb3J0RXJyb3IuanMnO1xyXG5cclxuLy8gQXJyYXkgb2YgYW4gYWN0aXZlIHNlcnZlcnNcclxuY29uc3QgYWN0aXZlU2VydmVycyA9IG5ldyBNYXAoKTtcclxuXHJcbi8vIENyZWF0ZSBleHByZXNzIGFwcFxyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XHJcblxyXG4vKipcclxuICogU3RhcnRzIGFuIEhUVFAgYW5kL29yIEhUVFBTIHNlcnZlciBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgY29uZmlndXJhdGlvbi5cclxuICogVGhlIGBzZXJ2ZXJPcHRpb25zYCBvYmplY3QgY29udGFpbnMgc2VydmVyLXJlbGF0ZWQgcHJvcGVydGllcyAocmVmZXJcclxuICogdG8gdGhlIGBzZXJ2ZXJgIHNlY3Rpb24gaW4gdGhlIGAuL2xpYi9zY2hlbWFzL2NvbmZpZy5qc2AgZmlsZSBmb3IgZGV0YWlscykuXHJcbiAqXHJcbiAqIEBhc3luY1xyXG4gKiBAZnVuY3Rpb24gc3RhcnRTZXJ2ZXJcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHNlcnZlck9wdGlvbnMgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbmluZyBgc2VydmVyYFxyXG4gKiBvcHRpb25zLiBUaGlzIG9iamVjdCBtYXkgaW5jbHVkZSBhIHBhcnRpYWwgb3IgY29tcGxldGUgc2V0IG9mIHRoZSBgc2VydmVyYFxyXG4gKiBvcHRpb25zLiBJZiB0aGUgb3B0aW9ucyBhcmUgcGFydGlhbCwgbWlzc2luZyB2YWx1ZXMgd2lsbCBkZWZhdWx0XHJcbiAqIHRvIHRoZSBjdXJyZW50IGdsb2JhbCBjb25maWd1cmF0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgc2VydmVyIGlzIGVpdGhlclxyXG4gKiBub3QgZW5hYmxlZCBvciBubyB2YWxpZCBFeHByZXNzIGFwcCBpcyBmb3VuZCwgc2lnbmFsaW5nIHRoZSBlbmQgb2YgdGhlXHJcbiAqIGZ1bmN0aW9uJ3MgZXhlY3V0aW9uLlxyXG4gKlxyXG4gKiBAdGhyb3dzIHtFeHBvcnRFcnJvcn0gVGhyb3dzIGFuIGBFeHBvcnRFcnJvcmAgaWYgdGhlIHNlcnZlciBjYW5ub3RcclxuICogYmUgY29uZmlndXJlZCBhbmQgc3RhcnRlZC5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFydFNlcnZlcihzZXJ2ZXJPcHRpb25zKSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIFVwZGF0ZSB0aGUgaW5zdGFuY2Ugb3B0aW9ucyBvYmplY3RcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB1cGRhdGVPcHRpb25zKHtcclxuICAgICAgc2VydmVyOiBzZXJ2ZXJPcHRpb25zXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBVc2UgdmFsaWRhdGVkIG9wdGlvbnNcclxuICAgIHNlcnZlck9wdGlvbnMgPSBvcHRpb25zLnNlcnZlcjtcclxuXHJcbiAgICAvLyBTdG9wIGlmIG5vdCBlbmFibGVkXHJcbiAgICBpZiAoIXNlcnZlck9wdGlvbnMuZW5hYmxlIHx8ICFhcHApIHtcclxuICAgICAgdGhyb3cgbmV3IEV4cG9ydEVycm9yKFxyXG4gICAgICAgICdbc2VydmVyXSBTZXJ2ZXIgY2Fubm90IGJlIHN0YXJ0ZWQgKG5vdCBlbmFibGVkIG9yIG5vIGNvcnJlY3QgRXhwcmVzcyBhcHAgZm91bmQpLicsXHJcbiAgICAgICAgNTAwXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVG9vIGJpZyBsaW1pdHMgbGVhZCB0byB0aW1lb3V0cyBpbiB0aGUgZXhwb3J0IHByb2Nlc3Mgd2hlblxyXG4gICAgLy8gdGhlIHJhc3Rlcml6YXRpb24gdGltZW91dCBpcyBzZXQgdG9vIGxvd1xyXG4gICAgY29uc3QgdXBsb2FkTGltaXRCeXRlcyA9IHNlcnZlck9wdGlvbnMudXBsb2FkTGltaXQgKiAxMDI0ICogMTAyNDtcclxuXHJcbiAgICAvLyBNZW1vcnkgc3RvcmFnZSBmb3IgbXVsdGVyIHBhY2thZ2VcclxuICAgIGNvbnN0IHN0b3JhZ2UgPSBtdWx0ZXIubWVtb3J5U3RvcmFnZSgpO1xyXG5cclxuICAgIC8vIEVuYWJsZSBwYXJzaW5nIG9mIGZvcm0gZGF0YSAoZmlsZXMpIHdpdGggbXVsdGVyIHBhY2thZ2VcclxuICAgIGNvbnN0IHVwbG9hZCA9IG11bHRlcih7XHJcbiAgICAgIHN0b3JhZ2UsXHJcbiAgICAgIGxpbWl0czoge1xyXG4gICAgICAgIGZpZWxkU2l6ZTogdXBsb2FkTGltaXRCeXRlc1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBEaXNhYmxlIHRoZSBYLVBvd2VyZWQtQnkgaGVhZGVyXHJcbiAgICBhcHAuZGlzYWJsZSgneC1wb3dlcmVkLWJ5Jyk7XHJcblxyXG4gICAgLy8gRW5hYmxlIENPUlMgc3VwcG9ydFxyXG4gICAgYXBwLnVzZShcclxuICAgICAgY29ycyh7XHJcbiAgICAgICAgbWV0aG9kczogWydQT1NUJywgJ0dFVCcsICdPUFRJT05TJ11cclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgLy8gR2V0dGluZyBhIGxvdCBvZiBgUmFuZ2VOb3RTYXRpc2ZpYWJsZUVycm9yYCBleGNlcHRpb25zIChldmVuIHRob3VnaCB0aGlzXHJcbiAgICAvLyBpcyBhIGRlcHJlY2F0ZWQgb3B0aW9ucywgbGV0J3MgdHJ5IHRvIHNldCBpdCB0byBmYWxzZSlcclxuICAgIGFwcC51c2UoKHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0KSA9PiB7XHJcbiAgICAgIHJlc3BvbnNlLnNldCgnQWNjZXB0LVJhbmdlcycsICdub25lJyk7XHJcbiAgICAgIG5leHQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEVuYWJsZSBib2R5IHBhcnNlciBmb3IgSlNPTiBkYXRhXHJcbiAgICBhcHAudXNlKFxyXG4gICAgICBleHByZXNzLmpzb24oe1xyXG4gICAgICAgIGxpbWl0OiB1cGxvYWRMaW1pdEJ5dGVzXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIC8vIEVuYWJsZSBib2R5IHBhcnNlciBmb3IgVVJMLWVuY29kZWQgZm9ybSBkYXRhXHJcbiAgICBhcHAudXNlKFxyXG4gICAgICBleHByZXNzLnVybGVuY29kZWQoe1xyXG4gICAgICAgIGV4dGVuZGVkOiB0cnVlLFxyXG4gICAgICAgIGxpbWl0OiB1cGxvYWRMaW1pdEJ5dGVzXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIC8vIFVzZSBvbmx5IG5vbi1maWxlIG11bHRpcGFydCBmb3JtIGZpZWxkc1xyXG4gICAgYXBwLnVzZSh1cGxvYWQubm9uZSgpKTtcclxuXHJcbiAgICAvLyBTZXQgdXAgc3RhdGljIGZvbGRlcidzIHJvdXRlXHJcbiAgICBhcHAudXNlKGV4cHJlc3Muc3RhdGljKGpvaW4oX19kaXJuYW1lLCAncHVibGljJykpKTtcclxuXHJcbiAgICAvLyBMaXN0ZW4gSFRUUCBzZXJ2ZXJcclxuICAgIGlmICghc2VydmVyT3B0aW9ucy5zc2wuZm9yY2UpIHtcclxuICAgICAgLy8gTWFpbiBzZXJ2ZXIgaW5zdGFuY2UgKEhUVFApXHJcbiAgICAgIGNvbnN0IGh0dHBTZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihhcHApO1xyXG5cclxuICAgICAgLy8gQXR0YWNoIGVycm9yIGhhbmRsZXJzIGFuZCBsaXN0ZW4gdG8gdGhlIHNlcnZlclxyXG4gICAgICBfYXR0YWNoU2VydmVyRXJyb3JIYW5kbGVycyhodHRwU2VydmVyKTtcclxuXHJcbiAgICAgIC8vIExpc3RlblxyXG4gICAgICBodHRwU2VydmVyLmxpc3RlbihzZXJ2ZXJPcHRpb25zLnBvcnQsIHNlcnZlck9wdGlvbnMuaG9zdCwgKCkgPT4ge1xyXG4gICAgICAgIC8vIFNhdmUgdGhlIHJlZmVyZW5jZSB0byBIVFRQIHNlcnZlclxyXG4gICAgICAgIGFjdGl2ZVNlcnZlcnMuc2V0KHNlcnZlck9wdGlvbnMucG9ydCwgaHR0cFNlcnZlcik7XHJcblxyXG4gICAgICAgIGxvZyhcclxuICAgICAgICAgIDMsXHJcbiAgICAgICAgICBgW3NlcnZlcl0gU3RhcnRlZCBIVFRQIHNlcnZlciBvbiAke3NlcnZlck9wdGlvbnMuaG9zdH06JHtzZXJ2ZXJPcHRpb25zLnBvcnR9LmBcclxuICAgICAgICApO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBMaXN0ZW4gSFRUUFMgc2VydmVyXHJcbiAgICBpZiAoc2VydmVyT3B0aW9ucy5zc2wuZW5hYmxlKSB7XHJcbiAgICAgIC8vIFNldCB1cCBhbiBTU0wgc2VydmVyIGFsc29cclxuICAgICAgbGV0IGtleSwgY2VydDtcclxuXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgLy8gR2V0IHRoZSBTU0wga2V5XHJcbiAgICAgICAga2V5ID0gcmVhZEZpbGVTeW5jKFxyXG4gICAgICAgICAgam9pbihnZXRBYnNvbHV0ZVBhdGgoc2VydmVyT3B0aW9ucy5zc2wuY2VydFBhdGgpLCAnc2VydmVyLmtleScpLFxyXG4gICAgICAgICAgJ3V0ZjgnXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBTU0wgY2VydGlmaWNhdGVcclxuICAgICAgICBjZXJ0ID0gcmVhZEZpbGVTeW5jKFxyXG4gICAgICAgICAgam9pbihnZXRBYnNvbHV0ZVBhdGgoc2VydmVyT3B0aW9ucy5zc2wuY2VydFBhdGgpLCAnc2VydmVyLmNydCcpLFxyXG4gICAgICAgICAgJ3V0ZjgnXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBsb2coXHJcbiAgICAgICAgICAyLFxyXG4gICAgICAgICAgYFtzZXJ2ZXJdIFVuYWJsZSB0byBsb2FkIGtleS9jZXJ0aWZpY2F0ZSBmcm9tIHRoZSAnJHtzZXJ2ZXJPcHRpb25zLnNzbC5jZXJ0UGF0aH0nIHBhdGguIENvdWxkIG5vdCBydW4gc2VjdXJlZCBsYXllciBzZXJ2ZXIuYFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChrZXkgJiYgY2VydCkge1xyXG4gICAgICAgIC8vIE1haW4gc2VydmVyIGluc3RhbmNlIChIVFRQUylcclxuICAgICAgICBjb25zdCBodHRwc1NlcnZlciA9IGh0dHBzLmNyZWF0ZVNlcnZlcih7IGtleSwgY2VydCB9LCBhcHApO1xyXG5cclxuICAgICAgICAvLyBBdHRhY2ggZXJyb3IgaGFuZGxlcnMgYW5kIGxpc3RlbiB0byB0aGUgc2VydmVyXHJcbiAgICAgICAgX2F0dGFjaFNlcnZlckVycm9ySGFuZGxlcnMoaHR0cHNTZXJ2ZXIpO1xyXG5cclxuICAgICAgICAvLyBMaXN0ZW5cclxuICAgICAgICBodHRwc1NlcnZlci5saXN0ZW4oc2VydmVyT3B0aW9ucy5zc2wucG9ydCwgc2VydmVyT3B0aW9ucy5ob3N0LCAoKSA9PiB7XHJcbiAgICAgICAgICAvLyBTYXZlIHRoZSByZWZlcmVuY2UgdG8gSFRUUFMgc2VydmVyXHJcbiAgICAgICAgICBhY3RpdmVTZXJ2ZXJzLnNldChzZXJ2ZXJPcHRpb25zLnNzbC5wb3J0LCBodHRwc1NlcnZlcik7XHJcblxyXG4gICAgICAgICAgbG9nKFxyXG4gICAgICAgICAgICAzLFxyXG4gICAgICAgICAgICBgW3NlcnZlcl0gU3RhcnRlZCBIVFRQUyBzZXJ2ZXIgb24gJHtzZXJ2ZXJPcHRpb25zLmhvc3R9OiR7c2VydmVyT3B0aW9ucy5zc2wucG9ydH0uYFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFNldCB1cCB0aGUgcmF0ZSBsaW1pdGVyXHJcbiAgICByYXRlTGltaXRpbmdNaWRkbGV3YXJlKGFwcCwgc2VydmVyT3B0aW9ucy5yYXRlTGltaXRpbmcpO1xyXG5cclxuICAgIC8vIFNldCB1cCB0aGUgdmFsaWRhdGlvbiBoYW5kbGVyXHJcbiAgICB2YWxpZGF0aW9uTWlkZGxld2FyZShhcHApO1xyXG5cclxuICAgIC8vIFNldCB1cCByb3V0ZXNcclxuICAgIGV4cG9ydFJvdXRlcyhhcHApO1xyXG4gICAgaGVhbHRoUm91dGVzKGFwcCk7XHJcbiAgICB1aVJvdXRlcyhhcHApO1xyXG4gICAgdmVyc2lvbkNoYW5nZVJvdXRlcyhhcHApO1xyXG5cclxuICAgIC8vIFNldCB1cCB0aGUgY2VudHJhbGl6ZWQgZXJyb3IgaGFuZGxlclxyXG4gICAgZXJyb3JNaWRkbGV3YXJlKGFwcCk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHRocm93IG5ldyBFeHBvcnRFcnJvcihcclxuICAgICAgJ1tzZXJ2ZXJdIENvdWxkIG5vdCBjb25maWd1cmUgYW5kIHN0YXJ0IHRoZSBzZXJ2ZXIuJyxcclxuICAgICAgNTAwXHJcbiAgICApLnNldEVycm9yKGVycm9yKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbG9zZXMgYWxsIHNlcnZlcnMgYXNzb2NpYXRlZCB3aXRoIEV4cHJlc3MgYXBwIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gY2xvc2VTZXJ2ZXJzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VTZXJ2ZXJzKCkge1xyXG4gIC8vIENoZWNrIGlmIHRoZXJlIGFyZSBzZXJ2ZXJzIHdvcmtpbmdcclxuICBpZiAoYWN0aXZlU2VydmVycy5zaXplID4gMCkge1xyXG4gICAgbG9nKDQsIGBbc2VydmVyXSBDbG9zaW5nIGFsbCBzZXJ2ZXJzLmApO1xyXG5cclxuICAgIC8vIENsb3NlIGVhY2ggb25lIG9mIHNlcnZlcnNcclxuICAgIGZvciAoY29uc3QgW3BvcnQsIHNlcnZlcl0gb2YgYWN0aXZlU2VydmVycykge1xyXG4gICAgICBzZXJ2ZXIuY2xvc2UoKCkgPT4ge1xyXG4gICAgICAgIGFjdGl2ZVNlcnZlcnMuZGVsZXRlKHBvcnQpO1xyXG4gICAgICAgIGxvZyg0LCBgW3NlcnZlcl0gQ2xvc2VkIHNlcnZlciBvbiBwb3J0OiAke3BvcnR9LmApO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgYWxsIHNlcnZlcnMgYXNzb2NpYXRlZCB3aXRoIEV4cHJlc3MgYXBwIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAZnVuY3Rpb24gZ2V0U2VydmVyc1xyXG4gKlxyXG4gKiBAcmV0dXJucyB7QXJyYXkuPE9iamVjdD59IFNlcnZlcnMgYXNzb2NpYXRlZCB3aXRoIEV4cHJlc3MgYXBwIGluc3RhbmNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlcnZlcnMoKSB7XHJcbiAgcmV0dXJuIGFjdGl2ZVNlcnZlcnM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIEV4cHJlc3MgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBnZXRFeHByZXNzXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtFeHByZXNzfSBUaGUgRXhwcmVzcyBpbnN0YW5jZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHByZXNzKCkge1xyXG4gIHJldHVybiBleHByZXNzO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBFeHByZXNzIGFwcCBpbnN0YW5jZS5cclxuICpcclxuICogQGZ1bmN0aW9uIGdldEFwcFxyXG4gKlxyXG4gKiBAcmV0dXJucyB7RXhwcmVzc30gVGhlIEV4cHJlc3MgYXBwIGluc3RhbmNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFwcCgpIHtcclxuICByZXR1cm4gYXBwO1xyXG59XHJcblxyXG4vKipcclxuICogRW5hYmxlIHJhdGUgbGltaXRpbmcgZm9yIHRoZSBzZXJ2ZXIuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBlbmFibGVSYXRlTGltaXRpbmdcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHJhdGVMaW1pdGluZ09wdGlvbnMgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbmluZ1xyXG4gKiBgcmF0ZUxpbWl0aW5nYCBvcHRpb25zLiBUaGlzIG9iamVjdCBtYXkgaW5jbHVkZSBhIHBhcnRpYWwgb3IgY29tcGxldGUgc2V0XHJcbiAqIG9mIHRoZSBgcmF0ZUxpbWl0aW5nYCBvcHRpb25zLiBJZiB0aGUgb3B0aW9ucyBhcmUgcGFydGlhbCwgbWlzc2luZyB2YWx1ZXNcclxuICogd2lsbCBkZWZhdWx0IHRvIHRoZSBjdXJyZW50IGdsb2JhbCBjb25maWd1cmF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZVJhdGVMaW1pdGluZyhyYXRlTGltaXRpbmdPcHRpb25zKSB7XHJcbiAgLy8gVXBkYXRlIHRoZSBpbnN0YW5jZSBvcHRpb25zIG9iamVjdFxyXG4gIGNvbnN0IG9wdGlvbnMgPSB1cGRhdGVPcHRpb25zKHtcclxuICAgIHNlcnZlcjoge1xyXG4gICAgICByYXRlTGltaXRpbmc6IHJhdGVMaW1pdGluZ09wdGlvbnNcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy8gU2V0IHRoZSByYXRlIGxpbWl0aW5nIG9wdGlvbnNcclxuICByYXRlTGltaXRpbmdNaWRkbGV3YXJlKGFwcCwgb3B0aW9ucy5zZXJ2ZXIucmF0ZUxpbWl0aW5nT3B0aW9ucyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBcHBseSBtaWRkbGV3YXJlKHMpIHRvIGEgc3BlY2lmaWMgcGF0aC5cclxuICpcclxuICogQGZ1bmN0aW9uIHVzZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHdoaWNoIHRoZSBtaWRkbGV3YXJlKHMpIHNob3VsZCBiZSBhcHBsaWVkLlxyXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyAtIFRoZSBtaWRkbGV3YXJlIGZ1bmN0aW9uKHMpIHRvIGJlIGFwcGxpZWQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlKHBhdGgsIC4uLm1pZGRsZXdhcmVzKSB7XHJcbiAgYXBwLnVzZShwYXRoLCAuLi5taWRkbGV3YXJlcyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdXAgYSByb3V0ZSB3aXRoIEdFVCBtZXRob2QgYW5kIGFwcGx5IG1pZGRsZXdhcmUocykuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBnZXRcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCB0byB3aGljaCB0aGUgbWlkZGxld2FyZShzKSBzaG91bGQgYmUgYXBwbGllZC5cclxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgLSBUaGUgbWlkZGxld2FyZSBmdW5jdGlvbihzKSB0byBiZSBhcHBsaWVkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldChwYXRoLCAuLi5taWRkbGV3YXJlcykge1xyXG4gIGFwcC5nZXQocGF0aCwgLi4ubWlkZGxld2FyZXMpO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IHVwIGEgcm91dGUgd2l0aCBQT1NUIG1ldGhvZCBhbmQgYXBwbHkgbWlkZGxld2FyZShzKS5cclxuICpcclxuICogQGZ1bmN0aW9uIHBvc3RcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCB0byB3aGljaCB0aGUgbWlkZGxld2FyZShzKSBzaG91bGQgYmUgYXBwbGllZC5cclxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgLSBUaGUgbWlkZGxld2FyZSBmdW5jdGlvbihzKSB0byBiZSBhcHBsaWVkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBvc3QocGF0aCwgLi4ubWlkZGxld2FyZXMpIHtcclxuICBhcHAucG9zdChwYXRoLCAuLi5taWRkbGV3YXJlcyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBdHRhY2ggZXJyb3IgaGFuZGxlcnMgdG8gdGhlIHNlcnZlci5cclxuICpcclxuICogQGZ1bmN0aW9uIF9hdHRhY2hTZXJ2ZXJFcnJvckhhbmRsZXJzXHJcbiAqXHJcbiAqIEBwYXJhbSB7KGh0dHAuU2VydmVyfGh0dHBzLlNlcnZlcil9IHNlcnZlciAtIFRoZSBIVFRQL0hUVFBTIHNlcnZlciBpbnN0YW5jZS5cclxuICovXHJcbmZ1bmN0aW9uIF9hdHRhY2hTZXJ2ZXJFcnJvckhhbmRsZXJzKHNlcnZlcikge1xyXG4gIHNlcnZlci5vbignY2xpZW50RXJyb3InLCAoZXJyb3IsIHNvY2tldCkgPT4ge1xyXG4gICAgbG9nV2l0aFN0YWNrKFxyXG4gICAgICAxLFxyXG4gICAgICBlcnJvcixcclxuICAgICAgYFtzZXJ2ZXJdIENsaWVudCBlcnJvcjogJHtlcnJvci5tZXNzYWdlfSwgZGVzdHJveWluZyBzb2NrZXQuYFxyXG4gICAgKTtcclxuICAgIHNvY2tldC5kZXN0cm95KCk7XHJcbiAgfSk7XHJcblxyXG4gIHNlcnZlci5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcclxuICAgIGxvZ1dpdGhTdGFjaygxLCBlcnJvciwgYFtzZXJ2ZXJdIFNlcnZlciBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gIH0pO1xyXG5cclxuICBzZXJ2ZXIub24oJ2Nvbm5lY3Rpb24nLCAoc29ja2V0KSA9PiB7XHJcbiAgICBzb2NrZXQub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XHJcbiAgICAgIGxvZ1dpdGhTdGFjaygxLCBlcnJvciwgYFtzZXJ2ZXJdIFNvY2tldCBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBzdGFydFNlcnZlcixcclxuICBjbG9zZVNlcnZlcnMsXHJcbiAgZ2V0U2VydmVycyxcclxuICBnZXRFeHByZXNzLFxyXG4gIGdldEFwcCxcclxuICBlbmFibGVSYXRlTGltaXRpbmcsXHJcbiAgdXNlLFxyXG4gIGdldCxcclxuICBwb3N0XHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBIYW5kbGVzIGdyYWNlZnVsIHNodXRkb3duIG9mIHRoZSBIaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXIsIGVuc3VyaW5nXHJcbiAqIHByb3BlciBjbGVhbnVwIG9mIHJlc291cmNlcyBzdWNoIGFzIGJyb3dzZXIsIHBhZ2VzLCBzZXJ2ZXJzLCBhbmQgdGltZXJzLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGtpbGxQb29sIH0gZnJvbSAnLi9wb29sLmpzJztcclxuaW1wb3J0IHsgY2xlYXJBbGxUaW1lcnMgfSBmcm9tICcuL3RpbWVyLmpzJztcclxuXHJcbmltcG9ydCB7IGNsb3NlU2VydmVycyB9IGZyb20gJy4vc2VydmVyL3NlcnZlci5qcyc7XHJcblxyXG4vKipcclxuICogUGVyZm9ybXMgY2xlYW51cCBvcGVyYXRpb25zIHRvIGVuc3VyZSBhIGdyYWNlZnVsIHNodXRkb3duIG9mIHRoZSBwcm9jZXNzLlxyXG4gKiBUaGlzIGluY2x1ZGVzIGNsZWFyaW5nIGFsbCByZWdpc3RlcmVkIHRpbWVvdXRzL2ludGVydmFscywgY2xvc2luZyBhY3RpdmVcclxuICogc2VydmVycywgdGVybWluYXRpbmcgcmVzb3VyY2VzIChwYWdlcykgb2YgdGhlIHBvb2wsIHBvb2wgaXRzZWxmLCBhbmQgY2xvc2luZ1xyXG4gKiB0aGUgYnJvd3Nlci5cclxuICpcclxuICogQGZ1bmN0aW9uIHNodXRkb3duQ2xlYW5VcFxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gW2V4aXRDb2RlPTBdIC0gVGhlIGV4aXQgY29kZSB0byB1c2Ugd2l0aCBgcHJvY2Vzcy5leGl0KClgLlxyXG4gKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgMGAuXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2h1dGRvd25DbGVhblVwKGV4aXRDb2RlID0gMCkge1xyXG4gIC8vIEF3YWl0IGZyZWVpbmcgYWxsIHJlc291cmNlc1xyXG4gIGF3YWl0IFByb21pc2UuYWxsU2V0dGxlZChbXHJcbiAgICAvLyBDbGVhciBhbGwgb25nb2luZyBpbnRlcnZhbHNcclxuICAgIGNsZWFyQWxsVGltZXJzKCksXHJcblxyXG4gICAgLy8gR2V0IGF2YWlsYWJsZSBzZXJ2ZXIgaW5zdGFuY2VzIChIVFRQL0hUVFBTKSBhbmQgY2xvc2UgdGhlbVxyXG4gICAgY2xvc2VTZXJ2ZXJzKCksXHJcblxyXG4gICAgLy8gQ2xvc2UgYW4gYWN0aXZlIHBvb2wgYWxvbmcgd2l0aCBpdHMgd29ya2VycyBhbmQgdGhlIGJyb3dzZXIgaW5zdGFuY2VcclxuICAgIGtpbGxQb29sKClcclxuICBdKTtcclxuXHJcbiAgLy8gRXhpdCBwcm9jZXNzIHdpdGggYSBjb3JyZWN0IGNvZGVcclxuICBwcm9jZXNzLmV4aXQoZXhpdENvZGUpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgc2h1dGRvd25DbGVhblVwXHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5IaWdoY2hhcnRzIEV4cG9ydCBTZXJ2ZXJcclxuXHJcbkNvcHlyaWdodCAoYykgMjAxNi0yMDI1LCBIaWdoc29mdFxyXG5cclxuTGljZW5jZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlLlxyXG5cclxuQWRkaXRpb25hbGx5IGEgdmFsaWQgSGlnaGNoYXJ0cyBsaWNlbnNlIGlzIHJlcXVpcmVkIGZvciB1c2UuXHJcblxyXG5TZWUgTElDRU5TRSBmaWxlIGluIHJvb3QgZm9yIGRldGFpbHMuXHJcblxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBvdmVydmlldyBDb3JlIG1vZHVsZSBmb3IgaW5pdGlhbGl6aW5nIGFuZCBtYW5hZ2luZyB0aGUgSGlnaGNoYXJ0cyBFeHBvcnRcclxuICogU2VydmVyLiBQcm92aWRlcyBmdW5jdGlvbmFsaXRpZXMgZm9yIGNvbmZpZ3VyaW5nIGV4cG9ydHMsIHNldHRpbmcgdXAgc2VydmVyXHJcbiAqIG9wZXJhdGlvbnMsIGxvZ2dpbmcsIHNjcmlwdHMgY2FjaGluZywgcmVzb3VyY2UgcG9vbGluZywgYW5kIGdyYWNlZnVsIHByb2Nlc3NcclxuICogY2xlYW51cC5cclxuICovXHJcblxyXG5pbXBvcnQgJ2NvbG9ycyc7XHJcblxyXG5pbXBvcnQgeyBjaGVja0FuZFVwZGF0ZUNhY2hlIH0gZnJvbSAnLi9jYWNoZS5qcyc7XHJcbmltcG9ydCB7XHJcbiAgc2luZ2xlRXhwb3J0LFxyXG4gIGJhdGNoRXhwb3J0LFxyXG4gIHN0YXJ0RXhwb3J0LFxyXG4gIHNldEFsbG93Q29kZUV4ZWN1dGlvblxyXG59IGZyb20gJy4vY2hhcnQuanMnO1xyXG5pbXBvcnQge1xyXG4gIGdldE9wdGlvbnMsXHJcbiAgdXBkYXRlT3B0aW9ucyxcclxuICBtYXBUb05ld09wdGlvbnMsXHJcbiAgdmFsaWRhdGVPcHRpb24sXHJcbiAgdmFsaWRhdGVPcHRpb25zXHJcbn0gZnJvbSAnLi9jb25maWcuanMnO1xyXG5pbXBvcnQge1xyXG4gIGxvZyxcclxuICBsb2dXaXRoU3RhY2ssXHJcbiAgbG9nWm9kSXNzdWVzLFxyXG4gIGluaXRMb2dnaW5nLFxyXG4gIGVuYWJsZUNvbnNvbGVMb2dnaW5nLFxyXG4gIGVuYWJsZUZpbGVMb2dnaW5nLFxyXG4gIHNldExvZ0xldmVsXHJcbn0gZnJvbSAnLi9sb2dnZXIuanMnO1xyXG5pbXBvcnQgeyBpbml0UG9vbCwga2lsbFBvb2wgfSBmcm9tICcuL3Bvb2wuanMnO1xyXG5pbXBvcnQgeyBzaHV0ZG93bkNsZWFuVXAgfSBmcm9tICcuL3Jlc291cmNlUmVsZWFzZS5qcyc7XHJcblxyXG5pbXBvcnQgc2VydmVyIGZyb20gJy4vc2VydmVyL3NlcnZlci5qcyc7XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZXMgdGhlIGV4cG9ydCBwcm9jZXNzLiBUYXNrcyBzdWNoIGFzIGNvbmZpZ3VyaW5nIGxvZ2dpbmcsIGNoZWNraW5nXHJcbiAqIHRoZSBjYWNoZSBhbmQgc291cmNlcywgYW5kIGluaXRpYWxpemluZyB0aGUgcmVzb3VyY2UgcG9vbCBvY2N1ciBkdXJpbmcgdGhpc1xyXG4gKiBzdGFnZS5cclxuICpcclxuICogVGhpcyBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgYXR0ZW1wdGluZyB0byBleHBvcnQgY2hhcnRzIG9yIHNldFxyXG4gKiB1cCBhIHNlcnZlci5cclxuICpcclxuICogQGFzeW5jXHJcbiAqIEBmdW5jdGlvbiBpbml0RXhwb3J0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbml0T3B0aW9ucyAtIFRoZSBgaW5pdE9wdGlvbnNgIG9iamVjdCwgd2hpY2ggbWF5XHJcbiAqIGJlIGEgcGFydGlhbCBvciBjb21wbGV0ZSBzZXQgb2Ygb3B0aW9ucy4gSWYgdGhlIG9wdGlvbnMgYXJlIHBhcnRpYWwsIG1pc3NpbmdcclxuICogdmFsdWVzIHdpbGwgZGVmYXVsdCB0byB0aGUgY3VycmVudCBnbG9iYWwgY29uZmlndXJhdGlvbi5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0RXhwb3J0KGluaXRPcHRpb25zKSB7XHJcbiAgLy8gSW5pdCwgdmFsaWRhdGUgYW5kIHVwZGF0ZSB0aGUgb3B0aW9ucyBvYmplY3RcclxuICBjb25zdCBvcHRpb25zID0gdXBkYXRlT3B0aW9ucyhpbml0T3B0aW9ucyk7XHJcblxyXG4gIC8vIFNldCB0aGUgYGFsbG93Q29kZUV4ZWN1dGlvbmAgcGVyIGV4cG9ydCBtb2R1bGUgc2NvcGVcclxuICBzZXRBbGxvd0NvZGVFeGVjdXRpb24ob3B0aW9ucy5jdXN0b21Mb2dpYy5hbGxvd0NvZGVFeGVjdXRpb24pO1xyXG5cclxuICAvLyBJbml0IHRoZSBsb2dnaW5nXHJcbiAgaW5pdExvZ2dpbmcob3B0aW9ucy5sb2dnaW5nKTtcclxuXHJcbiAgLy8gQXR0YWNoIHByb2Nlc3MnIGV4aXQgbGlzdGVuZXJzXHJcbiAgaWYgKG9wdGlvbnMub3RoZXIubGlzdGVuVG9Qcm9jZXNzRXhpdHMpIHtcclxuICAgIF9hdHRhY2hQcm9jZXNzRXhpdExpc3RlbmVycygpO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgY2FjaGUgbmVlZHMgdG8gYmUgdXBkYXRlZFxyXG4gIGF3YWl0IGNoZWNrQW5kVXBkYXRlQ2FjaGUob3B0aW9ucy5oaWdoY2hhcnRzLCBvcHRpb25zLnNlcnZlci5wcm94eSk7XHJcblxyXG4gIC8vIEluaXQgdGhlIHBvb2xcclxuICBhd2FpdCBpbml0UG9vbChvcHRpb25zLnBvb2wsIG9wdGlvbnMucHVwcGV0ZWVyLmFyZ3MpO1xyXG59XHJcblxyXG4vKipcclxuICogQXR0YWNoZXMgZXhpdCBsaXN0ZW5lcnMgdG8gdGhlIHByb2Nlc3MsIGVuc3VyaW5nIHByb3BlciBjbGVhbnVwIG9mIHJlc291cmNlc1xyXG4gKiBhbmQgdGVybWluYXRpb24gb24gZXhpdCBzaWduYWxzLiBIYW5kbGVzICdleGl0JywgJ1NJR0lOVCcsICdTSUdURVJNJ1xyXG4gKiBhbmQgJ3VuY2F1Z2h0RXhjZXB0aW9uJyBldmVudHMuXHJcbiAqXHJcbiAqIEBmdW5jdGlvbiBfYXR0YWNoUHJvY2Vzc0V4aXRMaXN0ZW5lcnNcclxuICovXHJcbmZ1bmN0aW9uIF9hdHRhY2hQcm9jZXNzRXhpdExpc3RlbmVycygpIHtcclxuICBsb2coMywgJ1twcm9jZXNzXSBBdHRhY2hpbmcgZXhpdCBsaXN0ZW5lcnMgdG8gdGhlIHByb2Nlc3MuJyk7XHJcblxyXG4gIC8vIEhhbmRsZXIgZm9yIHRoZSAnZXhpdCdcclxuICBwcm9jZXNzLm9uKCdleGl0JywgKGNvZGUpID0+IHtcclxuICAgIGxvZyg0LCBgW3Byb2Nlc3NdIFByb2Nlc3MgZXhpdGVkIHdpdGggY29kZSAke2NvZGV9LmApO1xyXG4gIH0pO1xyXG5cclxuICAvLyBIYW5kbGVyIGZvciB0aGUgJ1NJR0lOVCdcclxuICBwcm9jZXNzLm9uKCdTSUdJTlQnLCBhc3luYyAobmFtZSwgY29kZSkgPT4ge1xyXG4gICAgbG9nKDQsIGBbcHJvY2Vzc10gVGhlICR7bmFtZX0gZXZlbnQgd2l0aCBjb2RlOiAke2NvZGV9LmApO1xyXG4gICAgYXdhaXQgc2h1dGRvd25DbGVhblVwKCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIEhhbmRsZXIgZm9yIHRoZSAnU0lHVEVSTSdcclxuICBwcm9jZXNzLm9uKCdTSUdURVJNJywgYXN5bmMgKG5hbWUsIGNvZGUpID0+IHtcclxuICAgIGxvZyg0LCBgW3Byb2Nlc3NdIFRoZSAke25hbWV9IGV2ZW50IHdpdGggY29kZTogJHtjb2RlfS5gKTtcclxuICAgIGF3YWl0IHNodXRkb3duQ2xlYW5VcCgpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBIYW5kbGVyIGZvciB0aGUgJ1NJR0hVUCdcclxuICBwcm9jZXNzLm9uKCdTSUdIVVAnLCBhc3luYyAobmFtZSwgY29kZSkgPT4ge1xyXG4gICAgbG9nKDQsIGBbcHJvY2Vzc10gVGhlICR7bmFtZX0gZXZlbnQgd2l0aCBjb2RlOiAke2NvZGV9LmApO1xyXG4gICAgYXdhaXQgc2h1dGRvd25DbGVhblVwKCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIEhhbmRsZXIgZm9yIHRoZSAndW5jYXVnaHRFeGNlcHRpb24nXHJcbiAgcHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCBhc3luYyAoZXJyb3IsIG5hbWUpID0+IHtcclxuICAgIGxvZ1dpdGhTdGFjaygxLCBlcnJvciwgYFtwcm9jZXNzXSBUaGUgJHtuYW1lfSBlcnJvci5gKTtcclxuICAgIGF3YWl0IHNodXRkb3duQ2xlYW5VcCgxKTtcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIC8vIFNlcnZlclxyXG4gIC4uLnNlcnZlcixcclxuXHJcbiAgLy8gT3B0aW9uc1xyXG4gIGdldE9wdGlvbnMsXHJcbiAgdXBkYXRlT3B0aW9ucyxcclxuICBtYXBUb05ld09wdGlvbnMsXHJcblxyXG4gIC8vIFZhbGlkYXRpb25cclxuICB2YWxpZGF0ZU9wdGlvbixcclxuICB2YWxpZGF0ZU9wdGlvbnMsXHJcblxyXG4gIC8vIEV4cG9ydGluZ1xyXG4gIGluaXRFeHBvcnQsXHJcbiAgc2luZ2xlRXhwb3J0LFxyXG4gIGJhdGNoRXhwb3J0LFxyXG4gIHN0YXJ0RXhwb3J0LFxyXG5cclxuICAvLyBSZWxlYXNlXHJcbiAga2lsbFBvb2wsXHJcbiAgc2h1dGRvd25DbGVhblVwLFxyXG5cclxuICAvLyBMb2dzXHJcbiAgbG9nLFxyXG4gIGxvZ1dpdGhTdGFjayxcclxuICBsb2dab2RJc3N1ZXMsXHJcbiAgc2V0TG9nTGV2ZWw6IGZ1bmN0aW9uIChsZXZlbCkge1xyXG4gICAgLy8gVXBkYXRlIHRoZSBpbnN0YW5jZSBvcHRpb25zIG9iamVjdFxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHVwZGF0ZU9wdGlvbnMoe1xyXG4gICAgICBsb2dnaW5nOiB7XHJcbiAgICAgICAgbGV2ZWxcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ2FsbCB0aGUgZnVuY3Rpb25cclxuICAgIHNldExvZ0xldmVsKG9wdGlvbnMubG9nZ2luZy5sZXZlbCk7XHJcbiAgfSxcclxuICBlbmFibGVDb25zb2xlTG9nZ2luZzogZnVuY3Rpb24gKHRvQ29uc29sZSkge1xyXG4gICAgLy8gVXBkYXRlIHRoZSBpbnN0YW5jZSBvcHRpb25zIG9iamVjdFxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHVwZGF0ZU9wdGlvbnMoe1xyXG4gICAgICBsb2dnaW5nOiB7XHJcbiAgICAgICAgdG9Db25zb2xlXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENhbGwgdGhlIGZ1bmN0aW9uXHJcbiAgICBlbmFibGVDb25zb2xlTG9nZ2luZyhvcHRpb25zLmxvZ2dpbmcudG9Db25zb2xlKTtcclxuICB9LFxyXG4gIGVuYWJsZUZpbGVMb2dnaW5nOiBmdW5jdGlvbiAoZGVzdCwgZmlsZSwgdG9GaWxlKSB7XHJcbiAgICAvLyBVcGRhdGUgdGhlIGluc3RhbmNlIG9wdGlvbnMgb2JqZWN0XHJcbiAgICBjb25zdCBvcHRpb25zID0gdXBkYXRlT3B0aW9ucyh7XHJcbiAgICAgIGxvZ2dpbmc6IHtcclxuICAgICAgICBkZXN0LFxyXG4gICAgICAgIGZpbGUsXHJcbiAgICAgICAgdG9GaWxlXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENhbGwgdGhlIGZ1bmN0aW9uXHJcbiAgICBlbmFibGVGaWxlTG9nZ2luZyhcclxuICAgICAgb3B0aW9ucy5sb2dnaW5nLmRlc3QsXHJcbiAgICAgIG9wdGlvbnMubG9nZ2luZy5maWxlLFxyXG4gICAgICBvcHRpb25zLmxvZ2dpbmcudG9GaWxlXHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuIl0sIm5hbWVzIjpbIl9fZGlybmFtZSIsImZpbGVVUkxUb1BhdGgiLCJVUkwiLCJkb2N1bWVudCIsInJlcXVpcmUiLCJwYXRoVG9GaWxlVVJMIiwiX19maWxlbmFtZSIsImhyZWYiLCJfZG9jdW1lbnRDdXJyZW50U2NyaXB0IiwidGFnTmFtZSIsInRvVXBwZXJDYXNlIiwic3JjIiwiYmFzZVVSSSIsImRlZXBDb3B5Iiwib2JqQXJyIiwib2JqQXJyQ29weSIsIkFycmF5IiwiaXNBcnJheSIsImtleSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImZpeENvbnN0ciIsImNvbnN0ciIsImZpeGVkQ29uc3RyIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwiaW5jbHVkZXMiLCJmaXhPdXRmaWxlIiwidHlwZSIsIm91dGZpbGUiLCJnZXRBYnNvbHV0ZVBhdGgiLCJzcGxpdCIsInNoaWZ0IiwiZml4VHlwZSIsIm1pbWVUeXBlcyIsImZvcm1hdHMiLCJ2YWx1ZXMiLCJvdXRUeXBlIiwicG9wIiwiZmluZCIsInQiLCJwYXRoIiwiaXNBYnNvbHV0ZSIsIm5vcm1hbGl6ZSIsInJlc29sdmUiLCJnZXRCYXNlNjQiLCJpbnB1dCIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsImdldE5ld0RhdGUiLCJEYXRlIiwidHJpbSIsImdldE5ld0RhdGVUaW1lIiwiZ2V0VGltZSIsImlzT2JqZWN0IiwiaXRlbSIsImlzT2JqZWN0RW1wdHkiLCJrZXlzIiwibGVuZ3RoIiwiaXNQcml2YXRlUmFuZ2VVcmxGb3VuZCIsInNvbWUiLCJwYXR0ZXJuIiwidGVzdCIsIm1lYXN1cmVUaW1lIiwic3RhcnQiLCJwcm9jZXNzIiwiaHJ0aW1lIiwiYmlnaW50IiwiTnVtYmVyIiwicm91bmROdW1iZXIiLCJ2YWx1ZSIsInByZWNpc2lvbiIsIm11bHRpcGxpZXIiLCJNYXRoIiwicG93Iiwicm91bmQiLCJ3cmFwQXJvdW5kIiwiY3VzdG9tQ29kZSIsImFsbG93RmlsZVJlc291cmNlcyIsImlzQ2FsbGJhY2siLCJlbmRzV2l0aCIsInJlYWRGaWxlU3luYyIsInN0YXJ0c1dpdGgiLCJjb2xvcnMiLCJsb2dnaW5nIiwidG9Db25zb2xlIiwidG9GaWxlIiwicGF0aENyZWF0ZWQiLCJwYXRoVG9Mb2ciLCJsZXZlbHNEZXNjIiwidGl0bGUiLCJjb2xvciIsImxvZyIsImFyZ3MiLCJuZXdMZXZlbCIsInRleHRzIiwibGV2ZWwiLCJwcmVmaXgiLCJfbG9nVG9GaWxlIiwiY29uc29sZSIsImFwcGx5IiwidW5kZWZpbmVkIiwiY29uY2F0IiwibG9nV2l0aFN0YWNrIiwiZXJyb3IiLCJjdXN0b21NZXNzYWdlIiwibWFpbk1lc3NhZ2UiLCJtZXNzYWdlIiwic3RhY2tNZXNzYWdlIiwic3RhY2siLCJwdXNoIiwibG9nWm9kSXNzdWVzIiwiaXNzdWVzIiwibWFwIiwiaXNzdWUiLCJqb2luIiwiaW5pdExvZ2dpbmciLCJsb2dnaW5nT3B0aW9ucyIsImRlc3QiLCJmaWxlIiwic2V0TG9nTGV2ZWwiLCJlbmFibGVDb25zb2xlTG9nZ2luZyIsImVuYWJsZUZpbGVMb2dnaW5nIiwiaXNJbnRlZ2VyIiwiZXhpc3RzU3luYyIsIm1rZGlyU3luYyIsImFwcGVuZEZpbGUiLCJkZWZhdWx0Q29uZmlnIiwicHVwcGV0ZWVyIiwidHlwZXMiLCJlbnZMaW5rIiwiY2xpTmFtZSIsImRlc2NyaXB0aW9uIiwicHJvbXB0T3B0aW9ucyIsInNlcGFyYXRvciIsImhpZ2hjaGFydHMiLCJ2ZXJzaW9uIiwiY2RuVXJsIiwiZm9yY2VGZXRjaCIsImNhY2hlUGF0aCIsImNvcmVTY3JpcHRzIiwiaW5zdHJ1Y3Rpb25zIiwibW9kdWxlU2NyaXB0cyIsImluZGljYXRvclNjcmlwdHMiLCJjdXN0b21TY3JpcHRzIiwiZXhwb3J0IiwiaW5maWxlIiwiaW5zdHIiLCJvcHRpb25zIiwic3ZnIiwiYmF0Y2giLCJoaW50IiwiY2hvaWNlcyIsImI2NCIsIm5vRG93bmxvYWQiLCJoZWlnaHQiLCJ3aWR0aCIsInNjYWxlIiwiZGVmYXVsdEhlaWdodCIsImRlZmF1bHRXaWR0aCIsImRlZmF1bHRTY2FsZSIsIm1pbiIsIm1heCIsImdsb2JhbE9wdGlvbnMiLCJ0aGVtZU9wdGlvbnMiLCJyYXN0ZXJpemF0aW9uVGltZW91dCIsImN1c3RvbUxvZ2ljIiwiYWxsb3dDb2RlRXhlY3V0aW9uIiwiY2FsbGJhY2siLCJyZXNvdXJjZXMiLCJsb2FkQ29uZmlnIiwibGVnYWN5TmFtZSIsImNyZWF0ZUNvbmZpZyIsInNlcnZlciIsImVuYWJsZSIsImhvc3QiLCJwb3J0IiwidXBsb2FkTGltaXQiLCJiZW5jaG1hcmtpbmciLCJwcm94eSIsInRpbWVvdXQiLCJyYXRlTGltaXRpbmciLCJtYXhSZXF1ZXN0cyIsIndpbmRvdyIsImRlbGF5IiwidHJ1c3RQcm94eSIsInNraXBLZXkiLCJza2lwVG9rZW4iLCJzc2wiLCJmb3JjZSIsImNlcnRQYXRoIiwicG9vbCIsIm1pbldvcmtlcnMiLCJtYXhXb3JrZXJzIiwid29ya0xpbWl0IiwiYWNxdWlyZVRpbWVvdXQiLCJjcmVhdGVUaW1lb3V0IiwiZGVzdHJveVRpbWVvdXQiLCJpZGxlVGltZW91dCIsImNyZWF0ZVJldHJ5SW50ZXJ2YWwiLCJyZWFwZXJJbnRlcnZhbCIsInVpIiwicm91dGUiLCJvdGhlciIsIm5vZGVFbnYiLCJsaXN0ZW5Ub1Byb2Nlc3NFeGl0cyIsIm5vTG9nbyIsImhhcmRSZXNldFBhZ2UiLCJicm93c2VyU2hlbGxNb2RlIiwidmFsaWRhdGlvbiIsImRlYnVnIiwiaGVhZGxlc3MiLCJkZXZ0b29scyIsImxpc3RlblRvQ29uc29sZSIsImR1bXBpbyIsInNsb3dNbyIsImRlYnVnZ2luZ1BvcnQiLCJuZXN0ZWRQcm9wcyIsIl9jcmVhdGVOZXN0ZWRQcm9wcyIsImFic29sdXRlUHJvcHMiLCJfY3JlYXRlQWJzb2x1dGVQcm9wcyIsImNvbmZpZyIsInByb3BDaGFpbiIsImZvckVhY2giLCJlbnRyeSIsInN1YnN0cmluZyIsImRvdGVudiIsInoiLCJzZXRFcnJvck1hcCIsIl9jdXN0b21FcnJvck1hcCIsInYiLCJib29sZWFuIiwic3RyaWN0Q2hlY2siLCJ1bmlvbiIsImVudW0iLCJ0cmFuc2Zvcm0iLCJudWxsYWJsZSIsInN0cmluZyIsInJlZmluZSIsInBhcmFtcyIsImVycm9yTWVzc2FnZSIsInN0cmluZ0FycmF5IiwiZmlsdGVyQ2FsbGJhY2siLCJhcnJheVNjaGVtYSIsImFycmF5Iiwic3RyaW5nU2NoZW1hIiwic2xpY2UiLCJ0cmFuc2Zvcm1DYWxsYmFjayIsImZpbHRlciIsInBvc2l0aXZlTnVtIiwibnVtYmVyIiwicG9zaXRpdmUiLCJpc05hTiIsIm5vbk5lZ2F0aXZlTnVtIiwibm9ubmVnYXRpdmUiLCJwcmVmaXhlcyIsImNoYXJ0Q29uZmlnIiwib2JqZWN0IiwicGFzc3Rocm91Z2giLCJhZGRpdGlvbmFsT3B0aW9ucyIsInZhbGlkYXRvcnMiLCJhZG1pblRva2VuIiwiaW5kZXhPZiIsImd0ZSIsImx0ZSIsInRoaXMiLCJvYmplY3RTY2hlbWEiLCJqcyIsImNzcyIsImZpbGVzIiwicGFydGlhbCIsInN0cmluZ1NjaGVtYTEiLCJzdHJpbmdTY2hlbWEyIiwiZW5hYmxlU2VydmVyIiwic2VydmVyQmVuY2htYXJraW5nIiwicHJveHlIb3N0IiwicHJveHlQb3J0IiwicHJveHlUaW1lb3V0IiwiZW5hYmxlUmF0ZUxpbWl0aW5nIiwiZW5hYmxlU3NsIiwic3NsRm9yY2UiLCJzc2xQb3J0Iiwic3NsQ2VydFBhdGgiLCJwb29sQmVuY2htYXJraW5nIiwicmVzb3VyY2VzSW50ZXJ2YWwiLCJsb2dMZXZlbCIsImludCIsImxvZ0ZpbGUiLCJsb2dEZXN0IiwibG9nVG9Db25zb2xlIiwibG9nVG9GaWxlIiwiZW5hYmxlVWkiLCJ1aVJvdXRlIiwiZW5hYmxlRGVidWciLCJyZXF1ZXN0SWQiLCJ1dWlkIiwiUHVwcGV0ZWVyU2NoZW1hIiwiSGlnaGNoYXJ0c1NjaGVtYSIsIkV4cG9ydFNjaGVtYSIsIkN1c3RvbUxvZ2ljU2NoZW1hIiwiUHJveHlTY2hlbWEiLCJSYXRlTGltaXRpbmdTY2hlbWEiLCJTc2xTY2hlbWEiLCJTZXJ2ZXJTY2hlbWEiLCJvcHRpb25hbCIsIlBvb2xTY2hlbWEiLCJMb2dnaW5nU2NoZW1hIiwiVWlTY2hlbWEiLCJPdGhlclNjaGVtYSIsIkRlYnVnU2NoZW1hIiwiU3RyaWN0Q29uZmlnU2NoZW1hIiwiTG9vc2VDb25maWdTY2hlbWEiLCJFbnZTY2hlbWEiLCJQVVBQRVRFRVJfQVJHUyIsIkhJR0hDSEFSVFNfVkVSU0lPTiIsIkhJR0hDSEFSVFNfQ0ROX1VSTCIsIkhJR0hDSEFSVFNfRk9SQ0VfRkVUQ0giLCJISUdIQ0hBUlRTX0NBQ0hFX1BBVEgiLCJISUdIQ0hBUlRTX0FETUlOX1RPS0VOIiwiSElHSENIQVJUU19DT1JFX1NDUklQVFMiLCJISUdIQ0hBUlRTX01PRFVMRV9TQ1JJUFRTIiwiSElHSENIQVJUU19JTkRJQ0FUT1JfU0NSSVBUUyIsIkhJR0hDSEFSVFNfQ1VTVE9NX1NDUklQVFMiLCJFWFBPUlRfSU5GSUxFIiwiRVhQT1JUX0lOU1RSIiwiRVhQT1JUX09QVElPTlMiLCJFWFBPUlRfU1ZHIiwiRVhQT1JUX0JBVENIIiwiRVhQT1JUX09VVEZJTEUiLCJFWFBPUlRfVFlQRSIsIkVYUE9SVF9DT05TVFIiLCJFWFBPUlRfQjY0IiwiRVhQT1JUX05PX0RPV05MT0FEIiwiRVhQT1JUX0hFSUdIVCIsIkVYUE9SVF9XSURUSCIsIkVYUE9SVF9TQ0FMRSIsIkVYUE9SVF9ERUZBVUxUX0hFSUdIVCIsIkVYUE9SVF9ERUZBVUxUX1dJRFRIIiwiRVhQT1JUX0RFRkFVTFRfU0NBTEUiLCJFWFBPUlRfR0xPQkFMX09QVElPTlMiLCJFWFBPUlRfVEhFTUVfT1BUSU9OUyIsIkVYUE9SVF9SQVNURVJJWkFUSU9OX1RJTUVPVVQiLCJDVVNUT01fTE9HSUNfQUxMT1dfQ09ERV9FWEVDVVRJT04iLCJDVVNUT01fTE9HSUNfQUxMT1dfRklMRV9SRVNPVVJDRVMiLCJDVVNUT01fTE9HSUNfQ1VTVE9NX0NPREUiLCJDVVNUT01fTE9HSUNfQ0FMTEJBQ0siLCJDVVNUT01fTE9HSUNfUkVTT1VSQ0VTIiwiQ1VTVE9NX0xPR0lDX0xPQURfQ09ORklHIiwiQ1VTVE9NX0xPR0lDX0NSRUFURV9DT05GSUciLCJTRVJWRVJfRU5BQkxFIiwiU0VSVkVSX0hPU1QiLCJTRVJWRVJfUE9SVCIsIlNFUlZFUl9VUExPQURfTElNSVQiLCJTRVJWRVJfQkVOQ0hNQVJLSU5HIiwiU0VSVkVSX1BST1hZX0hPU1QiLCJTRVJWRVJfUFJPWFlfUE9SVCIsIlNFUlZFUl9QUk9YWV9USU1FT1VUIiwiU0VSVkVSX1JBVEVfTElNSVRJTkdfRU5BQkxFIiwiU0VSVkVSX1JBVEVfTElNSVRJTkdfTUFYX1JFUVVFU1RTIiwiU0VSVkVSX1JBVEVfTElNSVRJTkdfV0lORE9XIiwiU0VSVkVSX1JBVEVfTElNSVRJTkdfREVMQVkiLCJTRVJWRVJfUkFURV9MSU1JVElOR19UUlVTVF9QUk9YWSIsIlNFUlZFUl9SQVRFX0xJTUlUSU5HX1NLSVBfS0VZIiwiU0VSVkVSX1JBVEVfTElNSVRJTkdfU0tJUF9UT0tFTiIsIlNFUlZFUl9TU0xfRU5BQkxFIiwiU0VSVkVSX1NTTF9GT1JDRSIsIlNFUlZFUl9TU0xfUE9SVCIsIlNFUlZFUl9TU0xfQ0VSVF9QQVRIIiwiUE9PTF9NSU5fV09SS0VSUyIsIlBPT0xfTUFYX1dPUktFUlMiLCJQT09MX1dPUktfTElNSVQiLCJQT09MX0FDUVVJUkVfVElNRU9VVCIsIlBPT0xfQ1JFQVRFX1RJTUVPVVQiLCJQT09MX0RFU1RST1lfVElNRU9VVCIsIlBPT0xfSURMRV9USU1FT1VUIiwiUE9PTF9DUkVBVEVfUkVUUllfSU5URVJWQUwiLCJQT09MX1JFQVBFUl9JTlRFUlZBTCIsIlBPT0xfQkVOQ0hNQVJLSU5HIiwiTE9HR0lOR19MRVZFTCIsIkxPR0dJTkdfRklMRSIsIkxPR0dJTkdfREVTVCIsIkxPR0dJTkdfVE9fQ09OU09MRSIsIkxPR0dJTkdfVE9fRklMRSIsIlVJX0VOQUJMRSIsIlVJX1JPVVRFIiwiT1RIRVJfTk9ERV9FTlYiLCJPVEhFUl9MSVNURU5fVE9fUFJPQ0VTU19FWElUUyIsIk9USEVSX05PX0xPR08iLCJPVEhFUl9IQVJEX1JFU0VUX1BBR0UiLCJPVEhFUl9CUk9XU0VSX1NIRUxMX01PREUiLCJPVEhFUl9WQUxJREFUSU9OIiwiREVCVUdfRU5BQkxFIiwiREVCVUdfSEVBRExFU1MiLCJERUJVR19ERVZUT09MUyIsIkRFQlVHX0xJU1RFTl9UT19DT05TT0xFIiwiREVCVUdfRFVNUElPIiwiREVCVUdfU0xPV19NTyIsIkRFQlVHX0RFQlVHR0lOR19QT1JUIiwiZW52cyIsInBhcnNlIiwiZW52Iiwic3RyaWN0VmFsaWRhdGUiLCJjb25maWdPcHRpb25zIiwibG9vc2VWYWxpZGF0ZSIsImNvbnRleHQiLCJwcm9wZXJ0eU5hbWUiLCJwcm9wZXJ0eUluZm8iLCJjb2RlIiwiWm9kSXNzdWVDb2RlIiwiaW52YWxpZF90eXBlIiwicmVjZWl2ZWQiLCJab2RQYXJzZWRUeXBlIiwiZGVmYXVsdEVycm9yIiwiY3VzdG9tIiwiZGF0YSIsImludmFsaWRfdW5pb24iLCJ1bmlvbkVycm9ycyIsImluZGV4IiwiRXhwb3J0RXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwic3RhdHVzQ29kZSIsInN1cGVyIiwic2V0U3RhdHVzIiwic2V0RXJyb3IiLCJuYW1lIiwiX2luaXRPcHRpb25zIiwiZ2V0T3B0aW9ucyIsImdldENvcHkiLCJ1cGRhdGVPcHRpb25zIiwibmV3T3B0aW9ucyIsIl9tZXJnZU9wdGlvbnMiLCJ2YWxpZGF0ZU9wdGlvbnMiLCJtYXBUb05ld09wdGlvbnMiLCJvbGRPcHRpb25zIiwiZW50cmllcyIsInByb3BlcnRpZXNDaGFpbiIsInJlZHVjZSIsIm9iaiIsInByb3AiLCJ2YWxpZGF0ZU9wdGlvbiIsImNvbmZpZ09wdGlvbiIsImlzQWxsb3dlZENvbmZpZyIsImFsbG93RnVuY3Rpb25zIiwib2JqZWN0Q29uZmlnIiwiZXZhbCIsIkpTT04iLCJzdHJpbmdpZmllZE9wdGlvbnMiLCJfb3B0aW9uc1N0cmluZ2lmeSIsInBhcnNlZE9wdGlvbnMiLCJfIiwib3JpZ2luYWxPcHRpb25zIiwic3RyaW5naWZ5RnVuY3Rpb25zIiwic3RyaW5naWZ5IiwicmVwbGFjZUFsbCIsImFzeW5jIiwiZmV0Y2giLCJ1cmwiLCJyZXF1ZXN0T3B0aW9ucyIsIlByb21pc2UiLCJyZWplY3QiLCJfZ2V0UHJvdG9jb2xNb2R1bGUiLCJnZXQiLCJyZXNwb25zZSIsInJlc3BvbnNlRGF0YSIsIm9uIiwiY2h1bmsiLCJ0ZXh0IiwiaHR0cHMiLCJodHRwIiwiY2FjaGUiLCJhY3RpdmVNYW5pZmVzdCIsInNvdXJjZXMiLCJoY1ZlcnNpb24iLCJjaGVja0FuZFVwZGF0ZUNhY2hlIiwiaGlnaGNoYXJ0c09wdGlvbnMiLCJzZXJ2ZXJQcm94eU9wdGlvbnMiLCJmZXRjaGVkTW9kdWxlcyIsImdldENhY2hlUGF0aCIsIm1hbmlmZXN0UGF0aCIsInNvdXJjZVBhdGgiLCJyZWN1cnNpdmUiLCJfdXBkYXRlQ2FjaGUiLCJyZXF1ZXN0VXBkYXRlIiwibWFuaWZlc3QiLCJtb2R1bGVzIiwibW9kdWxlTWFwIiwibSIsIm51bWJlck9mTW9kdWxlcyIsIm1vZHVsZU5hbWUiLCJleHRyYWN0VmVyc2lvbiIsIl9zYXZlQ29uZmlnVG9NYW5pZmVzdCIsImdldEhpZ2hjaGFydHNWZXJzaW9uIiwidXBkYXRlSGlnaGNoYXJ0c1ZlcnNpb24iLCJuZXdWZXJzaW9uIiwiY2FjaGVTb3VyY2VzIiwiZXh0cmFjdE1vZHVsZU5hbWUiLCJzY3JpcHRQYXRoIiwiX2ZldGNoQW5kUHJvY2Vzc1NjcmlwdCIsInNjcmlwdCIsInNob3VsZFRocm93RXJyb3IiLCJuZXdNYW5pZmVzdCIsIndyaXRlRmlsZVN5bmMiLCJfZmV0Y2hTY3JpcHRzIiwicHJveHlBZ2VudCIsIkh0dHBzUHJveHlBZ2VudCIsImFnZW50IiwiYWxsRmV0Y2hQcm9taXNlcyIsImFsbCIsImMiLCJpIiwic2V0dXBIaWdoY2hhcnRzIiwiSGlnaGNoYXJ0cyIsImFuaW1PYmplY3QiLCJkdXJhdGlvbiIsImNyZWF0ZUNoYXJ0IiwiZXhwb3J0T3B0aW9ucyIsImN1c3RvbUxvZ2ljT3B0aW9ucyIsInNldE9wdGlvbnMiLCJtZXJnZSIsIndyYXAiLCJzZXRPcHRpb25zT2JqIiwiaXNSZW5kZXJDb21wbGV0ZSIsIkNoYXJ0IiwicHJvY2VlZCIsInVzZXJPcHRpb25zIiwiY2IiLCJleHBvcnRpbmciLCJlbmFibGVkIiwicGxvdE9wdGlvbnMiLCJzZXJpZXMiLCJsYWJlbCIsInRvb2x0aXAiLCJhbmltYXRpb24iLCJvbkhpZ2hjaGFydHNSZW5kZXIiLCJhZGRFdmVudCIsIlNlcmllcyIsImNoYXJ0IiwiRnVuY3Rpb24iLCJmaW5hbE9wdGlvbnMiLCJmaW5hbENhbGxiYWNrIiwiZGVmYXVsdE9wdGlvbnMiLCJ0ZW1wbGF0ZSIsImJyb3dzZXIiLCJjcmVhdGVCcm93c2VyIiwicHVwcGV0ZWVyQXJncyIsImVuYWJsZWREZWJ1ZyIsImRlYnVnT3B0aW9ucyIsImxhdW5jaE9wdGlvbnMiLCJ1c2VyRGF0YURpciIsImhhbmRsZVNJR0lOVCIsImhhbmRsZVNJR1RFUk0iLCJoYW5kbGVTSUdIVVAiLCJ3YWl0Rm9ySW5pdGlhbFBhZ2UiLCJkZWZhdWx0Vmlld3BvcnQiLCJ0cnlDb3VudCIsIm9wZW4iLCJsYXVuY2giLCJzZXRUaW1lb3V0IiwiY2xvc2VCcm93c2VyIiwiY29ubmVjdGVkIiwiY2xvc2UiLCJuZXdQYWdlIiwicG9vbFJlc291cmNlIiwicGFnZSIsInNldENhY2hlRW5hYmxlZCIsIl9zZXRQYWdlQ29udGVudCIsIl9zZXRQYWdlRXZlbnRzIiwiaXNDbG9zZWQiLCJjbGVhclBhZ2UiLCJoYXJkUmVzZXQiLCJnb3RvIiwid2FpdFVudGlsIiwiZXZhbHVhdGUiLCJib2R5IiwiaW5uZXJIVE1MIiwiaWQiLCJ3b3JrQ291bnQiLCJhZGRQYWdlUmVzb3VyY2VzIiwiaW5qZWN0ZWRSZXNvdXJjZXMiLCJpbmplY3RlZEpzIiwiY29udGVudCIsImlzTG9jYWwiLCJqc1Jlc291cmNlIiwiYWRkU2NyaXB0VGFnIiwiaW5qZWN0ZWRDc3MiLCJjc3NJbXBvcnRzIiwibWF0Y2giLCJjc3NJbXBvcnRQYXRoIiwiY3NzUmVzb3VyY2UiLCJhZGRTdHlsZVRhZyIsImNsZWFyUGFnZVJlc291cmNlcyIsInJlc291cmNlIiwiZGlzcG9zZSIsIm9sZENoYXJ0cyIsImNoYXJ0cyIsIm9sZENoYXJ0IiwiZGVzdHJveSIsInNjcmlwdHNUb1JlbW92ZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic3R5bGVzVG9SZW1vdmUiLCJsaW5rc1RvUmVtb3ZlIiwiZWxlbWVudCIsInJlbW92ZSIsInNldENvbnRlbnQiLCJjc3NUZW1wbGF0ZSIsInN2Z1RlbXBsYXRlIiwicHVwcGV0ZWVyRXhwb3J0IiwiaXNTVkciLCJzaXplIiwic3ZnRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjaGFydEhlaWdodCIsImJhc2VWYWwiLCJjaGFydFdpZHRoIiwic3R5bGUiLCJ6b29tIiwibWFyZ2luIiwicGFyc2VGbG9hdCIsIngiLCJ5IiwiX2dldENsaXBSZWdpb24iLCJ2aWV3cG9ydEhlaWdodCIsImFicyIsImNlaWwiLCJ2aWV3cG9ydFdpZHRoIiwicmVzdWx0Iiwic2V0Vmlld3BvcnQiLCJkZXZpY2VTY2FsZUZhY3RvciIsIl9jcmVhdGVTVkciLCJfY3JlYXRlSW1hZ2UiLCJfY3JlYXRlUERGIiwiJGV2YWwiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0cnVuYyIsIm91dGVySFRNTCIsImNsaXAiLCJyYWNlIiwic2NyZWVuc2hvdCIsImVuY29kaW5nIiwiZnVsbFBhZ2UiLCJvcHRpbWl6ZUZvclNwZWVkIiwiY2FwdHVyZUJleW9uZFZpZXdwb3J0IiwicXVhbGl0eSIsIm9taXRCYWNrZ3JvdW5kIiwiX3Jlc29sdmUiLCJlbXVsYXRlTWVkaWFUeXBlIiwicGRmIiwicG9vbFN0YXRzIiwiZXhwb3J0c0F0dGVtcHRlZCIsImV4cG9ydHNQZXJmb3JtZWQiLCJleHBvcnRzRHJvcHBlZCIsImV4cG9ydHNGcm9tU3ZnIiwiZXhwb3J0c0Zyb21PcHRpb25zIiwiZXhwb3J0c0Zyb21TdmdBdHRlbXB0cyIsImV4cG9ydHNGcm9tT3B0aW9uc0F0dGVtcHRzIiwidGltZVNwZW50IiwidGltZVNwZW50QXZlcmFnZSIsImluaXRQb29sIiwicG9vbE9wdGlvbnMiLCJQb29sIiwiX2ZhY3RvcnkiLCJhY3F1aXJlVGltZW91dE1pbGxpcyIsImNyZWF0ZVRpbWVvdXRNaWxsaXMiLCJkZXN0cm95VGltZW91dE1pbGxpcyIsImlkbGVUaW1lb3V0TWlsbGlzIiwiY3JlYXRlUmV0cnlJbnRlcnZhbE1pbGxpcyIsInJlYXBJbnRlcnZhbE1pbGxpcyIsInByb3BhZ2F0ZUNyZWF0ZUVycm9yIiwiY2xlYXJTdGF0dXMiLCJfZXZlbnRJZCIsImluaXRpYWxSZXNvdXJjZXMiLCJhY3F1aXJlIiwicHJvbWlzZSIsInJlbGVhc2UiLCJraWxsUG9vbCIsIndvcmtlciIsInVzZWQiLCJkZXN0cm95ZWQiLCJwb3N0V29yayIsIndvcmtlckhhbmRsZSIsImdldFBvb2xJbmZvIiwiYWNxdWlyZUNvdW50ZXIiLCJ3b3JrU3RhcnQiLCJleHBvcnRDb3VudGVyIiwiZXhwb3J0VGltZSIsImdldFBvb2xTdGF0cyIsImdldFBvb2xJbmZvSlNPTiIsIm51bVVzZWQiLCJhdmFpbGFibGUiLCJudW1GcmVlIiwiYWxsQ3JlYXRlZCIsInBlbmRpbmdBY3F1aXJlcyIsIm51bVBlbmRpbmdBY3F1aXJlcyIsInBlbmRpbmdDcmVhdGVzIiwibnVtUGVuZGluZ0NyZWF0ZXMiLCJwZW5kaW5nVmFsaWRhdGlvbnMiLCJudW1QZW5kaW5nVmFsaWRhdGlvbnMiLCJwZW5kaW5nRGVzdHJveXMiLCJhYnNvbHV0ZUFsbCIsImNyZWF0ZSIsInJhbmRvbSIsInN0YXJ0RGF0ZSIsInZhbGlkYXRlIiwibWFpbkZyYW1lIiwiZGV0YWNoZWQiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJzYW5pdGl6ZSIsIkpTRE9NIiwiRE9NUHVyaWZ5IiwiQUREX1RBR1MiLCJzaW5nbGVFeHBvcnQiLCJzdGFydEV4cG9ydCIsImJhdGNoRXhwb3J0IiwiYmF0Y2hGdW5jdGlvbnMiLCJwYWlyIiwiYmF0Y2hSZXN1bHRzIiwiYWxsU2V0dGxlZCIsInJlYXNvbiIsImltYWdlT3B0aW9ucyIsImVuZENhbGxiYWNrIiwiZmlsZUNvbnRlbnQiLCJfZXhwb3J0RnJvbVN2ZyIsIl9leHBvcnRGcm9tT3B0aW9ucyIsImdldEFsbG93Q29kZUV4ZWN1dGlvbiIsInNldEFsbG93Q29kZUV4ZWN1dGlvbiIsImlucHV0VG9FeHBvcnQiLCJfcHJlcGFyZUV4cG9ydCIsIl9oYW5kbGVDdXN0b21Mb2dpYyIsIl9oYW5kbGVHbG9iYWxBbmRUaGVtZSIsIl9maW5kQ2hhcnRTaXplIiwib3B0aW9uc0NoYXJ0Iiwib3B0aW9uc0V4cG9ydGluZyIsImdsb2JhbE9wdGlvbnNDaGFydCIsImdsb2JhbE9wdGlvbnNFeHBvcnRpbmciLCJ0aGVtZU9wdGlvbnNDaGFydCIsInRoZW1lT3B0aW9uc0V4cG9ydGluZyIsInNvdXJjZUhlaWdodCIsInNvdXJjZVdpZHRoIiwicGFyYW0iLCJfaGFuZGxlUmVzb3VyY2VzIiwiYWxsb3dlZFByb3BzIiwiaGFuZGxlZFJlc291cmNlcyIsImNvcnJlY3RSZXNvdXJjZXMiLCJwcm9wTmFtZSIsIm9wdGlvbnNOYW1lIiwidGltZXJJZHMiLCJhZGRUaW1lciIsImNsZWFyQWxsVGltZXJzIiwiY2xlYXJJbnRlcnZhbCIsImNsZWFyVGltZW91dCIsImxvZ0Vycm9yTWlkZGxld2FyZSIsInJlcXVlc3QiLCJuZXh0IiwicmV0dXJuRXJyb3JNaWRkbGV3YXJlIiwic3RhdHVzIiwianNvbiIsImVycm9yTWlkZGxld2FyZSIsImFwcCIsInVzZSIsInJhdGVMaW1pdGluZ01pZGRsZXdhcmUiLCJyYXRlTGltaXRpbmdPcHRpb25zIiwicmF0ZU9wdGlvbnMiLCJsaW1pdGVyIiwicmF0ZUxpbWl0Iiwid2luZG93TXMiLCJsaW1pdCIsImRlbGF5TXMiLCJoYW5kbGVyIiwiZm9ybWF0Iiwic2VuZCIsImRlZmF1bHQiLCJza2lwIiwicXVlcnkiLCJhY2Nlc3NfdG9rZW4iLCJjb250ZW50VHlwZU1pZGRsZXdhcmUiLCJjb250ZW50VHlwZSIsImhlYWRlcnMiLCJyZXF1ZXN0Qm9keU1pZGRsZXdhcmUiLCJjb25uZWN0aW9uIiwicmVtb3RlQWRkcmVzcyIsInZhbGlkYXRlZE9wdGlvbnMiLCJmaWxlbmFtZSIsInZhbGlkYXRpb25NaWRkbGV3YXJlIiwicG9zdCIsInJldmVyc2VkTWltZSIsInBuZyIsImpwZWciLCJnaWYiLCJyZXF1ZXN0RXhwb3J0IiwicmVxdWVzdENvdW50ZXIiLCJjb25uZWN0aW9uQWJvcnRlZCIsInNvY2tldCIsImhhZEVycm9ycyIsImhlYWRlciIsImF0dGFjaG1lbnQiLCJleHBvcnRSb3V0ZXMiLCJzZXJ2ZXJTdGFydFRpbWUiLCJwYWNrYWdlRmlsZSIsInN1Y2Nlc3NSYXRlcyIsInJlY29yZEludGVydmFsIiwid2luZG93U2l6ZSIsIl9jYWxjdWxhdGVNb3ZpbmdBdmVyYWdlIiwiYSIsImIiLCJfc3RhcnRTdWNjZXNzUmF0ZSIsInNldEludGVydmFsIiwic3RhdHMiLCJzdWNjZXNzUmF0aW8iLCJoZWFsdGhSb3V0ZXMiLCJwZXJpb2QiLCJtb3ZpbmdBdmVyYWdlIiwiYm9vdFRpbWUiLCJ1cHRpbWUiLCJmbG9vciIsInNlcnZlclZlcnNpb24iLCJoaWdoY2hhcnRzVmVyc2lvbiIsImF2ZXJhZ2VFeHBvcnRUaW1lIiwiYXR0ZW1wdGVkRXhwb3J0cyIsInBlcmZvcm1lZEV4cG9ydHMiLCJmYWlsZWRFeHBvcnRzIiwic3VjZXNzUmF0aW8iLCJ0b0ZpeGVkIiwic3ZnRXhwb3J0cyIsImpzb25FeHBvcnRzIiwic3ZnRXhwb3J0c0F0dGVtcHRzIiwianNvbkV4cG9ydHNBdHRlbXB0cyIsInVpUm91dGVzIiwic2VuZEZpbGUiLCJhY2NlcHRSYW5nZXMiLCJ2ZXJzaW9uQ2hhbmdlUm91dGVzIiwidG9rZW4iLCJhY3RpdmVTZXJ2ZXJzIiwiTWFwIiwiZXhwcmVzcyIsInN0YXJ0U2VydmVyIiwic2VydmVyT3B0aW9ucyIsInVwbG9hZExpbWl0Qnl0ZXMiLCJzdG9yYWdlIiwibXVsdGVyIiwibWVtb3J5U3RvcmFnZSIsInVwbG9hZCIsImxpbWl0cyIsImZpZWxkU2l6ZSIsImRpc2FibGUiLCJjb3JzIiwibWV0aG9kcyIsInNldCIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsIm5vbmUiLCJzdGF0aWMiLCJodHRwU2VydmVyIiwiY3JlYXRlU2VydmVyIiwiX2F0dGFjaFNlcnZlckVycm9ySGFuZGxlcnMiLCJsaXN0ZW4iLCJjZXJ0IiwiaHR0cHNTZXJ2ZXIiLCJjbG9zZVNlcnZlcnMiLCJkZWxldGUiLCJnZXRTZXJ2ZXJzIiwiZ2V0RXhwcmVzcyIsImdldEFwcCIsIm1pZGRsZXdhcmVzIiwic2h1dGRvd25DbGVhblVwIiwiZXhpdENvZGUiLCJleGl0IiwiaW5pdEV4cG9ydCIsImluaXRPcHRpb25zIiwiX2F0dGFjaFByb2Nlc3NFeGl0TGlzdGVuZXJzIl0sIm1hcHBpbmdzIjoid2xCQTJCTyxNQUFNQSxZQUFZQyxJQUFhQSxjQUFDLElBQUlDLElBQUksT0FBUSxvQkFBQUMsU0FBQUMsUUFBQSxPQUFBQyxjQUFBQyxZQUFBQyxLQUFBQyx3QkFBQSxXQUFBQSx1QkFBQUMsUUFBQUMsZUFBQUYsdUJBQUFHLEtBQUEsSUFBQVQsSUFBQSxZQUFBQyxTQUFBUyxTQUFBTCxPQStCaEQsU0FBU00sU0FBU0MsR0FFdkIsR0FBZSxPQUFYQSxHQUFxQyxpQkFBWEEsRUFDNUIsT0FBT0EsRUFJVCxNQUFNQyxFQUFhQyxNQUFNQyxRQUFRSCxHQUFVLEdBQUssR0FHaEQsSUFBSyxNQUFNSSxLQUFPSixFQUNaSyxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLUixFQUFRSSxLQUMvQ0gsRUFBV0csR0FBT0wsU0FBU0MsRUFBT0ksS0FL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

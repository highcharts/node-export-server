"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),require("colors");var fs=require("fs"),path=require("path"),httpsProxyAgent=require("https-proxy-agent"),url=require("url"),dotenv=require("dotenv"),zod=require("zod"),http=require("http"),https=require("https"),tarn=require("tarn"),uuid=require("uuid"),puppeteer=require("puppeteer"),DOMPurify=require("dompurify"),jsdom=require("jsdom"),promises=require("fs/promises"),cors=require("cors"),express=require("express"),multer=require("multer"),rateLimit=require("express-rate-limit"),_documentCurrentScript="undefined"!=typeof document?document.currentScript:null;const __dirname$1=url.fileURLToPath(new URL("../.","undefined"==typeof document?require("url").pathToFileURL(__filename).href:_documentCurrentScript&&"SCRIPT"===_documentCurrentScript.tagName.toUpperCase()&&_documentCurrentScript.src||new URL("index.cjs",document.baseURI).href));function deepCopy(e){if(null===e||"object"!=typeof e)return e;const t=Array.isArray(e)?[]:{};for(const o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=deepCopy(e[o]));return t}function fixConstr(e){try{const t=`${e.toLowerCase().replace("chart","")}Chart`;return"Chart"===t&&t.toLowerCase(),["chart","stockChart","mapChart","ganttChart"].includes(t)?t:"chart"}catch{return"chart"}}function fixOutfile(e,t){return`${getAbsolutePath(t||"chart").split(".").shift()}.${e}`}function fixType(e,t=null){const o={"image/png":"png","image/jpeg":"jpeg","application/pdf":"pdf","image/svg+xml":"svg"},r=Object.values(o);if(t){const o=t.split(".").pop();"jpg"===o?e="jpeg":r.includes(o)&&e!==o&&(e=o)}return o[e]||r.find((t=>t===e))||"png"}function getAbsolutePath(e){return path.isAbsolute(e)?e:path.join(__dirname$1,e)}function getBase64(e,t){return"pdf"===t||"svg"==t?Buffer.from(e,"utf8").toString("base64"):e}function getNewDate(){return(new Date).toString().split("(")[0].trim()}function getNewDateTime(){return(new Date).getTime()}function isObject(e){return"[object Object]"===Object.prototype.toString.call(e)}function isObjectEmpty(e){return"object"==typeof e&&!Array.isArray(e)&&null!==e&&0===Object.keys(e).length}function isPrivateRangeUrlFound(e){return[/xlink:href="(?:http:\/\/|https:\/\/)?localhost\b/,/xlink:href="(?:http:\/\/|https:\/\/)?10\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?127\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?172\.(1[6-9]|2[0-9]|3[0-1])\.\d{1,3}\.\d{1,3}\b/,/xlink:href="(?:http:\/\/|https:\/\/)?192\.168\.\d{1,3}\.\d{1,3}\b/].some((t=>t.test(e)))}function measureTime(){const e=process.hrtime.bigint();return()=>Number(process.hrtime.bigint()-e)/1e6}function roundNumber(e,t=1){const o=Math.pow(10,t||0);return Math.round(+e*o)/o}function wrapAround(e,t,o=!1){if(e&&"string"==typeof e)return(e=e.trim()).endsWith(".js")?t?wrapAround(fs.readFileSync(getAbsolutePath(e),"utf8"),t,o):null:!o&&(e.startsWith("function()")||e.startsWith("function ()")||e.startsWith("()=>")||e.startsWith("() =>"))?`(${e})()`:e.replace(/;$/,"")}const colors=["red","yellow","blue","gray","green"],logging={toConsole:!0,toFile:!1,pathCreated:!1,pathToLog:"",levelsDesc:[{title:"error",color:colors[0]},{title:"warning",color:colors[1]},{title:"notice",color:colors[2]},{title:"verbose",color:colors[3]},{title:"benchmark",color:colors[4]}]};function log(...e){const[t,...o]=e,{levelsDesc:r,level:i}=logging;if(5!==t&&(0===t||t>i||i>r.length))return;const n=`${getNewDate()} [${r[t-1].title}] -`;logging.toFile&&_logToFile(o,n),logging.toConsole&&console.log.apply(void 0,[n.toString()[logging.levelsDesc[t-1].color]].concat(o))}function logWithStack(e,t,o){const r=o||t&&t.message||"",{level:i,levelsDesc:n}=logging;if(0===e||e>i||i>n.length)return;const s=`${getNewDate()} [${n[e-1].title}] -`,a=t&&t.stack,l=[r];a&&l.push("\n",a),logging.toFile&&_logToFile(l,s),logging.toConsole&&console.log.apply(void 0,[s.toString()[logging.levelsDesc[e-1].color]].concat([l.shift()[colors[e-1]],...l]))}function logZodIssues(e,t,o){logWithStack(e,null,[`${o||"[validation] Validation error"} - the following Zod issues occured:`,...(t||[]).map((e=>`- ${e.message}`))].join("\n"))}function initLogging(e){const{level:t,dest:o,file:r,toConsole:i,toFile:n}=e;logging.pathCreated=!1,logging.pathToLog="",setLogLevel(t),enableConsoleLogging(i),enableFileLogging(o,r,n)}function setLogLevel(e){Number.isInteger(e)&&e>=0&&e<=logging.levelsDesc.length&&(logging.level=e)}function enableConsoleLogging(e){logging.toConsole=!!e}function enableFileLogging(e,t,o){logging.toFile=!!o,logging.toFile&&(logging.dest=e||"",logging.file=t||"")}function _logToFile(e,t){logging.pathCreated||(!fs.existsSync(getAbsolutePath(logging.dest))&&fs.mkdirSync(getAbsolutePath(logging.dest)),logging.pathToLog=getAbsolutePath(path.join(logging.dest,logging.file)),logging.pathCreated=!0),fs.appendFile(logging.pathToLog,[t].concat(e).join(" ")+"\n",(e=>{e&&logging.toFile&&logging.pathCreated&&(logging.toFile=!1,logging.pathCreated=!1,logWithStack(2,e,"[logger] Unable to write to log file."))}))}const defaultConfig={puppeteer:{args:{value:["--allow-running-insecure-content","--ash-no-nudges","--autoplay-policy=user-gesture-required","--block-new-web-contents","--disable-accelerated-2d-canvas","--disable-background-networking","--disable-background-timer-throttling","--disable-backgrounding-occluded-windows","--disable-breakpad","--disable-checker-imaging","--disable-client-side-phishing-detection","--disable-component-extensions-with-background-pages","--disable-component-update","--disable-default-apps","--disable-dev-shm-usage","--disable-domain-reliability","--disable-extensions","--disable-features=CalculateNativeWinOcclusion,InterestFeedContentSuggestions,WebOTP","--disable-hang-monitor","--disable-ipc-flooding-protection","--disable-logging","--disable-notifications","--disable-offer-store-unmasked-wallet-cards","--disable-popup-blocking","--disable-print-preview","--disable-prompt-on-repost","--disable-renderer-backgrounding","--disable-search-engine-choice-screen","--disable-session-crashed-bubble","--disable-setuid-sandbox","--disable-site-isolation-trials","--disable-speech-api","--disable-sync","--enable-unsafe-webgpu","--hide-crash-restore-bubble","--hide-scrollbars","--metrics-recording-only","--mute-audio","--no-default-browser-check","--no-first-run","--no-pings","--no-sandbox","--no-startup-window","--no-zygote","--password-store=basic","--process-per-tab","--use-mock-keychain"],types:["string[]"],envLink:"PUPPETEER_ARGS",cliName:"puppeteerArgs",description:"Array of Puppeteer arguments",promptOptions:{type:"list",separator:";"}}},highcharts:{version:{value:"latest",types:["string"],envLink:"HIGHCHARTS_VERSION",description:"Highcharts version",promptOptions:{type:"text"}},cdnUrl:{value:"https://code.highcharts.com",types:["string"],envLink:"HIGHCHARTS_CDN_URL",description:"CDN URL for Highcharts scripts",promptOptions:{type:"text"}},forceFetch:{value:!1,types:["boolean"],envLink:"HIGHCHARTS_FORCE_FETCH",description:"Flag to refetch scripts after each server rerun",promptOptions:{type:"toggle"}},cachePath:{value:".cache",types:["string"],envLink:"HIGHCHARTS_CACHE_PATH",description:"Directory path for cached Highcharts scripts",promptOptions:{type:"text"}},coreScripts:{value:["highcharts","highcharts-more","highcharts-3d"],types:["string[]"],envLink:"HIGHCHARTS_CORE_SCRIPTS",description:"Highcharts core scripts to fetch",promptOptions:{type:"multiselect",instructions:"Space: Select specific, A: Select all, Enter: Confirm"}},moduleScripts:{value:["stock","map","gantt","exporting","parallel-coordinates","accessibility","boost-canvas","boost","data","data-tools","draggable-points","static-scale","broken-axis","heatmap","tilemap","tiledwebmap","timeline","treemap","treegraph","item-series","drilldown","histogram-bellcurve","bullet","funnel","funnel3d","geoheatmap","pyramid3d","networkgraph","overlapping-datalabels","pareto","pattern-fill","pictorial","price-indicator","sankey","arc-diagram","dependency-wheel","series-label","series-on-point","solid-gauge","sonification","streamgraph","sunburst","variable-pie","variwide","vector","venn","windbarb","wordcloud","xrange","no-data-to-display","drag-panes","debugger","dumbbell","lollipop","cylinder","organization","dotplot","marker-clusters","hollowcandlestick","heikinashi","flowmap","export-data","navigator","textpath"],types:["string[]"],envLink:"HIGHCHARTS_MODULE_SCRIPTS",description:"Highcharts module scripts to fetch",promptOptions:{type:"multiselect",instructions:"Space: Select specific, A: Select all, Enter: Confirm"}},indicatorScripts:{value:["indicators-all"],types:["string[]"],envLink:"HIGHCHARTS_INDICATOR_SCRIPTS",description:"Highcharts indicator scripts to fetch",promptOptions:{type:"multiselect",instructions:"Space: Select specific, A: Select all, Enter: Confirm"}},customScripts:{value:["https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/moment.min.js","https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.45/moment-timezone-with-data.min.js"],types:["string[]"],envLink:"HIGHCHARTS_CUSTOM_SCRIPTS",description:"Additional custom scripts or dependencies to fetch",promptOptions:{type:"list",separator:";"}}},export:{infile:{value:null,types:["string","null"],envLink:"EXPORT_INFILE",description:"Input filename with type, formatted correctly as JSON or SVG",promptOptions:{type:"text"}},instr:{value:null,types:["Object","string","null"],envLink:"EXPORT_INSTR",description:"Overrides the `infile` with JSON, stringified JSON, or SVG input",promptOptions:{type:"text"}},options:{value:null,types:["Object","string","null"],envLink:"EXPORT_OPTIONS",description:"Alias for the `instr` option",promptOptions:{type:"text"}},svg:{value:null,types:["string","null"],envLink:"EXPORT_SVG",description:"SVG string representation of the chart to render",promptOptions:{type:"text"}},batch:{value:null,types:["string","null"],envLink:"EXPORT_BATCH",description:'Batch job string with input/output pairs: "in=out;in=out;..."',promptOptions:{type:"text"}},outfile:{value:null,types:["string","null"],envLink:"EXPORT_OUTFILE",description:"Output filename with type. Can be jpeg, png, pdf, or svg and ignores `type` option",promptOptions:{type:"text"}},type:{value:"png",types:["string"],envLink:"EXPORT_TYPE",description:"File export format. Can be jpeg, png, pdf, or svg",promptOptions:{type:"select",hint:"Default: png",choices:["png","jpeg","pdf","svg"]}},constr:{value:"chart",types:["string"],envLink:"EXPORT_CONSTR",description:"Chart constructor. Can be chart, stockChart, mapChart, or ganttChart",promptOptions:{type:"select",hint:"Default: chart",choices:["chart","stockChart","mapChart","ganttChart"]}},b64:{value:!1,types:["boolean"],envLink:"EXPORT_B64",description:"Whether or not to the chart should be received in Base64 format instead of binary",promptOptions:{type:"toggle"}},noDownload:{value:!1,types:["boolean"],envLink:"EXPORT_NO_DOWNLOAD",description:"Whether or not to include or exclude attachment headers in the response",promptOptions:{type:"toggle"}},height:{value:null,types:["number","null"],envLink:"EXPORT_HEIGHT",description:"Height of the exported chart, overrides chart settings",promptOptions:{type:"number"}},width:{value:null,types:["number","null"],envLink:"EXPORT_WIDTH",description:"Width of the exported chart, overrides chart settings",promptOptions:{type:"number"}},scale:{value:null,types:["number","null"],envLink:"EXPORT_SCALE",description:"Scale of the exported chart, overrides chart settings. Ranges from 0.1 to 5.0",promptOptions:{type:"number"}},defaultHeight:{value:400,types:["number"],envLink:"EXPORT_DEFAULT_HEIGHT",description:"Default height of the exported chart if not set",promptOptions:{type:"number"}},defaultWidth:{value:600,types:["number"],envLink:"EXPORT_DEFAULT_WIDTH",description:"Default width of the exported chart if not set",promptOptions:{type:"number"}},defaultScale:{value:1,types:["number"],envLink:"EXPORT_DEFAULT_SCALE",description:"Default scale of the exported chart if not set. Ranges from 0.1 to 5.0",promptOptions:{type:"number",min:.1,max:5}},globalOptions:{value:null,types:["Object","string","null"],envLink:"EXPORT_GLOBAL_OPTIONS",description:"JSON, stringified JSON or filename with global options for Highcharts.setOptions",promptOptions:{type:"text"}},themeOptions:{value:null,types:["Object","string","null"],envLink:"EXPORT_THEME_OPTIONS",description:"JSON, stringified JSON or filename with theme options for Highcharts.setOptions",promptOptions:{type:"text"}},rasterizationTimeout:{value:1500,types:["number"],envLink:"EXPORT_RASTERIZATION_TIMEOUT",description:"Milliseconds to wait for webpage rendering",promptOptions:{type:"number"}}},customLogic:{allowCodeExecution:{value:!1,types:["boolean"],envLink:"CUSTOM_LOGIC_ALLOW_CODE_EXECUTION",description:"Allows or disallows execution of arbitrary code during exporting",promptOptions:{type:"toggle"}},allowFileResources:{value:!1,types:["boolean"],envLink:"CUSTOM_LOGIC_ALLOW_FILE_RESOURCES",description:"Allows or disallows injection of filesystem resources (disabled in server mode)",promptOptions:{type:"toggle"}},customCode:{value:null,types:["string","null"],envLink:"CUSTOM_LOGIC_CUSTOM_CODE",description:"Custom code to execute before chart initialization. Can be a function, code wrapped in a function, or a .js filename",promptOptions:{type:"text"}},callback:{value:null,types:["string","null"],envLink:"CUSTOM_LOGIC_CALLBACK",description:"JavaScript code to run during construction. Can be a function or a .js filename",promptOptions:{type:"text"}},resources:{value:null,types:["Object","string","null"],envLink:"CUSTOM_LOGIC_RESOURCES",description:"Additional resources as JSON, stringified JSON, or filename, containing files, js, and css sections",promptOptions:{type:"text"}},loadConfig:{value:null,types:["string","null"],envLink:"CUSTOM_LOGIC_LOAD_CONFIG",legacyName:"fromFile",description:"File with a pre-defined configuration to use",promptOptions:{type:"text"}},createConfig:{value:null,types:["string","null"],envLink:"CUSTOM_LOGIC_CREATE_CONFIG",description:"Prompt-based option setting, saved to a provided config file",promptOptions:{type:"text"}}},server:{enable:{value:!1,types:["boolean"],envLink:"SERVER_ENABLE",cliName:"enableServer",description:"Starts the server when true",promptOptions:{type:"toggle"}},host:{value:"0.0.0.0",types:["string"],envLink:"SERVER_HOST",description:"Hostname of the server",promptOptions:{type:"text"}},port:{value:7801,types:["number"],envLink:"SERVER_PORT",description:"Port number for the server",promptOptions:{type:"number"}},uploadLimit:{value:3,types:["number"],envLink:"SERVER_UPLOAD_LIMIT",description:"Maximum request body size in MB",promptOptions:{type:"number"}},benchmarking:{value:!1,types:["boolean"],envLink:"SERVER_BENCHMARKING",cliName:"serverBenchmarking",description:"Displays or not action durations in milliseconds during server requests",promptOptions:{type:"toggle"}},proxy:{host:{value:null,types:["string","null"],envLink:"SERVER_PROXY_HOST",cliName:"proxyHost",description:"Host of the proxy server, if applicable",promptOptions:{type:"text"}},port:{value:null,types:["number","null"],envLink:"SERVER_PROXY_PORT",cliName:"proxyPort",description:"Port of the proxy server, if applicable",promptOptions:{type:"number"}},timeout:{value:5e3,types:["number"],envLink:"SERVER_PROXY_TIMEOUT",cliName:"proxyTimeout",description:"Timeout in milliseconds for the proxy server, if applicable",promptOptions:{type:"number"}}},rateLimiting:{enable:{value:!1,types:["boolean"],envLink:"SERVER_RATE_LIMITING_ENABLE",cliName:"enableRateLimiting",description:"Enables or disables rate limiting on the server",promptOptions:{type:"toggle"}},maxRequests:{value:10,types:["number"],envLink:"SERVER_RATE_LIMITING_MAX_REQUESTS",legacyName:"rateLimit",description:"Maximum number of requests allowed per minute",promptOptions:{type:"number"}},window:{value:1,types:["number"],envLink:"SERVER_RATE_LIMITING_WINDOW",description:"Time window in minutes for rate limiting",promptOptions:{type:"number"}},delay:{value:0,types:["number"],envLink:"SERVER_RATE_LIMITING_DELAY",description:"Delay duration between successive requests before reaching the limit",promptOptions:{type:"number"}},trustProxy:{value:!1,types:["boolean"],envLink:"SERVER_RATE_LIMITING_TRUST_PROXY",description:"Set to true if the server is behind a load balancer",promptOptions:{type:"toggle"}},skipKey:{value:null,types:["string","null"],envLink:"SERVER_RATE_LIMITING_SKIP_KEY",description:"Key to bypass the rate limiter, used with `skipToken`",promptOptions:{type:"text"}},skipToken:{value:null,types:["string","null"],envLink:"SERVER_RATE_LIMITING_SKIP_TOKEN",description:"Token to bypass the rate limiter, used with `skipKey`",promptOptions:{type:"text"}}},ssl:{enable:{value:!1,types:["boolean"],envLink:"SERVER_SSL_ENABLE",cliName:"enableSsl",description:"Enables or disables SSL protocol",promptOptions:{type:"toggle"}},force:{value:!1,types:["boolean"],envLink:"SERVER_SSL_FORCE",cliName:"sslForce",legacyName:"sslOnly",description:"Forces the server to use HTTPS only when true",promptOptions:{type:"toggle"}},port:{value:443,types:["number"],envLink:"SERVER_SSL_PORT",cliName:"sslPort",description:"Port for the SSL server",promptOptions:{type:"number"}},certPath:{value:null,types:["string","null"],envLink:"SERVER_SSL_CERT_PATH",cliName:"sslCertPath",legacyName:"sslPath",description:"Path to the SSL certificate/key file",promptOptions:{type:"text"}}}},pool:{minWorkers:{value:4,types:["number"],envLink:"POOL_MIN_WORKERS",description:"Minimum and initial number of pool workers to spawn",promptOptions:{type:"number"}},maxWorkers:{value:8,types:["number"],envLink:"POOL_MAX_WORKERS",legacyName:"workers",description:"Maximum number of pool workers to spawn",promptOptions:{type:"number"}},workLimit:{value:40,types:["number"],envLink:"POOL_WORK_LIMIT",description:"Number of tasks a worker can handle before restarting",promptOptions:{type:"number"}},acquireTimeout:{value:5e3,types:["number"],envLink:"POOL_ACQUIRE_TIMEOUT",description:"Timeout in milliseconds for acquiring a resource",promptOptions:{type:"number"}},createTimeout:{value:5e3,types:["number"],envLink:"POOL_CREATE_TIMEOUT",description:"Timeout in milliseconds for creating a resource",promptOptions:{type:"number"}},destroyTimeout:{value:5e3,types:["number"],envLink:"POOL_DESTROY_TIMEOUT",description:"Timeout in milliseconds for destroying a resource",promptOptions:{type:"number"}},idleTimeout:{value:3e4,types:["number"],envLink:"POOL_IDLE_TIMEOUT",description:"Timeout in milliseconds for destroying idle resources",promptOptions:{type:"number"}},createRetryInterval:{value:200,types:["number"],envLink:"POOL_CREATE_RETRY_INTERVAL",description:"Interval in milliseconds before retrying resource creation on failure",promptOptions:{type:"number"}},reaperInterval:{value:1e3,types:["number"],envLink:"POOL_REAPER_INTERVAL",description:"Interval in milliseconds to check and destroy idle resources",promptOptions:{type:"number"}},benchmarking:{value:!1,types:["boolean"],envLink:"POOL_BENCHMARKING",cliName:"poolBenchmarking",description:"Shows statistics for the pool of resources",promptOptions:{type:"toggle"}}},logging:{level:{value:4,types:["number"],envLink:"LOGGING_LEVEL",cliName:"logLevel",description:"Logging verbosity level",promptOptions:{type:"number",round:0,min:0,max:5}},file:{value:"highcharts-export-server.log",types:["string"],envLink:"LOGGING_FILE",cliName:"logFile",description:"Log file name. Requires `logToFile` and `logDest` to be set",promptOptions:{type:"text"}},dest:{value:"log",types:["string"],envLink:"LOGGING_DEST",cliName:"logDest",description:"Path to store log files. Requires `logToFile` to be set",promptOptions:{type:"text"}},toConsole:{value:!0,types:["boolean"],envLink:"LOGGING_TO_CONSOLE",cliName:"logToConsole",description:"Enables or disables console logging",promptOptions:{type:"toggle"}},toFile:{value:!0,types:["boolean"],envLink:"LOGGING_TO_FILE",cliName:"logToFile",description:"Enables or disables logging to a file",promptOptions:{type:"toggle"}}},ui:{enable:{value:!1,types:["boolean"],envLink:"UI_ENABLE",cliName:"enableUi",description:"Enables or disables the UI for the export server",promptOptions:{type:"toggle"}},route:{value:"/",types:["string"],envLink:"UI_ROUTE",cliName:"uiRoute",description:"The endpoint route for the UI",promptOptions:{type:"text"}}},other:{nodeEnv:{value:"production",types:["string"],envLink:"OTHER_NODE_ENV",description:"The Node.js environment type",promptOptions:{type:"text"}},listenToProcessExits:{value:!0,types:["boolean"],envLink:"OTHER_LISTEN_TO_PROCESS_EXITS",description:"Whether or not to attach process.exit handlers",promptOptions:{type:"toggle"}},noLogo:{value:!1,types:["boolean"],envLink:"OTHER_NO_LOGO",description:"Display or skip printing the logo on startup",promptOptions:{type:"toggle"}},hardResetPage:{value:!1,types:["boolean"],envLink:"OTHER_HARD_RESET_PAGE",description:"Whether or not to reset the page content entirely",promptOptions:{type:"toggle"}},browserShellMode:{value:!0,types:["boolean"],envLink:"OTHER_BROWSER_SHELL_MODE",description:"Whether or not to set the browser to run in shell mode",promptOptions:{type:"toggle"}},validation:{value:!0,types:["boolean"],envLink:"OTHER_VALIDATION",description:"Whether or not to enable validation of options types",promptOptions:{type:"toggle"}}},debug:{enable:{value:!1,types:["boolean"],envLink:"DEBUG_ENABLE",cliName:"enableDebug",description:"Enables or disables debug mode for the underlying browser",promptOptions:{type:"toggle"}},headless:{value:!1,types:["boolean"],envLink:"DEBUG_HEADLESS",description:"Whether or not to set the browser to run in headless mode during debugging",promptOptions:{type:"toggle"}},devtools:{value:!1,types:["boolean"],envLink:"DEBUG_DEVTOOLS",description:"Enables or disables DevTools in headful mode",promptOptions:{type:"toggle"}},listenToConsole:{value:!1,types:["boolean"],envLink:"DEBUG_LISTEN_TO_CONSOLE",description:"Enables or disables listening to console messages from the browser",promptOptions:{type:"toggle"}},dumpio:{value:!1,types:["boolean"],envLink:"DEBUG_DUMPIO",description:"Redirects or not browser stdout and stderr to process.stdout and process.stderr",promptOptions:{type:"toggle"}},slowMo:{value:0,types:["number"],envLink:"DEBUG_SLOW_MO",description:"Delays Puppeteer operations by the specified milliseconds",promptOptions:{type:"number"}},debuggingPort:{value:9222,types:["number"],envLink:"DEBUG_DEBUGGING_PORT",description:"Port used for debugging",promptOptions:{type:"number"}}}},nestedProps=_createNestedProps(defaultConfig),absoluteProps=_createAbsoluteProps(defaultConfig);function _createNestedProps(e,t={},o=""){return Object.keys(e).forEach((r=>{const i=e[r];void 0===i.value?_createNestedProps(i,t,`${o}.${r}`):(t[i.cliName||r]=`${o}.${r}`.substring(1),void 0!==i.legacyName&&(t[i.legacyName]=`${o}.${r}`.substring(1)))})),t}function _createAbsoluteProps(e,t=[]){return Object.keys(e).forEach((o=>{const r=e[o];void 0===r.types?_createAbsoluteProps(r,t):r.types.includes("Object")&&t.push(o)})),t}dotenv.config();const{coreScripts:coreScripts,moduleScripts:moduleScripts,indicatorScripts:indicatorScripts}=defaultConfig.highcharts;zod.z.setErrorMap(_customErrorMap);const v={boolean:e=>e?zod.z.boolean():zod.z.union([zod.z.enum(["true","1","false","0","undefined","null",""]).transform((e=>["undefined","null",""].includes(e)?null:"true"===e||"1"===e)),zod.z.boolean()]).nullable(),string:e=>e?zod.z.string().trim().refine((e=>!["false","undefined","null",""].includes(e)),{params:{errorMessage:"The string contains a forbidden value"}}):zod.z.string().trim().transform((e=>["false","undefined","null",""].includes(e)?null:e)).nullable(),enum:(e,t)=>t?zod.z.enum([...e]):zod.z.enum([...e,"undefined","null",""]).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),stringArray(e,t,o){const r=zod.z.string().trim().array(),i=zod.z.string().trim().transform((e=>(e.startsWith("[")&&(e=e.slice(1)),e.endsWith("]")&&(e=e.slice(0,-1)),e.split(t)))),n=t=>t.map((e=>e.trim())).filter(e);return o?r.transform(n):zod.z.union([i,r]).transform(n).transform((e=>e.length?e:null)).nullable()},positiveNum:e=>e?zod.z.number().positive():zod.z.union([zod.z.string().trim().refine((e=>!isNaN(Number(e))&&Number(e)>0||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be numeric and positive"}}).transform((e=>["undefined","null",""].includes(e)?null:Number(e))),zod.z.number().positive()]).nullable(),nonNegativeNum:e=>e?zod.z.number().nonnegative():zod.z.union([zod.z.string().trim().refine((e=>!isNaN(Number(e))&&Number(e)>=0||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be numeric and non-negative"}}).transform((e=>["undefined","null",""].includes(e)?null:Number(e))),zod.z.number().nonnegative()]).nullable(),startsWith:(e,t)=>t?zod.z.string().trim().refine((t=>e.some((e=>t.startsWith(e)))),{params:{errorMessage:`The value must be a string that starts with ${e.join(", ")}`}}):zod.z.string().trim().refine((t=>e.some((e=>t.startsWith(e)))||["undefined","null",""].includes(t)),{params:{errorMessage:`The value must be a string that starts with ${e.join(", ")}`}}).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),chartConfig:()=>zod.z.union([zod.z.string().trim().refine((e=>e.startsWith("{")&&e.endsWith("}")||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that starts with '{' and ends with '}'"}}).transform((e=>["undefined","null",""].includes(e)?null:e)),zod.z.object({}).passthrough()]).nullable(),additionalOptions:()=>zod.z.union([zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".json")||e.startsWith("{")&&e.endsWith("}")||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that ends with '.json' or starts with '{' and ends with '}'"}}).transform((e=>["undefined","null",""].includes(e)?null:e)),zod.z.object({}).passthrough()]).nullable()},validators={args:e=>v.stringArray((e=>!["false","undefined","null",""].includes(e)),";",e),version:e=>e?zod.z.string().trim().refine((e=>/^(latest|\d{1,2}(\.\d{1,2}){0,2})$/.test(e)),{params:{errorMessage:"The value must be 'latest', a major version, or in the form XX.YY.ZZ"}}):zod.z.string().trim().refine((e=>/^(latest|\d{1,2}(\.\d{1,2}){0,2})$/.test(e)||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be 'latest', a major version, or in the form XX.YY.ZZ"}}).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),cdnUrl:e=>v.startsWith(["http://","https://"],e),forceFetch:e=>v.boolean(e),cachePath:e=>v.string(e),adminToken:e=>v.string(e),coreScripts:e=>v.stringArray((e=>coreScripts.value.includes(e)),",",e),moduleScripts:e=>v.stringArray((e=>moduleScripts.value.includes(e)),",",e),indicatorScripts:e=>v.stringArray((e=>indicatorScripts.value.includes(e)),",",e),customScripts:e=>v.stringArray((e=>e.startsWith("https://")||e.startsWith("http://")),",",e),infile:e=>e?zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".json")||e.length>=5&&e.endsWith(".svg")),{params:{errorMessage:"The value must be a string that ends with .json or .svg"}}).nullable():zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".json")||e.length>=5&&e.endsWith(".svg")||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that ends with .json or .svg"}}).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),instr:()=>v.chartConfig(),options:()=>v.chartConfig(),svg:()=>zod.z.string().trim().refine((e=>e.indexOf("<svg")>=0||e.indexOf("<?xml")>=0||["false","undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that contains '<svg' or '<?xml'"}}).transform((e=>["false","undefined","null",""].includes(e)?null:e)).nullable(),outfile:e=>e?zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".jpeg")||e.length>=5&&(e.endsWith(".jpg")||e.endsWith(".png")||e.endsWith(".pdf")||e.endsWith(".svg"))),{params:{errorMessage:"The value must be a string that ends with .jpeg, .jpg, .png, .pdf, or .svg"}}).nullable():zod.z.string().trim().refine((e=>e.length>=6&&e.endsWith(".jpeg")||e.length>=5&&(e.endsWith(".jpg")||e.endsWith(".png")||e.endsWith(".pdf")||e.endsWith(".svg"))||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that ends with .jpeg, .jpg, .png, .pdf, or .svg"}}).transform((e=>["undefined","null",""].includes(e)?null:e)).nullable(),type:e=>v.enum(["jpeg","jpg","png","pdf","svg"],e),constr:e=>v.enum(["chart","stockChart","mapChart","ganttChart"],e),b64:e=>v.boolean(e),noDownload:e=>v.boolean(e),defaultHeight:e=>v.positiveNum(e),defaultWidth:e=>v.positiveNum(e),defaultScale:e=>e?zod.z.number().gte(.1).lte(5):zod.z.union([zod.z.string().trim().refine((e=>!isNaN(Number(e))&&!0!==e&&!e.startsWith("[")&&Number(e)>=.1&&Number(e)<=5||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be within a 0.1 and 5.0 range"}}).transform((e=>["undefined","null",""].includes(e)?null:Number(e))),zod.z.number().gte(.1).lte(5)]).nullable(),height(e){return this.defaultHeight(e).nullable()},width(e){return this.defaultWidth(e).nullable()},scale(e){return this.defaultScale(e).nullable()},globalOptions:()=>v.additionalOptions(),themeOptions:()=>v.additionalOptions(),batch:e=>v.string(e),rasterizationTimeout:e=>v.nonNegativeNum(e),allowCodeExecution:e=>v.boolean(e),allowFileResources:e=>v.boolean(e),customCode:e=>v.string(e),callback:e=>v.string(e),resources(e){const t=zod.z.object({js:v.string(!1),css:v.string(!1),files:v.stringArray((e=>!["undefined","null",""].includes(e)),",",!0).nullable()}).partial(),o=zod.z.string().trim().refine((e=>e.startsWith("{")&&e.endsWith("}")||e.length>=6&&e.endsWith(".json")),{params:{errorMessage:"The value must be a string that starts with '{' and ends with '}"}}),r=zod.z.string().trim().refine((e=>e.startsWith("{")&&e.endsWith("}")||e.length>=6&&e.endsWith(".json")||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be a string that ends with .json"}}).transform((e=>["undefined","null",""].includes(e)?null:e));return e?zod.z.union([t,o]).nullable():zod.z.union([t,r]).nullable()},loadConfig:e=>v.string(e).refine((e=>null===e||e.length>=6&&e.endsWith(".json")),{params:{errorMessage:"The value must be a string that ends with .json"}}),createConfig(e){return this.loadConfig(e)},enableServer:e=>v.boolean(e),host:e=>v.string(e),port:e=>v.nonNegativeNum(e),uploadLimit:e=>v.positiveNum(e),serverBenchmarking:e=>v.boolean(e),proxyHost:e=>v.string(e),proxyPort:e=>v.nonNegativeNum(e).nullable(),proxyTimeout:e=>v.nonNegativeNum(e),enableRateLimiting:e=>v.boolean(e),maxRequests:e=>v.nonNegativeNum(e),window:e=>v.nonNegativeNum(e),delay:e=>v.nonNegativeNum(e),trustProxy:e=>v.boolean(e),skipKey:e=>v.string(e),skipToken:e=>v.string(e),enableSsl:e=>v.boolean(e),sslForce:e=>v.boolean(e),sslPort:e=>v.nonNegativeNum(e),sslCertPath:e=>v.string(e),minWorkers:e=>v.positiveNum(e),maxWorkers:e=>v.positiveNum(e),workLimit:e=>v.positiveNum(e),acquireTimeout:e=>v.nonNegativeNum(e),createTimeout:e=>v.nonNegativeNum(e),destroyTimeout:e=>v.nonNegativeNum(e),idleTimeout:e=>v.nonNegativeNum(e),createRetryInterval:e=>v.nonNegativeNum(e),reaperInterval:e=>v.nonNegativeNum(e),poolBenchmarking:e=>v.boolean(e),resourcesInterval:e=>v.nonNegativeNum(e),logLevel:e=>e?zod.z.number().int().gte(0).lte(5):zod.z.union([zod.z.string().trim().refine((e=>!isNaN(Number(e))&&!0!==e&&!e.startsWith("[")&&Number.isInteger(Number(e))&&Number(e)>=0&&Number(e)<=5||["undefined","null",""].includes(e)),{params:{errorMessage:"The value must be within a 0 and 5 range"}}).transform((e=>["undefined","null",""].includes(e)?null:Number(e))),zod.z.number().int().gte(0).lte(5)]).nullable(),logFile:e=>v.string(e).refine((e=>null===e||e.length>=5&&e.endsWith(".log")),{params:{errorMessage:"The value must be a string that ends with .log"}}),logDest:e=>v.string(e),logToConsole:e=>v.boolean(e),logToFile:e=>v.boolean(e),enableUi:e=>v.boolean(e),uiRoute:e=>v.startsWith(["/"],e),nodeEnv:e=>v.enum(["development","production","test"],e),listenToProcessExits:e=>v.boolean(e),noLogo:e=>v.boolean(e),hardResetPage:e=>v.boolean(e),browserShellMode:e=>v.boolean(e),validation:e=>v.boolean(e),enableDebug:e=>v.boolean(e),headless:e=>v.boolean(e),devtools:e=>v.boolean(e),listenToConsole:e=>v.boolean(e),dumpio:e=>v.boolean(e),slowMo:e=>v.nonNegativeNum(e),debuggingPort:e=>v.nonNegativeNum(e),requestId:()=>zod.z.string().uuid({message:"The value must be a stringified UUID"}).nullable()},PuppeteerSchema=e=>zod.z.object({args:validators.args(e)}).partial(),HighchartsSchema=e=>zod.z.object({version:validators.version(e),cdnUrl:validators.cdnUrl(e),forceFetch:validators.forceFetch(e),cachePath:validators.cachePath(e),coreScripts:validators.coreScripts(e),moduleScripts:validators.moduleScripts(e),indicatorScripts:validators.indicatorScripts(e),customScripts:validators.customScripts(e)}).partial(),ExportSchema=e=>zod.z.object({infile:validators.infile(e),instr:validators.instr(),options:validators.options(),svg:validators.svg(),outfile:validators.outfile(e),type:validators.type(e),constr:validators.constr(e),b64:validators.b64(e),noDownload:validators.noDownload(e),defaultHeight:validators.defaultHeight(e),defaultWidth:validators.defaultWidth(e),defaultScale:validators.defaultScale(e),height:validators.height(e),width:validators.width(e),scale:validators.scale(e),globalOptions:validators.globalOptions(),themeOptions:validators.themeOptions(),batch:validators.batch(!1),rasterizationTimeout:validators.rasterizationTimeout(e)}).partial(),CustomLogicSchema=e=>zod.z.object({allowCodeExecution:validators.allowCodeExecution(e),allowFileResources:validators.allowFileResources(e),customCode:validators.customCode(!1),callback:validators.callback(!1),resources:validators.resources(e),loadConfig:validators.loadConfig(!1),createConfig:validators.createConfig(!1)}).partial(),ProxySchema=e=>zod.z.object({host:validators.proxyHost(!1),port:validators.proxyPort(e),timeout:validators.proxyTimeout(e)}).partial(),RateLimitingSchema=e=>zod.z.object({enable:validators.enableRateLimiting(e),maxRequests:validators.maxRequests(e),window:validators.window(e),delay:validators.delay(e),trustProxy:validators.trustProxy(e),skipKey:validators.skipKey(!1),skipToken:validators.skipToken(!1)}).partial(),SslSchema=e=>zod.z.object({enable:validators.enableSsl(e),force:validators.sslForce(e),port:validators.sslPort(e),certPath:validators.sslCertPath(!1)}).partial(),ServerSchema=e=>zod.z.object({enable:validators.enableServer(e).optional(),host:validators.host(e).optional(),port:validators.port(e).optional(),uploadLimit:validators.uploadLimit(e).optional(),benchmarking:validators.serverBenchmarking(e).optional(),proxy:ProxySchema(e).optional(),rateLimiting:RateLimitingSchema(e).optional(),ssl:SslSchema(e).optional()}),PoolSchema=e=>zod.z.object({minWorkers:validators.minWorkers(e),maxWorkers:validators.maxWorkers(e),workLimit:validators.workLimit(e),acquireTimeout:validators.acquireTimeout(e),createTimeout:validators.createTimeout(e),destroyTimeout:validators.destroyTimeout(e),idleTimeout:validators.idleTimeout(e),createRetryInterval:validators.createRetryInterval(e),reaperInterval:validators.reaperInterval(e),benchmarking:validators.poolBenchmarking(e)}).partial(),LoggingSchema=e=>zod.z.object({level:validators.logLevel(e),file:validators.logFile(e),dest:validators.logDest(e),toConsole:validators.logToConsole(e),toFile:validators.logToFile(e)}).partial(),UiSchema=e=>zod.z.object({enable:validators.enableUi(e),route:validators.uiRoute(e)}).partial(),OtherSchema=e=>zod.z.object({nodeEnv:validators.nodeEnv(e),listenToProcessExits:validators.listenToProcessExits(e),noLogo:validators.noLogo(e),hardResetPage:validators.hardResetPage(e),browserShellMode:validators.browserShellMode(e),validation:validators.validation(e)}).partial(),DebugSchema=e=>zod.z.object({enable:validators.enableDebug(e),headless:validators.headless(e),devtools:validators.devtools(e),listenToConsole:validators.listenToConsole(e),dumpio:validators.dumpio(e),slowMo:validators.slowMo(e),debuggingPort:validators.debuggingPort(e)}).partial(),StrictConfigSchema=zod.z.object({requestId:validators.requestId(),puppeteer:PuppeteerSchema(!0),highcharts:HighchartsSchema(!0),export:ExportSchema(!0),customLogic:CustomLogicSchema(!0),server:ServerSchema(!0),pool:PoolSchema(!0),logging:LoggingSchema(!0),ui:UiSchema(!0),other:OtherSchema(!0),debug:DebugSchema(!0)}),LooseConfigSchema=zod.z.object({requestId:validators.requestId(),puppeteer:PuppeteerSchema(!1),highcharts:HighchartsSchema(!1),export:ExportSchema(!1),customLogic:CustomLogicSchema(!1),server:ServerSchema(!1),pool:PoolSchema(!1),logging:LoggingSchema(!1),ui:UiSchema(!1),other:OtherSchema(!1),debug:DebugSchema(!1)}),EnvSchema=zod.z.object({PUPPETEER_ARGS:validators.args(!1),HIGHCHARTS_VERSION:validators.version(!1),HIGHCHARTS_CDN_URL:validators.cdnUrl(!1),HIGHCHARTS_FORCE_FETCH:validators.forceFetch(!1),HIGHCHARTS_CACHE_PATH:validators.cachePath(!1),HIGHCHARTS_ADMIN_TOKEN:validators.adminToken(!1),HIGHCHARTS_CORE_SCRIPTS:validators.coreScripts(!1),HIGHCHARTS_MODULE_SCRIPTS:validators.moduleScripts(!1),HIGHCHARTS_INDICATOR_SCRIPTS:validators.indicatorScripts(!1),HIGHCHARTS_CUSTOM_SCRIPTS:validators.customScripts(!1),EXPORT_INFILE:validators.infile(!1),EXPORT_INSTR:validators.instr(),EXPORT_OPTIONS:validators.options(),EXPORT_SVG:validators.svg(),EXPORT_BATCH:validators.batch(!1),EXPORT_OUTFILE:validators.outfile(!1),EXPORT_TYPE:validators.type(!1),EXPORT_CONSTR:validators.constr(!1),EXPORT_B64:validators.b64(!1),EXPORT_NO_DOWNLOAD:validators.noDownload(!1),EXPORT_HEIGHT:validators.height(!1),EXPORT_WIDTH:validators.width(!1),EXPORT_SCALE:validators.scale(!1),EXPORT_DEFAULT_HEIGHT:validators.defaultHeight(!1),EXPORT_DEFAULT_WIDTH:validators.defaultWidth(!1),EXPORT_DEFAULT_SCALE:validators.defaultScale(!1),EXPORT_GLOBAL_OPTIONS:validators.globalOptions(),EXPORT_THEME_OPTIONS:validators.themeOptions(),EXPORT_RASTERIZATION_TIMEOUT:validators.rasterizationTimeout(!1),CUSTOM_LOGIC_ALLOW_CODE_EXECUTION:validators.allowCodeExecution(!1),CUSTOM_LOGIC_ALLOW_FILE_RESOURCES:validators.allowFileResources(!1),CUSTOM_LOGIC_CUSTOM_CODE:validators.customCode(!1),CUSTOM_LOGIC_CALLBACK:validators.callback(!1),CUSTOM_LOGIC_RESOURCES:validators.resources(!1),CUSTOM_LOGIC_LOAD_CONFIG:validators.loadConfig(!1),CUSTOM_LOGIC_CREATE_CONFIG:validators.createConfig(!1),SERVER_ENABLE:validators.enableServer(!1),SERVER_HOST:validators.host(!1),SERVER_PORT:validators.port(!1),SERVER_UPLOAD_LIMIT:validators.uploadLimit(!1),SERVER_BENCHMARKING:validators.serverBenchmarking(!1),SERVER_PROXY_HOST:validators.proxyHost(!1),SERVER_PROXY_PORT:validators.proxyPort(!1),SERVER_PROXY_TIMEOUT:validators.proxyTimeout(!1),SERVER_RATE_LIMITING_ENABLE:validators.enableRateLimiting(!1),SERVER_RATE_LIMITING_MAX_REQUESTS:validators.maxRequests(!1),SERVER_RATE_LIMITING_WINDOW:validators.window(!1),SERVER_RATE_LIMITING_DELAY:validators.delay(!1),SERVER_RATE_LIMITING_TRUST_PROXY:validators.trustProxy(!1),SERVER_RATE_LIMITING_SKIP_KEY:validators.skipKey(!1),SERVER_RATE_LIMITING_SKIP_TOKEN:validators.skipToken(!1),SERVER_SSL_ENABLE:validators.enableSsl(!1),SERVER_SSL_FORCE:validators.sslForce(!1),SERVER_SSL_PORT:validators.sslPort(!1),SERVER_SSL_CERT_PATH:validators.sslCertPath(!1),POOL_MIN_WORKERS:validators.minWorkers(!1),POOL_MAX_WORKERS:validators.maxWorkers(!1),POOL_WORK_LIMIT:validators.workLimit(!1),POOL_ACQUIRE_TIMEOUT:validators.acquireTimeout(!1),POOL_CREATE_TIMEOUT:validators.createTimeout(!1),POOL_DESTROY_TIMEOUT:validators.destroyTimeout(!1),POOL_IDLE_TIMEOUT:validators.idleTimeout(!1),POOL_CREATE_RETRY_INTERVAL:validators.createRetryInterval(!1),POOL_REAPER_INTERVAL:validators.reaperInterval(!1),POOL_BENCHMARKING:validators.poolBenchmarking(!1),LOGGING_LEVEL:validators.logLevel(!1),LOGGING_FILE:validators.logFile(!1),LOGGING_DEST:validators.logDest(!1),LOGGING_TO_CONSOLE:validators.logToConsole(!1),LOGGING_TO_FILE:validators.logToFile(!1),UI_ENABLE:validators.enableUi(!1),UI_ROUTE:validators.uiRoute(!1),OTHER_NODE_ENV:validators.nodeEnv(!1),OTHER_LISTEN_TO_PROCESS_EXITS:validators.listenToProcessExits(!1),OTHER_NO_LOGO:validators.noLogo(!1),OTHER_HARD_RESET_PAGE:validators.hardResetPage(!1),OTHER_BROWSER_SHELL_MODE:validators.browserShellMode(!1),OTHER_VALIDATION:validators.validation(!1),DEBUG_ENABLE:validators.enableDebug(!1),DEBUG_HEADLESS:validators.headless(!1),DEBUG_DEVTOOLS:validators.devtools(!1),DEBUG_LISTEN_TO_CONSOLE:validators.listenToConsole(!1),DEBUG_DUMPIO:validators.dumpio(!1),DEBUG_SLOW_MO:validators.slowMo(!1),DEBUG_DEBUGGING_PORT:validators.debuggingPort(!1)}),envs=EnvSchema.partial().parse(process.env);function strictValidate(e){return StrictConfigSchema.partial().parse(e)}function looseValidate(e){return LooseConfigSchema.partial().parse(e)}function _customErrorMap(e,t){const o=e.path.join("."),r=`Invalid value for the ${o}`;if(e.code===zod.z.ZodIssueCode.invalid_type)return e.received===zod.z.ZodParsedType.undefined?{message:`${r} - No value was provided.`}:{message:`${r} - Invalid type. ${t.defaultError}.`};if(e.code===zod.z.ZodIssueCode.custom&&e.params?.errorMessage)return{message:`${r} - ${e.params?.errorMessage}, received '${t.data}'.`};if(e.code===zod.z.ZodIssueCode.invalid_union){let t=`Multiple errors occurred for the ${o}:\n`;return e.unionErrors.forEach((e=>{const o=e.issues[0].message.indexOf("-");t+=-1!==o?`${e.issues[0].message}\n`.substring(o):`${e.issues[0].message}\n`})),{message:t}}return{message:`${r} - ${t.defaultError}.`}}class ExportError extends Error{constructor(e,t){super(),this.message=e,this.stackMessage=e,t&&(this.statusCode=t)}setStatus(e){return this.statusCode=e,this}setError(e){return this.error=e,e.name&&(this.name=e.name),e.statusCode&&(this.statusCode=e.statusCode),e.stack&&(this.stackMessage=e.message,this.stack=e.stack),this}}const globalOptions=_initGlobalOptions(defaultConfig),instanceOptions=deepCopy(globalOptions);function getOptions(e=!0){return e?instanceOptions:globalOptions}function setGlobalOptions(e={},t=[]){let o={},r={};if(t&&Array.isArray(t)&&t.length){try{o=strictValidate(_loadConfigFile(t,globalOptions.customLogic))}catch(e){logZodIssues(1,e.issues,"[validation] Custom options from the `loadConfig` option validation error")}try{r=looseValidate(_pairArgumentValue(nestedProps,t))}catch(e){logZodIssues(1,e.issues,"[validation] CLI options validation error")}}if(e&&isObject(e)&&Object.keys(e).length)try{e=strictValidate(e)}catch(e){logZodIssues(1,e.issues,"[validation] Custom options validation error")}return _updateGlobalOptions(defaultConfig,globalOptions,o,r,e),globalOptions}function updateOptions(e,t=!1){return t&&(Object.keys(instanceOptions).forEach((e=>{delete instanceOptions[e]})),mergeOptions(instanceOptions,deepCopy(globalOptions))),mergeOptions(instanceOptions,e),instanceOptions}function mergeOptions(e,t){if(isObject(e)&&isObject(t))for(const[o,r]of Object.entries(t))e[o]=isObject(r)&&!absoluteProps.includes(o)&&void 0!==e[o]?mergeOptions(e[o],r):void 0!==r?r:e[o]||null;return e}function mapToNewOptions(e){const t={};if(isObject(e))for(const[o,r]of Object.entries(e)){const e=nestedProps[o]?nestedProps[o].split("."):[];e.reduce(((t,o,i)=>t[o]=e.length-1===i?r:t[o]||{}),t)}else log(2,"[config] No correct object with options was provided. Returning an empty array.");return t}function validateOption(e,t,o=!0){if(!getOptions().other.validation)return t;try{return validators[e](o).parse(t)}catch(t){throw logZodIssues(1,t.issues,`[validation] The ${e} option validation error`),new ExportError(`[validation] The ${e} option validation error`,400)}}function validateOptions(e,t=!0){if(!getOptions().other.validation)return e;try{return t?strictValidate(e):looseValidate(e)}catch(e){throw logZodIssues(1,e.issues,"[validation] Options validation error"),new ExportError("[validation] Options validation error",400)}}function isAllowedConfig(config,toString=!1,allowFunctions=!1){try{if(!isObject(config)&&"string"!=typeof config)return null;const objectConfig="string"==typeof config?allowFunctions?eval(`(${config})`):JSON.parse(config):config,stringifiedOptions=_optionsStringify(objectConfig,allowFunctions,!1),parsedOptions=allowFunctions?JSON.parse(_optionsStringify(objectConfig,allowFunctions,!0),((_,value)=>"string"==typeof value&&value.startsWith("function")?eval(`(${value})`):value)):JSON.parse(stringifiedOptions);return toString?stringifiedOptions:parsedOptions}catch(e){return null}}function _initGlobalOptions(e){const t={};for(const[o,r]of Object.entries(e))if(Object.prototype.hasOwnProperty.call(r,"value")){const e=envs[r.envLink];t[o]=null!=e?e:r.value}else t[o]=_initGlobalOptions(r);return t}function _updateGlobalOptions(e,t,o,r,i){Object.keys(e).forEach((n=>{const s=e[n],a=o&&o[n],l=r&&r[n],c=i&&i[n];if(void 0===s.value)_updateGlobalOptions(s,t[n],a,l,c);else{null!=a&&(t[n]=a);const e=envs[s.envLink];s.envLink in envs&&null!=e&&(t[n]=e),null!=l&&(t[n]=l),null!=c&&(t[n]=c)}}))}function _optionsStringify(e,t,o){return JSON.stringify(e,((e,r)=>{if("string"==typeof r&&(r=r.trim()),"function"==typeof r||"string"==typeof r&&r.startsWith("function")&&r.endsWith("}")){if(t)return o?`"EXP_FUN${(r+"").replaceAll(/\s+/g," ")}EXP_FUN"`:`EXP_FUN${(r+"").replaceAll(/\s+/g," ")}EXP_FUN`;throw new Error}return r})).replaceAll(o?/\\"EXP_FUN|EXP_FUN\\"/g:/"EXP_FUN|EXP_FUN"/g,"")}function _loadConfigFile(e,t){const o=e.findIndex((e=>"loadConfig"===e.replace(/-/g,""))),r=o>-1&&e[o+1];if(r&&t.allowFileResources)try{return isAllowedConfig(fs.readFileSync(getAbsolutePath(r),"utf8"),!1,t.allowCodeExecution)}catch(e){logWithStack(2,e,`[config] Unable to load the configuration from the ${r} file.`)}return{}}function _pairArgumentValue(e,t){const o={};for(let r=0;r<t.length;r++){const i=t[r].replace(/-/g,""),n=e[i]?e[i].split("."):[];n.reduce(((e,o,s)=>{if(n.length-1===s){const n=t[++r];n||log(2,`[config] Missing value for the CLI '--${i}' argument. Using the default value.`),e[o]=n||null}else void 0===e[o]&&(e[o]={});return e[o]}),o)}return o}async function fetch(e,t={}){return new Promise(((o,r)=>{_getProtocolModule(e).get(e,t,(e=>{let t="";e.on("data",(e=>{t+=e})),e.on("end",(()=>{t||r("Nothing was fetched from the URL."),e.text=t,o(e)}))})).on("error",(e=>{r(e)}))}))}function _getProtocolModule(e){return e.startsWith("https")?https:http}const cache={cdnUrl:"https://code.highcharts.com",activeManifest:{},sources:"",hcVersion:""};async function checkAndUpdateCache(e,t){try{let o;const r=getCachePath(),i=path.join(r,"manifest.json"),n=path.join(r,"sources.js");if(!fs.existsSync(r)&&fs.mkdirSync(r,{recursive:!0}),!fs.existsSync(i)||e.forceFetch)log(3,"[cache] Fetching and caching Highcharts dependencies."),o=await _updateCache(e,t,n);else{let r=!1;const s=JSON.parse(fs.readFileSync(i),"utf8");if(s.modules&&Array.isArray(s.modules)){const e={};s.modules.forEach((t=>e[t]=1)),s.modules=e}const{coreScripts:a,moduleScripts:l,indicatorScripts:c}=e,p=a.length+l.length+c.length;s.version!==e.version?(log(2,"[cache] A Highcharts version mismatch in the cache, need to re-fetch."),r=!0):Object.keys(s.modules||{}).length!==p?(log(2,"[cache] The cache and the requested modules do not match, need to re-fetch."),r=!0):r=(l||[]).some((e=>{if(!s.modules[e])return log(2,`[cache] The ${e} is missing in the cache, need to re-fetch.`),!0})),r?o=await _updateCache(e,t,n):(log(3,"[cache] Dependency cache is up to date, proceeding."),cache.sources=fs.readFileSync(n,"utf8"),o=s.modules,cache.hcVersion=extractVersion(cache.sources))}await _saveConfigToManifest(e,o)}catch(e){throw new ExportError("[cache] Could not configure cache and create or update the config manifest.",500).setError(e)}}function getHighchartsVersion(){return cache.hcVersion}async function updateHighchartsVersion(e){const t=getOptions();t.highcharts.version=e,await checkAndUpdateCache(t.highcharts,t.server.proxy)}function extractVersion(e){return e.substring(0,e.indexOf("*/")).replace("/*","").replace("*/","").replace(/\n/g,"").trim()}function extractModuleName(e){return e.replace(/(.*)\/|(.*)modules\/|stock\/(.*)indicators\/|maps\/(.*)modules\//gi,"")}function getCachePath(){return getAbsolutePath(getOptions().highcharts.cachePath)}async function _fetchAndProcessScript(e,t,o,r=!1){e.endsWith(".js")&&(e=e.substring(0,e.length-3)),log(4,`[cache] Fetching script - ${e}.js`);const i=await fetch(`${e}.js`,t);if(200===i.statusCode&&"string"==typeof i.text){if(o){o[extractModuleName(e)]=1}return i.text}if(r)throw new ExportError(`[cache] Could not fetch the ${e}.js. The script might not exist in the requested version (status code: ${i.statusCode}).`,404).setError(i);log(2,`[cache] Could not fetch the ${e}.js. The script might not exist in the requested version.`)}async function _saveConfigToManifest(e,t={}){const o={version:e.version,modules:t};cache.activeManifest=o,log(3,"[cache] Writing a new manifest.");try{fs.writeFileSync(path.join(getCachePath(),"manifest.json"),JSON.stringify(o),"utf8")}catch(e){throw new ExportError("[cache] Error writing the cache manifest.",500).setError(e)}}async function _fetchScripts(e,t,o,r,i){let n;const s=r.host,a=r.port;if(s&&a)try{n=new httpsProxyAgent.HttpsProxyAgent({host:s,port:a})}catch(e){throw new ExportError("[cache] Could not create a Proxy Agent.",500).setError(e)}const l=n?{agent:n,timeout:r.timeout}:{},c=[...e.map((e=>_fetchAndProcessScript(`${e}`,l,i,!0))),...t.map((e=>_fetchAndProcessScript(`${e}`,l,i))),...o.map((e=>_fetchAndProcessScript(`${e}`,l)))];return(await Promise.all(c)).join(";\n")}async function _updateCache(e,t,o){const r="latest"===e.version?null:`${e.version}`,i=e.cdnUrl||cache.cdnUrl;try{const n={};return log(3,`[cache] Updating cache version to Highcharts: ${r||"latest"}.`),cache.sources=await _fetchScripts([...e.coreScripts.map((e=>r?`${i}/${r}/${e}`:`${i}/${e}`))],[...e.moduleScripts.map((e=>"map"===e?r?`${i}/maps/${r}/modules/${e}`:`${i}/maps/modules/${e}`:r?`${i}/${r}/modules/${e}`:`${i}/modules/${e}`)),...e.indicatorScripts.map((e=>r?`${i}/stock/${r}/indicators/${e}`:`${i}/stock/indicators/${e}`))],e.customScripts,t,n),cache.hcVersion=extractVersion(cache.sources),fs.writeFileSync(o,cache.sources),n}catch(e){throw new ExportError("[cache] Unable to update the local Highcharts cache.",500).setError(e)}}function setupHighcharts(){Highcharts.animObject=function(){return{duration:0}}}async function createChart(e,t){const{getOptions:o,setOptions:r,merge:i,wrap:n}=Highcharts;Highcharts.setOptionsObj=i(!1,{},o()),window.isRenderComplete=!1,n(Highcharts.Chart.prototype,"init",(function(e,t,o){((t=i(t,{exporting:{enabled:!1},plotOptions:{series:{label:{enabled:!1}}},tooltip:{}})).series||[]).forEach((function(e){e.animation=!1})),window.onHighchartsRender||(window.onHighchartsRender=Highcharts.addEvent(this,"render",(()=>{window.isRenderComplete=!0}))),e.apply(this,[t,o])})),n(Highcharts.Series.prototype,"init",(function(e,t,o){e.apply(this,[t,o])}));const s={chart:{animation:!1,height:e.height,width:e.width},exporting:{enabled:!1}},a=new Function(`return ${e.instr}`)(),l=new Function(`return ${e.themeOptions}`)(),c=new Function(`return ${e.globalOptions}`)(),p=i(!1,l,a,s),u=t.callback?new Function(`return ${t.callback}`)():null;t.customCode&&new Function("options",t.customCode)(a),c&&r(c),Highcharts[e.constr]("container",p,u);const d=o();for(const e in d)"function"!=typeof d[e]&&delete d[e];r(Highcharts.setOptionsObj),Highcharts.setOptionsObj={}}const template=fs.readFileSync(path.join(__dirname$1,"templates","template.html"),"utf8");let browser=null;async function createBrowser(e){const{debug:t,other:o}=getOptions(),{enable:r,...i}=t,n={headless:!o.browserShellMode||"shell",userDataDir:"tmp",args:e||[],handleSIGINT:!1,handleSIGTERM:!1,handleSIGHUP:!1,waitForInitialPage:!1,defaultViewport:null,...r&&i};if(!browser){let e=0;const t=async()=>{try{log(3,`[browser] Attempting to get a browser instance (try ${++e}).`),browser=await puppeteer.launch(n)}catch(o){if(logWithStack(1,o,"[browser] Failed to launch a browser instance."),!(e<25))throw o;log(3,`[browser] Retry to open a browser (${e} out of 25).`),await new Promise((e=>setTimeout(e,4e3))),await t()}};try{await t(),"shell"===n.headless&&log(3,"[browser] Launched browser in shell mode."),r&&log(3,"[browser] Launched browser in debug mode.")}catch(e){throw new ExportError("[browser] Maximum retries to open a browser instance reached.",500).setError(e)}if(!browser)throw new ExportError("[browser] Cannot find a browser to open.",500)}return browser}async function closeBrowser(){browser&&browser.connected&&await browser.close(),browser=null,log(4,"[browser] Closed the browser.")}async function newPage(e){if(!browser||!browser.connected)throw new ExportError("[browser] Browser is not yet connected.",500);if(e.page=await browser.newPage(),await e.page.setCacheEnabled(!1),await _setPageContent(e.page),_setPageEvents(e.page),!e.page||e.page.isClosed())throw new ExportError("[browser] The page is invalid or closed.",400)}async function clearPage(e,t=!1){try{if(e.page&&!e.page.isClosed())return t?(await e.page.goto("about:blank",{waitUntil:"domcontentloaded"}),await _setPageContent(e.page)):await e.page.evaluate((()=>{document.body.innerHTML='<div id="chart-container"><div id="container"></div></div>'})),!0}catch(t){logWithStack(2,t,`[pool] Pool resource [${e.id}] - Content of the page could not be cleared.`),e.workCount=getOptions().pool.workLimit+1}return!1}async function addPageResources(e,t){const o=[],r=t.resources;if(r){const i=[];if(r.js&&i.push({content:r.js}),r.files)for(const e of r.files){const t=!e.startsWith("http");i.push(t?{content:fs.readFileSync(getAbsolutePath(e),"utf8")}:{url:e})}for(const t of i)try{o.push(await e.addScriptTag(t))}catch(e){logWithStack(2,e,"[browser] The JS resource cannot be loaded.")}i.length=0;const n=[];if(r.css){let i=r.css.match(/@import\s*([^;]*);/g);if(i)for(let e of i)e&&(e=e.replace("url(","").replace("@import","").replace(/"/g,"").replace(/'/g,"").replace(/;/,"").replace(/\)/g,"").trim(),e.startsWith("http")?n.push({url:e}):t.allowFileResources&&n.push({path:path.join(__dirname$1,e)}));n.push({content:r.css.replace(/@import\s*([^;]*);/g,"")||" "});for(const t of n)try{o.push(await e.addStyleTag(t))}catch(e){logWithStack(2,e,"[browser] The CSS resource cannot be loaded.")}n.length=0}}return o}async function clearPageResources(e,t){try{for(const e of t)await e.dispose();await e.evaluate((()=>{if("undefined"!=typeof Highcharts){const e=Highcharts.charts;if(Array.isArray(e)&&e.length)for(const t of e)t&&t.destroy(),Highcharts.charts.shift()}const[...e]=document.getElementsByTagName("script"),[,...t]=document.getElementsByTagName("style"),[...o]=document.getElementsByTagName("link");for(const r of[...e,...t,...o])r.remove()}))}catch(e){logWithStack(2,e,"[browser] Could not clear page's resources.")}}async function _setPageContent(e){await e.setContent(template,{waitUntil:"domcontentloaded"}),await e.addScriptTag({path:path.join(getCachePath(),"sources.js")}),await e.evaluate(setupHighcharts)}function _setPageEvents(e){const{debug:t}=getOptions();e.on("pageerror",(async()=>{e.isClosed()})),t.enable&&t.listenToConsole&&e.on("console",(e=>{console.log(`[debug] ${e.text()}`)}))}var cssTemplate=()=>"\n\nhtml, body {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n#table-div, #sliders, #datatable, #controls, .ld-row {\n  display: none;\n  height: 0;\n}\n\n#chart-container {\n  box-sizing: border-box;\n  margin: 0;\n  overflow: auto;\n  font-size: 0;\n}\n\n#chart-container > figure, div {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n\n",svgTemplate=e=>`\n<!DOCTYPE html>\n<html lang='en-US'>\n  <head>\n    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n    <title>Highcharts Export</title>\n  </head>\n  <style>\n    ${cssTemplate()}\n  </style>\n  <body>\n    <div id="chart-container">\n      ${e}\n    </div>\n  </body>\n</html>\n\n`;async function puppeteerExport(e,t,o){const r=[];try{let i=!1;if(t.svg){if(log(4,"[export] Treating as SVG input."),"svg"===t.type)return t.svg;i=!0,await e.setContent(svgTemplate(t.svg),{waitUntil:"domcontentloaded"})}else log(4,"[export] Treating as JSON config."),await e.evaluate(createChart,t,o);r.push(...await addPageResources(e,o));const n=i?await e.evaluate((e=>{const t=document.querySelector("#chart-container svg:first-of-type"),o=t.height.baseVal.value*e,r=t.width.baseVal.value*e;return document.body.style.zoom=e,document.body.style.margin="0px",{chartHeight:o,chartWidth:r}}),parseFloat(t.scale)):await e.evaluate((()=>{const{chartHeight:e,chartWidth:t}=window.Highcharts.charts[0];return document.body.style.zoom=1,{chartHeight:e,chartWidth:t}})),{x:s,y:a}=await _getClipRegion(e),l=Math.abs(Math.ceil(n.chartHeight||t.height)),c=Math.abs(Math.ceil(n.chartWidth||t.width));let p;switch(await e.setViewport({height:l,width:c,deviceScaleFactor:i?1:parseFloat(t.scale)}),t.type){case"svg":p=await _createSVG(e);break;case"png":case"jpeg":p=await _createImage(e,t.type,{width:c,height:l,x:s,y:a},t.rasterizationTimeout);break;case"pdf":p=await _createPDF(e,l,c,t.rasterizationTimeout);break;default:throw new ExportError(`[export] Unsupported output format: ${t.type}.`,400)}return await clearPageResources(e,r),p}catch(t){return await clearPageResources(e,r),t}}async function _getClipRegion(e){return e.$eval("#chart-container",(e=>{const{x:t,y:o,width:r,height:i}=e.getBoundingClientRect();return{x:t,y:o,width:r,height:Math.trunc(i>1?i:500)}}))}async function _createSVG(e){return e.$eval("#container svg:first-of-type",(e=>e.outerHTML))}async function _createImage(e,t,o,r){return Promise.race([e.screenshot({type:t,clip:o,encoding:"base64",fullPage:!1,optimizeForSpeed:!0,captureBeyondViewport:!0,..."png"!==t?{quality:80}:{},omitBackground:"png"==t}),new Promise(((e,t)=>setTimeout((()=>t(new ExportError("Rasterization timeout",408))),r||1500)))])}async function _createPDF(e,t,o,r){return await e.emulateMediaType("screen"),e.pdf({height:t+1,width:o,encoding:"base64",timeout:r||1500})}let pool=null;const poolStats={exportsAttempted:0,exportsPerformed:0,exportsDropped:0,exportsFromSvg:0,exportsFromOptions:0,exportsFromSvgAttempts:0,exportsFromOptionsAttempts:0,timeSpent:0,timeSpentAverage:0};async function initPool(e,t){await createBrowser(t);try{if(log(3,`[pool] Initializing pool with workers: min ${e.minWorkers}, max ${e.maxWorkers}.`),pool)return void log(4,"[pool] Already initialized, please kill it before creating a new one.");e.minWorkers>e.maxWorkers&&(e.minWorkers=e.maxWorkers),pool=new tarn.Pool({..._factory(e),min:e.minWorkers,max:e.maxWorkers,acquireTimeoutMillis:e.acquireTimeout,createTimeoutMillis:e.createTimeout,destroyTimeoutMillis:e.destroyTimeout,idleTimeoutMillis:e.idleTimeout,createRetryIntervalMillis:e.createRetryInterval,reapIntervalMillis:e.reaperInterval,propagateCreateError:!1}),pool.on("release",(async e=>{const t=await clearPage(e,!1);log(4,`[pool] Pool resource [${e.id}] - Releasing a worker. Clear page status: ${t}.`)})),pool.on("destroySuccess",((e,t)=>{log(4,`[pool] Pool resource [${t.id}] - Destroyed a worker successfully.`),t.page=null}));const t=[];for(let o=0;o<e.minWorkers;o++)try{const e=await pool.acquire().promise;t.push(e)}catch(e){logWithStack(2,e,"[pool] Could not create an initial resource.")}t.forEach((e=>{pool.release(e)})),log(3,"[pool] The pool is ready"+(t.length?` with ${t.length} initial resources waiting.`:"."))}catch(e){throw new ExportError("[pool] Could not configure and create the pool of workers.",500).setError(e)}}async function killPool(){if(log(3,"[pool] Killing pool with all workers and closing browser."),pool){for(const e of pool.used)pool.release(e.resource);pool.destroyed||(await pool.destroy(),log(4,"[pool] Destroyed the pool of resources.")),pool=null}await closeBrowser()}async function postWork(e){let t;try{if(log(4,"[pool] Work received, starting to process."),++poolStats.exportsAttempted,e.pool.benchmarking&&getPoolInfo(),!pool)throw new ExportError("[pool] Work received, but pool has not been started.",500);const o=measureTime();try{log(4,"[pool] Acquiring a worker handle."),t=await pool.acquire().promise,e.server.benchmarking&&log(5,"[benchmark] "+(e.requestId?`Request [${e.requestId}] - `:""),`Acquiring a worker handle took ${o()}ms.`)}catch(t){throw new ExportError(`[pool] ${e.requestId?`Request [${e.requestId}] - `:""}Error encountered when acquiring an available entry: ${o()}ms.`,400).setError(t)}if(log(4,"[pool] Acquired a worker handle."),!t.page)throw t.workCount=e.pool.workLimit+1,new ExportError("[pool] Resolved worker page is invalid: the pool setup is wonky.",400);const r=getNewDateTime();log(4,`[pool] Pool resource [${t.id}] - Starting work on this pool entry.`);const i=measureTime(),n=await puppeteerExport(t.page,e.export,e.customLogic);if(n instanceof Error)throw"Rasterization timeout"===n.message&&(t.workCount=e.pool.workLimit+1,t.page=null),"TimeoutError"===n.name||"Rasterization timeout"===n.message?new ExportError(`[pool] ${e.requestId?`Request [${e.requestId}] - `:""}Rasterization timeout: your chart may be too complex or large, and failed to render within the allotted time.`).setError(n):new ExportError(`[pool] ${e.requestId?`Request [${e.requestId}] - `:""}Error encountered during export: ${i()}ms.`).setError(n);e.server.benchmarking&&log(5,"[benchmark] "+(e.requestId?`Request [${e.requestId}] - `:""),`Exporting a chart sucessfully took ${i()}ms.`),pool.release(t);const s=getNewDateTime()-r;return poolStats.timeSpent+=s,poolStats.timeSpentAverage=poolStats.timeSpent/++poolStats.exportsPerformed,log(4,`[pool] Work completed in ${s}ms.`),{result:n,options:e}}catch(e){throw++poolStats.exportsDropped,t&&pool.release(t),e}}function getPoolStats(){return poolStats}function getPoolInfoJSON(){return{min:pool.min,max:pool.max,used:pool.numUsed(),available:pool.numFree(),allCreated:pool.numUsed()+pool.numFree(),pendingAcquires:pool.numPendingAcquires(),pendingCreates:pool.numPendingCreates(),pendingValidations:pool.numPendingValidations(),pendingDestroys:pool.pendingDestroys.length,absoluteAll:pool.numUsed()+pool.numFree()+pool.numPendingAcquires()+pool.numPendingCreates()+pool.numPendingValidations()+pool.pendingDestroys.length}}function getPoolInfo(){const{min:e,max:t,used:o,available:r,allCreated:i,pendingAcquires:n,pendingCreates:s,pendingValidations:a,pendingDestroys:l,absoluteAll:c}=getPoolInfoJSON();log(5,`[pool] The minimum number of resources allowed by pool: ${e}.`),log(5,`[pool] The maximum number of resources allowed by pool: ${t}.`),log(5,`[pool] The number of used resources: ${o}.`),log(5,`[pool] The number of free resources: ${r}.`),log(5,`[pool] The number of all created (used and free) resources: ${i}.`),log(5,`[pool] The number of resources waiting to be acquired: ${n}.`),log(5,`[pool] The number of resources waiting to be created: ${s}.`),log(5,`[pool] The number of resources waiting to be validated: ${a}.`),log(5,`[pool] The number of resources waiting to be destroyed: ${l}.`),log(5,`[pool] The number of all resources: ${c}.`)}function _factory(e){return{create:async()=>{const t={id:uuid.v4(),workCount:Math.round(Math.random()*(e.workLimit/2))};try{const e=getNewDateTime();return await newPage(t),log(3,`[pool] Pool resource [${t.id}] - Successfully created a worker, took ${getNewDateTime()-e}ms.`),t}catch(e){throw log(3,`[pool] Pool resource [${t.id}] - Error encountered when creating a new page.`),e}},validate:async t=>t.page?t.page.isClosed()?(log(3,`[pool] Pool resource [${t.id}] - Validation failed (page is closed or invalid).`),!1):t.page.mainFrame().detached?(log(3,`[pool] Pool resource [${t.id}] - Validation failed (page's frame is detached).`),!1):!(e.workLimit&&++t.workCount>e.workLimit)||(log(3,`[pool] Pool resource [${t.id}] - Validation failed (exceeded the ${e.workLimit} works per resource limit).`),!1):(log(3,`[pool] Pool resource [${t.id}] - Validation failed (no valid page is found).`),!1),destroy:async e=>{if(log(3,`[pool] Pool resource [${e.id}] - Destroying a worker.`),e.page&&!e.page.isClosed())try{e.page.removeAllListeners("pageerror"),e.page.removeAllListeners("console"),e.page.removeAllListeners("framedetached"),await e.page.close()}catch(t){throw log(3,`[pool] Pool resource [${e.id}] - Page could not be closed upon destroying.`),t}}}}function sanitize(e){const t=new jsdom.JSDOM("").window;return DOMPurify(t).sanitize(e,{ADD_TAGS:["foreignObject"]})}let allowCodeExecution=!1;async function singleExport(e){if(!e||!e.export)throw new ExportError("[chart] No expected `export` options were found. Please provide one of the following options: `infile`, `instr`, `options`, or `svg` to generate a valid image.",400);e=validateOptions(e),await startExport({export:e.export,customLogic:e.customLogic},(async(e,t)=>{if(e)throw e;const{b64:o,outfile:r,type:i}=t.options.export;try{o?fs.writeFileSync(`${r.split(".").shift()||"chart"}.txt`,getBase64(t.result,i)):fs.writeFileSync(r||`chart.${i}`,"svg"!==i?Buffer.from(t.result,"base64"):t.result)}catch(e){throw new ExportError("[chart] Error while saving a chart.",500).setError(e)}await killPool()}))}async function batchExport(e){if(!(e&&e.export&&e.export.batch))throw new ExportError("[chart] No expected `export` options were found. Please provide the `batch` option to generate valid images.",400);{e=validateOptions(e);const t=[];for(let o of e.export.batch.split(";")||[])o=o.split("="),2===o.length?t.push(startExport({export:{...e.export,infile:o[0],outfile:o[1]},customLogic:e.customLogic},((e,t)=>{if(e)throw e;const{b64:o,outfile:r,type:i}=t.options.export;try{o?fs.writeFileSync(`${r.split(".").shift()||"chart"}.txt`,getBase64(t.result,i)):fs.writeFileSync(r,"svg"!==i?Buffer.from(t.result,"base64"):t.result)}catch(e){throw new ExportError("[chart] Error while saving a chart.",500).setError(e)}}))):log(2,"[chart] No correct pair found for the batch export.");const o=await Promise.allSettled(t);await killPool(),o.forEach(((e,t)=>{e.reason&&logWithStack(1,e.reason,`[chart] Batch export number ${t+1} could not be correctly completed.`)}))}}async function startExport(e,t){try{if(!isObject(e))throw new ExportError("[chart] Incorrect value of the provided `exportingOptions`. Needs to be an object.",400);const o=mergeOptions(deepCopy(getOptions()),{export:e.export,customLogic:e.customLogic}),r=o.export;if(log(4,"[chart] Starting the exporting process."),null!==r.infile){let e;log(4,"[chart] Attempting to export from a file input.");try{e=fs.readFileSync(getAbsolutePath(r.infile),"utf8")}catch(e){throw new ExportError("[chart] Error loading content from a file input.",400).setError(e)}if(r.infile.endsWith(".svg"))r.svg=validateOption("svg",e);else{if(!r.infile.endsWith(".json"))throw new ExportError("[chart] Incorrect value of the `infile` option.",400);r.instr=validateOption("instr",e)}}if(null!==r.svg){log(4,"[chart] Attempting to export from an SVG input."),++getPoolStats().exportsFromSvgAttempts;const e=await _exportFromSvg(sanitize(r.svg),o);return++getPoolStats().exportsFromSvg,t(null,e)}if(null!==r.instr||null!==r.options){log(4,"[chart] Attempting to export from options input."),++getPoolStats().exportsFromOptionsAttempts;const e=await _exportFromOptions(r.instr||r.options,o);return++getPoolStats().exportsFromOptions,t(null,e)}return t(new ExportError("[chart] No valid input specified. Check if at least one of the following parameters is correctly set: 'infile', 'instr', 'options', or 'svg'.",400))}catch(e){return t(e)}}function getAllowCodeExecution(){return allowCodeExecution}function setAllowCodeExecution(e){allowCodeExecution=e}async function _exportFromSvg(e,t){if("string"==typeof e&&(e.indexOf("<svg")>=0||e.indexOf("<?xml")>=0))return log(4,"[chart] Parsing input as SVG."),t.export.svg=e,t.export.instr=null,t.export.options=null,_prepareExport(t);throw new ExportError("[chart] Not a correct SVG input.",400)}async function _exportFromOptions(e,t){log(4,"[chart] Parsing input from options.");const o=isAllowedConfig(e,!0,t.customLogic.allowCodeExecution);if(null===o||"string"!=typeof o||!o.startsWith("{")||!o.endsWith("}"))throw new ExportError("[chart] Invalid configuration provided - Only options configurations and SVG are allowed for this server. If this is your server, JavaScript custom code can be enabled by starting the server with the `allowCodeExecution` options set to true.",403);return t.export.instr=o,t.export.svg=null,_prepareExport(t)}async function _prepareExport(e){const{export:t,customLogic:o}=e;return t.type=fixType(t.type,t.outfile),t.outfile=fixOutfile(t.type,t.outfile),t.constr=fixConstr(t.constr),log(3,`[chart] The custom logic is ${o.allowCodeExecution?"allowed":"disallowed"}.`),_handleCustomLogic(o,o.allowCodeExecution),_handleGlobalAndTheme(t,o.allowFileResources,o.allowCodeExecution),e.export={...t,..._findChartSize(t)},postWork(e)}function _findChartSize(e){const{chart:t,exporting:o}=e.options||isAllowedConfig(e.instr)||!1,{chart:r,exporting:i}=isAllowedConfig(e.globalOptions)||!1,{chart:n,exporting:s}=isAllowedConfig(e.themeOptions)||!1,a=roundNumber(Math.max(.1,Math.min(e.scale||o?.scale||i?.scale||s?.scale||e.defaultScale||1,5)),2),l={height:e.height||o?.sourceHeight||t?.height||i?.sourceHeight||r?.height||s?.sourceHeight||n?.height||e.defaultHeight||400,width:e.width||o?.sourceWidth||t?.width||i?.sourceWidth||r?.width||s?.sourceWidth||n?.width||e.defaultWidth||600,scale:a};for(let[e,t]of Object.entries(l))l[e]="string"==typeof t?+t.replace(/px|%/gi,""):t;return l}function _handleCustomLogic(e,t){if(t){if("string"==typeof e.resources)e.resources=_handleResources(e.resources,e.allowFileResources,!0);else if(!e.resources)try{e.resources=_handleResources(fs.readFileSync(getAbsolutePath("resources.json"),"utf8"),e.allowFileResources,!0)}catch(e){log(2,"[chart] Unable to load the default `resources.json` file.")}try{e.customCode=wrapAround(e.customCode,e.allowFileResources),e.customCode=validateOption("customCode",e.customCode)}catch(t){logWithStack(2,t,"[chart] The `customCode` cannot be loaded."),e.customCode=null}try{e.callback=wrapAround(e.callback,e.allowFileResources,!0),e.callback=validateOption("callback",e.callback)}catch(t){logWithStack(2,t,"[chart] The `callback` cannot be loaded."),e.callback=null}[null,void 0].includes(e.customCode)&&log(3,"[chart] No value for the `customCode` option found."),[null,void 0].includes(e.callback)&&log(3,"[chart] No value for the `callback` option found."),[null,void 0].includes(e.resources)&&log(3,"[chart] No value for the `resources` option found.")}else if(e.callback||e.resources||e.customCode)throw e.callback=null,e.resources=null,e.customCode=null,new ExportError("[chart] The 'callback', 'resources', and 'customCode' options have been disabled for this server.",403)}function _handleResources(e=null,t,o){const r=["js","css","files"];let i=e,n=!1;if(t&&e.endsWith(".json"))try{i=isAllowedConfig(fs.readFileSync(getAbsolutePath(e),"utf8"),!1,o)}catch{return null}else i=isAllowedConfig(e,!1,o),i&&!t&&delete i.files;for(const e in i)r.includes(e)?n||(n=!0):delete i[e];return n?(i.files&&(i.files=i.files.map((e=>e.trim())),(!i.files||i.files.length<=0)&&delete i.files),i=validateOption("resources",i),i):null}function _handleGlobalAndTheme(e,t,o){["globalOptions","themeOptions"].forEach((r=>{try{e[r]&&(t&&"string"==typeof e[r]&&e[r].endsWith(".json")?e[r]=isAllowedConfig(fs.readFileSync(getAbsolutePath(e[r]),"utf8"),!0,o):e[r]=isAllowedConfig(e[r],!0,o),e[r]=validateOption(r,e[r]))}catch(t){logWithStack(2,t,`[chart] The \`${r}\` cannot be loaded.`),e[r]=null}})),[null,void 0].includes(e.globalOptions)&&log(3,"[chart] No value for the `globalOptions` option found."),[null,void 0].includes(e.themeOptions)&&log(3,"[chart] No value for the `themeOptions` option found.")}const timerIds=[];function addTimer(e){timerIds.push(e)}function clearAllTimers(){log(4,"[timer] Clearing all registered intervals and timeouts.");for(const e of timerIds)clearInterval(e),clearTimeout(e)}function logErrorMiddleware(e,t,o,r){return logWithStack(1,e),"development"!==getOptions().other.nodeEnv&&delete e.stack,r(e)}function returnErrorMiddleware(e,t,o,r){const{message:i,stack:n}=e,s=e.statusCode||400;o.status(s).json({statusCode:s,message:i,stack:n})}function errorMiddleware(e){e.use(logErrorMiddleware),e.use(returnErrorMiddleware)}function rateLimitingMiddleware(e,t){try{if(t.enable){const o="Too many requests, you have been rate limited. Please try again later.",r={window:t.window||1,maxRequests:t.maxRequests||30,delay:t.delay||0,trustProxy:t.trustProxy||!1,skipKey:t.skipKey||null,skipToken:t.skipToken||null};r.trustProxy&&e.enable("trust proxy");const i=rateLimit({windowMs:60*r.window*1e3,limit:r.maxRequests,delayMs:r.delay,handler:(e,t)=>{t.format({json:()=>{t.status(429).send({message:o})},default:()=>{t.status(429).send(o)}})},skip:e=>null!==r.skipKey&&null!==r.skipToken&&e.query.key===r.skipKey&&e.query.access_token===r.skipToken&&(log(4,"[rate limiting] Skipping rate limiter."),!0)});e.use(i),log(3,`[rate limiting] Enabled rate limiting with ${r.maxRequests} requests per ${r.window} minute for each IP, trusting proxy: ${r.trustProxy}.`)}}catch(e){throw new ExportError("[rate limiting] Could not configure and set the rate limiting options.",500).setError(e)}}function contentTypeMiddleware(e,t,o){try{const t=e.headers["content-type"]||"";if(!t.includes("application/json")&&!t.includes("application/x-www-form-urlencoded")&&!t.includes("multipart/form-data"))throw new ExportError("[validation] Content-Type must be application/json, application/x-www-form-urlencoded, or multipart/form-data.",415);return o()}catch(e){return o(e)}}function requestBodyMiddleware(e,t,o){try{const t=e.body,r=uuid.v4();if(!t||isObjectEmpty(t))throw log(2,`[validation] Request [${r}] - The request from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Received payload is empty.`),new ExportError(`[validation] Request [${r}] - The request body is required. Please ensure that your Content-Type header is correct. Accepted types are 'application/json' and 'multipart/form-data'.`,400);const i=getAllowCodeExecution(),n=isAllowedConfig(t.instr||t.options||t.infile||t.data,!0,i);if(null===n&&!t.svg)throw log(2,`[validation] Request [${r}] - The request from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Received payload is missing correct chart data for export: ${JSON.stringify(t)}.`),new ExportError(`Request [${r}] - [validation] No correct chart data found. Ensure that you are using either application/json or multipart/form-data headers. If sending JSON, make sure the chart data is in the 'infile', 'options', or 'data' attribute. If sending SVG, ensure it is in the 'svg' attribute.`,400);if(t.svg&&isPrivateRangeUrlFound(t.svg))throw new ExportError(`Request [${r}] - [validation] SVG potentially contain at least one forbidden URL in 'xlink:href' element. Please review the SVG content and ensure that all referenced URLs comply with security policies.`,400);return e.validatedOptions=validateOptions({requestId:r,export:{instr:n,svg:t.svg,outfile:t.outfile||`${e.params.filename||"chart"}.${t.type||"png"}`,type:t.type,constr:t.constr,b64:t.b64,noDownload:t.noDownload,height:t.height,width:t.width,scale:t.scale,globalOptions:isAllowedConfig(t.globalOptions,!0,i),themeOptions:isAllowedConfig(t.themeOptions,!0,i)},customLogic:{allowCodeExecution:i,allowFileResources:!1,customCode:t.customCode,callback:t.callback,resources:isAllowedConfig(t.resources,!0,i)}}),o()}catch(e){return o(e)}}function validationMiddleware(e){e.post(["/","/:filename"],contentTypeMiddleware),e.post(["/","/:filename"],requestBodyMiddleware)}const reversedMime={png:"image/png",jpeg:"image/jpeg",gif:"image/gif",pdf:"application/pdf",svg:"image/svg+xml"};async function requestExport(e,t,o){try{const o=measureTime();let r=!1;e.socket.on("close",(e=>{e&&(r=!0)}));const i=e.validatedOptions,n=i.requestId;log(4,`[export] Request [${n}] - Got an incoming HTTP request.`),await startExport(i,((i,s)=>{if(e.socket.removeAllListeners("close"),r)log(3,`[export] Request [${n}] - The client closed the connection before the chart finished processing.`);else{if(i)throw i;if(!s||!s.result)throw log(2,`[export] Request [${n}] - Request from ${e.headers["x-forwarded-for"]||e.connection.remoteAddress} was incorrect. Received result is ${s.result}.`),new ExportError(`[export] Request [${n}] - Unexpected return of the export result from the chart generation. Please check your request data.`,400);if(s.result){log(3,`[export] Request [${n}] - The whole exporting process took ${o()}ms.`);const{type:e,b64:r,noDownload:i,outfile:a}=s.options.export;return r?t.send(getBase64(s.result,e)):(t.header("Content-Type",reversedMime[e]||"image/png"),i||t.attachment(a),"svg"===e?t.send(s.result):t.send(Buffer.from(s.result,"base64")))}}}))}catch(e){return o(e)}}function exportRoutes(e){e.post("/",requestExport),e.post("/:filename",requestExport)}const serverStartTime=new Date,packageFile=JSON.parse(fs.readFileSync(path.join(__dirname$1,"package.json"),"utf8")),successRates=[],recordInterval=6e4,windowSize=30;function _calculateMovingAverage(){return successRates.reduce(((e,t)=>e+t),0)/successRates.length}function _startSuccessRate(){return setInterval((()=>{const e=getPoolStats(),t=0===e.exportsAttempted?1:e.exportsPerformed/e.exportsAttempted*100;successRates.push(t),successRates.length>windowSize&&successRates.shift()}),recordInterval)}function healthRoutes(e){addTimer(_startSuccessRate()),e.get("/health",((e,t,o)=>{try{log(4,"[health] Returning server health.");const e=getPoolStats(),o=successRates.length,r=_calculateMovingAverage();t.send({status:"OK",bootTime:serverStartTime,uptime:`${Math.floor((getNewDateTime()-serverStartTime.getTime())/1e3/60)} minutes`,serverVersion:packageFile.version,highchartsVersion:getHighchartsVersion(),averageExportTime:e.timeSpentAverage,attemptedExports:e.exportsAttempted,performedExports:e.exportsPerformed,failedExports:e.exportsDropped,sucessRatio:e.exportsPerformed/e.exportsAttempted*100,pool:getPoolInfoJSON(),period:o,movingAverage:r,message:isNaN(r)||!successRates.length?"Too early to report. No exports made yet. Please check back soon.":`Last ${o} minutes had a success rate of ${r.toFixed(2)}%.`,svgExports:e.exportsFromSvg,jsonExports:e.exportsFromOptions,svgExportsAttempts:e.exportsFromSvgAttempts,jsonExportsAttempts:e.exportsFromOptionsAttempts})}catch(e){return o(e)}}))}function uiRoutes(e){e.get(getOptions().ui.route||"/",((e,t,o)=>{try{log(4,"[ui] Returning UI for the export."),t.sendFile(path.join(__dirname$1,"public","index.html"),{acceptRanges:!1})}catch(e){return o(e)}}))}function versionChangeRoutes(e){e.post("/version_change/:newVersion",(async(e,t,o)=>{try{log(4,"[version] Changing Highcharts version.");const o=envs.HIGHCHARTS_ADMIN_TOKEN;if(!o||!o.length)throw new ExportError("[version] The server is not configured to perform run-time version changes: HIGHCHARTS_ADMIN_TOKEN is not set.",401);const r=e.get("hc-auth");if(!r||r!==o)throw new ExportError("[version] Invalid or missing token: Set the token in the hc-auth header.",401);let i=e.params.newVersion;try{i=validateOption("version",e.params.newVersion)}catch(e){throw new ExportError(`[version] Version is incorrect: ${e.message}`,400).setError(e)}if(!i)throw new ExportError("[version] No new version supplied.",400);try{await updateHighchartsVersion(i)}catch(e){throw new ExportError(`[version] Version change: ${e.message}`,400).setError(e)}t.status(200).send({statusCode:200,highchartsVersion:getHighchartsVersion(),message:`Successfully updated Highcharts to version: ${i}.`})}catch(e){return o(e)}}))}const activeServers=new Map,app=express();async function startServer(e){try{const t=updateOptions(validateOptions({server:e}));if(!(e=t.server).enable||!app)throw new ExportError("[server] Server cannot be started (not enabled or no correct Express app found).",500);const o=1024*e.uploadLimit*1024,r=multer.memoryStorage(),i=multer({storage:r,limits:{fieldSize:o}});if(app.disable("x-powered-by"),app.use(cors({methods:["POST","GET","OPTIONS"]})),app.use(((e,t,o)=>{t.set("Accept-Ranges","none"),o()})),app.use(express.json({limit:o})),app.use(express.urlencoded({extended:!0,limit:o})),app.use(i.none()),app.use(express.static(path.join(__dirname$1,"public"))),!e.ssl.force){const t=http.createServer(app);_attachServerErrorHandlers(t),t.listen(e.port,e.host,(()=>{activeServers.set(e.port,t),log(3,`[server] Started HTTP server on ${e.host}:${e.port}.`)}))}if(e.ssl.enable){let t,o;try{t=await promises.readFile(path.join(getAbsolutePath(e.ssl.certPath),"server.key"),"utf8"),o=await promises.readFile(path.join(getAbsolutePath(e.ssl.certPath),"server.crt"),"utf8")}catch(t){log(2,`[server] Unable to load key/certificate from the '${e.ssl.certPath}' path. Could not run secured layer server.`)}if(t&&o){const r=https.createServer({key:t,cert:o},app);_attachServerErrorHandlers(r),r.listen(e.ssl.port,e.host,(()=>{activeServers.set(e.ssl.port,r),log(3,`[server] Started HTTPS server on ${e.host}:${e.ssl.port}.`)}))}}rateLimitingMiddleware(app,e.rateLimiting),validationMiddleware(app),exportRoutes(app),healthRoutes(app),uiRoutes(app),versionChangeRoutes(app),errorMiddleware(app)}catch(e){throw new ExportError("[server] Could not configure and start the server.",500).setError(e)}}function closeServers(){if(activeServers.size>0){log(4,"[server] Closing all servers.");for(const[e,t]of activeServers)t.close((()=>{activeServers.delete(e),log(4,`[server] Closed server on port: ${e}.`)}))}}function getServers(){return activeServers}function getExpress(){return express}function getApp(){return app}function enableRateLimiting(e){const t=updateOptions(validateOptions({server:{rateLimiting:e}}));rateLimitingMiddleware(app,t.server.rateLimitingOptions)}function use(e,...t){app.use(e,...t)}function get(e,...t){app.get(e,...t)}function post(e,...t){app.post(e,...t)}function _attachServerErrorHandlers(e){e.on("clientError",((e,t)=>{logWithStack(1,e,`[server] Client error: ${e.message}, destroying socket.`),t.destroy()})),e.on("error",(e=>{logWithStack(1,e,`[server] Server error: ${e.message}`)})),e.on("connection",(e=>{e.on("error",(e=>{logWithStack(1,e,`[server] Socket error: ${e.message}`)}))}))}var server={startServer:startServer,closeServers:closeServers,getServers:getServers,getExpress:getExpress,getApp:getApp,enableRateLimiting:enableRateLimiting,use:use,get:get,post:post};async function shutdownCleanUp(e=0){await Promise.allSettled([clearAllTimers(),closeServers(),killPool()]),process.exit(e)}async function initExport(e={}){const t=updateOptions(validateOptions(e),!0);setAllowCodeExecution(t.customLogic.allowCodeExecution),initLogging(t.logging),t.other.listenToProcessExits&&_attachProcessExitListeners(),await checkAndUpdateCache(t.highcharts,t.server.proxy),await initPool(t.pool,t.puppeteer.args)}function _attachProcessExitListeners(){log(3,"[process] Attaching exit listeners to the process."),process.on("exit",(e=>{log(4,`[process] Process exited with code ${e}.`)})),process.on("SIGINT",(async(e,t)=>{log(4,`[process] The ${e} event with code: ${t}.`),await shutdownCleanUp()})),process.on("SIGTERM",(async(e,t)=>{log(4,`[process] The ${e} event with code: ${t}.`),await shutdownCleanUp()})),process.on("SIGHUP",(async(e,t)=>{log(4,`[process] The ${e} event with code: ${t}.`),await shutdownCleanUp()})),process.on("uncaughtException",(async(e,t)=>{logWithStack(1,e,`[process] The ${t} error.`),await shutdownCleanUp(1)}))}var index={...server,getOptions:getOptions,setGlobalOptions:setGlobalOptions,mapToNewOptions:mapToNewOptions,validateOption:validateOption,validateOptions:validateOptions,initExport:initExport,singleExport:singleExport,batchExport:batchExport,startExport:startExport,killPool:killPool,shutdownCleanUp:shutdownCleanUp,log:log,logWithStack:logWithStack,logZodIssues:logZodIssues,setLogLevel:function(e){setLogLevel(updateOptions(validateOptions({logging:{level:e}})).logging.level)},enableConsoleLogging:function(e){enableConsoleLogging(updateOptions(validateOptions({logging:{toConsole:e}})).logging.toConsole)},enableFileLogging:function(e,t,o){const r=updateOptions(validateOptions({logging:{dest:e,file:t,toFile:o}}));enableFileLogging(r.logging.dest,r.logging.file,r.logging.toFile)}};exports.default=index,exports.initExport=initExport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

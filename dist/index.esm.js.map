{"version":3,"file":"index.esm.js","sources":["../lib/utils.js","../lib/logger.js","../lib/schemas/config.js","../lib/envs.js","../lib/config.js","../lib/fetch.js","../lib/errors/ExportError.js","../lib/cache.js","../lib/highcharts.js","../lib/browser.js","../templates/svgExport/css.js","../templates/svgExport/svgExport.js","../lib/export.js","../lib/pool.js","../lib/sanitize.js","../lib/chart.js","../lib/timer.js","../lib/server/middlewares/error.js","../lib/server/middlewares/rateLimiting.js","../lib/server/middlewares/validation.js","../lib/server/routes/export.js","../lib/server/routes/health.js","../lib/server/routes/ui.js","../lib/server/routes/versionChange.js","../lib/server/server.js","../lib/resourceRelease.js","../lib/index.js"],"sourcesContent":["/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview The Highcharts Export Server utility module provides\r\n * a comprehensive set of helper functions and constants designed to streamline\r\n * and enhance various operations required for Highcharts export tasks.\r\n */\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { isAbsolute, normalize, resolve } from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\nconst MAX_BACKOFF_ATTEMPTS = 6;\r\n\r\n// The directory path\r\nexport const __dirname = fileURLToPath(new URL('../.', import.meta.url));\r\n\r\n/**\r\n * Clears and standardizes text by replacing multiple consecutive whitespace\r\n * characters with a single space and trimming any leading or trailing\r\n * whitespace.\r\n *\r\n * @function clearText\r\n *\r\n * @param {string} text - The input text to be cleared.\r\n * @param {RegExp} [rule=/\\s\\s+/g] - The regular expression rule to match\r\n * multiple consecutive whitespace characters. The default value\r\n * is the '/\\s\\s+/g' RegExp.\r\n * @param {string} [replacer=' '] - The string used to replace multiple\r\n * consecutive whitespace characters. The default value is the ' ' string.\r\n *\r\n * @returns {string} The cleared and standardized text.\r\n */\r\nexport function clearText(text, rule = /\\s\\s+/g, replacer = ' ') {\r\n  return text.replaceAll(rule, replacer).trim();\r\n}\r\n\r\n/**\r\n * Creates a deep copy of the given object or array.\r\n *\r\n * @function deepCopy\r\n *\r\n * @param {(Object|Array)} objArr - The object or array to be deeply copied.\r\n *\r\n * @returns {(Object|Array)} The deep copy of the provided object or array.\r\n */\r\nexport function deepCopy(objArr) {\r\n  // If the `objArr` is null or not of the `object` type, return it\r\n  if (objArr === null || typeof objArr !== 'object') {\r\n    return objArr;\r\n  }\r\n\r\n  // Prepare either a new array or a new object\r\n  const objArrCopy = Array.isArray(objArr) ? [] : {};\r\n\r\n  // Recursively copy each property\r\n  for (const key in objArr) {\r\n    if (Object.prototype.hasOwnProperty.call(objArr, key)) {\r\n      objArrCopy[key] = deepCopy(objArr[key]);\r\n    }\r\n  }\r\n\r\n  // Return the copied object\r\n  return objArrCopy;\r\n}\r\n\r\n/**\r\n * Implements an exponential backoff strategy for retrying a function until\r\n * a certain number of attempts are reached.\r\n *\r\n * @async\r\n * @function expBackoff\r\n *\r\n * @param {Function} fn - The function to be retried.\r\n * @param {number} [attempt=0] - The current attempt number. The default value\r\n * is `0`.\r\n * @param {...unknown} args - Arguments to be passed to the function.\r\n *\r\n * @returns {Promise<unknown>} A Promise that resolves to the result\r\n * of the function if successful.\r\n *\r\n * @throws {Error} Throws an `Error` if the maximum number of attempts\r\n * is reached.\r\n */\r\nexport async function expBackoff(fn, attempt = 0, ...args) {\r\n  try {\r\n    // Try to call the function\r\n    return await fn(...args);\r\n  } catch (error) {\r\n    // Calculate delay in ms\r\n    const delayInMs = 2 ** attempt * 1000;\r\n\r\n    // If the attempt exceeds the maximum attempts of repeat, throw an error\r\n    if (++attempt >= MAX_BACKOFF_ATTEMPTS) {\r\n      throw error;\r\n    }\r\n\r\n    // Wait given amount of time\r\n    await new Promise((response) => setTimeout(response, delayInMs));\r\n\r\n    /// TO DO: Correct\r\n    // // Information about the resource timeout\r\n    // log(\r\n    //   3,\r\n    //   `[utils] Waited ${delayInMs}ms until next call for the resource of ID: ${args[0]}.`\r\n    // );\r\n\r\n    // Try again\r\n    return expBackoff(fn, attempt, ...args);\r\n  }\r\n}\r\n\r\n/**\r\n * Adjusts the constructor name by transforming and normalizing it based\r\n * on common chart types.\r\n *\r\n * @function fixConstr\r\n *\r\n * @param {string} constr - The original constructor name to be fixed.\r\n *\r\n * @returns {string} The corrected constructor name, or 'chart' if the input\r\n * is not recognized.\r\n */\r\nexport function fixConstr(constr) {\r\n  try {\r\n    // Fix the constructor by lowering casing\r\n    const fixedConstr = `${constr.toLowerCase().replace('chart', '')}Chart`;\r\n\r\n    // Handle the case where the result is just 'Chart'\r\n    if (fixedConstr === 'Chart') {\r\n      fixedConstr.toLowerCase();\r\n    }\r\n\r\n    // Return the corrected constructor, otherwise default to 'chart'\r\n    return ['chart', 'stockChart', 'mapChart', 'ganttChart'].includes(\r\n      fixedConstr\r\n    )\r\n      ? fixedConstr\r\n      : 'chart';\r\n  } catch {\r\n    // Default to 'chart' in case of any error\r\n    return 'chart';\r\n  }\r\n}\r\n\r\n/**\r\n * Fixes the outfile based on provided type.\r\n *\r\n * @function fixOutfile\r\n *\r\n * @param {string} type - The original export type.\r\n * @param {string} outfile - The file path or name.\r\n *\r\n * @returns {string} The corrected outfile.\r\n */\r\nexport function fixOutfile(type, outfile) {\r\n  // Get the file name from the `outfile` option\r\n  const fileName = getAbsolutePath(outfile || 'chart')\r\n    .split('.')\r\n    .shift();\r\n\r\n  // Return a correct outfile\r\n  return `${fileName}.${type}`;\r\n}\r\n\r\n/**\r\n * Fixes the export type based on MIME types and file extensions.\r\n *\r\n * @function fixType\r\n *\r\n * @param {string} type - The original export type.\r\n * @param {string} [outfile=null] - The file path or name. The default value\r\n * is `null`.\r\n *\r\n * @returns {string} The corrected export type.\r\n */\r\nexport function fixType(type, outfile = null) {\r\n  // MIME types\r\n  const mimeTypes = {\r\n    'image/png': 'png',\r\n    'image/jpeg': 'jpeg',\r\n    'application/pdf': 'pdf',\r\n    'image/svg+xml': 'svg'\r\n  };\r\n\r\n  // Get formats\r\n  const formats = Object.values(mimeTypes);\r\n\r\n  // Check if type and outfile's extensions are the same\r\n  if (outfile) {\r\n    const outType = outfile.split('.').pop();\r\n\r\n    // Support the JPG type\r\n    if (outType === 'jpg') {\r\n      type = 'jpeg';\r\n    } else if (formats.includes(outType) && type !== outType) {\r\n      type = outType;\r\n    }\r\n  }\r\n\r\n  // Return a correct type\r\n  return mimeTypes[type] || formats.find((t) => t === type) || 'png';\r\n}\r\n\r\n/**\r\n * Checks if the given path is relative or absolute and returns the corrected,\r\n * absolute path.\r\n *\r\n * @function isAbsolutePath\r\n *\r\n * @param {string} path - The path to be checked on.\r\n *\r\n * @returns {string} The absolute path.\r\n */\r\nexport function getAbsolutePath(path) {\r\n  return isAbsolute(path) ? normalize(path) : resolve(path);\r\n}\r\n\r\n/**\r\n * Converts input data to a Base64 string based on the export type.\r\n *\r\n * @function getBase64\r\n *\r\n * @param {string} input - The input to be transformed to Base64 format.\r\n * @param {string} type - The original export type.\r\n *\r\n * @returns {string} The Base64 string representation of the input.\r\n */\r\nexport function getBase64(input, type) {\r\n  // For pdf and svg types the input must be transformed to Base64 from a buffer\r\n  if (type === 'pdf' || type == 'svg') {\r\n    return Buffer.from(input, 'utf8').toString('base64');\r\n  }\r\n\r\n  // For png and jpeg input is already a Base64 string\r\n  return input;\r\n}\r\n\r\n/**\r\n * Returns stringified date without the GMT text information.\r\n *\r\n * @function getNewDate\r\n */\r\nexport function getNewDate() {\r\n  // Get rid of the GMT text information\r\n  return new Date().toString().split('(')[0].trim();\r\n}\r\n\r\n/**\r\n * Returns the stored time value in milliseconds.\r\n *\r\n * @function getNewDateTime\r\n */\r\nexport function getNewDateTime() {\r\n  return new Date().getTime();\r\n}\r\n\r\n/**\r\n * Checks if the given item is an object.\r\n *\r\n * @function isObject\r\n *\r\n * @param {unknown} item - The item to be checked.\r\n *\r\n * @returns {boolean} True if the item is an object, false otherwise.\r\n */\r\nexport function isObject(item) {\r\n  return Object.prototype.toString.call(item) === '[object Object]';\r\n}\r\n\r\n/**\r\n * Checks if the given object is empty.\r\n *\r\n * @function isObjectEmpty\r\n *\r\n * @param {Object} item - The object to be checked.\r\n *\r\n * @returns {boolean} True if the object is empty, false otherwise.\r\n */\r\nexport function isObjectEmpty(item) {\r\n  return (\r\n    typeof item === 'object' &&\r\n    !Array.isArray(item) &&\r\n    item !== null &&\r\n    Object.keys(item).length === 0\r\n  );\r\n}\r\n\r\n/**\r\n * Checks if a private IP range URL is found in the given string.\r\n *\r\n * @function isPrivateRangeUrlFound\r\n *\r\n * @param {string} item - The string to be checked for a private IP range URL.\r\n *\r\n * @returns {boolean} True if a private IP range URL is found, false otherwise.\r\n */\r\nexport function isPrivateRangeUrlFound(item) {\r\n  const regexPatterns = [\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?localhost\\b/,\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b/,\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b/,\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?172\\.(1[6-9]|2[0-9]|3[0-1])\\.\\d{1,3}\\.\\d{1,3}\\b/,\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?192\\.168\\.\\d{1,3}\\.\\d{1,3}\\b/\r\n  ];\r\n\r\n  return regexPatterns.some((pattern) => pattern.test(item));\r\n}\r\n\r\n/**\r\n * Utility to measure elapsed time using the Node.js `process.hrtime()` method.\r\n *\r\n * @function measureTime\r\n *\r\n * @returns {Function} A function to calculate the elapsed time in milliseconds.\r\n */\r\nexport function measureTime() {\r\n  const start = process.hrtime.bigint();\r\n  return () => Number(process.hrtime.bigint() - start) / 1000000;\r\n}\r\n\r\n/**\r\n * Rounds a number to the specified precision.\r\n *\r\n * @function roundNumber\r\n *\r\n * @param {number} value - The number to be rounded.\r\n * @param {number} precision - The number of decimal places to round to.\r\n *\r\n * @returns {number} The rounded number.\r\n */\r\nexport function roundNumber(value, precision = 1) {\r\n  const multiplier = Math.pow(10, precision || 0);\r\n  return Math.round(+value * multiplier) / multiplier;\r\n}\r\n\r\n/**\r\n * Converts a value to a boolean.\r\n *\r\n * @function toBoolean\r\n *\r\n * @param {unknown} item - The value to be converted to a boolean.\r\n *\r\n * @returns {boolean} The boolean representation of the input value.\r\n */\r\nexport function toBoolean(item) {\r\n  return ['false', 'undefined', 'null', 'NaN', '0', ''].includes(item)\r\n    ? false\r\n    : !!item;\r\n}\r\n\r\n/**\r\n * Wraps custom code to execute it safely.\r\n *\r\n * @function wrapAround\r\n *\r\n * @param {string} customCode - The custom code to be wrapped.\r\n * @param {boolean} allowFileResources - Flag to allow loading code from a file.\r\n * @param {boolean} [isCallback=false] - Flag that indicates the returned code\r\n * must be in a callback format.\r\n *\r\n * @returns {(string|null)} The wrapped custom code or null if wrapping fails.\r\n */\r\nexport function wrapAround(customCode, allowFileResources, isCallback = false) {\r\n  if (customCode && typeof customCode === 'string') {\r\n    customCode = customCode.trim();\r\n\r\n    if (customCode.endsWith('.js')) {\r\n      // Load a file if the file resources are allowed\r\n      return allowFileResources\r\n        ? wrapAround(\r\n            readFileSync(getAbsolutePath(customCode), 'utf8'),\r\n            allowFileResources,\r\n            isCallback\r\n          )\r\n        : null;\r\n    } else if (\r\n      !isCallback &&\r\n      (customCode.startsWith('function()') ||\r\n        customCode.startsWith('function ()') ||\r\n        customCode.startsWith('()=>') ||\r\n        customCode.startsWith('() =>'))\r\n    ) {\r\n      // Treat a function as a self-invoking expression\r\n      return `(${customCode})()`;\r\n    }\r\n\r\n    // Or return as a stringified code\r\n    return customCode.replace(/;$/, '');\r\n  }\r\n}\r\n\r\nexport default {\r\n  __dirname,\r\n  clearText,\r\n  deepCopy,\r\n  expBackoff,\r\n  fixConstr,\r\n  fixOutfile,\r\n  fixType,\r\n  getAbsolutePath,\r\n  getBase64,\r\n  getNewDate,\r\n  getNewDateTime,\r\n  isObject,\r\n  isObjectEmpty,\r\n  isPrivateRangeUrlFound,\r\n  measureTime,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview A module for managing logging functionality with customizable\r\n * log levels, console and file logging options, and error handling support.\r\n * The module also ensures that file-based logs are stored in a structured\r\n * directory, creating the necessary paths automatically if they do not exist.\r\n */\r\n\r\nimport { appendFile, existsSync, mkdirSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nimport { getAbsolutePath, getNewDate } from './utils.js';\r\n\r\n// The available colors\r\nconst colors = ['red', 'yellow', 'blue', 'gray', 'green'];\r\n\r\n// The default logging config\r\nconst logging = {\r\n  // Flags for logging status\r\n  toConsole: true,\r\n  toFile: false,\r\n  pathCreated: false,\r\n  // Full path to the log file\r\n  pathToLog: '',\r\n  // Log levels\r\n  levelsDesc: [\r\n    {\r\n      title: 'error',\r\n      color: colors[0]\r\n    },\r\n    {\r\n      title: 'warning',\r\n      color: colors[1]\r\n    },\r\n    {\r\n      title: 'notice',\r\n      color: colors[2]\r\n    },\r\n    {\r\n      title: 'verbose',\r\n      color: colors[3]\r\n    },\r\n    {\r\n      title: 'benchmark',\r\n      color: colors[4]\r\n    }\r\n  ]\r\n};\r\n\r\n/**\r\n * Logs a message with a specified log level. Accepts a variable number\r\n * of arguments. The arguments after the `level` are passed to `console.log`\r\n * and/or used to construct and append messages to a log file.\r\n *\r\n * @function log\r\n *\r\n * @param {...unknown} args - An array of arguments where the first is the log\r\n * level and the remaining are strings used to build the log message.\r\n *\r\n * @returns {void} Exits the function execution if attempting to log at a level\r\n * higher than allowed.\r\n */\r\nexport function log(...args) {\r\n  const [newLevel, ...texts] = args;\r\n\r\n  // Current logging options\r\n  const { levelsDesc, level } = logging;\r\n\r\n  // Check if the log level is within a correct range or is it a benchmark log\r\n  if (\r\n    newLevel !== 5 &&\r\n    (newLevel === 0 || newLevel > level || level > levelsDesc.length)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  // Create a message's prefix\r\n  const prefix = `${getNewDate()} [${levelsDesc[newLevel - 1].title}] -`;\r\n\r\n  // Log to file\r\n  if (logging.toFile) {\r\n    _logToFile(texts, prefix);\r\n  }\r\n\r\n  // Log to console\r\n  if (logging.toConsole) {\r\n    console.log.apply(\r\n      undefined,\r\n      [prefix.toString()[logging.levelsDesc[newLevel - 1].color]].concat(texts)\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Logs an error message along with its stack trace. Optionally, a custom message\r\n * can be provided.\r\n *\r\n * @function logWithStack\r\n *\r\n * @param {number} newLevel - The log level.\r\n * @param {Error} error - The error object containing the stack trace.\r\n * @param {string} customMessage - An optional custom message to be included\r\n * in the log alongside the error.\r\n *\r\n * @returns {void} Exits the function execution if attempting to log at a level\r\n * higher than allowed.\r\n */\r\nexport function logWithStack(newLevel, error, customMessage) {\r\n  // Get the main message\r\n  const mainMessage = customMessage || (error && error.message) || '';\r\n\r\n  // Current logging options\r\n  const { level, levelsDesc } = logging;\r\n\r\n  // Check if the log level is within a correct range\r\n  if (newLevel === 0 || newLevel > level || level > levelsDesc.length) {\r\n    return;\r\n  }\r\n\r\n  // Create a message's prefix\r\n  const prefix = `${getNewDate()} [${levelsDesc[newLevel - 1].title}] -`;\r\n\r\n  // Add the whole stack message\r\n  const stackMessage = error && error.stack;\r\n\r\n  // Combine custom message or error message with error stack message, if exists\r\n  const texts = [mainMessage];\r\n  if (stackMessage) {\r\n    texts.push('\\n', stackMessage);\r\n  }\r\n\r\n  // Log to file\r\n  if (logging.toFile) {\r\n    _logToFile(texts, prefix);\r\n  }\r\n\r\n  // Log to console\r\n  if (logging.toConsole) {\r\n    console.log.apply(\r\n      undefined,\r\n      [prefix.toString()[logging.levelsDesc[newLevel - 1].color]].concat([\r\n        texts.shift()[colors[newLevel - 1]],\r\n        ...texts\r\n      ])\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Initializes logging with the specified logging configuration.\r\n *\r\n * @function initLogging\r\n *\r\n * @param {Object} loggingOptions - The configuration object containing\r\n * `logging` options.\r\n */\r\nexport function initLogging(loggingOptions) {\r\n  // Get options from the `loggingOptions` object\r\n  const { level, dest, file, toConsole, toFile } = loggingOptions;\r\n\r\n  // Reset flags to the default values\r\n  logging.pathCreated = false;\r\n  logging.pathToLog = '';\r\n\r\n  // Set the logging level\r\n  setLogLevel(level);\r\n\r\n  // Set the console logging\r\n  enableConsoleLogging(toConsole);\r\n\r\n  // Set the file logging\r\n  enableFileLogging(dest, file, toFile);\r\n}\r\n\r\n/**\r\n * Sets the log level to the specified value. Log levels are (`0` = no logging,\r\n * `1` = error, `2` = warning, `3` = notice, `4` = verbose, or `5` = benchmark).\r\n *\r\n * @function setLogLevel\r\n *\r\n * @param {number} level - The log level to be set.\r\n */\r\nexport function setLogLevel(level) {\r\n  if (\r\n    Number.isInteger(level) &&\r\n    level >= 0 &&\r\n    level <= logging.levelsDesc.length\r\n  ) {\r\n    // Update the module logging's `level` option\r\n    logging.level = level;\r\n  }\r\n}\r\n\r\n/**\r\n * Enables console logging.\r\n *\r\n * @function enableConsoleLogging\r\n *\r\n * @param {boolean} toConsole - The flag for setting the logging to the console.\r\n */\r\nexport function enableConsoleLogging(toConsole) {\r\n  // Update the module logging's `toConsole` option\r\n  logging.toConsole = !!toConsole;\r\n}\r\n\r\n/**\r\n * Enables file logging with the specified destination and log file name.\r\n *\r\n * @function enableFileLogging\r\n *\r\n * @param {string} dest - The destination path where the log file should\r\n * be saved.\r\n * @param {string} file - The name of the log file.\r\n * @param {boolean} toFile - A flag indicating whether logging should\r\n * be directed to a file.\r\n */\r\nexport function enableFileLogging(dest, file, toFile) {\r\n  // Update the module logging's `toFile` option\r\n  logging.toFile = !!toFile;\r\n\r\n  // Set the `dest` and `file` options only if the file logging is enabled\r\n  if (logging.toFile) {\r\n    logging.dest = dest || '';\r\n    logging.file = file || '';\r\n  }\r\n}\r\n\r\n/**\r\n * Logs the provided texts to a file, if file logging is enabled. It creates\r\n * the necessary directory structure if not already created and appends\r\n * the content, including an optional prefix, to the specified log file.\r\n *\r\n * @function _logToFile\r\n *\r\n * @param {Array.<string>} texts - An array of texts to be logged.\r\n * @param {string} prefix - An optional prefix to be added to each log entry.\r\n */\r\nfunction _logToFile(texts, prefix) {\r\n  if (!logging.pathCreated) {\r\n    // Create if does not exist\r\n    !existsSync(getAbsolutePath(logging.dest)) &&\r\n      mkdirSync(getAbsolutePath(logging.dest));\r\n\r\n    // Create the full path\r\n    logging.pathToLog = getAbsolutePath(join(logging.dest, logging.file));\r\n\r\n    // We now assume the path is available, e.g. it's the responsibility\r\n    // of the user to create the path with the correct access rights.\r\n    logging.pathCreated = true;\r\n  }\r\n\r\n  // Add the content to a file\r\n  appendFile(\r\n    logging.pathToLog,\r\n    [prefix].concat(texts).join(' ') + '\\n',\r\n    (error) => {\r\n      if (error && logging.toFile && logging.pathCreated) {\r\n        logging.toFile = false;\r\n        logging.pathCreated = false;\r\n        logWithStack(2, error, `[logger] Unable to write to log file.`);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nexport default {\r\n  log,\r\n  logWithStack,\r\n  initLogging,\r\n  setLogLevel,\r\n  enableConsoleLogging,\r\n  enableFileLogging\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview Configuration management module for the Highcharts Export Server.\r\n * Provides default configurations that support environment variables, CLI\r\n * arguments, and interactive prompts for customization of options and features.\r\n * Additionally, it maps legacy options to modern structures, generates nested\r\n * argument mappings, and displays CLI usage information.\r\n */\r\n\r\n/**\r\n * The configuration object containing all available options, organized\r\n * by sections.\r\n *\r\n * This object includes:\r\n * - Default values for each option\r\n * - Data types for validation\r\n * - Names of corresponding environment variables\r\n * - Descriptions of each property\r\n * - Information used for prompts in interactive configuration\r\n * - [Optional] Corresponding CLI argument names for CLI usage\r\n * - [Optional] Legacy names from the previous PhantomJS-based server\r\n */\r\nexport const defaultConfig = {\r\n  puppeteer: {\r\n    args: {\r\n      value: [\r\n        '--allow-running-insecure-content',\r\n        '--ash-no-nudges',\r\n        '--autoplay-policy=user-gesture-required',\r\n        '--block-new-web-contents',\r\n        '--disable-accelerated-2d-canvas',\r\n        '--disable-background-networking',\r\n        '--disable-background-timer-throttling',\r\n        '--disable-backgrounding-occluded-windows',\r\n        '--disable-breakpad',\r\n        '--disable-checker-imaging',\r\n        '--disable-client-side-phishing-detection',\r\n        '--disable-component-extensions-with-background-pages',\r\n        '--disable-component-update',\r\n        '--disable-default-apps',\r\n        '--disable-dev-shm-usage',\r\n        '--disable-domain-reliability',\r\n        '--disable-extensions',\r\n        '--disable-features=CalculateNativeWinOcclusion,InterestFeedContentSuggestions,WebOTP',\r\n        '--disable-hang-monitor',\r\n        '--disable-ipc-flooding-protection',\r\n        '--disable-logging',\r\n        '--disable-notifications',\r\n        '--disable-offer-store-unmasked-wallet-cards',\r\n        '--disable-popup-blocking',\r\n        '--disable-print-preview',\r\n        '--disable-prompt-on-repost',\r\n        '--disable-renderer-backgrounding',\r\n        '--disable-search-engine-choice-screen',\r\n        '--disable-session-crashed-bubble',\r\n        '--disable-setuid-sandbox',\r\n        '--disable-site-isolation-trials',\r\n        '--disable-speech-api',\r\n        '--disable-sync',\r\n        '--enable-unsafe-webgpu',\r\n        '--hide-crash-restore-bubble',\r\n        '--hide-scrollbars',\r\n        '--metrics-recording-only',\r\n        '--mute-audio',\r\n        '--no-default-browser-check',\r\n        '--no-first-run',\r\n        '--no-pings',\r\n        '--no-sandbox',\r\n        '--no-startup-window',\r\n        '--no-zygote',\r\n        '--password-store=basic',\r\n        '--process-per-tab',\r\n        '--use-mock-keychain'\r\n      ],\r\n      types: ['string[]'],\r\n      envLink: 'PUPPETEER_ARGS',\r\n      cliName: 'puppeteerArgs',\r\n      description: 'Array of Puppeteer arguments',\r\n      promptOptions: {\r\n        type: 'list',\r\n        separator: ';'\r\n      }\r\n    }\r\n  },\r\n  highcharts: {\r\n    version: {\r\n      value: 'latest',\r\n      types: ['string'],\r\n      envLink: 'HIGHCHARTS_VERSION',\r\n      description: 'Highcharts version',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    cdnUrl: {\r\n      value: 'https://code.highcharts.com',\r\n      types: ['string'],\r\n      envLink: 'HIGHCHARTS_CDN_URL',\r\n      description: 'CDN URL for Highcharts scripts',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    forceFetch: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'HIGHCHARTS_FORCE_FETCH',\r\n      description: 'Flag to refetch scripts after each server rerun',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    cachePath: {\r\n      value: '.cache',\r\n      types: ['string'],\r\n      envLink: 'HIGHCHARTS_CACHE_PATH',\r\n      description: 'Directory path for cached Highcharts scripts',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    coreScripts: {\r\n      value: ['highcharts', 'highcharts-more', 'highcharts-3d'],\r\n      types: ['string[]'],\r\n      envLink: 'HIGHCHARTS_CORE_SCRIPTS',\r\n      description: 'Highcharts core scripts to fetch',\r\n      promptOptions: {\r\n        type: 'multiselect',\r\n        instructions: 'Space: Select specific, A: Select all, Enter: Confirm'\r\n      }\r\n    },\r\n    moduleScripts: {\r\n      value: [\r\n        'stock',\r\n        'map',\r\n        'gantt',\r\n        'exporting',\r\n        'parallel-coordinates',\r\n        'accessibility',\r\n        // 'annotations-advanced',\r\n        'boost-canvas',\r\n        'boost',\r\n        'data',\r\n        'data-tools',\r\n        'draggable-points',\r\n        'static-scale',\r\n        'broken-axis',\r\n        'heatmap',\r\n        'tilemap',\r\n        'tiledwebmap',\r\n        'timeline',\r\n        'treemap',\r\n        'treegraph',\r\n        'item-series',\r\n        'drilldown',\r\n        'histogram-bellcurve',\r\n        'bullet',\r\n        'funnel',\r\n        'funnel3d',\r\n        'geoheatmap',\r\n        'pyramid3d',\r\n        'networkgraph',\r\n        'overlapping-datalabels',\r\n        'pareto',\r\n        'pattern-fill',\r\n        'pictorial',\r\n        'price-indicator',\r\n        'sankey',\r\n        'arc-diagram',\r\n        'dependency-wheel',\r\n        'series-label',\r\n        'series-on-point',\r\n        'solid-gauge',\r\n        'sonification',\r\n        // 'stock-tools',\r\n        'streamgraph',\r\n        'sunburst',\r\n        'variable-pie',\r\n        'variwide',\r\n        'vector',\r\n        'venn',\r\n        'windbarb',\r\n        'wordcloud',\r\n        'xrange',\r\n        'no-data-to-display',\r\n        'drag-panes',\r\n        'debugger',\r\n        'dumbbell',\r\n        'lollipop',\r\n        'cylinder',\r\n        'organization',\r\n        'dotplot',\r\n        'marker-clusters',\r\n        'hollowcandlestick',\r\n        'heikinashi',\r\n        'flowmap',\r\n        'export-data',\r\n        'navigator',\r\n        'textpath'\r\n      ],\r\n      types: ['string[]'],\r\n      envLink: 'HIGHCHARTS_MODULE_SCRIPTS',\r\n      description: 'Highcharts module scripts to fetch',\r\n      promptOptions: {\r\n        type: 'multiselect',\r\n        instructions: 'Space: Select specific, A: Select all, Enter: Confirm'\r\n      }\r\n    },\r\n    indicatorScripts: {\r\n      value: ['indicators-all'],\r\n      types: ['string[]'],\r\n      envLink: 'HIGHCHARTS_INDICATOR_SCRIPTS',\r\n      description: 'Highcharts indicator scripts to fetch',\r\n      promptOptions: {\r\n        type: 'multiselect',\r\n        instructions: 'Space: Select specific, A: Select all, Enter: Confirm'\r\n      }\r\n    },\r\n    customScripts: {\r\n      value: [\r\n        'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/moment.min.js',\r\n        'https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.45/moment-timezone-with-data.min.js'\r\n      ],\r\n      types: ['string[]'],\r\n      envLink: 'HIGHCHARTS_CUSTOM_SCRIPTS',\r\n      description: 'Additional custom scripts or dependencies to fetch',\r\n      promptOptions: {\r\n        type: 'list',\r\n        separator: ';'\r\n      }\r\n    }\r\n  },\r\n  export: {\r\n    infile: {\r\n      value: null,\r\n      types: ['string', 'null'],\r\n      envLink: 'EXPORT_INFILE',\r\n      description:\r\n        'Input filename with type, formatted correctly as JSON or SVG',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    instr: {\r\n      value: null,\r\n      types: ['Object', 'string', 'null'],\r\n      envLink: 'EXPORT_INSTR',\r\n      description:\r\n        'Overrides the `infile` with JSON, stringified JSON, or SVG input',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    options: {\r\n      value: null,\r\n      types: ['Object', 'string', 'null'],\r\n      envLink: 'EXPORT_OPTIONS',\r\n      description: 'Alias for the `instr` option',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    svg: {\r\n      value: null,\r\n      types: ['string', 'null'],\r\n      envLink: 'EXPORT_SVG',\r\n      description: 'SVG string representation of the chart to render',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    batch: {\r\n      value: null,\r\n      types: ['string', 'null'],\r\n      envLink: 'EXPORT_BATCH',\r\n      description:\r\n        'Batch job string with input/output pairs: \"in=out;in=out;...\"',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    outfile: {\r\n      value: null,\r\n      types: ['string', 'null'],\r\n      envLink: 'EXPORT_OUTFILE',\r\n      description:\r\n        'Output filename with type. Can be jpeg, png, pdf, or svg and ignores `type` option',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    type: {\r\n      value: 'png',\r\n      types: ['string'],\r\n      envLink: 'EXPORT_TYPE',\r\n      description: 'File export format. Can be jpeg, png, pdf, or svg',\r\n      promptOptions: {\r\n        type: 'select',\r\n        hint: 'Default: png',\r\n        choices: ['png', 'jpeg', 'pdf', 'svg']\r\n      }\r\n    },\r\n    constr: {\r\n      value: 'chart',\r\n      types: ['string'],\r\n      envLink: 'EXPORT_CONSTR',\r\n      description:\r\n        'Chart constructor. Can be chart, stockChart, mapChart, or ganttChart',\r\n      promptOptions: {\r\n        type: 'select',\r\n        hint: 'Default: chart',\r\n        choices: ['chart', 'stockChart', 'mapChart', 'ganttChart']\r\n      }\r\n    },\r\n    b64: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'EXPORT_B64',\r\n      description:\r\n        'Whether or not to the chart should be received in Base64 format instead of binary',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    noDownload: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'EXPORT_NO_DOWNLOAD',\r\n      description:\r\n        'Whether or not to include or exclude attachment headers in the response',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    height: {\r\n      value: null,\r\n      types: ['number', 'null'],\r\n      envLink: 'EXPORT_HEIGHT',\r\n      description: 'Height of the exported chart, overrides chart settings',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    width: {\r\n      value: null,\r\n      types: ['number', 'null'],\r\n      envLink: 'EXPORT_WIDTH',\r\n      description: 'Width of the exported chart, overrides chart settings',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    scale: {\r\n      value: null,\r\n      types: ['number', 'null'],\r\n      envLink: 'EXPORT_SCALE',\r\n      description:\r\n        'Scale of the exported chart, overrides chart settings. Ranges from 0.1 to 5.0',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    defaultHeight: {\r\n      value: 400,\r\n      types: ['number'],\r\n      envLink: 'EXPORT_DEFAULT_HEIGHT',\r\n      description: 'Default height of the exported chart if not set',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    defaultWidth: {\r\n      value: 600,\r\n      types: ['number'],\r\n      envLink: 'EXPORT_DEFAULT_WIDTH',\r\n      description: 'Default width of the exported chart if not set',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    defaultScale: {\r\n      value: 1,\r\n      types: ['number'],\r\n      envLink: 'EXPORT_DEFAULT_SCALE',\r\n      description:\r\n        'Default scale of the exported chart if not set. Ranges from 0.1 to 5.0',\r\n      promptOptions: {\r\n        type: 'number',\r\n        min: 0.1,\r\n        max: 5\r\n      }\r\n    },\r\n    globalOptions: {\r\n      value: null,\r\n      types: ['Object', 'string', 'null'],\r\n      envLink: 'EXPORT_GLOBAL_OPTIONS',\r\n      description:\r\n        'JSON, stringified JSON or filename with global options for Highcharts.setOptions',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    themeOptions: {\r\n      value: null,\r\n      types: ['Object', 'string', 'null'],\r\n      envLink: 'EXPORT_THEME_OPTIONS',\r\n      description:\r\n        'JSON, stringified JSON or filename with theme options for Highcharts.setOptions',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    rasterizationTimeout: {\r\n      value: 1500,\r\n      types: ['number'],\r\n      envLink: 'EXPORT_RASTERIZATION_TIMEOUT',\r\n      description: 'Milliseconds to wait for webpage rendering',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    }\r\n  },\r\n  customLogic: {\r\n    allowCodeExecution: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'CUSTOM_LOGIC_ALLOW_CODE_EXECUTION',\r\n      description:\r\n        'Allows or disallows execution of arbitrary code during exporting',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    allowFileResources: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'CUSTOM_LOGIC_ALLOW_FILE_RESOURCES',\r\n      description:\r\n        'Allows or disallows injection of filesystem resources (disabled in server mode)',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    customCode: {\r\n      value: null,\r\n      types: ['string', 'null'],\r\n      envLink: 'CUSTOM_LOGIC_CUSTOM_CODE',\r\n      description:\r\n        'Custom code to execute before chart initialization. Can be a function, code wrapped in a function, or a .js filename',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    callback: {\r\n      value: null,\r\n      types: ['string', 'null'],\r\n      envLink: 'CUSTOM_LOGIC_CALLBACK',\r\n      description:\r\n        'JavaScript code to run during construction. Can be a function or a .js filename',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    resources: {\r\n      value: null,\r\n      types: ['Object', 'string', 'null'],\r\n      envLink: 'CUSTOM_LOGIC_RESOURCES',\r\n      description:\r\n        'Additional resources as JSON, stringified JSON, or filename, containing files, js, and css sections',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    loadConfig: {\r\n      value: null,\r\n      types: ['string', 'null'],\r\n      envLink: 'CUSTOM_LOGIC_LOAD_CONFIG',\r\n      legacyName: 'fromFile',\r\n      description: 'File with a pre-defined configuration to use',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    createConfig: {\r\n      value: null,\r\n      types: ['string', 'null'],\r\n      envLink: 'CUSTOM_LOGIC_CREATE_CONFIG',\r\n      description:\r\n        'Prompt-based option setting, saved to a provided config file',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    }\r\n  },\r\n  server: {\r\n    enable: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'SERVER_ENABLE',\r\n      cliName: 'enableServer',\r\n      description: 'Starts the server when true',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    host: {\r\n      value: '0.0.0.0',\r\n      types: ['string'],\r\n      envLink: 'SERVER_HOST',\r\n      description: 'Hostname of the server',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    port: {\r\n      value: 7801,\r\n      types: ['number'],\r\n      envLink: 'SERVER_PORT',\r\n      description: 'Port number for the server',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    uploadLimit: {\r\n      value: 3,\r\n      types: ['number'],\r\n      envLink: 'SERVER_UPLOAD_LIMIT',\r\n      description: 'Maximum request body size in MB',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    benchmarking: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'SERVER_BENCHMARKING',\r\n      cliName: 'serverBenchmarking',\r\n      description:\r\n        'Displays or not action durations in milliseconds during server requests',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    proxy: {\r\n      host: {\r\n        value: null,\r\n        types: ['string', 'null'],\r\n        envLink: 'SERVER_PROXY_HOST',\r\n        cliName: 'proxyHost',\r\n        description: 'Host of the proxy server, if applicable',\r\n        promptOptions: {\r\n          type: 'text'\r\n        }\r\n      },\r\n      port: {\r\n        value: null,\r\n        types: ['number', 'null'],\r\n        envLink: 'SERVER_PROXY_PORT',\r\n        cliName: 'proxyPort',\r\n        description: 'Port of the proxy server, if applicable',\r\n        promptOptions: {\r\n          type: 'number'\r\n        }\r\n      },\r\n      timeout: {\r\n        value: 5000,\r\n        types: ['number'],\r\n        envLink: 'SERVER_PROXY_TIMEOUT',\r\n        cliName: 'proxyTimeout',\r\n        description:\r\n          'Timeout in milliseconds for the proxy server, if applicable',\r\n        promptOptions: {\r\n          type: 'number'\r\n        }\r\n      }\r\n    },\r\n    rateLimiting: {\r\n      enable: {\r\n        value: false,\r\n        types: ['boolean'],\r\n        envLink: 'SERVER_RATE_LIMITING_ENABLE',\r\n        cliName: 'enableRateLimiting',\r\n        description: 'Enables or disables rate limiting on the server',\r\n        promptOptions: {\r\n          type: 'toggle'\r\n        }\r\n      },\r\n      maxRequests: {\r\n        value: 10,\r\n        types: ['number'],\r\n        envLink: 'SERVER_RATE_LIMITING_MAX_REQUESTS',\r\n        legacyName: 'rateLimit',\r\n        description: 'Maximum number of requests allowed per minute',\r\n        promptOptions: {\r\n          type: 'number'\r\n        }\r\n      },\r\n      window: {\r\n        value: 1,\r\n        types: ['number'],\r\n        envLink: 'SERVER_RATE_LIMITING_WINDOW',\r\n        description: 'Time window in minutes for rate limiting',\r\n        promptOptions: {\r\n          type: 'number'\r\n        }\r\n      },\r\n      delay: {\r\n        value: 0,\r\n        types: ['number'],\r\n        envLink: 'SERVER_RATE_LIMITING_DELAY',\r\n        description:\r\n          'Delay duration between successive requests before reaching the limit',\r\n        promptOptions: {\r\n          type: 'number'\r\n        }\r\n      },\r\n      trustProxy: {\r\n        value: false,\r\n        types: ['boolean'],\r\n        envLink: 'SERVER_RATE_LIMITING_TRUST_PROXY',\r\n        description: 'Set to true if the server is behind a load balancer',\r\n        promptOptions: {\r\n          type: 'toggle'\r\n        }\r\n      },\r\n      skipKey: {\r\n        value: null,\r\n        types: ['string', 'null'],\r\n        envLink: 'SERVER_RATE_LIMITING_SKIP_KEY',\r\n        description: 'Key to bypass the rate limiter, used with `skipToken`',\r\n        promptOptions: {\r\n          type: 'text'\r\n        }\r\n      },\r\n      skipToken: {\r\n        value: null,\r\n        types: ['string', 'null'],\r\n        envLink: 'SERVER_RATE_LIMITING_SKIP_TOKEN',\r\n        description: 'Token to bypass the rate limiter, used with `skipKey`',\r\n        promptOptions: {\r\n          type: 'text'\r\n        }\r\n      }\r\n    },\r\n    ssl: {\r\n      enable: {\r\n        value: false,\r\n        types: ['boolean'],\r\n        envLink: 'SERVER_SSL_ENABLE',\r\n        cliName: 'enableSsl',\r\n        description: 'Enables or disables SSL protocol',\r\n        promptOptions: {\r\n          type: 'toggle'\r\n        }\r\n      },\r\n      force: {\r\n        value: false,\r\n        types: ['boolean'],\r\n        envLink: 'SERVER_SSL_FORCE',\r\n        cliName: 'sslForce',\r\n        legacyName: 'sslOnly',\r\n        description: 'Forces the server to use HTTPS only when true',\r\n        promptOptions: {\r\n          type: 'toggle'\r\n        }\r\n      },\r\n      port: {\r\n        value: 443,\r\n        types: ['number'],\r\n        envLink: 'SERVER_SSL_PORT',\r\n        cliName: 'sslPort',\r\n        description: 'Port for the SSL server',\r\n        promptOptions: {\r\n          type: 'number'\r\n        }\r\n      },\r\n      certPath: {\r\n        value: null,\r\n        types: ['string', 'null'],\r\n        envLink: 'SERVER_SSL_CERT_PATH',\r\n        cliName: 'sslCertPath',\r\n        legacyName: 'sslPath',\r\n        description: 'Path to the SSL certificate/key file',\r\n        promptOptions: {\r\n          type: 'text'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  pool: {\r\n    minWorkers: {\r\n      value: 4,\r\n      types: ['number'],\r\n      envLink: 'POOL_MIN_WORKERS',\r\n      description: 'Minimum and initial number of pool workers to spawn',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    maxWorkers: {\r\n      value: 8,\r\n      types: ['number'],\r\n      envLink: 'POOL_MAX_WORKERS',\r\n      legacyName: 'workers',\r\n      description: 'Maximum number of pool workers to spawn',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    workLimit: {\r\n      value: 40,\r\n      types: ['number'],\r\n      envLink: 'POOL_WORK_LIMIT',\r\n      description: 'Number of tasks a worker can handle before restarting',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    acquireTimeout: {\r\n      value: 5000,\r\n      types: ['number'],\r\n      envLink: 'POOL_ACQUIRE_TIMEOUT',\r\n      description: 'Timeout in milliseconds for acquiring a resource',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    createTimeout: {\r\n      value: 5000,\r\n      types: ['number'],\r\n      envLink: 'POOL_CREATE_TIMEOUT',\r\n      description: 'Timeout in milliseconds for creating a resource',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    destroyTimeout: {\r\n      value: 5000,\r\n      types: ['number'],\r\n      envLink: 'POOL_DESTROY_TIMEOUT',\r\n      description: 'Timeout in milliseconds for destroying a resource',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    idleTimeout: {\r\n      value: 30000,\r\n      types: ['number'],\r\n      envLink: 'POOL_IDLE_TIMEOUT',\r\n      description: 'Timeout in milliseconds for destroying idle resources',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    createRetryInterval: {\r\n      value: 200,\r\n      types: ['number'],\r\n      envLink: 'POOL_CREATE_RETRY_INTERVAL',\r\n      description:\r\n        'Interval in milliseconds before retrying resource creation on failure',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    reaperInterval: {\r\n      value: 1000,\r\n      types: ['number'],\r\n      envLink: 'POOL_REAPER_INTERVAL',\r\n      description:\r\n        'Interval in milliseconds to check and destroy idle resources',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    benchmarking: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'POOL_BENCHMARKING',\r\n      cliName: 'poolBenchmarking',\r\n      description: 'Shows statistics for the pool of resources',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    }\r\n  },\r\n  logging: {\r\n    level: {\r\n      value: 4,\r\n      types: ['number'],\r\n      envLink: 'LOGGING_LEVEL',\r\n      cliName: 'logLevel',\r\n      description: 'Logging verbosity level',\r\n      promptOptions: {\r\n        type: 'number',\r\n        round: 0,\r\n        min: 0,\r\n        max: 5\r\n      }\r\n    },\r\n    file: {\r\n      value: 'highcharts-export-server.log',\r\n      types: ['string'],\r\n      envLink: 'LOGGING_FILE',\r\n      cliName: 'logFile',\r\n      description:\r\n        'Log file name. Requires `logToFile` and `logDest` to be set',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    dest: {\r\n      value: 'log',\r\n      types: ['string'],\r\n      envLink: 'LOGGING_DEST',\r\n      cliName: 'logDest',\r\n      description: 'Path to store log files. Requires `logToFile` to be set',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    toConsole: {\r\n      value: true,\r\n      types: ['boolean'],\r\n      envLink: 'LOGGING_TO_CONSOLE',\r\n      cliName: 'logToConsole',\r\n      description: 'Enables or disables console logging',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    toFile: {\r\n      value: true,\r\n      types: ['boolean'],\r\n      envLink: 'LOGGING_TO_FILE',\r\n      cliName: 'logToFile',\r\n      description: 'Enables or disables logging to a file',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    }\r\n  },\r\n  ui: {\r\n    enable: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'UI_ENABLE',\r\n      cliName: 'enableUi',\r\n      description: 'Enables or disables the UI for the export server',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    route: {\r\n      value: '/',\r\n      types: ['string'],\r\n      envLink: 'UI_ROUTE',\r\n      cliName: 'uiRoute',\r\n      description: 'The endpoint route for the UI',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    }\r\n  },\r\n  other: {\r\n    nodeEnv: {\r\n      value: 'production',\r\n      types: ['string'],\r\n      envLink: 'OTHER_NODE_ENV',\r\n      description: 'The Node.js environment type',\r\n      promptOptions: {\r\n        type: 'text'\r\n      }\r\n    },\r\n    listenToProcessExits: {\r\n      value: true,\r\n      types: ['boolean'],\r\n      envLink: 'OTHER_LISTEN_TO_PROCESS_EXITS',\r\n      description: 'Whether or not to attach process.exit handlers',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    noLogo: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'OTHER_NO_LOGO',\r\n      description: 'Display or skip printing the logo on startup',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    hardResetPage: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'OTHER_HARD_RESET_PAGE',\r\n      description: 'Whether or not to reset the page content entirely',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    browserShellMode: {\r\n      value: true,\r\n      types: ['boolean'],\r\n      envLink: 'OTHER_BROWSER_SHELL_MODE',\r\n      description: 'Whether or not to set the browser to run in shell mode',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    }\r\n  },\r\n  debug: {\r\n    enable: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'DEBUG_ENABLE',\r\n      cliName: 'enableDebug',\r\n      description: 'Enables or disables debug mode for the underlying browser',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    headless: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'DEBUG_HEADLESS',\r\n      description:\r\n        'Whether or not to set the browser to run in headless mode during debugging',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    devtools: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'DEBUG_DEVTOOLS',\r\n      description: 'Enables or disables DevTools in headful mode',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    listenToConsole: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'DEBUG_LISTEN_TO_CONSOLE',\r\n      description:\r\n        'Enables or disables listening to console messages from the browser',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    dumpio: {\r\n      value: false,\r\n      types: ['boolean'],\r\n      envLink: 'DEBUG_DUMPIO',\r\n      description:\r\n        'Redirects or not browser stdout and stderr to process.stdout and process.stderr',\r\n      promptOptions: {\r\n        type: 'toggle'\r\n      }\r\n    },\r\n    slowMo: {\r\n      value: 0,\r\n      types: ['number'],\r\n      envLink: 'DEBUG_SLOW_MO',\r\n      description: 'Delays Puppeteer operations by the specified milliseconds',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    },\r\n    debuggingPort: {\r\n      value: 9222,\r\n      types: ['number'],\r\n      envLink: 'DEBUG_DEBUGGING_PORT',\r\n      description: 'Port used for debugging',\r\n      promptOptions: {\r\n        type: 'number'\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Properties nesting level of all options\r\nexport const nestedProps = _createNestedProps(defaultConfig);\r\n\r\n// Properties names that should not be recursively merged\r\nexport const absoluteProps = _createAbsoluteProps(defaultConfig);\r\n\r\n/**\r\n * Recursively generates a mapping of nested argument chains from a nested\r\n * config object. This function traverses a nested object and creates a mapping\r\n * where each key is an argument name (either from `cliName`, `legacyName`,\r\n * or the original key) and each value is a string representing the chain\r\n * of nested properties leading to that argument.\r\n *\r\n * @function _createNestedProps\r\n *\r\n * @param {Object} config - The configuration object.\r\n * @param {Object} [nestedProps={}] - The accumulator object for storing\r\n * the resulting arguments chains.  The default value is an empty object.\r\n * @param {string} [propChain=''] - The current chain of nested properties,\r\n * used internally during recursion.  The default value is an empty string.\r\n *\r\n * @returns {Object} An object mapping argument names to their corresponding\r\n * nested property chains.\r\n */\r\nfunction _createNestedProps(config, nestedProps = {}, propChain = '') {\r\n  Object.keys(config).forEach((key) => {\r\n    // Get the specific section\r\n    const entry = config[key];\r\n\r\n    // Check if there is still more depth to traverse\r\n    if (typeof entry.value === 'undefined') {\r\n      // Recurse into deeper levels of nested arguments\r\n      _createNestedProps(entry, nestedProps, `${propChain}.${key}`);\r\n    } else {\r\n      // Create the chain of nested arguments\r\n      nestedProps[entry.cliName || key] = `${propChain}.${key}`.substring(1);\r\n\r\n      // Support for the legacy, PhantomJS properties names\r\n      if (entry.legacyName !== undefined) {\r\n        nestedProps[entry.legacyName] = `${propChain}.${key}`.substring(1);\r\n      }\r\n    }\r\n  });\r\n\r\n  // Return the object with nested argument chains\r\n  return nestedProps;\r\n}\r\n\r\n/**\r\n * Recursively gathers the names of properties from a configuration object that\r\n * can be treated as absolute properties. These properties have values that\r\n * are objects and do not contain further nested depth when merging an object\r\n * containing these options.\r\n *\r\n * @function _createAbsoluteProps\r\n *\r\n * @param {Object} config - The configuration object.\r\n * @param {Array.<string>} [absoluteProps=[]] - An array to collect the names\r\n * of absolute properties. The default value is an empty array.\r\n *\r\n * @returns {Array.<string>} An array containing the names of absolute\r\n * properties.\r\n */\r\nfunction _createAbsoluteProps(config, absoluteProps = []) {\r\n  Object.keys(config).forEach((key) => {\r\n    // Get the specific section\r\n    const entry = config[key];\r\n\r\n    // Check if there is still more depth to traverse\r\n    if (typeof entry.types === 'undefined') {\r\n      // Recurse into deeper levels\r\n      _createAbsoluteProps(entry, absoluteProps);\r\n    } else {\r\n      // If the option can be an object, save its type in the array\r\n      if (entry.types.includes('Object')) {\r\n        absoluteProps.push(key);\r\n      }\r\n    }\r\n  });\r\n\r\n  // Return the array with the names of absolute properties\r\n  return absoluteProps;\r\n}\r\n\r\nexport default {\r\n  defaultConfig,\r\n  nestedProps,\r\n  absoluteProps\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview This file is responsible for parsing the environment variables\r\n * with the 'zod' library. The parsed environment variables are then exported\r\n * to be used in the application as `envs`. We should not use the `process.env`\r\n * directly in the application as these would not be parsed properly.\r\n *\r\n * The environment variables are parsed and validated only once when\r\n * the application starts. We should write a custom validator or a transformer\r\n * for each of the options.\r\n */\r\n\r\nimport dotenv from 'dotenv';\r\nimport { z } from 'zod';\r\n\r\nimport { defaultConfig } from './schemas/config.js';\r\n\r\n// Load .env into environment variables\r\ndotenv.config();\r\n\r\n// Object with custom validators and transformers, to avoid repetition\r\n// in the Config object\r\nconst v = {\r\n  // Splits string value into elements in an array, trims every element, checks\r\n  // if an array is correct, if it is empty, and if it is, returns undefined\r\n  array: (filterArray) =>\r\n    z\r\n      .string()\r\n      .transform((value) =>\r\n        value\r\n          .split(',')\r\n          .map((value) => value.trim())\r\n          .filter((value) => filterArray.includes(value))\r\n      )\r\n      .transform((value) => (value.length ? value : undefined)),\r\n\r\n  // Allows only true, false and correctly parse the value to boolean\r\n  // or no value in which case the returned value will be undefined\r\n  boolean: () =>\r\n    z\r\n      .enum(['true', 'false', ''])\r\n      .transform((value) => (value !== '' ? value === 'true' : undefined)),\r\n\r\n  // Allows passed values or no value in which case the returned value will\r\n  // be undefined\r\n  enum: (values) =>\r\n    z\r\n      .enum([...values, ''])\r\n      .transform((value) => (value !== '' ? value : undefined)),\r\n\r\n  // Trims the string value and checks if it is empty or contains stringified\r\n  // values such as false, undefined, null, NaN, if it does, returns undefined\r\n  string: () =>\r\n    z\r\n      .string()\r\n      .trim()\r\n      .refine(\r\n        (value) =>\r\n          !['false', 'undefined', 'null', 'NaN'].includes(value) ||\r\n          value === '',\r\n        (value) => ({\r\n          message: `The string contains forbidden values, received '${value}'`\r\n        })\r\n      )\r\n      .transform((value) => (value !== '' ? value : undefined)),\r\n\r\n  // Allows positive numbers or no value in which case the returned value will\r\n  // be undefined\r\n  positiveNum: () =>\r\n    z\r\n      .string()\r\n      .trim()\r\n      .refine(\r\n        (value) =>\r\n          value === '' || (!isNaN(parseFloat(value)) && parseFloat(value) > 0),\r\n        (value) => ({\r\n          message: `The value must be numeric and positive, received '${value}'`\r\n        })\r\n      )\r\n      .transform((value) => (value !== '' ? parseFloat(value) : undefined)),\r\n\r\n  // Allows non-negative numbers or no value in which case the returned value\r\n  // will be undefined\r\n  nonNegativeNum: () =>\r\n    z\r\n      .string()\r\n      .trim()\r\n      .refine(\r\n        (value) =>\r\n          value === '' || (!isNaN(parseFloat(value)) && parseFloat(value) >= 0),\r\n        (value) => ({\r\n          message: `The value must be numeric and non-negative, received '${value}'`\r\n        })\r\n      )\r\n      .transform((value) => (value !== '' ? parseFloat(value) : undefined))\r\n};\r\n\r\nexport const Config = z.object({\r\n  // puppeteer\r\n  PUPPETEER_ARGS: v.string(),\r\n\r\n  // highcharts\r\n  HIGHCHARTS_VERSION: z\r\n    .string()\r\n    .trim()\r\n    .refine(\r\n      (value) => /^(latest|\\d+(\\.\\d+){0,2})$/.test(value) || value === '',\r\n      (value) => ({\r\n        message: `HIGHCHARTS_VERSION must be 'latest', a major version, or in the form XX.YY.ZZ, received '${value}'`\r\n      })\r\n    )\r\n    .transform((value) => (value !== '' ? value : undefined)),\r\n  HIGHCHARTS_CDN_URL: z\r\n    .string()\r\n    .trim()\r\n    .refine(\r\n      (value) =>\r\n        value.startsWith('https://') ||\r\n        value.startsWith('http://') ||\r\n        value === '',\r\n      (value) => ({\r\n        message: `Invalid value for HIGHCHARTS_CDN_URL. It should start with http:// or https://, received '${value}'`\r\n      })\r\n    )\r\n    .transform((value) => (value !== '' ? value : undefined)),\r\n  HIGHCHARTS_FORCE_FETCH: v.boolean(),\r\n  HIGHCHARTS_CACHE_PATH: v.string(),\r\n  HIGHCHARTS_ADMIN_TOKEN: v.string(),\r\n  HIGHCHARTS_CORE_SCRIPTS: v.array(defaultConfig.highcharts.coreScripts.value),\r\n  HIGHCHARTS_MODULE_SCRIPTS: v.array(\r\n    defaultConfig.highcharts.moduleScripts.value\r\n  ),\r\n  HIGHCHARTS_INDICATOR_SCRIPTS: v.array(\r\n    defaultConfig.highcharts.indicatorScripts.value\r\n  ),\r\n  HIGHCHARTS_CUSTOM_SCRIPTS: v.array(\r\n    defaultConfig.highcharts.customScripts.value\r\n  ),\r\n\r\n  // export\r\n  EXPORT_INFILE: v.string(),\r\n  EXPORT_INSTR: v.string(),\r\n  EXPORT_OPTIONS: v.string(),\r\n  EXPORT_SVG: v.string(),\r\n  EXPORT_BATCH: v.string(),\r\n  EXPORT_OUTFILE: v.string(),\r\n  EXPORT_TYPE: v.enum(['jpeg', 'png', 'pdf', 'svg']),\r\n  EXPORT_CONSTR: v.enum(['chart', 'stockChart', 'mapChart', 'ganttChart']),\r\n  EXPORT_B64: v.boolean(),\r\n  EXPORT_NO_DOWNLOAD: v.boolean(),\r\n  EXPORT_HEIGHT: v.positiveNum(),\r\n  EXPORT_WIDTH: v.positiveNum(),\r\n  EXPORT_SCALE: v.positiveNum(),\r\n  EXPORT_DEFAULT_HEIGHT: v.positiveNum(),\r\n  EXPORT_DEFAULT_WIDTH: v.positiveNum(),\r\n  EXPORT_DEFAULT_SCALE: v.positiveNum(),\r\n  EXPORT_GLOBAL_OPTIONS: v.string(),\r\n  EXPORT_THEME_OPTIONS: v.string(),\r\n  EXPORT_RASTERIZATION_TIMEOUT: v.nonNegativeNum(),\r\n\r\n  // custom\r\n  CUSTOM_LOGIC_ALLOW_CODE_EXECUTION: v.boolean(),\r\n  CUSTOM_LOGIC_ALLOW_FILE_RESOURCES: v.boolean(),\r\n  CUSTOM_LOGIC_CUSTOM_CODE: v.string(),\r\n  CUSTOM_LOGIC_CALLBACK: v.string(),\r\n  CUSTOM_LOGIC_RESOURCES: v.string(),\r\n  CUSTOM_LOGIC_LOAD_CONFIG: v.string(),\r\n  CUSTOM_LOGIC_CREATE_CONFIG: v.string(),\r\n\r\n  // server\r\n  SERVER_ENABLE: v.boolean(),\r\n  SERVER_HOST: v.string(),\r\n  SERVER_PORT: v.positiveNum(),\r\n  SERVER_UPLOAD_LIMIT: v.positiveNum(),\r\n  SERVER_BENCHMARKING: v.boolean(),\r\n\r\n  // server proxy\r\n  SERVER_PROXY_HOST: v.string(),\r\n  SERVER_PROXY_PORT: v.positiveNum(),\r\n  SERVER_PROXY_TIMEOUT: v.nonNegativeNum(),\r\n\r\n  // server rate limiting\r\n  SERVER_RATE_LIMITING_ENABLE: v.boolean(),\r\n  SERVER_RATE_LIMITING_MAX_REQUESTS: v.nonNegativeNum(),\r\n  SERVER_RATE_LIMITING_WINDOW: v.nonNegativeNum(),\r\n  SERVER_RATE_LIMITING_DELAY: v.nonNegativeNum(),\r\n  SERVER_RATE_LIMITING_TRUST_PROXY: v.boolean(),\r\n  SERVER_RATE_LIMITING_SKIP_KEY: v.string(),\r\n  SERVER_RATE_LIMITING_SKIP_TOKEN: v.string(),\r\n\r\n  // server ssl\r\n  SERVER_SSL_ENABLE: v.boolean(),\r\n  SERVER_SSL_FORCE: v.boolean(),\r\n  SERVER_SSL_PORT: v.positiveNum(),\r\n  SERVER_SSL_CERT_PATH: v.string(),\r\n\r\n  // pool\r\n  POOL_MIN_WORKERS: v.nonNegativeNum(),\r\n  POOL_MAX_WORKERS: v.nonNegativeNum(),\r\n  POOL_WORK_LIMIT: v.positiveNum(),\r\n  POOL_ACQUIRE_TIMEOUT: v.nonNegativeNum(),\r\n  POOL_CREATE_TIMEOUT: v.nonNegativeNum(),\r\n  POOL_DESTROY_TIMEOUT: v.nonNegativeNum(),\r\n  POOL_IDLE_TIMEOUT: v.nonNegativeNum(),\r\n  POOL_CREATE_RETRY_INTERVAL: v.nonNegativeNum(),\r\n  POOL_REAPER_INTERVAL: v.nonNegativeNum(),\r\n  POOL_BENCHMARKING: v.boolean(),\r\n\r\n  // logger\r\n  LOGGING_LEVEL: z\r\n    .string()\r\n    .trim()\r\n    .refine(\r\n      (value) =>\r\n        value === '' ||\r\n        (!isNaN(parseFloat(value)) &&\r\n          parseFloat(value) >= 0 &&\r\n          parseFloat(value) <= 5),\r\n      (value) => ({\r\n        message: `Invalid value for LOGGING_LEVEL. We only accept values from 0 to 5 as logging levels, received '${value}'`\r\n      })\r\n    )\r\n    .transform((value) => (value !== '' ? parseFloat(value) : undefined)),\r\n  LOGGING_FILE: v.string(),\r\n  LOGGING_DEST: v.string(),\r\n  LOGGING_TO_CONSOLE: v.boolean(),\r\n  LOGGING_TO_FILE: v.boolean(),\r\n\r\n  // ui\r\n  UI_ENABLE: v.boolean(),\r\n  UI_ROUTE: v.string(),\r\n\r\n  // other\r\n  OTHER_NODE_ENV: v.enum(['development', 'production', 'test']),\r\n  OTHER_LISTEN_TO_PROCESS_EXITS: v.boolean(),\r\n  OTHER_NO_LOGO: v.boolean(),\r\n  OTHER_HARD_RESET_PAGE: v.boolean(),\r\n  OTHER_BROWSER_SHELL_MODE: v.boolean(),\r\n\r\n  // debugger\r\n  DEBUG_ENABLE: v.boolean(),\r\n  DEBUG_HEADLESS: v.boolean(),\r\n  DEBUG_DEVTOOLS: v.boolean(),\r\n  DEBUG_LISTEN_TO_CONSOLE: v.boolean(),\r\n  DEBUG_DUMPIO: v.boolean(),\r\n  DEBUG_SLOW_MO: v.nonNegativeNum(),\r\n  DEBUG_DEBUGGING_PORT: v.positiveNum()\r\n});\r\n\r\nexport const envs = Config.partial().parse(process.env);\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview Manages configuration for the Highcharts Export Server by loading\r\n * and merging options from multiple sources, such as default settings,\r\n * environment variables, user-provided options, and command-line arguments.\r\n * Ensures the global options are up-to-date with the highest priority values.\r\n * Provides functions for accessing and updating configuration.\r\n */\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nimport { log, logWithStack } from './logger.js';\r\nimport { envs } from './envs.js';\r\nimport { __dirname, deepCopy, getAbsolutePath, isObject } from './utils.js';\r\n\r\nimport { absoluteProps, nestedProps, defaultConfig } from './schemas/config.js';\r\n\r\n// Sets the global options with initial values from the default config\r\nconst globalOptions = _initOptions(defaultConfig);\r\n\r\n/**\r\n * Retrieves a copy of the global options object or a reference to the global\r\n * options object, based on the `getCopy` flag.\r\n *\r\n * @function getOptions\r\n *\r\n * @param {boolean} [getCopy=true] - Specifies whether to return a copied\r\n * object of the global options (`true`) or a reference to the global options\r\n * object (`false`). The default value is `false`.\r\n *\r\n * @returns {Object} A copy of the global options object, or a reference\r\n * to the global options object.\r\n */\r\nexport function getOptions(getCopy = true) {\r\n  return getCopy ? deepCopy(globalOptions) : globalOptions;\r\n}\r\n\r\n/**\r\n * Updates a copy of the global options object or a reference to the global\r\n * options object, based on the `getCopy` flag.\r\n *\r\n * @function updateOptions\r\n *\r\n * @param {Object} newOptions - An object containing the new options to be\r\n * merged into the global options.\r\n * @param {boolean} [getCopy=false] - Determines whether to merge the new\r\n * options into a copy of the global options object (`true`) or directly into\r\n * the global options object (`false`). The default value is `false`.\r\n *\r\n * @returns {Object} The updated options object, either the modified global\r\n * options or a modified copy, based on the value of `getCopy`.\r\n */\r\nexport function updateOptions(newOptions, getCopy = false) {\r\n  // Merge new options to the global options or its copy and return the result\r\n  return _mergeOptions(getOptions(getCopy), newOptions);\r\n}\r\n\r\n/**\r\n * Updates the global options with values provided through the CLI, keeping\r\n * the principle of options load priority. This function accepts a `cliArgs`\r\n * array containing arguments from the CLI, which will be validated and applied\r\n * if provided.\r\n *\r\n * The priority order for setting values is:\r\n *\r\n * 1. Values from a custom JSON file (loaded by the `--loadConfig` option).\r\n * 2. Values from the command line interface (CLI).\r\n *\r\n * @function setCliOptions\r\n *\r\n * @param {Array.<string>} cliArgs - An array of command line arguments used\r\n * for additional configuration.\r\n *\r\n * @returns {Object} The updated global options object, reflecting the merged\r\n * configuration from sources provided through the CLI.\r\n */\r\nexport function setCliOptions(cliArgs) {\r\n  // Only for the CLI usage\r\n  if (cliArgs && Array.isArray(cliArgs) && cliArgs.length) {\r\n    // Get options from the custom JSON loaded via the `--loadConfig`\r\n    const configOptions = _loadConfigFile(cliArgs);\r\n\r\n    // Update global options with the values from the `configOptions`\r\n    updateOptions(configOptions);\r\n\r\n    // Get options from the CLI\r\n    const cliOptions = _pairArgumentValue(nestedProps, cliArgs);\r\n\r\n    // Update global options with the values from the `cliOptions`\r\n    updateOptions(cliOptions);\r\n  }\r\n\r\n  // Return reference to the global options\r\n  return getOptions(false);\r\n}\r\n\r\n/**\r\n * Maps old-structured configuration options (PhantomJS) to a new format\r\n * (Puppeteer). This function converts flat, old-structured options into\r\n * a new, nested configuration format based on a predefined mapping\r\n * (`nestedProps`). The new format is used for Puppeteer, while the old format\r\n * was used for PhantomJS.\r\n *\r\n * @function mapToNewOptions\r\n *\r\n * @param {Object} oldOptions - The old, flat configuration options\r\n * to be converted.\r\n *\r\n * @returns {Object} A new object containing options structured according\r\n * to the mapping defined in `nestedProps` or an empty object if the provided\r\n * `oldOptions` is not a correct object.\r\n */\r\nexport function mapToNewOptions(oldOptions) {\r\n  // An object for the new structured options\r\n  const newOptions = {};\r\n\r\n  // Check if provided value is a correct object\r\n  if (isObject(oldOptions)) {\r\n    // Iterate over each key-value pair in the old-structured options\r\n    for (const [key, value] of Object.entries(oldOptions)) {\r\n      // If there is a nested mapping, split it into a properties chain\r\n      const propertiesChain = nestedProps[key]\r\n        ? nestedProps[key].split('.')\r\n        : [];\r\n\r\n      // If it is the last property in the chain, assign the value, otherwise,\r\n      // create or reuse the nested object\r\n      propertiesChain.reduce(\r\n        (obj, prop, index) =>\r\n          (obj[prop] =\r\n            propertiesChain.length - 1 === index ? value : obj[prop] || {}),\r\n        newOptions\r\n      );\r\n    }\r\n  } else {\r\n    log(\r\n      2,\r\n      '[config] No correct object with options was provided. Returning an empty array.'\r\n    );\r\n  }\r\n\r\n  // Return the new, structured options object\r\n  return newOptions;\r\n}\r\n\r\n/**\r\n * Validates, parses, and checks if the provided config is allowed set\r\n * of options.\r\n *\r\n * @function isAllowedConfig\r\n *\r\n * @param {unknown} config - The config to be validated and parsed as a set\r\n * of options. Must be either an object or a string.\r\n * @param {boolean} [toString=false] - Whether to return a stringified version\r\n * of the parsed config. The default value is `false`.\r\n * @param {boolean} [allowFunctions=false] - Whether to allow functions\r\n * in the parsed config. If true, functions are preserved. Otherwise, when\r\n * a function is found, null is returned. The default value is `false`.\r\n *\r\n * @returns {(Object|string|null)} Returns a parsed set of options object,\r\n * a stringified set of options object if the `toString` is true, and null\r\n * if the config is not a valid set of options or parsing fails.\r\n */\r\nexport function isAllowedConfig(\r\n  config,\r\n  toString = false,\r\n  allowFunctions = false\r\n) {\r\n  try {\r\n    // Accept only objects and strings\r\n    if (!isObject(config) && typeof config !== 'string') {\r\n      // Return null if any other type\r\n      return null;\r\n    }\r\n\r\n    // Get the object representation of the original config\r\n    const objectConfig =\r\n      typeof config === 'string'\r\n        ? allowFunctions\r\n          ? eval(`(${config})`)\r\n          : JSON.parse(config)\r\n        : config;\r\n\r\n    // Preserve or remove potential functions based on the `allowFunctions` flag\r\n    const stringifiedOptions = _optionsStringify(\r\n      objectConfig,\r\n      allowFunctions,\r\n      false\r\n    );\r\n\r\n    // Parse the config to check if it is valid set of options\r\n    const parsedOptions = allowFunctions\r\n      ? JSON.parse(\r\n          _optionsStringify(objectConfig, allowFunctions, true),\r\n          (_, value) =>\r\n            typeof value === 'string' && value.startsWith('function')\r\n              ? eval(`(${value})`)\r\n              : value\r\n        )\r\n      : JSON.parse(stringifiedOptions);\r\n\r\n    // Return stringified or object options based on the `toString` flag\r\n    return toString ? stringifiedOptions : parsedOptions;\r\n  } catch (error) {\r\n    // Return null if parsing fails\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Prints the Highcharts Export Server logo, version, and license information.\r\n *\r\n * @function printLicense\r\n */\r\nexport function printLicense() {\r\n  // Print the logo and version information\r\n  printVersion();\r\n\r\n  // Print the license information\r\n  console.log(\r\n    'This software requires a valid Highcharts license for commercial use.\\n'\r\n      .yellow,\r\n    '\\nFor a full list of CLI options, type:',\r\n    '\\nhighcharts-export-server --help\\n'.green,\r\n    '\\nIf you do not have a license, one can be obtained here:',\r\n    '\\nhttps://shop.highsoft.com/\\n'.green,\r\n    '\\nTo customize your installation, please refer to the README file at:',\r\n    '\\nhttps://github.com/highcharts/node-export-server#readme\\n'.green\r\n  );\r\n}\r\n\r\n/**\r\n * Prints usage information for CLI arguments, displaying available options\r\n * and their descriptions. It can list properties recursively if categories\r\n * contain nested options.\r\n *\r\n * @function printUsage\r\n */\r\nexport function printUsage() {\r\n  // Display README and general usage information\r\n  console.log(\r\n    '\\nUsage of CLI arguments:'.bold,\r\n    '\\n-----------------------',\r\n    `\\nFor more detailed information, visit the README file at: ${'https://github.com/highcharts/node-export-server#readme'.green}.\\n`\r\n  );\r\n\r\n  // Iterate through each category in the `defaultConfig` and display usage info\r\n  Object.keys(defaultConfig).forEach((category) => {\r\n    console.log(`${category.toUpperCase()}`.bold.red);\r\n    _cycleCategories(defaultConfig[category]);\r\n    console.log('');\r\n  });\r\n}\r\n\r\n/**\r\n * Prints the Highcharts Export Server logo or text with the version\r\n * information.\r\n *\r\n * @function printVersion\r\n *\r\n * @param {boolean} [noLogo=false] - If true, only prints text with the version\r\n * information, without the logo. The default value is `false`.\r\n */\r\nexport function printVersion(noLogo = false) {\r\n  // Get package version either from `.env` or from `package.json`\r\n  const packageVersion = JSON.parse(\r\n    readFileSync(join(__dirname, 'package.json'), 'utf8')\r\n  ).version;\r\n\r\n  // Print text only\r\n  if (noLogo) {\r\n    console.log(`Highcharts Export Server v${packageVersion}`);\r\n  } else {\r\n    // Print the logo\r\n    console.log(\r\n      readFileSync(join(__dirname, 'msg', 'startup.msg'), 'utf8').toString()\r\n        .bold.yellow,\r\n      `v${packageVersion}\\n`.bold\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Initializes and returns the global options object based on the provided\r\n * configuration, setting values from nested properties recursively.\r\n *\r\n * The priority order for setting values is:\r\n *\r\n * 1. Values from the `./lib/schemas/config.js` file (defaults).\r\n * 2. Values from environment variables (specified in the `.env` file).\r\n *\r\n * @function _initOptions\r\n *\r\n * @param {Object} config - The configuration object used for initializing\r\n * the global options. It should include nested properties with a `value`\r\n * and an `envLink` for linking to environment variables.\r\n *\r\n * @returns {Object} The initialized global options object, populated with\r\n * values based on the provided configuration and the established priority\r\n * order.\r\n */\r\nfunction _initOptions(config) {\r\n  // Init the object for options\r\n  const options = {};\r\n\r\n  // Start initializing the `options` object recursively\r\n  for (const [name, item] of Object.entries(config)) {\r\n    if (Object.prototype.hasOwnProperty.call(item, 'value')) {\r\n      // Set the correct value based on the established priority order\r\n      if (envs[item.envLink] !== undefined && envs[item.envLink] !== null) {\r\n        // The environment variables value\r\n        options[name] = envs[item.envLink];\r\n      } else {\r\n        // The value from the config file\r\n        options[name] = item.value;\r\n      }\r\n    } else {\r\n      // Create a section in the options\r\n      options[name] = _initOptions(item);\r\n    }\r\n  }\r\n\r\n  // Return the created `options` object\r\n  return options;\r\n}\r\n\r\n/**\r\n * Merges two sets of configuration options, considering absolute properties.\r\n *\r\n * @function _mergeOptions\r\n *\r\n * @param {Object} originalOptions - Original configuration options.\r\n * @param {Object} newOptions - New configuration options to be merged.\r\n *\r\n * @returns {Object} Merged configuration options.\r\n */\r\nexport function _mergeOptions(originalOptions, newOptions) {\r\n  // Check if the `originalOptions` and `newOptions` are correct objects\r\n  if (isObject(originalOptions) && isObject(newOptions)) {\r\n    for (const [key, value] of Object.entries(newOptions)) {\r\n      originalOptions[key] =\r\n        isObject(value) &&\r\n        !absoluteProps.includes(key) &&\r\n        originalOptions[key] !== undefined\r\n          ? _mergeOptions(originalOptions[key], value)\r\n          : value !== undefined\r\n            ? value\r\n            : originalOptions[key] || null;\r\n    }\r\n  }\r\n\r\n  // Return the original (modified or not) options\r\n  return originalOptions;\r\n}\r\n\r\n/**\r\n * Converts the provided options object to a JSON-formatted string\r\n * with the option to preserve functions. In order for a function\r\n * to be preserved, it needs to follow the format `function (...) {...}`.\r\n * Such a function can also be stringified.\r\n *\r\n * @function _optionsStringify\r\n *\r\n * @param {Object} options - The options object to be converted to a string.\r\n * @param {boolean} allowFunctions - If set to true, functions are preserved\r\n * in the output. Otherwise an error is thrown.\r\n * @param {boolean} stringifyFunctions - If set to true, functions are saved\r\n * as strings. The `allowFunctions` must be set to true as well for this to take\r\n * an effect.\r\n *\r\n * @returns {string} The JSON-formatted string representing the options.\r\n *\r\n * @throws {Error} Throws an `Error` when functions are not allowed but are\r\n * found in provided options object.\r\n */\r\nexport function _optionsStringify(options, allowFunctions, stringifyFunctions) {\r\n  const replacerCallback = (_, value) => {\r\n    // Trim string values\r\n    if (typeof value === 'string') {\r\n      value = value.trim();\r\n    }\r\n\r\n    // If value is a function or stringified function\r\n    if (\r\n      typeof value === 'function' ||\r\n      (typeof value === 'string' &&\r\n        value.startsWith('function') &&\r\n        value.endsWith('}'))\r\n    ) {\r\n      // If allowFunctions is set to true, preserve functions\r\n      if (allowFunctions) {\r\n        // Based on the `stringifyFunctions` options, set function values\r\n        return stringifyFunctions\r\n          ? // As stringified functions\r\n            `\"EXP_FUN${(value + '').replaceAll(/\\s+/g, ' ')}EXP_FUN\"`\r\n          : // As functions\r\n            `EXP_FUN${(value + '').replaceAll(/\\s+/g, ' ')}EXP_FUN`;\r\n      } else {\r\n        // Throw an error otherwise\r\n        throw new Error();\r\n      }\r\n    }\r\n\r\n    // In all other cases, simply return the value\r\n    return value;\r\n  };\r\n\r\n  // Stringify options and if required, replace special functions marks\r\n  return JSON.stringify(options, replacerCallback).replaceAll(\r\n    stringifyFunctions ? /\\\\\"EXP_FUN|EXP_FUN\\\\\"/g : /\"EXP_FUN|EXP_FUN\"/g,\r\n    ''\r\n  );\r\n}\r\n\r\n/**\r\n * Loads additional configuration from a specified file provided via\r\n * the `--loadConfig` option in the command-line arguments.\r\n *\r\n * @function _loadConfigFile\r\n *\r\n * @param {Array.<string>} cliArgs - Command-line arguments to search\r\n * for the `--loadConfig` option and the corresponding file path.\r\n *\r\n * @returns {Object} The additional configuration loaded from the specified\r\n * file, or an empty object if the file is not found, invalid, or an error\r\n * occurs.\r\n */\r\nfunction _loadConfigFile(cliArgs) {\r\n  // Get the allow flags for the custom logic check\r\n  const { allowCodeExecution, allowFileResources } = getOptions().customLogic;\r\n\r\n  // Check if the `--loadConfig` option was used\r\n  const configIndex = cliArgs.findIndex(\r\n    (arg) => arg.replace(/-/g, '') === 'loadConfig'\r\n  );\r\n\r\n  // Get the `--loadConfig` option value\r\n  const configFileName = configIndex > -1 && cliArgs[configIndex + 1];\r\n\r\n  // Check if the `--loadConfig` is present and has a correct value\r\n  if (configFileName && allowFileResources) {\r\n    try {\r\n      // Load an optional custom JSON config file\r\n      return isAllowedConfig(\r\n        readFileSync(getAbsolutePath(configFileName), 'utf8'),\r\n        false,\r\n        allowCodeExecution\r\n      );\r\n    } catch (error) {\r\n      logWithStack(\r\n        2,\r\n        error,\r\n        `[config] Unable to load the configuration from the ${configFileName} file.`\r\n      );\r\n    }\r\n  }\r\n\r\n  // No additional options to return\r\n  return {};\r\n}\r\n\r\n/**\r\n * Parses command-line arguments and pairs each argument with its corresponding\r\n * option in the configuration. The values are structured into a nested options\r\n * object, based on predefined mappings.\r\n *\r\n * @function _pairArgumentValue\r\n *\r\n * @param {Array.<string>} nestedProps - An array of nesting level for all\r\n * options.\r\n * @param {Array.<string>} cliArgs - An array of command-line arguments\r\n * containing options and their associated values.\r\n *\r\n * @returns {Object} An updated options object where each option from\r\n * the command-line is paired with its value, structured into nested objects\r\n * as defined.\r\n */\r\nfunction _pairArgumentValue(nestedProps, cliArgs) {\r\n  // An empty object to collect and structurize data from the args\r\n  const cliOptions = {};\r\n\r\n  // Cycle through all CLI args and filter them\r\n  for (let i = 0; i < cliArgs.length; i++) {\r\n    const option = cliArgs[i].replace(/-/g, '');\r\n\r\n    // Find the right place for property's value\r\n    const propertiesChain = nestedProps[option]\r\n      ? nestedProps[option].split('.')\r\n      : [];\r\n\r\n    // Create options object with values from CLI for later parsing and merging\r\n    propertiesChain.reduce((obj, prop, index) => {\r\n      if (propertiesChain.length - 1 === index) {\r\n        const value = cliArgs[++i];\r\n        if (!value) {\r\n          log(\r\n            2,\r\n            `[config] Missing value for the CLI '--${option}' argument. Using the default value.`\r\n          );\r\n        }\r\n        obj[prop] = value || null;\r\n      } else if (obj[prop] === undefined) {\r\n        obj[prop] = {};\r\n      }\r\n      return obj[prop];\r\n    }, cliOptions);\r\n  }\r\n\r\n  // Return parsed CLI options\r\n  return cliOptions;\r\n}\r\n\r\n/**\r\n * Recursively traverses the options object to print the usage information\r\n * for each option category and individual option.\r\n *\r\n * @function _cycleCategories\r\n *\r\n * @param {Object} options - The options object containing CLI options. It may\r\n * include nested categories and individual options.\r\n */\r\nfunction _cycleCategories(options) {\r\n  for (const [name, option] of Object.entries(options)) {\r\n    // If the current entry is a category and not a leaf option, recurse into it\r\n    if (!Object.prototype.hasOwnProperty.call(option, 'value')) {\r\n      _cycleCategories(option);\r\n    } else {\r\n      // Prepare description\r\n      const descName = ` --${option.cliName || name}`;\r\n\r\n      // Get the value\r\n      let optionValue = option.value;\r\n\r\n      // Prepare value for option that is not null and is array of strings\r\n      if (optionValue !== null && option.types.includes('string[]')) {\r\n        optionValue =\r\n          '[' + optionValue.map((item) => `'${item}'`).join(', ') + ']';\r\n      }\r\n\r\n      // Prepare value for option that is not null and is a string\r\n      if (optionValue !== null && option.types.includes('string')) {\r\n        optionValue = `'${optionValue}'`;\r\n      }\r\n\r\n      // Display correctly aligned messages\r\n      console.log(\r\n        descName.green,\r\n        `${('<' + option.types.join('|') + '>').yellow}`,\r\n        `${String(optionValue).bold}`.blue,\r\n        `- ${option.description}.`\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default {\r\n  getOptions,\r\n  updateOptions,\r\n  setCliOptions,\r\n  mapToNewOptions,\r\n  isAllowedConfig,\r\n  printLicense,\r\n  printUsage,\r\n  printVersion\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview HTTP utility module for fetching and posting data. Supports both\r\n * HTTP and HTTPS protocols, providing methods to make GET and POST requests\r\n * with customizable options. Includes protocol determination based on URL\r\n * and augments response objects with a 'text' property for easier data access.\r\n */\r\n\r\nimport http from 'http';\r\nimport https from 'https';\r\n\r\n/**\r\n * Fetches data from the specified URL using either HTTP or HTTPS protocol.\r\n *\r\n * @async\r\n * @function fetch\r\n *\r\n * @param {string} url - The URL to fetch data from.\r\n * @param {Object} [requestOptions={}] - Options for the HTTP/HTTPS request.\r\n * The default value is an empty object.\r\n *\r\n * @returns {Promise<Object>} A Promise that resolves to the HTTP/HTTPS response\r\n * object with added 'text' property or rejecting with an error.\r\n */\r\nexport async function fetch(url, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    _getProtocolModule(url)\r\n      .get(url, requestOptions, (response) => {\r\n        let responseData = '';\r\n\r\n        // A chunk of data has been received\r\n        response.on('data', (chunk) => {\r\n          responseData += chunk;\r\n        });\r\n\r\n        // The whole response has been received\r\n        response.on('end', () => {\r\n          if (!responseData) {\r\n            reject('Nothing was fetched from the URL.');\r\n          }\r\n          response.text = responseData;\r\n          resolve(response);\r\n        });\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\n/**\r\n * Sends a POST request to the specified URL with the provided JSON body using\r\n * either HTTP or HTTPS protocol.\r\n *\r\n * @async\r\n * @function post\r\n *\r\n * @param {string} url - The URL to send the POST request to.\r\n * @param {Object} [body={}] - The JSON body to include in the POST request.\r\n * The default value is an empty object.\r\n * @param {Object} [requestOptions={}] - Options for the HTTP/HTTPS request.\r\n * The default value is an empty object.\r\n *\r\n * @returns {Promise<Object>} A Promise that resolves to the HTTP/HTTPS response\r\n * object with added 'text' property or rejecting with an error.\r\n */\r\nexport async function post(url, body = {}, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const data = JSON.stringify(body);\r\n\r\n    // Set default headers and merge with requestOptions\r\n    const options = Object.assign(\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Content-Length': data.length\r\n        }\r\n      },\r\n      requestOptions\r\n    );\r\n\r\n    const request = _getProtocolModule(url)\r\n      .request(url, options, (response) => {\r\n        let responseData = '';\r\n\r\n        // A chunk of data has been received\r\n        response.on('data', (chunk) => {\r\n          responseData += chunk;\r\n        });\r\n\r\n        // The whole response has been received\r\n        response.on('end', () => {\r\n          try {\r\n            response.text = responseData;\r\n            resolve(response);\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        });\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n\r\n    // Write the request body and end the request\r\n    request.write(data);\r\n    request.end();\r\n  });\r\n}\r\n\r\n/**\r\n * Returns the HTTP or HTTPS protocol module based on the provided URL.\r\n *\r\n * @function _getProtocolModule\r\n *\r\n * @param {string} url - The URL to determine the protocol.\r\n *\r\n * @returns {Object} The HTTP or HTTPS protocol module (http or https).\r\n */\r\nfunction _getProtocolModule(url) {\r\n  return url.startsWith('https') ? https : http;\r\n}\r\n\r\nexport default {\r\n  fetch,\r\n  post\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * A custom error class for handling export-related errors. Extends the native\r\n * `Error` class to include additional properties like status code and stack\r\n * trace details.\r\n */\r\nclass ExportError extends Error {\r\n  /**\r\n   * Creates an instance of the `ExportError`.\r\n   *\r\n   * @param {string} message - The error message to be displayed.\r\n   * @param {number} statusCode - Optional HTTP status code associated\r\n   * with the error (e.g., 400, 500).\r\n   */\r\n  constructor(message, statusCode) {\r\n    super();\r\n\r\n    this.message = message;\r\n    this.stackMessage = message;\r\n\r\n    if (statusCode) {\r\n      this.statusCode = statusCode;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets or updates the HTTP status code for the error.\r\n   *\r\n   * @param {number} statusCode - The HTTP status code to assign to the error.\r\n   *\r\n   * @returns {ExportError} The updated instance of the `ExportError` class.\r\n   */\r\n  setStatus(statusCode) {\r\n    this.statusCode = statusCode;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets additional error details based on an existing error object.\r\n   *\r\n   * @param {Error} error - An error object containing details to populate\r\n   * the `ExportError` instance.\r\n   *\r\n   * @returns {ExportError} The updated instance of the `ExportError` class.\r\n   */\r\n  setError(error) {\r\n    this.error = error;\r\n\r\n    if (error.name) {\r\n      this.name = error.name;\r\n    }\r\n\r\n    if (error.statusCode) {\r\n      this.statusCode = error.statusCode;\r\n    }\r\n\r\n    if (error.stack) {\r\n      this.stackMessage = error.message;\r\n      this.stack = error.stack;\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default ExportError;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview The cache manager is responsible for handling and managing\r\n * the Highcharts library along with its dependencies. It ensures that these\r\n * resources are stored and retrieved efficiently to optimize performance\r\n * and reduce redundant network requests. The cache is stored in the `.cache`\r\n * directory by default, which serves as a dedicated folder for keeping cached\r\n * files.\r\n */\r\n\r\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nimport { HttpsProxyAgent } from 'https-proxy-agent';\r\n\r\nimport { getOptions, updateOptions } from './config.js';\r\nimport { fetch } from './fetch.js';\r\nimport { log } from './logger.js';\r\nimport { getAbsolutePath } from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\n// The initial cache template\r\nconst cache = {\r\n  cdnUrl: 'https://code.highcharts.com',\r\n  activeManifest: {},\r\n  sources: '',\r\n  hcVersion: ''\r\n};\r\n\r\n/**\r\n * Checks the cache for Highcharts dependencies, updates the cache if needed,\r\n * and loads the sources.\r\n *\r\n * @async\r\n * @function checkAndUpdateCache\r\n *\r\n * @param {Object} highchartsOptions - The configuration object containing\r\n * `highcharts` options.\r\n * @param {Object} serverProxyOptions- The configuration object containing\r\n * `server.proxy` options.\r\n */\r\nexport async function checkAndUpdateCache(\r\n  highchartsOptions,\r\n  serverProxyOptions\r\n) {\r\n  try {\r\n    let fetchedModules;\r\n\r\n    // Get the cache path\r\n    const cachePath = getCachePath();\r\n\r\n    // Prepare paths to manifest and sources from the cache folder\r\n    const manifestPath = join(cachePath, 'manifest.json');\r\n    const sourcePath = join(cachePath, 'sources.js');\r\n\r\n    // Create the cache destination if it doesn't exist already\r\n    !existsSync(cachePath) && mkdirSync(cachePath, { recursive: true });\r\n\r\n    // Fetch all the scripts either if the `manifest.json` does not exist\r\n    // or if the `forceFetch` option is enabled\r\n    if (!existsSync(manifestPath) || highchartsOptions.forceFetch) {\r\n      log(3, '[cache] Fetching and caching Highcharts dependencies.');\r\n      fetchedModules = await _updateCache(\r\n        highchartsOptions,\r\n        serverProxyOptions,\r\n        sourcePath\r\n      );\r\n    } else {\r\n      let requestUpdate = false;\r\n\r\n      // Read the manifest JSON\r\n      const manifest = JSON.parse(readFileSync(manifestPath), 'utf8');\r\n\r\n      // Check if the modules is an array, if so, we rewrite it to a map to make\r\n      // it easier to resolve modules.\r\n      if (manifest.modules && Array.isArray(manifest.modules)) {\r\n        const moduleMap = {};\r\n        manifest.modules.forEach((m) => (moduleMap[m] = 1));\r\n        manifest.modules = moduleMap;\r\n      }\r\n\r\n      // Get the actual number of scripts to be fetched\r\n      const { coreScripts, moduleScripts, indicatorScripts } =\r\n        highchartsOptions;\r\n      const numberOfModules =\r\n        coreScripts.length + moduleScripts.length + indicatorScripts.length;\r\n\r\n      // Compare the loaded highcharts config with the contents in cache.\r\n      // If there are changes, fetch requested modules and products,\r\n      // and bake them into a giant blob. Save the blob.\r\n      if (manifest.version !== highchartsOptions.version) {\r\n        log(\r\n          2,\r\n          '[cache] A Highcharts version mismatch in the cache, need to re-fetch.'\r\n        );\r\n        requestUpdate = true;\r\n      } else if (\r\n        Object.keys(manifest.modules || {}).length !== numberOfModules\r\n      ) {\r\n        log(\r\n          2,\r\n          '[cache] The cache and the requested modules do not match, need to re-fetch.'\r\n        );\r\n        requestUpdate = true;\r\n      } else {\r\n        // Check each module, if anything is missing refetch everything\r\n        requestUpdate = (moduleScripts || []).some((moduleName) => {\r\n          if (!manifest.modules[moduleName]) {\r\n            log(\r\n              2,\r\n              `[cache] The ${moduleName} is missing in the cache, need to re-fetch.`\r\n            );\r\n            return true;\r\n          }\r\n        });\r\n      }\r\n\r\n      // Update cache if needed\r\n      if (requestUpdate) {\r\n        fetchedModules = await _updateCache(\r\n          highchartsOptions,\r\n          serverProxyOptions,\r\n          sourcePath\r\n        );\r\n      } else {\r\n        log(3, '[cache] Dependency cache is up to date, proceeding.');\r\n\r\n        // Load the sources\r\n        cache.sources = readFileSync(sourcePath, 'utf8');\r\n\r\n        // Get current modules map\r\n        fetchedModules = manifest.modules;\r\n\r\n        // Extract and save version of currently used Highcharts\r\n        cache.hcVersion = extractVersion(cache.sources);\r\n      }\r\n    }\r\n\r\n    // Finally, save the new manifest, which is basically our current config\r\n    // in a slightly different format\r\n    await _saveConfigToManifest(highchartsOptions, fetchedModules);\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[cache] Could not configure cache and create or update the config manifest.',\r\n      500\r\n    ).setError(error);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the version of Highcharts from the cache.\r\n *\r\n * @function getHighchartsVersion\r\n *\r\n * @returns {string} The cached Highcharts version.\r\n */\r\nexport function getHighchartsVersion() {\r\n  return cache.hcVersion;\r\n}\r\n\r\n/**\r\n * Updates the Highcharts version in the applied configuration and checks\r\n * the cache for the new version.\r\n *\r\n * @async\r\n * @function updateHighchartsVersion\r\n *\r\n * @param {string} newVersion - The new Highcharts version to be applied.\r\n */\r\nexport async function updateHighchartsVersion(newVersion) {\r\n  // Update to the new version\r\n  const options = updateOptions({\r\n    highcharts: {\r\n      version: newVersion\r\n    }\r\n  });\r\n\r\n  // Check if cache needs to be updated\r\n  await checkAndUpdateCache(options.highcharts, options.server.proxy);\r\n}\r\n\r\n/**\r\n * Extracts Highcharts version from the cache's sources string.\r\n *\r\n * @function extractVersion\r\n *\r\n * @param {Object} cacheSources - The cache sources object.\r\n *\r\n * @returns {string} The extracted Highcharts version.\r\n */\r\nexport function extractVersion(cacheSources) {\r\n  return cacheSources\r\n    .substring(0, cacheSources.indexOf('*/'))\r\n    .replace('/*', '')\r\n    .replace('*/', '')\r\n    .replace(/\\n/g, '')\r\n    .trim();\r\n}\r\n\r\n/**\r\n * Extracts the Highcharts module name based on the scriptPath.\r\n *\r\n * @function extractModuleName\r\n *\r\n * @param {string} scriptPath - The path of the script from which the module\r\n * name will be extracted.\r\n *\r\n * @returns {string} The extracted module name.\r\n */\r\nexport function extractModuleName(scriptPath) {\r\n  return scriptPath.replace(\r\n    /(.*)\\/|(.*)modules\\/|stock\\/(.*)indicators\\/|maps\\/(.*)modules\\//gi,\r\n    ''\r\n  );\r\n}\r\n\r\n/**\r\n * Retrieves the current cache object.\r\n *\r\n * @function getCache\r\n *\r\n * @returns {Object} The cache object containing various cached data.\r\n */\r\nexport function getCache() {\r\n  return cache;\r\n}\r\n\r\n/**\r\n * Gets the cache path for Highcharts.\r\n *\r\n * @function getCachePath\r\n *\r\n * @returns {string} The absolute path to the cache directory for Highcharts.\r\n */\r\nexport function getCachePath() {\r\n  return getAbsolutePath(getOptions().highcharts.cachePath, 'utf8'); // #562\r\n}\r\n\r\n/**\r\n * Fetches a single script and updates the `fetchedModules` accordingly.\r\n *\r\n * @async\r\n * @function _fetchAndProcessScript\r\n *\r\n * @param {string} script - A path to script to get.\r\n * @param {Object} requestOptions - Additional options for the proxy agent\r\n * to use for a request.\r\n * @param {Object} fetchedModules - An object which tracks which Highcharts\r\n * modules have been fetched.\r\n * @param {boolean} [shouldThrowError=false] - A flag to indicate if the error\r\n * should be thrown. This should be used only for the core scripts. The default\r\n * value is `false`.\r\n *\r\n * @returns {Promise<string>} A Promise that resolves to the text representation\r\n * of the fetched script.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if there is a problem\r\n * with fetching the script.\r\n */\r\nasync function _fetchAndProcessScript(\r\n  script,\r\n  requestOptions,\r\n  fetchedModules,\r\n  shouldThrowError = false\r\n) {\r\n  // Get rid of the .js from the custom strings\r\n  if (script.endsWith('.js')) {\r\n    script = script.substring(0, script.length - 3);\r\n  }\r\n  log(4, `[cache] Fetching script - ${script}.js`);\r\n\r\n  // Fetch the script\r\n  const response = await fetch(`${script}.js`, requestOptions);\r\n\r\n  // If OK, return its text representation\r\n  if (response.statusCode === 200 && typeof response.text == 'string') {\r\n    if (fetchedModules) {\r\n      const moduleName = extractModuleName(script);\r\n      fetchedModules[moduleName] = 1;\r\n    }\r\n    return response.text;\r\n  }\r\n\r\n  // Based on the `shouldThrowError` flag, decide how to serve error message\r\n  if (shouldThrowError) {\r\n    throw new ExportError(\r\n      `[cache] Could not fetch the ${script}.js. The script might not exist in the requested version (status code: ${response.statusCode}).`,\r\n      404\r\n    ).setError(response);\r\n  } else {\r\n    log(\r\n      2,\r\n      `[cache] Could not fetch the ${script}.js. The script might not exist in the requested version.`\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Saves the provided configuration and fetched modules to the cache manifest\r\n * file.\r\n *\r\n * @async\r\n * @function _saveConfigToManifest\r\n *\r\n * @param {Object} highchartsOptions - The configuration object containing\r\n * `highcharts` options.\r\n * @param {Object} [fetchedModules={}] - An object which tracks which Highcharts\r\n * modules have been fetched. The default value is an empty object.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if an error occurs while\r\n * writing the cache manifest.\r\n */\r\nasync function _saveConfigToManifest(highchartsOptions, fetchedModules = {}) {\r\n  const newManifest = {\r\n    version: highchartsOptions.version,\r\n    modules: fetchedModules\r\n  };\r\n\r\n  // Update cache object with the current modules\r\n  cache.activeManifest = newManifest;\r\n\r\n  log(3, '[cache] Writing a new manifest.');\r\n  try {\r\n    writeFileSync(\r\n      join(getCachePath(), 'manifest.json'),\r\n      JSON.stringify(newManifest),\r\n      'utf8'\r\n    );\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[cache] Error writing the cache manifest.',\r\n      500\r\n    ).setError(error);\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches Highcharts `scripts` and `customScripts` from the given CDNs.\r\n *\r\n * @async\r\n * @function _fetchScripts\r\n *\r\n * @param {Array.<string>} coreScripts - Highcharts core scripts to fetch.\r\n * @param {Array.<string>} moduleScripts - Highcharts modules to fetch.\r\n * @param {Array.<string>} customScripts - Custom script paths to fetch (full\r\n * URLs).\r\n * @param {Object} serverProxyOptions - The configuration object containing\r\n * `server.proxy` options.\r\n * @param {Object} fetchedModules - An object which tracks which Highcharts\r\n * modules have been fetched.\r\n *\r\n * @returns {Promise<string>} A Promise that resolves to the fetched scripts\r\n * content joined.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if an error occurs while\r\n * setting an HTTP Agent for proxy.\r\n */\r\nasync function _fetchScripts(\r\n  coreScripts,\r\n  moduleScripts,\r\n  customScripts,\r\n  serverProxyOptions,\r\n  fetchedModules\r\n) {\r\n  // Configure proxy if exists\r\n  let proxyAgent;\r\n  const proxyHost = serverProxyOptions.host;\r\n  const proxyPort = serverProxyOptions.port;\r\n\r\n  // Try to create a Proxy Agent\r\n  if (proxyHost && proxyPort) {\r\n    try {\r\n      proxyAgent = new HttpsProxyAgent({\r\n        host: proxyHost,\r\n        port: proxyPort\r\n      });\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        '[cache] Could not create a Proxy Agent.',\r\n        500\r\n      ).setError(error);\r\n    }\r\n  }\r\n\r\n  // If exists, add proxy agent to request options\r\n  const requestOptions = proxyAgent\r\n    ? {\r\n        agent: proxyAgent,\r\n        timeout: serverProxyOptions.timeout\r\n      }\r\n    : {};\r\n\r\n  const allFetchPromises = [\r\n    ...coreScripts.map((script) =>\r\n      _fetchAndProcessScript(`${script}`, requestOptions, fetchedModules, true)\r\n    ),\r\n    ...moduleScripts.map((script) =>\r\n      _fetchAndProcessScript(`${script}`, requestOptions, fetchedModules)\r\n    ),\r\n    ...customScripts.map((script) =>\r\n      _fetchAndProcessScript(`${script}`, requestOptions)\r\n    )\r\n  ];\r\n\r\n  const fetchedScripts = await Promise.all(allFetchPromises);\r\n  return fetchedScripts.join(';\\n');\r\n}\r\n\r\n/**\r\n * Updates the local cache with Highcharts scripts and their versions.\r\n *\r\n * @async\r\n * @function _updateCache\r\n *\r\n * @param {Object} highchartsOptions - The configuration object containing\r\n * `highcharts` options.\r\n * @param {Object} serverProxyOptions - The configuration object containing\r\n * `server.proxy` options.\r\n * @param {string} sourcePath - The path to the source file in the cache.\r\n *\r\n * @returns {Promise<Object>} A Promise that resolves to an object representing\r\n * the fetched modules.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if there is an issue updating\r\n * the local Highcharts cache.\r\n */\r\nasync function _updateCache(highchartsOptions, serverProxyOptions, sourcePath) {\r\n  // Get Highcharts version for scripts\r\n  const hcVersion =\r\n    highchartsOptions.version === 'latest'\r\n      ? null\r\n      : `${highchartsOptions.version}`;\r\n\r\n  // Get the CDN url for scripts\r\n  const cdnUrl = highchartsOptions.cdnUrl || cache.cdnUrl;\r\n\r\n  try {\r\n    const fetchedModules = {};\r\n\r\n    log(\r\n      3,\r\n      `[cache] Updating cache version to Highcharts: ${hcVersion || 'latest'}.`\r\n    );\r\n\r\n    cache.sources = await _fetchScripts(\r\n      [\r\n        ...highchartsOptions.coreScripts.map((c) =>\r\n          hcVersion ? `${cdnUrl}/${hcVersion}/${c}` : `${cdnUrl}/${c}`\r\n        )\r\n      ],\r\n      [\r\n        ...highchartsOptions.moduleScripts.map((m) =>\r\n          m === 'map'\r\n            ? hcVersion\r\n              ? `${cdnUrl}/maps/${hcVersion}/modules/${m}`\r\n              : `${cdnUrl}/maps/modules/${m}`\r\n            : hcVersion\r\n              ? `${cdnUrl}/${hcVersion}/modules/${m}`\r\n              : `${cdnUrl}/modules/${m}`\r\n        ),\r\n        ...highchartsOptions.indicatorScripts.map((i) =>\r\n          hcVersion\r\n            ? `${cdnUrl}/stock/${hcVersion}/indicators/${i}`\r\n            : `${cdnUrl}/stock/indicators/${i}`\r\n        )\r\n      ],\r\n      highchartsOptions.customScripts,\r\n      serverProxyOptions,\r\n      fetchedModules\r\n    );\r\n\r\n    // Extract and save version of currently used Highcharts\r\n    cache.hcVersion = extractVersion(cache.sources);\r\n\r\n    // Save the fetched modules into caches' source JSON\r\n    writeFileSync(sourcePath, cache.sources);\r\n    return fetchedModules;\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[cache] Unable to update the local Highcharts cache.',\r\n      500\r\n    ).setError(error);\r\n  }\r\n}\r\n\r\nexport default {\r\n  checkAndUpdateCache,\r\n  getHighchartsVersion,\r\n  updateHighchartsVersion,\r\n  extractVersion,\r\n  extractModuleName,\r\n  getCache,\r\n  getCachePath\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview Provides methods for initializing Highcharts with customized\r\n * animation settings and triggering the creation of Highcharts charts with\r\n * export-specific configurations in the page context. Supports dynamic option\r\n * merging, custom logic injection, and control over rendering behaviors. Used\r\n * by the Puppeteer page.\r\n */\r\n\r\n/* eslint-disable no-undef */\r\n\r\n/**\r\n * Setting the `Highcharts.animObject` function. Called when initing the page.\r\n *\r\n * @function setupHighcharts\r\n */\r\nexport function setupHighcharts() {\r\n  Highcharts.animObject = function () {\r\n    return { duration: 0 };\r\n  };\r\n}\r\n\r\n/**\r\n * Creates the actual Highcharts chart on a page.\r\n *\r\n * @async\r\n * @function createChart\r\n *\r\n * @param {Object} exportOptions - The configuration object containing `export`\r\n * options.\r\n * @param {Object} customLogicOptions - The configuration object containing\r\n * `customLogic` options.\r\n *\r\n */\r\nexport async function createChart(exportOptions, customLogicOptions) {\r\n  // Get required functions\r\n  const { getOptions, setOptions, merge, wrap } = Highcharts;\r\n\r\n  // Create a separate object for a potential `setOptions` usages in order\r\n  // to prevent from polluting other exports that can happen on the same page\r\n  Highcharts.setOptionsObj = merge(false, {}, getOptions());\r\n\r\n  // NOTE: Is this used for anything useful?\r\n  window.isRenderComplete = false;\r\n  wrap(Highcharts.Chart.prototype, 'init', function (proceed, userOptions, cb) {\r\n    // Override the `userOptions` with image friendly options\r\n    userOptions = merge(userOptions, {\r\n      exporting: {\r\n        enabled: false\r\n      },\r\n      plotOptions: {\r\n        series: {\r\n          label: {\r\n            enabled: false\r\n          }\r\n        }\r\n      },\r\n      /* Expects tooltip in the `userOptions` when `forExport` is true.\r\n        https://github.com/highcharts/highcharts/blob/3ad430a353b8056b9e764aa4e5cd6828aa479db2/js/parts/Chart.js#L241\r\n        */\r\n      tooltip: {}\r\n    });\r\n\r\n    (userOptions.series || []).forEach(function (series) {\r\n      series.animation = false;\r\n    });\r\n\r\n    // Add flag to know if chart render has been called.\r\n    if (!window.onHighchartsRender) {\r\n      window.onHighchartsRender = Highcharts.addEvent(this, 'render', () => {\r\n        window.isRenderComplete = true;\r\n      });\r\n    }\r\n\r\n    proceed.apply(this, [userOptions, cb]);\r\n  });\r\n\r\n  wrap(Highcharts.Series.prototype, 'init', function (proceed, chart, options) {\r\n    proceed.apply(this, [chart, options]);\r\n  });\r\n\r\n  // Some mandatory additional `chart` and `exporting` options\r\n  const additionalOptions = {\r\n    chart: {\r\n      // By default animation is disabled\r\n      animation: false,\r\n      // Get the right size values\r\n      height: exportOptions.height,\r\n      width: exportOptions.width\r\n    },\r\n    exporting: {\r\n      // No need for the exporting button\r\n      enabled: false\r\n    }\r\n  };\r\n\r\n  // Get the input to export from the `instr` option\r\n  const userOptions = new Function(`return ${exportOptions.instr}`)();\r\n\r\n  // Get the `themeOptions` option\r\n  const themeOptions = new Function(`return ${exportOptions.themeOptions}`)();\r\n\r\n  // Get the `globalOptions` option\r\n  const globalOptions = new Function(`return ${exportOptions.globalOptions}`)();\r\n\r\n  // Merge the following options objects to create final options\r\n  const finalOptions = merge(\r\n    false,\r\n    themeOptions,\r\n    userOptions,\r\n    // Placed it here instead in the init because of the size issues\r\n    additionalOptions\r\n  );\r\n\r\n  // Prepare the `callback` option\r\n  const finalCallback = customLogicOptions.callback\r\n    ? new Function(`return ${customLogicOptions.callback}`)()\r\n    : null;\r\n\r\n  // Trigger the `customCode` option\r\n  if (customLogicOptions.customCode) {\r\n    new Function('options', customLogicOptions.customCode)(userOptions);\r\n  }\r\n\r\n  // Set the global options if exist\r\n  if (globalOptions) {\r\n    setOptions(globalOptions);\r\n  }\r\n\r\n  // Call the chart creation\r\n  Highcharts[exportOptions.constr]('container', finalOptions, finalCallback);\r\n\r\n  // Get the current global options\r\n  const defaultOptions = getOptions();\r\n\r\n  // Clear it just in case (e.g. the `setOptions` was used in the `customCode`)\r\n  for (const prop in defaultOptions) {\r\n    if (typeof defaultOptions[prop] !== 'function') {\r\n      delete defaultOptions[prop];\r\n    }\r\n  }\r\n\r\n  // Set the default options back\r\n  setOptions(Highcharts.setOptionsObj);\r\n\r\n  // Empty the custom global options object\r\n  Highcharts.setOptionsObj = {};\r\n}\r\n\r\nexport default {\r\n  setupHighcharts,\r\n  createChart\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview This module provides functions for managing Puppeteer browser\r\n * instance, creating and clearing pages, injecting custom resources,\r\n * and setting up Highcharts for server-side rendering. The module ensures\r\n * that resources are correctly managed and can handle failures during\r\n * operations like launching the browser or creating new pages.\r\n */\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nimport puppeteer from 'puppeteer';\r\n\r\nimport { getCachePath } from './cache.js';\r\nimport { getOptions } from './config.js';\r\nimport { setupHighcharts } from './highcharts.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { __dirname, getAbsolutePath } from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\n// Get the template for pages\r\nconst template = readFileSync(\r\n  join(__dirname, 'templates', 'template.html'),\r\n  'utf8'\r\n);\r\n\r\n// To save the browser\r\nlet browser = null;\r\n\r\n/**\r\n * Retrieves the existing Puppeteer browser instance.\r\n *\r\n * @function getBrowser\r\n *\r\n * @returns {Object} The Puppeteer browser instance.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if no valid browser\r\n * has been created.\r\n */\r\nexport function getBrowser() {\r\n  if (!browser) {\r\n    throw new ExportError('[browser] No valid browser has been created.', 500);\r\n  }\r\n  return browser;\r\n}\r\n\r\n/**\r\n * Creates a Puppeteer browser instance with the specified arguments.\r\n *\r\n * @async\r\n * @function createBrowser\r\n *\r\n * @param {Array.<string>} puppeteerArgs - Additional arguments for Puppeteer\r\n * launch.\r\n *\r\n * @returns {Promise<Object>} A Promise that resolves to the created Puppeteer\r\n * browser instance.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if max retries to open\r\n * a browser instance are reached, or if no browser instance is found after\r\n * retries.\r\n */\r\nexport async function createBrowser(puppeteerArgs) {\r\n  // Get `debug` and `other` options\r\n  const { debug, other } = getOptions();\r\n\r\n  // Get the `debug` options\r\n  const { enable: enabledDebug, ...debugOptions } = debug;\r\n\r\n  // Launch options for the browser instance\r\n  const launchOptions = {\r\n    headless: other.browserShellMode ? 'shell' : true,\r\n    userDataDir: 'tmp',\r\n    args: puppeteerArgs || [],\r\n    handleSIGINT: false,\r\n    handleSIGTERM: false,\r\n    handleSIGHUP: false,\r\n    waitForInitialPage: false,\r\n    defaultViewport: null,\r\n    ...(enabledDebug && debugOptions)\r\n  };\r\n\r\n  // Create a browser\r\n  if (!browser) {\r\n    // A counter for the browser's launch retries\r\n    let tryCount = 0;\r\n\r\n    const open = async () => {\r\n      try {\r\n        log(\r\n          3,\r\n          `[browser] Attempting to get a browser instance (try ${++tryCount}).`\r\n        );\r\n\r\n        // Launch the browser\r\n        browser = await puppeteer.launch(launchOptions);\r\n      } catch (error) {\r\n        logWithStack(\r\n          1,\r\n          error,\r\n          '[browser] Failed to launch a browser instance.'\r\n        );\r\n\r\n        // Retry to launch browser until reaching max attempts\r\n        if (tryCount < 25) {\r\n          log(3, `[browser] Retry to open a browser (${tryCount} out of 25).`);\r\n\r\n          // Wait for a 4 seconds before trying again\r\n          await new Promise((response) => setTimeout(response, 4000));\r\n          await open();\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      await open();\r\n\r\n      // Shell mode inform\r\n      if (launchOptions.headless === 'shell') {\r\n        log(3, `[browser] Launched browser in shell mode.`);\r\n      }\r\n\r\n      // Debug mode inform\r\n      if (enabledDebug) {\r\n        log(3, `[browser] Launched browser in debug mode.`);\r\n      }\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        '[browser] Maximum retries to open a browser instance reached.',\r\n        500\r\n      ).setError(error);\r\n    }\r\n\r\n    if (!browser) {\r\n      throw new ExportError('[browser] Cannot find a browser to open.', 500);\r\n    }\r\n  }\r\n\r\n  // Return a browser instance\r\n  return browser;\r\n}\r\n\r\n/**\r\n * Closes the Puppeteer browser instance if it is connected.\r\n *\r\n * @async\r\n * @function closeBrowser\r\n */\r\nexport async function closeBrowser() {\r\n  // Close the browser when connected\r\n  if (browser && browser.connected) {\r\n    await browser.close();\r\n  }\r\n  browser = null;\r\n  log(4, '[browser] Closed the browser.');\r\n}\r\n\r\n/**\r\n * Creates a new Puppeteer page within an existing browser instance.\r\n * The function creates a new page, disables caching, sets content using\r\n * the `_setPageContent()`, and returns the created Puppeteer page.\r\n *\r\n * @async\r\n * @function newPage\r\n *\r\n * @param {Object} poolResource - The pool resource that contains `id`,\r\n * `workCount`, and `page`.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if no valid browser\r\n * has been connected or if a page is invalid or closed.\r\n */\r\nexport async function newPage(poolResource) {\r\n  // Error in case of no connected browser\r\n  if (!browser || !browser.connected) {\r\n    throw new ExportError(`[browser] Browser is not yet connected.`, 500);\r\n  }\r\n\r\n  // Create a page\r\n  poolResource.page = await browser.newPage();\r\n\r\n  // Disable cache\r\n  await poolResource.page.setCacheEnabled(false);\r\n\r\n  // Set the content\r\n  await _setPageContent(poolResource.page);\r\n\r\n  // Set page events\r\n  _setPageEvents(poolResource.page);\r\n\r\n  // Check if the page is correctly created\r\n  if (!poolResource.page || poolResource.page.isClosed()) {\r\n    throw new ExportError('[browser] The page is invalid or closed.', 400);\r\n  }\r\n}\r\n\r\n/**\r\n * Clears the content of a Puppeteer Page based on the specified mode. Logs\r\n * thrown error if clearing of a page's content fails.\r\n *\r\n * @async\r\n * @function clearPage\r\n *\r\n * @param {Object} poolResource - The pool resource that contains page and id.\r\n * @param {boolean} [hardReset=false] - A flag indicating the type of clearing\r\n * to be performed. If true, navigates to `about:blank` and resets content\r\n * and scripts. If false, clears the body content by setting a predefined HTML\r\n * structure. The default value is `false`.\r\n *\r\n * @returns {Promise<boolean>} A Promise that resolves to true when page\r\n * is correctly cleared and false when it is not.\r\n */\r\nexport async function clearPage(poolResource, hardReset = false) {\r\n  try {\r\n    if (poolResource.page && !poolResource.page.isClosed()) {\r\n      if (hardReset) {\r\n        // Navigate to `about:blank`\r\n        await poolResource.page.goto('about:blank', {\r\n          waitUntil: 'domcontentloaded'\r\n        });\r\n\r\n        // Set the content and and scripts again\r\n        await _setPageContent(poolResource.page);\r\n      } else {\r\n        // Clear body content\r\n        await poolResource.page.evaluate(() => {\r\n          document.body.innerHTML =\r\n            '<div id=\"chart-container\"><div id=\"container\"></div></div>';\r\n        });\r\n      }\r\n      return true;\r\n    }\r\n  } catch (error) {\r\n    logWithStack(\r\n      2,\r\n      error,\r\n      `[pool] Pool resource [${poolResource.id}] - Content of the page could not be cleared.`\r\n    );\r\n\r\n    // Set the `workLimit` to exceeded in order to recreate the resource\r\n    poolResource.workCount = getOptions().pool.workLimit + 1;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Adds custom JS and CSS resources to a Puppeteer Page based on the specified\r\n * options.\r\n *\r\n * @async\r\n * @function addPageResources\r\n *\r\n * @param {Object} page - The Puppeteer page object to which resources will\r\n * be added.\r\n * @param {Object} customLogicOptions - The configuration object containing\r\n * `customLogic` options.\r\n *\r\n * @returns {Promise<Array.<Object>>} A Promise that resolves to an array\r\n * of injected resources.\r\n */\r\nexport async function addPageResources(page, customLogicOptions) {\r\n  // Injected resources array\r\n  const injectedResources = [];\r\n\r\n  // Use resources\r\n  const resources = customLogicOptions.resources;\r\n  if (resources) {\r\n    const injectedJs = [];\r\n\r\n    // Load custom JS code\r\n    if (resources.js) {\r\n      injectedJs.push({\r\n        content: resources.js\r\n      });\r\n    }\r\n\r\n    // Load scripts from all custom files\r\n    if (resources.files) {\r\n      for (const file of resources.files) {\r\n        const isLocal = file.startsWith('http') ? false : true;\r\n\r\n        // Add each custom script from resources' files\r\n        injectedJs.push(\r\n          isLocal\r\n            ? {\r\n                content: readFileSync(getAbsolutePath(file), 'utf8')\r\n              }\r\n            : {\r\n                url: file\r\n              }\r\n        );\r\n      }\r\n    }\r\n\r\n    for (const jsResource of injectedJs) {\r\n      try {\r\n        injectedResources.push(await page.addScriptTag(jsResource));\r\n      } catch (error) {\r\n        logWithStack(2, error, `[browser] The JS resource cannot be loaded.`);\r\n      }\r\n    }\r\n    injectedJs.length = 0;\r\n\r\n    // Load CSS\r\n    const injectedCss = [];\r\n    if (resources.css) {\r\n      let cssImports = resources.css.match(/@import\\s*([^;]*);/g);\r\n      if (cssImports) {\r\n        // Handle css section\r\n        for (let cssImportPath of cssImports) {\r\n          if (cssImportPath) {\r\n            cssImportPath = cssImportPath\r\n              .replace('url(', '')\r\n              .replace('@import', '')\r\n              .replace(/\"/g, '')\r\n              .replace(/'/g, '')\r\n              .replace(/;/, '')\r\n              .replace(/\\)/g, '')\r\n              .trim();\r\n\r\n            // Add each custom css from resources\r\n            if (cssImportPath.startsWith('http')) {\r\n              injectedCss.push({\r\n                url: cssImportPath\r\n              });\r\n            } else if (customLogicOptions.allowFileResources) {\r\n              injectedCss.push({\r\n                path: getAbsolutePath(cssImportPath)\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // The rest of the CSS section will be content by now\r\n      injectedCss.push({\r\n        content: resources.css.replace(/@import\\s*([^;]*);/g, '') || ' '\r\n      });\r\n\r\n      for (const cssResource of injectedCss) {\r\n        try {\r\n          injectedResources.push(await page.addStyleTag(cssResource));\r\n        } catch (error) {\r\n          logWithStack(\r\n            2,\r\n            error,\r\n            `[browser] The CSS resource cannot be loaded.`\r\n          );\r\n        }\r\n      }\r\n      injectedCss.length = 0;\r\n    }\r\n  }\r\n  return injectedResources;\r\n}\r\n\r\n/**\r\n * Clears out all state set on the page with `addScriptTag` and `addStyleTag`.\r\n * Removes injected resources and resets CSS and script tags on the page.\r\n * Additionally, it destroys previously existing charts.\r\n *\r\n * @async\r\n * @function clearPageResources\r\n *\r\n * @param {Object} page - The Puppeteer page object from which resources will\r\n * be cleared.\r\n * @param {Array.<Object>} injectedResources - Array of injected resources\r\n * to be cleared.\r\n */\r\nexport async function clearPageResources(page, injectedResources) {\r\n  try {\r\n    for (const resource of injectedResources) {\r\n      await resource.dispose();\r\n    }\r\n\r\n    // Destroy old charts after export is done and reset all CSS and script tags\r\n    await page.evaluate(() => {\r\n      // We are not guaranteed that Highcharts is loaded, when doing SVG exports\r\n      if (typeof Highcharts !== 'undefined') {\r\n        // eslint-disable-next-line no-undef\r\n        const oldCharts = Highcharts.charts;\r\n\r\n        // Check in any already existing charts\r\n        if (Array.isArray(oldCharts) && oldCharts.length) {\r\n          // Destroy old charts\r\n          for (const oldChart of oldCharts) {\r\n            oldChart && oldChart.destroy();\r\n            // eslint-disable-next-line no-undef\r\n            Highcharts.charts.shift();\r\n          }\r\n        }\r\n      }\r\n\r\n      // eslint-disable-next-line no-undef\r\n      const [...scriptsToRemove] = document.getElementsByTagName('script');\r\n      // eslint-disable-next-line no-undef\r\n      const [, ...stylesToRemove] = document.getElementsByTagName('style');\r\n      // eslint-disable-next-line no-undef\r\n      const [...linksToRemove] = document.getElementsByTagName('link');\r\n\r\n      // Remove tags\r\n      for (const element of [\r\n        ...scriptsToRemove,\r\n        ...stylesToRemove,\r\n        ...linksToRemove\r\n      ]) {\r\n        element.remove();\r\n      }\r\n    });\r\n  } catch (error) {\r\n    logWithStack(2, error, `[browser] Could not clear page's resources.`);\r\n  }\r\n}\r\n\r\n/**\r\n * Sets the content for a Puppeteer Page using a predefined template\r\n * and additional scripts.\r\n *\r\n * @async\r\n * @function _setPageContent\r\n *\r\n * @param {Object} page - The Puppeteer page object to which the content\r\n * is being set.\r\n */\r\nasync function _setPageContent(page) {\r\n  // Set the initial page content\r\n  await page.setContent(template, { waitUntil: 'domcontentloaded' });\r\n\r\n  // Add all registered Higcharts scripts, quite demanding\r\n  await page.addScriptTag({ path: join(getCachePath(), 'sources.js') });\r\n\r\n  // Set the initial `animObject` for Highcharts\r\n  await page.evaluate(setupHighcharts);\r\n}\r\n\r\n/**\r\n * Set events (like `pageerror` and `console`) for a Puppeteer Page in order\r\n * to catch and display errors and console logs from the window context.\r\n *\r\n * @function _setPageEvents\r\n *\r\n * @param {Object} page - The Puppeteer page object to which the listeners\r\n * are being set.\r\n */\r\nfunction _setPageEvents(page) {\r\n  // Get `debug` options\r\n  const { debug } = getOptions();\r\n\r\n  // Set the `pageerror` listener\r\n  page.on('pageerror', async () => {\r\n    // It would seem like this may fire at the same time or shortly before\r\n    // a page is closed.\r\n    if (page.isClosed()) {\r\n      return;\r\n    }\r\n  });\r\n\r\n  // Set the `console` listener, if needed\r\n  if (debug.enable && debug.listenToConsole) {\r\n    page.on('console', (message) => {\r\n      console.log(`[debug] ${message.text()}`);\r\n    });\r\n  }\r\n}\r\n\r\nexport default {\r\n  getBrowser,\r\n  createBrowser,\r\n  closeBrowser,\r\n  newPage,\r\n  clearPage,\r\n  addPageResources,\r\n  clearPageResources\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * The CSS to be used on the exported page.\r\n *\r\n * @returns {string} The CSS configuration.\r\n */\r\nexport default () => `\r\n\r\nhtml, body {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n#table-div, #sliders, #datatable, #controls, .ld-row {\r\n  display: none;\r\n  height: 0;\r\n}\r\n\r\n#chart-container {\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  overflow: auto;\r\n  font-size: 0;\r\n}\r\n\r\n#chart-container > figure, div {\r\n  margin-top: 0 !important;\r\n  margin-bottom: 0 !important;\r\n}\r\n\r\n`;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cssTemplate from './css.js';\r\n\r\n/**\r\n * The SVG template to use when loading SVG content to be exported.\r\n *\r\n * @param {string} svg - The SVG input content to be exported.\r\n *\r\n * @returns {string} The SVG template.\r\n */\r\nexport default (svg) => `\r\n<!DOCTYPE html>\r\n<html lang='en-US'>\r\n  <head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n    <title>Highcharts Export</title>\r\n  </head>\r\n  <style>\r\n    ${cssTemplate()}\r\n  </style>\r\n  <body>\r\n    <div id=\"chart-container\">\r\n      ${svg}\r\n    </div>\r\n  </body>\r\n</html>\r\n\r\n`;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview This module handles chart export functionality using Puppeteer.\r\n * It supports exporting charts as SVG, PNG, JPEG, and PDF formats. The module\r\n * manages page resources, sets up the export environment, and processes chart\r\n * configurations or SVG inputs for rendering. Exports to a chart from a page\r\n * using Puppeteer.\r\n */\r\n\r\nimport { addPageResources, clearPageResources } from './browser.js';\r\nimport { createChart } from './highcharts.js';\r\nimport { log } from './logger.js';\r\n\r\nimport svgTemplate from '../templates/svgExport/svgExport.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\n/**\r\n * Exports to a chart from a page using Puppeteer.\r\n *\r\n * @async\r\n * @function puppeteerExport\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {Object} exportOptions - The configuration object containing `export`\r\n * options.\r\n * @param {Object} customLogicOptions - The configuration object containing\r\n * `customLogic` options.\r\n *\r\n * @returns {Promise<(string|Buffer|ExportError)>} A Promise that resolves\r\n * to the exported data or rejecting with an `ExportError`.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if export to an unsupported\r\n * output format occurs.\r\n */\r\nexport async function puppeteerExport(page, exportOptions, customLogicOptions) {\r\n  // Injected resources array (additional JS and CSS)\r\n  const injectedResources = [];\r\n\r\n  try {\r\n    let isSVG = false;\r\n\r\n    // Decide on the export method\r\n    if (exportOptions.svg) {\r\n      log(4, '[export] Treating as SVG input.');\r\n\r\n      // If the `type` is also SVG, return the input\r\n      if (exportOptions.type === 'svg') {\r\n        return exportOptions.svg;\r\n      }\r\n\r\n      // Mark as SVG export for the later size corrections\r\n      isSVG = true;\r\n\r\n      // SVG export\r\n      await page.setContent(svgTemplate(exportOptions.svg), {\r\n        waitUntil: 'domcontentloaded'\r\n      });\r\n    } else {\r\n      log(4, '[export] Treating as JSON config.');\r\n\r\n      // Options export\r\n      await page.evaluate(createChart, exportOptions, customLogicOptions);\r\n    }\r\n\r\n    // Keeps track of all resources added on the page with addXXXTag. etc\r\n    // It's VITAL that all added resources ends up here so we can clear things\r\n    // out when doing a new export in the same page!\r\n    injectedResources.push(\r\n      ...(await addPageResources(page, customLogicOptions))\r\n    );\r\n\r\n    // Get the real chart size and set the zoom accordingly\r\n    const size = isSVG\r\n      ? await page.evaluate((scale) => {\r\n          const svgElement = document.querySelector(\r\n            '#chart-container svg:first-of-type'\r\n          );\r\n\r\n          // Get the values correctly scaled\r\n          const chartHeight = svgElement.height.baseVal.value * scale;\r\n          const chartWidth = svgElement.width.baseVal.value * scale;\r\n\r\n          // In case of SVG the zoom must be set directly for body as scale\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = scale;\r\n\r\n          // Set the margin to 0px\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.margin = '0px';\r\n\r\n          return {\r\n            chartHeight,\r\n            chartWidth\r\n          };\r\n        }, parseFloat(exportOptions.scale))\r\n      : await page.evaluate(() => {\r\n          // eslint-disable-next-line no-undef\r\n          const { chartHeight, chartWidth } = window.Highcharts.charts[0];\r\n\r\n          // No need for such scale manipulation in case of other types\r\n          // of exports. Reset the zoom for other exports than to SVGs\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = 1;\r\n\r\n          return {\r\n            chartHeight,\r\n            chartWidth\r\n          };\r\n        });\r\n\r\n    // Get the clip region for the page\r\n    const { x, y } = await _getClipRegion(page);\r\n\r\n    // Set final `height` for viewport\r\n    const viewportHeight = Math.abs(\r\n      Math.ceil(size.chartHeight || exportOptions.height)\r\n    );\r\n\r\n    // Set final `width` for viewport\r\n    const viewportWidth = Math.abs(\r\n      Math.ceil(size.chartWidth || exportOptions.width)\r\n    );\r\n\r\n    // Set the final viewport now that we have the real height\r\n    await page.setViewport({\r\n      height: viewportHeight,\r\n      width: viewportWidth,\r\n      deviceScaleFactor: isSVG ? 1 : parseFloat(exportOptions.scale)\r\n    });\r\n\r\n    let result;\r\n    // Rasterization process\r\n    switch (exportOptions.type) {\r\n      case 'svg':\r\n        result = await _createSVG(page);\r\n        break;\r\n      case 'png':\r\n      case 'jpeg':\r\n        result = await _createImage(\r\n          page,\r\n          exportOptions.type,\r\n          {\r\n            width: viewportWidth,\r\n            height: viewportHeight,\r\n            x,\r\n            y\r\n          },\r\n          exportOptions.rasterizationTimeout\r\n        );\r\n        break;\r\n      case 'pdf':\r\n        result = await _createPDF(\r\n          page,\r\n          viewportHeight,\r\n          viewportWidth,\r\n          exportOptions.rasterizationTimeout\r\n        );\r\n        break;\r\n      default:\r\n        throw new ExportError(\r\n          `[export] Unsupported output format: ${exportOptions.type}.`,\r\n          400\r\n        );\r\n    }\r\n\r\n    // Clear previously injected JS and CSS resources\r\n    await clearPageResources(page, injectedResources);\r\n    return result;\r\n  } catch (error) {\r\n    await clearPageResources(page, injectedResources);\r\n    return error;\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves the clipping region coordinates of the specified page element\r\n * with the 'chart-container' id.\r\n *\r\n * @async\r\n * @function _getClipRegion\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n *\r\n * @returns {Promise<Object>} A Promise that resolves to an object containing\r\n * `x`, `y`, `width`, and `height` properties.\r\n */\r\nasync function _getClipRegion(page) {\r\n  return page.$eval('#chart-container', (element) => {\r\n    const { x, y, width, height } = element.getBoundingClientRect();\r\n    return {\r\n      x,\r\n      y,\r\n      width,\r\n      height: Math.trunc(height > 1 ? height : 500)\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Creates an SVG by evaluating the `outerHTML` of the first 'svg' element\r\n * inside an element with the id 'container'.\r\n *\r\n * @async\r\n * @function _createSVG\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n *\r\n * @returns {Promise<string>} A Promise that resolves to the SVG string.\r\n */\r\nasync function _createSVG(page) {\r\n  return page.$eval(\r\n    '#container svg:first-of-type',\r\n    (element) => element.outerHTML\r\n  );\r\n}\r\n\r\n/**\r\n * Creates an image using Puppeteer's page `screenshot` functionality with\r\n * specified options.\r\n *\r\n * @async\r\n * @function _createImage\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {string} type - Image type.\r\n * @param {Object} clip - Clipping region coordinates.\r\n * @param {number} rasterizationTimeout - Timeout for rasterization\r\n * in milliseconds.\r\n *\r\n * @returns {Promise<Buffer>} A Promise that resolves to the image buffer\r\n * or rejecting with an `ExportError` for timeout.\r\n */\r\nasync function _createImage(page, type, clip, rasterizationTimeout) {\r\n  return Promise.race([\r\n    page.screenshot({\r\n      type,\r\n      clip,\r\n      encoding: 'base64',\r\n      fullPage: false,\r\n      optimizeForSpeed: true,\r\n      captureBeyondViewport: true,\r\n      ...(type !== 'png' ? { quality: 80 } : {}),\r\n      // Always render on a transparent page if the expected type format is PNG\r\n      omitBackground: type == 'png' // #447, #463\r\n    }),\r\n    new Promise((_resolve, reject) =>\r\n      setTimeout(\r\n        () => reject(new ExportError('Rasterization timeout', 408)),\r\n        rasterizationTimeout || 1500\r\n      )\r\n    )\r\n  ]);\r\n}\r\n\r\n/**\r\n * Creates a PDF using Puppeteer's page `pdf` functionality with specified\r\n * options.\r\n *\r\n * @async\r\n * @function _createPDF\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {number} height - PDF height.\r\n * @param {number} width - PDF width.\r\n * @param {number} rasterizationTimeout - Timeout for rasterization\r\n * in milliseconds.\r\n *\r\n * @returns {Promise<Buffer>} A Promise that resolves to the PDF buffer.\r\n */\r\nasync function _createPDF(page, height, width, rasterizationTimeout) {\r\n  await page.emulateMediaType('screen');\r\n  return page.pdf({\r\n    // This will remove an extra empty page in PDF exports\r\n    height: height + 1,\r\n    width,\r\n    encoding: 'base64',\r\n    timeout: rasterizationTimeout || 1500\r\n  });\r\n}\r\n\r\nexport default {\r\n  puppeteerExport\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview This module provides a worker pool implementation for managing\r\n * the browser instance and pages, specifically designed for use with\r\n * the Highcharts Export Server. It optimizes resources usage and performance\r\n * by maintaining a pool of workers that can handle concurrent export tasks\r\n * using Puppeteer.\r\n */\r\n\r\nimport { Pool } from 'tarn';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { createBrowser, closeBrowser, newPage, clearPage } from './browser.js';\r\nimport { puppeteerExport } from './export.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { getNewDateTime, measureTime } from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\n// The pool instance\r\nlet pool = null;\r\n\r\n// Pool statistics\r\nconst poolStats = {\r\n  exportsAttempted: 0,\r\n  exportsPerformed: 0,\r\n  exportsDropped: 0,\r\n  exportsFromSvg: 0,\r\n  exportsFromOptions: 0,\r\n  exportsFromSvgAttempts: 0,\r\n  exportsFromOptionsAttempts: 0,\r\n  timeSpent: 0,\r\n  timeSpentAverage: 0\r\n};\r\n\r\n/**\r\n * Initializes the export pool with the provided configuration, creating\r\n * a browser instance and setting up worker resources.\r\n *\r\n * @async\r\n * @function initPool\r\n *\r\n * @param {Object} poolOptions - The configuration object containing `pool`\r\n * options.\r\n * @param {Array.<string>} puppeteerArgs - Additional arguments for Puppeteer\r\n * launch.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves to ending the function\r\n * execution when an already initialized pool of resources is found.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if could not create the pool\r\n * of workers.\r\n */\r\nexport async function initPool(poolOptions, puppeteerArgs) {\r\n  // Create a browser instance with the puppeteer arguments\r\n  await createBrowser(puppeteerArgs);\r\n\r\n  try {\r\n    log(\r\n      3,\r\n      `[pool] Initializing pool with workers: min ${poolOptions.minWorkers}, max ${poolOptions.maxWorkers}.`\r\n    );\r\n\r\n    if (pool) {\r\n      log(\r\n        4,\r\n        '[pool] Already initialized, please kill it before creating a new one.'\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Keep an eye on a correct min and max workers number\r\n    if (poolOptions.minWorkers > poolOptions.maxWorkers) {\r\n      poolOptions.minWorkers = poolOptions.maxWorkers;\r\n    }\r\n\r\n    // Create a pool along with a minimal number of resources\r\n    pool = new Pool({\r\n      // Get the `create`, `validate`, and `destroy` functions\r\n      ..._factory(poolOptions),\r\n      min: poolOptions.minWorkers,\r\n      max: poolOptions.maxWorkers,\r\n      acquireTimeoutMillis: poolOptions.acquireTimeout,\r\n      createTimeoutMillis: poolOptions.createTimeout,\r\n      destroyTimeoutMillis: poolOptions.destroyTimeout,\r\n      idleTimeoutMillis: poolOptions.idleTimeout,\r\n      createRetryIntervalMillis: poolOptions.createRetryInterval,\r\n      reapIntervalMillis: poolOptions.reaperInterval,\r\n      propagateCreateError: false\r\n    });\r\n\r\n    // Set events\r\n    pool.on('release', async (resource) => {\r\n      // Clear page\r\n      const clearStatus = await clearPage(resource, false);\r\n      log(\r\n        4,\r\n        `[pool] Pool resource [${resource.id}] - Releasing a worker. Clear page status: ${clearStatus}.`\r\n      );\r\n    });\r\n\r\n    pool.on('destroySuccess', (_eventId, resource) => {\r\n      log(\r\n        4,\r\n        `[pool] Pool resource [${resource.id}] - Destroyed a worker successfully.`\r\n      );\r\n      resource.page = null;\r\n    });\r\n\r\n    const initialResources = [];\r\n    // Create an initial number of resources\r\n    for (let i = 0; i < poolOptions.minWorkers; i++) {\r\n      try {\r\n        const resource = await pool.acquire().promise;\r\n        initialResources.push(resource);\r\n      } catch (error) {\r\n        logWithStack(2, error, '[pool] Could not create an initial resource.');\r\n      }\r\n    }\r\n\r\n    // Release the initial number of resources back to the pool\r\n    initialResources.forEach((resource) => {\r\n      pool.release(resource);\r\n    });\r\n\r\n    log(\r\n      3,\r\n      `[pool] The pool is ready${initialResources.length ? ` with ${initialResources.length} initial resources waiting.` : '.'}`\r\n    );\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[pool] Could not configure and create the pool of workers.',\r\n      500\r\n    ).setError(error);\r\n  }\r\n}\r\n\r\n/**\r\n * Terminates all workers in the pool, destroys the pool, and closes the browser\r\n * instance.\r\n *\r\n * @async\r\n * @function killPool\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once all workers are\r\n * terminated, the pool is destroyed, and the browser is successfully closed.\r\n */\r\nexport async function killPool() {\r\n  log(3, '[pool] Killing pool with all workers and closing browser.');\r\n\r\n  // If still alive, destroy the pool of pages before closing a browser\r\n  if (pool) {\r\n    // Free up not released workers\r\n    for (const worker of pool.used) {\r\n      pool.release(worker.resource);\r\n    }\r\n\r\n    // Destroy the pool if it is still available\r\n    if (!pool.destroyed) {\r\n      await pool.destroy();\r\n      log(4, '[pool] Destroyed the pool of resources.');\r\n    }\r\n    pool = null;\r\n  }\r\n\r\n  // Close the browser instance\r\n  await closeBrowser();\r\n}\r\n\r\n/**\r\n * Processes the export work using a worker from the pool. Acquires a worker\r\n * handle from the pool, performs the export using puppeteer, and releases\r\n * the worker handle back to the pool.\r\n *\r\n * @async\r\n * @function postWork\r\n *\r\n * @param {Object} options - The configuration object containing complete set\r\n * of options.\r\n *\r\n * @returns {Promise<Object>} A Promise that resolves to the export result\r\n * and options.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if an error occurs during\r\n * the export process.\r\n */\r\nexport async function postWork(options) {\r\n  let workerHandle;\r\n\r\n  try {\r\n    log(4, '[pool] Work received, starting to process.');\r\n\r\n    // An export attempt counted\r\n    ++poolStats.exportsAttempted;\r\n\r\n    // Display the pool information if needed\r\n    if (options.pool.benchmarking) {\r\n      getPoolInfo();\r\n    }\r\n\r\n    // Throw an error in case of lacking the pool instance\r\n    if (!pool) {\r\n      throw new ExportError(\r\n        '[pool] Work received, but pool has not been started.',\r\n        500\r\n      );\r\n    }\r\n\r\n    // The acquire counter\r\n    const acquireCounter = measureTime();\r\n\r\n    // Try to acquire the worker along with the id, works count and page\r\n    try {\r\n      log(4, '[pool] Acquiring a worker handle.');\r\n\r\n      // Acquire a pool resource\r\n      workerHandle = await pool.acquire().promise;\r\n\r\n      // Check the page acquire time\r\n      if (options.server.benchmarking) {\r\n        log(\r\n          5,\r\n          `[benchmark] ${options.requestId ? `Request [${options.requestId}] - ` : ''}`,\r\n          `Acquiring a worker handle took ${acquireCounter()}ms.`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        `[pool] ${\r\n          options.requestId ? `Request [${options.requestId}] - ` : ''\r\n        }Error encountered when acquiring an available entry: ${acquireCounter()}ms.`,\r\n        400\r\n      ).setError(error);\r\n    }\r\n    log(4, '[pool] Acquired a worker handle.');\r\n\r\n    if (!workerHandle.page) {\r\n      // Set the `workLimit` to exceeded in order to recreate the resource\r\n      workerHandle.workCount = options.pool.workLimit + 1;\r\n      throw new ExportError(\r\n        '[pool] Resolved worker page is invalid: the pool setup is wonky.',\r\n        400\r\n      );\r\n    }\r\n\r\n    // Save the start time\r\n    const workStart = getNewDateTime();\r\n\r\n    log(\r\n      4,\r\n      `[pool] Pool resource [${workerHandle.id}] - Starting work on this pool entry.`\r\n    );\r\n\r\n    // Start measuring export time\r\n    const exportCounter = measureTime();\r\n\r\n    // Perform an export on a puppeteer level\r\n    const result = await puppeteerExport(\r\n      workerHandle.page,\r\n      options.export,\r\n      options.customLogic\r\n    );\r\n\r\n    // Check if it's an error\r\n    if (result instanceof Error) {\r\n      // NOTE:\r\n      // If there's a rasterization timeout, we want need to flush the page.\r\n      // This is because the page may be in a state where it's waiting for\r\n      // the screenshot to finish even though the timeout has occured.\r\n      // Which of course causes a lot of issues with the event system,\r\n      // and page consistency.\r\n      //\r\n      // NOTE:\r\n      // Only page.screenshot will throw this, timeouts for PDF's are\r\n      // handled by the page.pdf function itself.\r\n      //\r\n      // ...yes, this is ugly.\r\n      if (result.message === 'Rasterization timeout') {\r\n        // Set the `workLimit` to exceeded in order to recreate the resource\r\n        workerHandle.workCount = options.pool.workLimit + 1;\r\n        workerHandle.page = null;\r\n      }\r\n\r\n      if (\r\n        result.name === 'TimeoutError' ||\r\n        result.message === 'Rasterization timeout'\r\n      ) {\r\n        throw new ExportError(\r\n          `[pool] ${\r\n            options.requestId ? `Request [${options.requestId}] - ` : ''\r\n          }Rasterization timeout: your chart may be too complex or large, and failed to render within the allotted time.`\r\n        ).setError(result);\r\n      } else {\r\n        throw new ExportError(\r\n          `[pool] ${\r\n            options.requestId ? `Request [${options.requestId}] - ` : ''\r\n          }Error encountered during export: ${exportCounter()}ms.`\r\n        ).setError(result);\r\n      }\r\n    }\r\n\r\n    // Check the Puppeteer export time\r\n    if (options.server.benchmarking) {\r\n      log(\r\n        5,\r\n        `[benchmark] ${options.requestId ? `Request [${options.requestId}] - ` : ''}`,\r\n        `Exporting a chart sucessfully took ${exportCounter()}ms.`\r\n      );\r\n    }\r\n\r\n    // Release the resource back to the pool\r\n    pool.release(workerHandle);\r\n\r\n    // Used for statistics in averageTime and processedWorkCount, which\r\n    // in turn is used by the /health route.\r\n    const workEnd = getNewDateTime();\r\n    const exportTime = workEnd - workStart;\r\n\r\n    poolStats.timeSpent += exportTime;\r\n    poolStats.timeSpentAverage =\r\n      poolStats.timeSpent / ++poolStats.exportsPerformed;\r\n\r\n    log(4, `[pool] Work completed in ${exportTime}ms.`);\r\n\r\n    // Otherwise return the result\r\n    return {\r\n      result,\r\n      options\r\n    };\r\n  } catch (error) {\r\n    ++poolStats.exportsDropped;\r\n\r\n    if (workerHandle) {\r\n      pool.release(workerHandle);\r\n    }\r\n\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves the current pool instance.\r\n *\r\n * @function getPool\r\n *\r\n * @returns {(Object|null)} The current pool instance if initialized, or null\r\n * if the pool has not been created.\r\n */\r\nexport function getPool() {\r\n  return pool;\r\n}\r\n\r\n/**\r\n * Gets the statistic of a pool instace about exports.\r\n *\r\n * @function getPoolStats\r\n *\r\n * @returns {Object} The current pool statistics.\r\n */\r\nexport function getPoolStats() {\r\n  return poolStats;\r\n}\r\n\r\n/**\r\n * Retrieves pool information in JSON format, including minimum and maximum\r\n * workers, available workers, workers in use, and pending acquire requests.\r\n *\r\n * @function getPoolInfoJSON\r\n *\r\n * @returns {Object} Pool information in JSON format.\r\n */\r\nexport function getPoolInfoJSON() {\r\n  return {\r\n    min: pool.min,\r\n    max: pool.max,\r\n    used: pool.numUsed(),\r\n    available: pool.numFree(),\r\n    allCreated: pool.numUsed() + pool.numFree(),\r\n    pendingAcquires: pool.numPendingAcquires(),\r\n    pendingCreates: pool.numPendingCreates(),\r\n    pendingValidations: pool.numPendingValidations(),\r\n    pendingDestroys: pool.pendingDestroys.length,\r\n    absoluteAll:\r\n      pool.numUsed() +\r\n      pool.numFree() +\r\n      pool.numPendingAcquires() +\r\n      pool.numPendingCreates() +\r\n      pool.numPendingValidations() +\r\n      pool.pendingDestroys.length\r\n  };\r\n}\r\n\r\n/**\r\n * Logs information about the current state of the pool, including the minimum\r\n * and maximum workers, available workers, workers in use, and pending acquire\r\n * requests.\r\n *\r\n * @function getPoolInfo\r\n */\r\nexport function getPoolInfo() {\r\n  const {\r\n    min,\r\n    max,\r\n    used,\r\n    available,\r\n    allCreated,\r\n    pendingAcquires,\r\n    pendingCreates,\r\n    pendingValidations,\r\n    pendingDestroys,\r\n    absoluteAll\r\n  } = getPoolInfoJSON();\r\n\r\n  log(5, `[pool] The minimum number of resources allowed by pool: ${min}.`);\r\n  log(5, `[pool] The maximum number of resources allowed by pool: ${max}.`);\r\n  log(5, `[pool] The number of used resources: ${used}.`);\r\n  log(5, `[pool] The number of free resources: ${available}.`);\r\n  log(\r\n    5,\r\n    `[pool] The number of all created (used and free) resources: ${allCreated}.`\r\n  );\r\n  log(\r\n    5,\r\n    `[pool] The number of resources waiting to be acquired: ${pendingAcquires}.`\r\n  );\r\n  log(\r\n    5,\r\n    `[pool] The number of resources waiting to be created: ${pendingCreates}.`\r\n  );\r\n  log(\r\n    5,\r\n    `[pool] The number of resources waiting to be validated: ${pendingValidations}.`\r\n  );\r\n  log(\r\n    5,\r\n    `[pool] The number of resources waiting to be destroyed: ${pendingDestroys}.`\r\n  );\r\n  log(5, `[pool] The number of all resources: ${absoluteAll}.`);\r\n}\r\n\r\n/**\r\n * Factory function that returns an object with `create`, `validate`,\r\n * and `destroy` functions for the pool instance.\r\n *\r\n * @function _factory\r\n *\r\n * @param {Object} poolOptions - The configuration object containing `pool`\r\n * options.\r\n */\r\nfunction _factory(poolOptions) {\r\n  return {\r\n    /**\r\n     * Creates a new worker page for the export pool.\r\n     *\r\n     * @async\r\n     * @function create\r\n     *\r\n     * @returns {Promise<Object>} A Promise that resolves to an object\r\n     * containing the worker ID, a reference to the browser page, and initial\r\n     * work count.\r\n     *\r\n     * @throws {ExportError} Throws an `ExportError` if there is an error during\r\n     * the creation of the new page.\r\n     */\r\n    create: async () => {\r\n      // Init the resource with unique id and work count\r\n      const poolResource = {\r\n        id: uuid(),\r\n        // Try to distribute the initial work count\r\n        workCount: Math.round(Math.random() * (poolOptions.workLimit / 2))\r\n      };\r\n\r\n      try {\r\n        // Start measuring a page creation time\r\n        const startDate = getNewDateTime();\r\n\r\n        // Create a new page\r\n        await newPage(poolResource);\r\n\r\n        // Measure the time of full creation and configuration of a page\r\n        log(\r\n          3,\r\n          `[pool] Pool resource [${poolResource.id}] - Successfully created a worker, took ${\r\n            getNewDateTime() - startDate\r\n          }ms.`\r\n        );\r\n\r\n        // Return ready pool resource\r\n        return poolResource;\r\n      } catch (error) {\r\n        log(\r\n          3,\r\n          `[pool] Pool resource [${poolResource.id}] - Error encountered when creating a new page.`\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Validates a worker page in the export pool, checking if it has exceeded\r\n     * the work limit.\r\n     *\r\n     * @async\r\n     * @function validate\r\n     *\r\n     * @param {Object} poolResource - The handle to the worker, containing\r\n     * the worker's ID, a reference to the browser page, and work count.\r\n     *\r\n     * @returns {Promise<boolean>} A Promise that resolves to true if the worker\r\n     * is valid and within the work limit; otherwise, to false.\r\n     */\r\n    validate: async (poolResource) => {\r\n      // NOTE:\r\n      // In certain cases acquiring throws a TargetCloseError, which may\r\n      // be caused by two things:\r\n      // - The page is closed and attempted to be reused.\r\n      // - Lost contact with the browser.\r\n      //\r\n      // What we're seeing in logs is that successive exports typically\r\n      // succeeds, and the server recovers, indicating that it's likely\r\n      // the first case. This is an attempt at allievating the issue by\r\n      // simply not validating the worker if the page is null or closed.\r\n      //\r\n      // The actual result from when this happened, was that a worker would\r\n      // be completely locked, stopping it from being acquired until\r\n      // its work count reached the limit.\r\n\r\n      // Check if the `page` is valid\r\n      if (!poolResource.page) {\r\n        log(\r\n          3,\r\n          `[pool] Pool resource [${poolResource.id}] - Validation failed (no valid page is found).`\r\n        );\r\n        return false;\r\n      }\r\n\r\n      // Check if the `page` is closed\r\n      if (poolResource.page.isClosed()) {\r\n        log(\r\n          3,\r\n          `[pool] Pool resource [${poolResource.id}] - Validation failed (page is closed or invalid).`\r\n        );\r\n        return false;\r\n      }\r\n\r\n      // Check if the `mainFrame` is detached\r\n      if (poolResource.page.mainFrame().detached) {\r\n        log(\r\n          3,\r\n          `[pool] Pool resource [${poolResource.id}] - Validation failed (page's frame is detached).`\r\n        );\r\n        return false;\r\n      }\r\n\r\n      // Check if the `workLimit` is exceeded\r\n      if (\r\n        poolOptions.workLimit &&\r\n        ++poolResource.workCount > poolOptions.workLimit\r\n      ) {\r\n        log(\r\n          3,\r\n          `[pool] Pool resource [${poolResource.id}] - Validation failed (exceeded the ${poolOptions.workLimit} works per resource limit).`\r\n        );\r\n        return false;\r\n      }\r\n\r\n      // The `poolResource` is validated\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * Destroys a worker entry in the export pool, closing its associated page.\r\n     *\r\n     * @async\r\n     * @function destroy\r\n     *\r\n     * @param {Object} poolResource - The handle to the worker, containing\r\n     * the worker's ID, a reference to the browser page, and work count.\r\n     */\r\n    destroy: async (poolResource) => {\r\n      log(\r\n        3,\r\n        `[pool] Pool resource [${poolResource.id}] - Destroying a worker.`\r\n      );\r\n\r\n      if (poolResource.page && !poolResource.page.isClosed()) {\r\n        try {\r\n          // Remove all attached event listeners from the resource\r\n          poolResource.page.removeAllListeners('pageerror');\r\n          poolResource.page.removeAllListeners('console');\r\n          poolResource.page.removeAllListeners('framedetached');\r\n\r\n          // We need to wait around for this\r\n          await poolResource.page.close();\r\n        } catch (error) {\r\n          log(\r\n            3,\r\n            `[pool] Pool resource [${poolResource.id}] - Page could not be closed upon destroying.`\r\n          );\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default {\r\n  initPool,\r\n  killPool,\r\n  postWork,\r\n  getPool,\r\n  getPoolStats,\r\n  getPoolInfo,\r\n  getPoolInfoJSON\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview Used to sanitize the strings coming from the exporting module\r\n * to prevent XSS attacks (with the DOMPurify library).\r\n */\r\n\r\nimport DOMPurify from 'dompurify';\r\nimport { JSDOM } from 'jsdom';\r\n\r\n/**\r\n * Sanitizes a given HTML string by removing <script> tags. This function uses\r\n * a regular expression to find and remove all occurrences of <script></script>\r\n * tags and any content within them.\r\n *\r\n * @function sanitize\r\n *\r\n * @param {string} input - The HTML string to be sanitized.\r\n *\r\n * @returns {string} The sanitized HTML string.\r\n */\r\nexport function sanitize(input) {\r\n  // Get the virtual DOM\r\n  const window = new JSDOM('').window;\r\n\r\n  // Create a purifying instance\r\n  const purify = DOMPurify(window);\r\n\r\n  // Return sanitized input\r\n  return purify.sanitize(input, { ADD_TAGS: ['foreignObject'] });\r\n}\r\n\r\nexport default {\r\n  sanitize\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview This module provides functions to prepare for the exporting charts\r\n * into various image output formats such as JPEG, PNG, PDF, and SVGs.\r\n * It supports single and batch export operations and allows customization\r\n * through options passed from configurations or APIs.\r\n */\r\n\r\nimport { readFileSync, writeFileSync } from 'fs';\r\n\r\nimport { isAllowedConfig, updateOptions } from './config.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { getPoolStats, killPool, postWork } from './pool.js';\r\nimport { sanitize } from './sanitize.js';\r\nimport {\r\n  fixConstr,\r\n  fixOutfile,\r\n  fixType,\r\n  getAbsolutePath,\r\n  getBase64,\r\n  isObject,\r\n  roundNumber,\r\n  wrapAround\r\n} from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\n// The global flag for the code execution permission\r\nlet allowCodeExecution = false;\r\n\r\n/**\r\n * Starts a single export process based on the specified options and saves\r\n * the resulting image to the provided output file.\r\n *\r\n * @async\r\n * @function singleExport\r\n *\r\n * @param {Object} options - The `options` object, which should include settings\r\n * from the `export` and `customLogic` sections. It can be a partial or complete\r\n * set of options from these sections. The object must contain at least one\r\n * of the following `export` properties: `infile`, `instr`, `options`, or `svg`\r\n * to generate a valid image.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the single export\r\n * process is completed.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if an error occurs during\r\n * the single export process.\r\n */\r\nexport async function singleExport(options) {\r\n  // Check if the export makes sense\r\n  if (options && options.export) {\r\n    // Perform an export\r\n    await startExport(\r\n      { export: options.export, customLogic: options.customLogic },\r\n      async (error, data) => {\r\n        // Exit process when error exists\r\n        if (error) {\r\n          throw error;\r\n        }\r\n\r\n        // Get the `b64`, `outfile`, and `type` for a chart\r\n        const { b64, outfile, type } = data.options.export;\r\n\r\n        // Save the result\r\n        try {\r\n          if (b64) {\r\n            // As a Base64 string to a txt file\r\n            writeFileSync(\r\n              `${outfile.split('.').shift() || 'chart'}.txt`,\r\n              getBase64(data.result, type)\r\n            );\r\n          } else {\r\n            // As a correct image format\r\n            writeFileSync(\r\n              outfile || `chart.${type}`,\r\n              type !== 'svg' ? Buffer.from(data.result, 'base64') : data.result\r\n            );\r\n          }\r\n        } catch (error) {\r\n          throw new ExportError(\r\n            '[chart] Error while saving a chart.',\r\n            500\r\n          ).setError(error);\r\n        }\r\n\r\n        // Kill pool and close browser after finishing single export\r\n        await killPool();\r\n      }\r\n    );\r\n  } else {\r\n    throw new ExportError(\r\n      '[chart] No expected `export` options were found. Please provide one of the following options: `infile`, `instr`, `options`, or `svg` to generate a valid image.',\r\n      400\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Starts a batch export process for multiple charts based on information\r\n * provided in the `batch` option. The `batch` is a string in the following\r\n * format: \"infile1.json=outfile1.png;infile2.json=outfile2.png;...\". Results\r\n * are saved to the specified output files.\r\n *\r\n * @async\r\n * @function batchExport\r\n *\r\n * @param {Object} options - The `options` object, which should include settings\r\n * from the `export` and `customLogic` sections. It can be a partial or complete\r\n * set of options from these sections. It must contain the `batch` option from\r\n * the `export` section to generate valid images.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the batch export\r\n * processes are completed.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if an error occurs during\r\n * any of the batch export process.\r\n */\r\nexport async function batchExport(options) {\r\n  // Check if the export makes sense\r\n  if (options && options.export && options.export.batch) {\r\n    // An array for collecting batch exports\r\n    const batchFunctions = [];\r\n\r\n    // Split and pair the `batch` arguments\r\n    for (let pair of options.export.batch.split(';') || []) {\r\n      pair = pair.split('=');\r\n      if (pair.length === 2) {\r\n        batchFunctions.push(\r\n          startExport(\r\n            {\r\n              export: {\r\n                ...options.export,\r\n                infile: pair[0],\r\n                outfile: pair[1]\r\n              },\r\n              customLogic: options.customLogic\r\n            },\r\n            (error, data) => {\r\n              // Exit process when error exists\r\n              if (error) {\r\n                throw error;\r\n              }\r\n\r\n              // Get the `b64`, `outfile`, and `type` for a chart\r\n              const { b64, outfile, type } = data.options.export;\r\n\r\n              // Save the result\r\n              try {\r\n                if (b64) {\r\n                  // As a Base64 string to a txt file\r\n                  writeFileSync(\r\n                    `${outfile.split('.').shift() || 'chart'}.txt`,\r\n                    getBase64(data.result, type)\r\n                  );\r\n                } else {\r\n                  // As a correct image format\r\n                  writeFileSync(\r\n                    outfile,\r\n                    type !== 'svg'\r\n                      ? Buffer.from(data.result, 'base64')\r\n                      : data.result\r\n                  );\r\n                }\r\n              } catch (error) {\r\n                throw new ExportError(\r\n                  '[chart] Error while saving a chart.',\r\n                  500\r\n                ).setError(error);\r\n              }\r\n            }\r\n          )\r\n        );\r\n      } else {\r\n        log(2, '[chart] No correct pair found for the batch export.');\r\n      }\r\n    }\r\n\r\n    // Await all exports are done\r\n    const batchResults = await Promise.allSettled(batchFunctions);\r\n\r\n    // Kill pool and close browser after finishing batch export\r\n    await killPool();\r\n\r\n    // Log errors if found\r\n    batchResults.forEach((result, index) => {\r\n      // Log the error with stack about the specific batch export\r\n      if (result.reason) {\r\n        logWithStack(\r\n          1,\r\n          result.reason,\r\n          `[chart] Batch export number ${index + 1} could not be correctly completed.`\r\n        );\r\n      }\r\n    });\r\n  } else {\r\n    throw new ExportError(\r\n      '[chart] No expected `export` options were found. Please provide the `batch` option to generate valid images.',\r\n      400\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Starts an export process. The `imageOptions` parameter is an object that\r\n * should include settings from the `export` and `customLogic` sections. It can\r\n * be a partial or complete set of options from these sections. If partial\r\n * options are provided, missing values will be merged with the current global\r\n * options.\r\n *\r\n * The `endCallback` function is invoked upon the completion of the export,\r\n * either successfully or with an error. The `error` object is provided\r\n * as the first argument, and the `data` object is the second, containing\r\n * the Base64 representation of the chart in the `result` property\r\n * and the complete set of options in the `options` property.\r\n *\r\n * @async\r\n * @function startExport\r\n *\r\n * @param {Object} imageOptions - The `imageOptions` object, which should\r\n * include settings from the `export` and `customLogic` sections. It can\r\n * be a partial or complete set of options from these sections. If the provided\r\n * options are partial, missing values will be merged with the current global\r\n * options.\r\n * @param {Function} endCallback - The callback function to be invoked upon\r\n * finalizing the export process or upon encountering an error. The first\r\n * argument is the `error` object, and the second argument is the `data` object,\r\n * which includes the Base64 representation of the chart in the `result`\r\n * property and the full set of options in the `options` property.\r\n *\r\n * @returns {Promise<void>} This function does not return a value directly.\r\n * Instead, it communicates results via the `endCallback`.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if there is a problem with\r\n * processing input of any type. The error is passed into the `endCallback`\r\n * function and processed there.\r\n */\r\nexport async function startExport(imageOptions, endCallback) {\r\n  try {\r\n    // Check if provided options are in an object\r\n    if (!isObject(imageOptions)) {\r\n      throw new ExportError(\r\n        '[chart] Incorrect value of the provided `imageOptions`. Needs to be an object.',\r\n        400\r\n      );\r\n    }\r\n\r\n    // Merge additional options to the copy of the instance options\r\n    const options = updateOptions(\r\n      {\r\n        export: imageOptions.export,\r\n        customLogic: imageOptions.customLogic\r\n      },\r\n      true\r\n    );\r\n\r\n    // Get the `export` options\r\n    const exportOptions = options.export;\r\n\r\n    // Starting exporting process message\r\n    log(4, '[chart] Starting the exporting process.');\r\n\r\n    // Export using options from the file as an input\r\n    if (exportOptions.infile !== null) {\r\n      log(4, '[chart] Attempting to export from a file input.');\r\n\r\n      let fileContent;\r\n      try {\r\n        // Try to read the file to get the string representation\r\n        fileContent = readFileSync(\r\n          getAbsolutePath(exportOptions.infile),\r\n          'utf8'\r\n        );\r\n      } catch (error) {\r\n        throw new ExportError(\r\n          '[chart] Error loading content from a file input.',\r\n          400\r\n        ).setError(error);\r\n      }\r\n\r\n      // Check the file's extension\r\n      if (exportOptions.infile.endsWith('.svg')) {\r\n        // Set to the `svg` option\r\n        exportOptions.svg = fileContent;\r\n      } else if (exportOptions.infile.endsWith('.json')) {\r\n        // Set to the `instr` option\r\n        exportOptions.instr = fileContent;\r\n      } else {\r\n        throw new ExportError(\r\n          '[chart] Incorrect value of the `infile` option.',\r\n          400\r\n        );\r\n      }\r\n    }\r\n\r\n    // Export using SVG as an input\r\n    if (exportOptions.svg !== null) {\r\n      log(4, '[chart] Attempting to export from an SVG input.');\r\n\r\n      // SVG exports attempts counter\r\n      ++getPoolStats().exportsFromSvgAttempts;\r\n\r\n      // Export from an SVG string\r\n      const result = await _exportFromSvg(\r\n        sanitize(exportOptions.svg), // #209\r\n        options\r\n      );\r\n\r\n      // SVG exports counter\r\n      ++getPoolStats().exportsFromSvg;\r\n\r\n      // Pass SVG export result to the end callback\r\n      return endCallback(null, result);\r\n    }\r\n\r\n    // Export using options as an input\r\n    if (exportOptions.instr !== null || exportOptions.options !== null) {\r\n      log(4, '[chart] Attempting to export from options input.');\r\n\r\n      // Options exports attempts counter\r\n      ++getPoolStats().exportsFromOptionsAttempts;\r\n\r\n      // Export from options\r\n      const result = await _exportFromOptions(\r\n        exportOptions.instr || exportOptions.options,\r\n        options\r\n      );\r\n\r\n      // Options exports counter\r\n      ++getPoolStats().exportsFromOptions;\r\n\r\n      // Pass options export result to the end callback\r\n      return endCallback(null, result);\r\n    }\r\n\r\n    // No input specified, pass an error message to the callback\r\n    return endCallback(\r\n      new ExportError(\r\n        `[chart] No valid input specified. Check if at least one of the following parameters is correctly set: 'infile', 'instr', 'options', or 'svg'.`,\r\n        400\r\n      )\r\n    );\r\n  } catch (error) {\r\n    return endCallback(error);\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves and returns the current status of the code execution permission.\r\n *\r\n * @function getAllowCodeExecution\r\n *\r\n * @returns {boolean} The value of the global `allowCodeExecution` option.\r\n */\r\nexport function getAllowCodeExecution() {\r\n  return allowCodeExecution;\r\n}\r\n\r\n/**\r\n * Sets the code execution permission based on the provided boolean value.\r\n *\r\n * @function setAllowCodeExecution\r\n *\r\n * @param {boolean} value - The boolean value to be assigned to the global\r\n * `allowCodeExecution` option.\r\n */\r\nexport function setAllowCodeExecution(value) {\r\n  allowCodeExecution = value;\r\n}\r\n\r\n/**\r\n * Exports from an SVG based input with the provided options.\r\n *\r\n * @async\r\n * @function _exportFromSvg\r\n *\r\n * @param {string} inputToExport - The SVG based input to be exported.\r\n * @param {Object} options - The configuration object containing complete set\r\n * of options.\r\n *\r\n * @returns {Promise<unknown>} A Promise that resolves to a result of the export\r\n * process.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if there is not a correct SVG\r\n * input.\r\n */\r\nasync function _exportFromSvg(inputToExport, options) {\r\n  // Check if it is SVG\r\n  if (\r\n    typeof inputToExport === 'string' &&\r\n    (inputToExport.indexOf('<svg') >= 0 || inputToExport.indexOf('<?xml') >= 0)\r\n  ) {\r\n    log(4, '[chart] Parsing input as SVG.');\r\n\r\n    // Set the export input as SVG\r\n    options.export.svg = inputToExport;\r\n\r\n    // Reset the rest of the export input options\r\n    options.export.options = null;\r\n    options.export.instr = null;\r\n\r\n    // Call the function with an SVG string as an export input\r\n    return _prepareExport(options);\r\n  } else {\r\n    throw new ExportError('[chart] Not a correct SVG input.', 400);\r\n  }\r\n}\r\n\r\n/**\r\n * Exports from an options based input with the provided options.\r\n *\r\n * @async\r\n * @function _exportFromOptions\r\n *\r\n * @param {string} inputToExport - The options based input to be exported.\r\n * @param {Object} options - The configuration object containing complete set\r\n * of options.\r\n *\r\n * @returns {Promise<unknown>} A Promise that resolves to a result of the export\r\n * process.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if there is not a correct\r\n * chart options input.\r\n */\r\nasync function _exportFromOptions(inputToExport, options) {\r\n  log(4, '[chart] Parsing input from options.');\r\n\r\n  // Try to check, validate and parse to stringified options\r\n  const stringifiedOptions = isAllowedConfig(\r\n    inputToExport,\r\n    true,\r\n    options.customLogic.allowCodeExecution\r\n  );\r\n\r\n  // Check if a correct stringified options\r\n  if (\r\n    stringifiedOptions === null ||\r\n    typeof stringifiedOptions !== 'string' ||\r\n    !stringifiedOptions.startsWith('{') ||\r\n    !stringifiedOptions.endsWith('}')\r\n  ) {\r\n    throw new ExportError(\r\n      '[chart] Invalid configuration provided - Only options configurations and SVG are allowed for this server. If this is your server, JavaScript custom code can be enabled by starting the server with the `allowCodeExecution` options set to true.',\r\n      403\r\n    );\r\n  }\r\n\r\n  // Set the export input as a stringified chart options\r\n  options.export.instr = stringifiedOptions;\r\n\r\n  // Reset the rest of the export input options\r\n  options.export.options = null;\r\n  options.export.svg = null;\r\n\r\n  // Call the function with a stringified chart options\r\n  return _prepareExport(options);\r\n}\r\n\r\n/**\r\n * Function for finalizing options and configurations before export.\r\n *\r\n * @async\r\n * @function _prepareExport\r\n *\r\n * @param {Object} options - The configuration object containing complete set\r\n * of options.\r\n *\r\n * @returns {Promise<unknown>} A Promise that resolves to a result of the export\r\n * process.\r\n */\r\nasync function _prepareExport(options) {\r\n  const { export: exportOptions, customLogic: customLogicOptions } = options;\r\n\r\n  // Prepare the `type` option\r\n  exportOptions.type = fixType(exportOptions.type, exportOptions.outfile);\r\n\r\n  // Prepare the `outfile` option\r\n  exportOptions.outfile = fixOutfile(exportOptions.type, exportOptions.outfile);\r\n\r\n  // Prepare the `constr` option\r\n  exportOptions.constr = fixConstr(exportOptions.constr);\r\n\r\n  // Notify about the custom logic usage status\r\n  log(\r\n    3,\r\n    `[chart] The custom logic is ${customLogicOptions.allowCodeExecution ? 'allowed' : 'disallowed'}.`\r\n  );\r\n\r\n  // Prepare the custom logic options (`customCode`, `callback`, `resources`)\r\n  _handleCustomLogic(customLogicOptions, customLogicOptions.allowCodeExecution);\r\n\r\n  // Prepare the `globalOptions` and `themeOptions` options\r\n  _handleGlobalAndTheme(\r\n    exportOptions,\r\n    customLogicOptions.allowFileResources,\r\n    customLogicOptions.allowCodeExecution\r\n  );\r\n\r\n  // Prepare the `height`, `width`, and `scale` options\r\n  options.export = {\r\n    ...exportOptions,\r\n    ..._findChartSize(exportOptions)\r\n  };\r\n\r\n  // Check if the image options object does not exceed the size limit\r\n  _checkDataSize({ export: exportOptions, customLogic: customLogicOptions });\r\n\r\n  // Post the work to the pool\r\n  return postWork(options);\r\n}\r\n\r\n/**\r\n * Calculates the `height`, `width` and `scale` for chart exports based\r\n * on the provided export options.\r\n *\r\n * The function prioritizes values in the following order:\r\n * 1. The `height`, `width`, `scale` from the `exportOptions`.\r\n * 2. Options from the chart configuration (from `exporting` and `chart`).\r\n * 3. Options from the global options (from `exporting` and `chart`).\r\n * 4. Options from the theme options (from `exporting` and `chart` sections).\r\n * 5. Fallback default values (`height = 400`, `width = 600`, `scale = 1`).\r\n *\r\n * @function _findChartSize\r\n *\r\n * @param {Object} exportOptions - The configuration object containing `export`\r\n * options.\r\n *\r\n * @returns {Object} The object containing calculated `height`, `width`\r\n * and `scale` values for the chart export.\r\n */\r\nfunction _findChartSize(exportOptions) {\r\n  // Check the `options` and `instr` for chart and exporting sections\r\n  const { chart: optionsChart, exporting: optionsExporting } =\r\n    isAllowedConfig(exportOptions.instr) || false;\r\n\r\n  // Check the `globalOptions` for chart and exporting sections\r\n  const { chart: globalOptionsChart, exporting: globalOptionsExporting } =\r\n    isAllowedConfig(exportOptions.globalOptions) || false;\r\n\r\n  // Check the `themeOptions` for chart and exporting sections\r\n  const { chart: themeOptionsChart, exporting: themeOptionsExporting } =\r\n    isAllowedConfig(exportOptions.themeOptions) || false;\r\n\r\n  // Find the `scale` value:\r\n  // - It cannot be lower than 0.1\r\n  // - It cannot be higher than 5.0\r\n  // - It must be rounded to 2 decimal places (e.g. 0.23234 -> 0.23)\r\n  const scale = roundNumber(\r\n    Math.max(\r\n      0.1,\r\n      Math.min(\r\n        exportOptions.scale ||\r\n          optionsExporting?.scale ||\r\n          globalOptionsExporting?.scale ||\r\n          themeOptionsExporting?.scale ||\r\n          exportOptions.defaultScale ||\r\n          1,\r\n        5.0\r\n      )\r\n    ),\r\n    2\r\n  );\r\n\r\n  // Find the `height` value\r\n  const height =\r\n    exportOptions.height ||\r\n    optionsExporting?.sourceHeight ||\r\n    optionsChart?.height ||\r\n    globalOptionsExporting?.sourceHeight ||\r\n    globalOptionsChart?.height ||\r\n    themeOptionsExporting?.sourceHeight ||\r\n    themeOptionsChart?.height ||\r\n    exportOptions.defaultHeight ||\r\n    400;\r\n\r\n  // Find the `width` value\r\n  const width =\r\n    exportOptions.width ||\r\n    optionsExporting?.sourceWidth ||\r\n    optionsChart?.width ||\r\n    globalOptionsExporting?.sourceWidth ||\r\n    globalOptionsChart?.width ||\r\n    themeOptionsExporting?.sourceWidth ||\r\n    themeOptionsChart?.width ||\r\n    exportOptions.defaultWidth ||\r\n    600;\r\n\r\n  // Gather `height`, `width` and `scale` information in one object\r\n  const size = { height, width, scale };\r\n\r\n  // Get rid of potential `px` and `%`\r\n  for (let [param, value] of Object.entries(size)) {\r\n    size[param] =\r\n      typeof value === 'string' ? +value.replace(/px|%/gi, '') : value;\r\n  }\r\n\r\n  // Return the size object\r\n  return size;\r\n}\r\n\r\n/**\r\n * Handles the execution of custom logic options, including loading `resources`,\r\n * `customCode`, and `callback`. If code execution is allowed, it processes\r\n * the custom logic options accordingly. If code execution is not allowed,\r\n * it disables the usage of resources, custom code and callback.\r\n *\r\n * @function _handleCustomLogic\r\n *\r\n * @param {Object} customLogicOptions - The configuration object containing\r\n * `customLogic` options.\r\n * @param {boolean} allowCodeExecution - A flag indicating whether code\r\n * execution is allowed.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if code execution\r\n * is not allowed but custom logic options are still provided.\r\n */\r\nfunction _handleCustomLogic(customLogicOptions, allowCodeExecution) {\r\n  // In case of allowing code execution\r\n  if (allowCodeExecution) {\r\n    // Process the `resources` option\r\n    if (typeof customLogicOptions.resources === 'string') {\r\n      // Custom stringified resources\r\n      customLogicOptions.resources = _handleResources(\r\n        customLogicOptions.resources,\r\n        customLogicOptions.allowFileResources,\r\n        true\r\n      );\r\n    } else if (!customLogicOptions.resources) {\r\n      try {\r\n        // Load the default one\r\n        customLogicOptions.resources = _handleResources(\r\n          readFileSync(getAbsolutePath('resources.json'), 'utf8'),\r\n          customLogicOptions.allowFileResources,\r\n          true\r\n        );\r\n      } catch (error) {\r\n        log(2, '[chart] Unable to load the default `resources.json` file.');\r\n      }\r\n    }\r\n\r\n    // Process the `customCode` option\r\n    try {\r\n      // Try to load custom code and wrap around it in a self invoking function\r\n      customLogicOptions.customCode = wrapAround(\r\n        customLogicOptions.customCode,\r\n        customLogicOptions.allowFileResources\r\n      );\r\n    } catch (error) {\r\n      logWithStack(2, error, '[chart] The `customCode` cannot be loaded.');\r\n\r\n      // In case of an error, set the option with null\r\n      customLogicOptions.customCode = null;\r\n    }\r\n\r\n    // Process the `callback` option\r\n    try {\r\n      // Try to load callback function\r\n      customLogicOptions.callback = wrapAround(\r\n        customLogicOptions.callback,\r\n        customLogicOptions.allowFileResources,\r\n        true\r\n      );\r\n    } catch (error) {\r\n      logWithStack(2, error, '[chart] The `callback` cannot be loaded.');\r\n\r\n      // In case of an error, set the option with null\r\n      customLogicOptions.callback = null;\r\n    }\r\n\r\n    // Check if there is the `customCode` present\r\n    if ([null, undefined].includes(customLogicOptions.customCode)) {\r\n      log(3, '[chart] No value for the `customCode` option found.');\r\n    }\r\n\r\n    // Check if there is the `callback` present\r\n    if ([null, undefined].includes(customLogicOptions.callback)) {\r\n      log(3, '[chart] No value for the `callback` option found.');\r\n    }\r\n\r\n    // Check if there is the `resources` present\r\n    if ([null, undefined].includes(customLogicOptions.resources)) {\r\n      log(3, '[chart] No value for the `resources` option found.');\r\n    }\r\n  } else {\r\n    // If the `allowCodeExecution` flag is set to false, we should refuse\r\n    // the usage of the `callback`, `resources`, and `customCode` options.\r\n    // Additionally, the worker will refuse to run arbitrary JavaScript.\r\n    if (\r\n      customLogicOptions.callback ||\r\n      customLogicOptions.resources ||\r\n      customLogicOptions.customCode\r\n    ) {\r\n      // Reset all custom code options\r\n      customLogicOptions.callback = null;\r\n      customLogicOptions.resources = null;\r\n      customLogicOptions.customCode = null;\r\n\r\n      // Send a message saying that the exporter does not support these settings\r\n      throw new ExportError(\r\n        `[chart] The 'callback', 'resources', and 'customCode' options have been disabled for this server.`,\r\n        403\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Handles and validates resources from the `resources` option for export.\r\n *\r\n * @function _handleResources\r\n *\r\n * @param {(Object|string|null)} [resources=null] - The resources to be handled.\r\n * Can be either a JSON object, stringified JSON, a path to a JSON file,\r\n * or null. The default value is `null`.\r\n * @param {boolean} allowFileResources - A flag indicating whether loading\r\n * resources from files is allowed.\r\n * @param {boolean} allowCodeExecution - A flag indicating whether code\r\n * execution is allowed.\r\n *\r\n * @returns {(Object|null)} The handled resources or null if no valid resources\r\n * are found.\r\n */\r\nfunction _handleResources(\r\n  resources = null,\r\n  allowFileResources,\r\n  allowCodeExecution\r\n) {\r\n  // List of allowed sections in the resources JSON\r\n  const allowedProps = ['js', 'css', 'files'];\r\n\r\n  let handledResources = resources;\r\n  let correctResources = false;\r\n\r\n  // Try to load resources from a file\r\n  if (allowFileResources && resources.endsWith('.json')) {\r\n    try {\r\n      handledResources = isAllowedConfig(\r\n        readFileSync(getAbsolutePath(resources), 'utf8'),\r\n        false,\r\n        allowCodeExecution\r\n      );\r\n    } catch {\r\n      return null;\r\n    }\r\n  } else {\r\n    // Try to get JSON\r\n    handledResources = isAllowedConfig(resources, false, allowCodeExecution);\r\n\r\n    // Get rid of the files section\r\n    if (handledResources && !allowFileResources) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Filter from unnecessary properties\r\n  for (const propName in handledResources) {\r\n    if (!allowedProps.includes(propName)) {\r\n      delete handledResources[propName];\r\n    } else if (!correctResources) {\r\n      correctResources = true;\r\n    }\r\n  }\r\n\r\n  // Check if at least one of allowed properties is present\r\n  if (!correctResources) {\r\n    return null;\r\n  }\r\n\r\n  // Handle files section\r\n  if (handledResources.files) {\r\n    handledResources.files = handledResources.files.map((item) => item.trim());\r\n    if (!handledResources.files || handledResources.files.length <= 0) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Return resources\r\n  return handledResources;\r\n}\r\n\r\n/**\r\n * Handles the loading and validation of the `globalOptions` and `themeOptions`\r\n * in the export options. If the option is a string and references a JSON file\r\n * (when the `allowFileResources` is true), it reads and parses the file.\r\n * Otherwise, it attempts to parse the string or object as JSON. If any errors\r\n * occur during this process, the option is set to null. If there is an error\r\n * loading or parsing the `globalOptions` or `themeOptions`, the error is logged\r\n * and the option is set to null.\r\n *\r\n * @function _handleGlobalAndTheme\r\n *\r\n * @param {Object} exportOptions - The configuration object containing `export`\r\n * options.\r\n * @param {boolean} allowFileResources - A flag indicating whether loading\r\n * resources from files is allowed.\r\n * @param {boolean} allowCodeExecution - A flag indicating whether code\r\n * execution is allowed.\r\n */\r\nfunction _handleGlobalAndTheme(\r\n  exportOptions,\r\n  allowFileResources,\r\n  allowCodeExecution\r\n) {\r\n  // Check the `globalOptions` and `themeOptions` options\r\n  ['globalOptions', 'themeOptions'].forEach((optionsName) => {\r\n    try {\r\n      // Check if the option exists\r\n      if (exportOptions[optionsName]) {\r\n        // Check if it is a string and a file name with the `.json` extension\r\n        if (\r\n          allowFileResources &&\r\n          typeof exportOptions[optionsName] === 'string' &&\r\n          exportOptions[optionsName].endsWith('.json')\r\n        ) {\r\n          // Check if the file content can be a config, and save it as a string\r\n          exportOptions[optionsName] = isAllowedConfig(\r\n            readFileSync(getAbsolutePath(exportOptions[optionsName]), 'utf8'),\r\n            true,\r\n            allowCodeExecution\r\n          );\r\n        } else {\r\n          // Check if the value can be a config, and save it as a string\r\n          exportOptions[optionsName] = isAllowedConfig(\r\n            exportOptions[optionsName],\r\n            true,\r\n            allowCodeExecution\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      logWithStack(\r\n        2,\r\n        error,\r\n        `[chart] The \\`${optionsName}\\` cannot be loaded.`\r\n      );\r\n\r\n      // In case of an error, set the option with null\r\n      exportOptions[optionsName] = null;\r\n    }\r\n  });\r\n\r\n  // Check if there is the `globalOptions` present\r\n  if ([null, undefined].includes(exportOptions.globalOptions)) {\r\n    log(3, '[chart] No value for the `globalOptions` option found.');\r\n  }\r\n\r\n  // Check if there is the `themeOptions` present\r\n  if ([null, undefined].includes(exportOptions.themeOptions)) {\r\n    log(3, '[chart] No value for the `themeOptions` option found.');\r\n  }\r\n}\r\n\r\n/**\r\n * Validates the size of the data for the export process against a fixed limit\r\n * of 100MB.\r\n *\r\n * @function _checkDataSize\r\n *\r\n * @param {Object} imageOptions - The data object, which includes options from\r\n * the `export` and `customLogic` sections and will be sent to a Puppeteer page.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if the size of the data for\r\n * the export process object exceeds the 100MB limit.\r\n */\r\nfunction _checkDataSize(imageOptions) {\r\n  // Set the fixed data limit (100MB) for the dev-tools protocol\r\n  const dataLimit = 100 * 1024 * 1024;\r\n\r\n  // Get the size of the data\r\n  const totalSize = Buffer.byteLength(JSON.stringify(imageOptions), 'utf-8');\r\n\r\n  // Log the size in MB\r\n  log(\r\n    3,\r\n    `[chart] The current total size of the data for the export process is around ${(\r\n      totalSize /\r\n      (1024 * 1024)\r\n    ).toFixed(2)}MB.`\r\n  );\r\n\r\n  // Check the size of data before passing to a page\r\n  if (totalSize >= dataLimit) {\r\n    throw new ExportError(\r\n      `[chart] The data for the export process exceeds 100MB limit.`\r\n    );\r\n  }\r\n}\r\n\r\nexport default {\r\n  singleExport,\r\n  batchExport,\r\n  startExport,\r\n  getAllowCodeExecution,\r\n  setAllowCodeExecution\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview This module provides utility functions for managing intervals\r\n * and timeouts in a centralized manner. It maintains a registry of all active\r\n * timers and allows for their efficient cleanup when needed. This can be useful\r\n * in applications where proper resource management and clean shutdown of timers\r\n * are critical to avoid memory leaks or unintended behavior.\r\n */\r\n\r\nimport { log } from './logger.js';\r\n\r\n// Array that contains ids of all ongoing intervals and timeouts\r\nconst timerIds = [];\r\n\r\n/**\r\n * Adds id of the `setInterval` or `setTimeout` and to the `timerIds` array.\r\n *\r\n * @function addTimer\r\n *\r\n * @param {NodeJS.Timeout} id - Id of an interval or a timeout.\r\n */\r\nexport function addTimer(id) {\r\n  timerIds.push(id);\r\n}\r\n\r\n/**\r\n * Clears all of ongoing intervals and timeouts by ids gathered\r\n * in the `timerIds` array.\r\n *\r\n * @function clearAllTimers\r\n */\r\nexport function clearAllTimers() {\r\n  log(4, `[timer] Clearing all registered intervals and timeouts.`);\r\n  for (const id of timerIds) {\r\n    clearInterval(id);\r\n    clearTimeout(id);\r\n  }\r\n}\r\n\r\nexport default {\r\n  addTimer,\r\n  clearAllTimers\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview Provides middleware functions for logging errors with stack traces\r\n * and handling error responses in an Express application.\r\n */\r\n\r\nimport { getOptions } from '../../config.js';\r\nimport { logWithStack } from '../../logger.js';\r\n\r\n/**\r\n * Middleware for logging errors with stack trace and handling error response.\r\n *\r\n * @function logErrorMiddleware\r\n *\r\n * @param {Error} error - The error object.\r\n * @param {Express.Request} request - The Express request object.\r\n * @param {Express.Response} response - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n *\r\n * @returns {undefined} The call to the next middleware function with\r\n * the passed error.\r\n */\r\nfunction logErrorMiddleware(error, request, response, next) {\r\n  // Display the error with stack in a correct format\r\n  logWithStack(1, error);\r\n\r\n  // Delete the stack for the environment other than the development\r\n  if (getOptions().other.nodeEnv !== 'development') {\r\n    delete error.stack;\r\n  }\r\n\r\n  // Call the `returnErrorMiddleware` middleware\r\n  return next(error);\r\n}\r\n\r\n/**\r\n * Middleware for returning error response.\r\n *\r\n * @function returnErrorMiddleware\r\n *\r\n * @param {Error} error - The error object.\r\n * @param {Express.Request} request - The Express request object.\r\n * @param {Express.Response} response - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n */\r\nfunction returnErrorMiddleware(error, request, response, next) {\r\n  // Gather all requied information for the response\r\n  const { message, stack } = error;\r\n\r\n  // Use the error's status code or the default 400\r\n  const statusCode = error.statusCode || 400;\r\n\r\n  // Set and return response\r\n  response.status(statusCode).json({ statusCode, message, stack });\r\n}\r\n\r\n/**\r\n * Adds the error middlewares to the passed express app instance.\r\n *\r\n * @param {Express} app - The Express app instance.\r\n */\r\nexport default function errorMiddleware(app) {\r\n  // Add log error middleware\r\n  app.use(logErrorMiddleware);\r\n\r\n  // Add set status and return error middleware\r\n  app.use(returnErrorMiddleware);\r\n}\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview Provides middleware functions for configuring and enabling rate\r\n * limiting in an Express application.\r\n */\r\n\r\nimport rateLimit from 'express-rate-limit';\r\n\r\nimport { log } from '../../logger.js';\r\n\r\nimport ExportError from '../../errors/ExportError.js';\r\n\r\n/**\r\n * Middleware for enabling rate limiting on the specified Express app.\r\n *\r\n * @param {Express} app - The Express app instance.\r\n *\r\n * @param {Object} rateLimitingOptions - The configuration object containing\r\n * `rateLimiting` options.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if could not configure and set\r\n * the rate limiting options.\r\n */\r\nexport default function rateLimitingMiddleware(app, rateLimitingOptions) {\r\n  try {\r\n    // Check if the rate limiting is enabled and the app exists\r\n    if (app && rateLimitingOptions.enable) {\r\n      const message =\r\n        'Too many requests, you have been rate limited. Please try again later.';\r\n\r\n      // Options for the rate limiter\r\n      const rateOptions = {\r\n        window: rateLimitingOptions.window || 1,\r\n        maxRequests: rateLimitingOptions.maxRequests || 30,\r\n        delay: rateLimitingOptions.delay || 0,\r\n        trustProxy: rateLimitingOptions.trustProxy || false,\r\n        skipKey: rateLimitingOptions.skipKey || null,\r\n        skipToken: rateLimitingOptions.skipToken || null\r\n      };\r\n\r\n      // Set if behind a proxy\r\n      if (rateOptions.trustProxy) {\r\n        app.enable('trust proxy');\r\n      }\r\n\r\n      // Create a limiter\r\n      const limiter = rateLimit({\r\n        // Time frame for which requests are checked and remembered\r\n        windowMs: rateOptions.window * 60 * 1000,\r\n        // Limit each IP to 100 requests per `windowMs`\r\n        limit: rateOptions.maxRequests,\r\n        // Disable delaying, full speed until the max limit is reached\r\n        delayMs: rateOptions.delay,\r\n        handler: (request, response) => {\r\n          response.format({\r\n            json: () => {\r\n              response.status(429).send({ message });\r\n            },\r\n            default: () => {\r\n              response.status(429).send(message);\r\n            }\r\n          });\r\n        },\r\n        skip: (request) => {\r\n          // Allow bypassing the limiter if a valid key/token has been sent\r\n          if (\r\n            rateOptions.skipKey !== null &&\r\n            rateOptions.skipToken !== null &&\r\n            request.query.key === rateOptions.skipKey &&\r\n            request.query.access_token === rateOptions.skipToken\r\n          ) {\r\n            log(4, '[rate limiting] Skipping rate limiter.');\r\n            return true;\r\n          }\r\n          return false;\r\n        }\r\n      });\r\n\r\n      // Use a limiter as a middleware\r\n      app.use(limiter);\r\n\r\n      log(\r\n        3,\r\n        `[rate limiting] Enabled rate limiting with ${rateOptions.maxRequests} requests per ${rateOptions.window} minute for each IP, trusting proxy: ${rateOptions.trustProxy}.`\r\n      );\r\n    }\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[rate limiting] Could not configure and set the rate limiting options.',\r\n      500\r\n    ).setError(error);\r\n  }\r\n}\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview Provides middleware functions for validating incoming HTTP requests\r\n * in an Express application. This module ensures that requests contain\r\n * appropriate content types and valid request bodies, including proper JSON\r\n * structures and chart data for exports. It checks for potential issues such\r\n * as missing or malformed data, private range URLs in SVG payloads, and allows\r\n * for flexible options validation. The middleware logs detailed information\r\n * and handles errors related to incorrect payloads, chart data, and private URL\r\n * usage.\r\n */\r\n\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { getAllowCodeExecution } from '../../chart.js';\r\nimport { isAllowedConfig } from '../../config.js';\r\nimport { log } from '../../logger.js';\r\nimport { isObjectEmpty, isPrivateRangeUrlFound } from '../../utils.js';\r\n\r\nimport ExportError from '../../errors/ExportError.js';\r\n\r\n/**\r\n * Middleware for validating the content-type header.\r\n *\r\n * @function contentTypeMiddleware\r\n *\r\n * @param {Express.Request} request - The Express request object.\r\n * @param {Express.Response} response - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n *\r\n * @returns {undefined} The call to the next middleware function.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if the content-type\r\n * is not correct.\r\n */\r\nfunction contentTypeMiddleware(request, response, next) {\r\n  try {\r\n    // Get the content type header\r\n    const contentType = request.headers['content-type'] || '';\r\n\r\n    // Allow only JSON, URL-encoded and form data without files types of data\r\n    if (\r\n      !contentType.includes('application/json') &&\r\n      !contentType.includes('application/x-www-form-urlencoded') &&\r\n      !contentType.includes('multipart/form-data')\r\n    ) {\r\n      throw new ExportError(\r\n        '[validation] Content-Type must be application/json, application/x-www-form-urlencoded, or multipart/form-data.',\r\n        415\r\n      );\r\n    }\r\n\r\n    // Call the `requestBodyMiddleware` middleware\r\n    return next();\r\n  } catch (error) {\r\n    return next(error);\r\n  }\r\n}\r\n\r\n/**\r\n * Middleware for validating the request's body.\r\n *\r\n * @function requestBodyMiddleware\r\n *\r\n * @param {Express.Request} request - The Express request object.\r\n * @param {Express.Response} response - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n *\r\n * @returns {undefined} The call to the next middleware function.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if the body is not correct.\r\n * @throws {ExportError} Throws an `ExportError` if the chart data from the body\r\n * is not correct.\r\n * @throws {ExportError} Throws an `ExportError` in case of the private range\r\n * url error.\r\n */\r\nfunction requestBodyMiddleware(request, response, next) {\r\n  try {\r\n    // Get the request body\r\n    const body = request.body;\r\n\r\n    // Create a unique ID for a request\r\n    const requestId = uuid();\r\n\r\n    // Throw an error if there is no correct body\r\n    if (!body || isObjectEmpty(body)) {\r\n      log(\r\n        2,\r\n        `[validation] Request [${requestId}] - The request from ${\r\n          request.headers['x-forwarded-for'] || request.connection.remoteAddress\r\n        } was incorrect. Received payload is empty.`\r\n      );\r\n\r\n      throw new ExportError(\r\n        `[validation] Request [${requestId}] - The request body is required. Please ensure that your Content-Type header is correct. Accepted types are 'application/json' and 'multipart/form-data'.`,\r\n        400\r\n      );\r\n    }\r\n\r\n    // Get the allowCodeExecution option for the server\r\n    const allowCodeExecution = getAllowCodeExecution();\r\n\r\n    // Find a correct chart options\r\n    const instr = isAllowedConfig(\r\n      // Use one of the below\r\n      body.instr || body.options || body.infile || body.data,\r\n      // Stringify options\r\n      true,\r\n      // Allow or disallow functions\r\n      allowCodeExecution\r\n    );\r\n\r\n    // Throw an error if there is no correct chart data\r\n    if (instr === null && !body.svg) {\r\n      log(\r\n        2,\r\n        `[validation] Request [${requestId}] - The request from ${\r\n          request.headers['x-forwarded-for'] || request.connection.remoteAddress\r\n        } was incorrect. Received payload is missing correct chart data for export: ${JSON.stringify(body)}.`\r\n      );\r\n\r\n      throw new ExportError(\r\n        `[validation] Request [${requestId}] - No correct chart data found. Ensure that you are using either application/json or multipart/form-data headers. If sending JSON, make sure the chart data is in the 'infile', 'options', or 'data' attribute. If sending SVG, ensure it is in the 'svg' attribute.`,\r\n        400\r\n      );\r\n    }\r\n\r\n    // Throw an error if test of xlink:href elements from payload's SVG fails\r\n    if (body.svg && isPrivateRangeUrlFound(body.svg)) {\r\n      throw new ExportError(\r\n        `[validation] Request [${requestId}] - SVG potentially contain at least one forbidden URL in 'xlink:href' element. Please review the SVG content and ensure that all referenced URLs comply with security policies.`,\r\n        400\r\n      );\r\n    }\r\n\r\n    // Get the request options and store parsed structure in the request\r\n    request.validatedOptions = {\r\n      // Set the created ID as a `requestId` property in the options\r\n      requestId,\r\n      export: {\r\n        instr,\r\n        svg: body.svg,\r\n        outfile:\r\n          body.outfile ||\r\n          `${request.params.filename || 'chart'}.${body.type || 'png'}`,\r\n        type: body.type,\r\n        constr: body.constr,\r\n        b64: body.b64,\r\n        noDownload: body.noDownload,\r\n        height: body.height,\r\n        width: body.width,\r\n        scale: body.scale,\r\n        globalOptions: isAllowedConfig(\r\n          body.globalOptions,\r\n          true,\r\n          allowCodeExecution\r\n        ),\r\n        themeOptions: isAllowedConfig(\r\n          body.themeOptions,\r\n          true,\r\n          allowCodeExecution\r\n        )\r\n      },\r\n      customLogic: {\r\n        allowCodeExecution,\r\n        allowFileResources: false,\r\n        customCode: body.customCode,\r\n        callback: body.callback,\r\n        resources: isAllowedConfig(body.resources, true, allowCodeExecution)\r\n      }\r\n    };\r\n\r\n    // Call the next middleware\r\n    return next();\r\n  } catch (error) {\r\n    return next(error);\r\n  }\r\n}\r\n\r\n/**\r\n * Adds the validation middlewares to the passed express app instance.\r\n *\r\n * @param {Express} app - The Express app instance.\r\n */\r\nexport default function validationMiddleware(app) {\r\n  // Add content type validation middleware\r\n  app.post(['/', '/:filename'], contentTypeMiddleware);\r\n\r\n  // Add request body request validation middleware\r\n  app.post(['/', '/:filename'], requestBodyMiddleware);\r\n}\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview Defines the export routes and logic for handling chart export\r\n * requests in an Express server. This module processes incoming requests\r\n * to export charts in various formats (e.g. JPEG, PNG, PDF, SVG). It integrates\r\n * with Highcharts' core functionalities and supports both immediate download\r\n * responses and Base64-encoded content returns. The code also features\r\n * benchmarking for performance monitoring.\r\n */\r\n\r\nimport { startExport } from '../../chart.js';\r\nimport { log } from '../../logger.js';\r\nimport { getBase64, measureTime } from '../../utils.js';\r\n\r\nimport ExportError from '../../errors/ExportError.js';\r\n\r\n// Reversed MIME types\r\nconst reversedMime = {\r\n  png: 'image/png',\r\n  jpeg: 'image/jpeg',\r\n  gif: 'image/gif',\r\n  pdf: 'application/pdf',\r\n  svg: 'image/svg+xml'\r\n};\r\n\r\n/**\r\n * Handles the export requests from the client.\r\n *\r\n * @async\r\n * @function requestExport\r\n *\r\n * @param {Express.Request} request - The Express request object.\r\n * @param {Express.Response} response - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the export process\r\n * is complete.\r\n */\r\nasync function requestExport(request, response, next) {\r\n  try {\r\n    // Start counting time for a request\r\n    const requestCounter = measureTime();\r\n\r\n    // In case the connection is closed, force to abort further actions\r\n    let connectionAborted = false;\r\n    request.socket.on('close', (hadErrors) => {\r\n      if (hadErrors) {\r\n        connectionAborted = true;\r\n      }\r\n    });\r\n\r\n    // Get the options previously validated in the validation middleware\r\n    const options = request.validatedOptions;\r\n\r\n    // Get the request id\r\n    const requestId = options.requestId;\r\n\r\n    // Info about an incoming request with correct data\r\n    log(4, `[export] Request [${requestId}] - Got an incoming HTTP request.`);\r\n\r\n    // Start the export process\r\n    await startExport(options, (error, data) => {\r\n      // Remove the close event from the socket\r\n      request.socket.removeAllListeners('close');\r\n\r\n      // If the connection was closed, do nothing\r\n      if (connectionAborted) {\r\n        log(\r\n          3,\r\n          `[export] Request [${requestId}] - The client closed the connection before the chart finished processing.`\r\n        );\r\n        return;\r\n      }\r\n\r\n      // If error, log it and send it to the error middleware\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // If data is missing, log the message and send it to the error middleware\r\n      if (!data || !data.result) {\r\n        log(\r\n          2,\r\n          `[export] Request [${requestId}] - Request from ${\r\n            request.headers['x-forwarded-for'] ||\r\n            request.connection.remoteAddress\r\n          } was incorrect. Received result is ${data.result}.`\r\n        );\r\n\r\n        throw new ExportError(\r\n          `[export] Request [${requestId}] - Unexpected return of the export result from the chart generation. Please check your request data.`,\r\n          400\r\n        );\r\n      }\r\n\r\n      // Return the result in an appropriate format\r\n      if (data.result) {\r\n        log(\r\n          3,\r\n          `[export] Request [${requestId}] - The whole exporting process took ${requestCounter()}ms.`\r\n        );\r\n\r\n        // Get the `type`, `b64`, `noDownload`, and `outfile` from options\r\n        const { type, b64, noDownload, outfile } = data.options.export;\r\n\r\n        // If only Base64 is required, return it\r\n        if (b64) {\r\n          return response.send(getBase64(data.result, type));\r\n        }\r\n\r\n        // Set correct content type\r\n        response.header('Content-Type', reversedMime[type] || 'image/png');\r\n\r\n        // Decide whether to download or not chart file\r\n        if (!noDownload) {\r\n          response.attachment(outfile);\r\n        }\r\n\r\n        // If SVG, return plain content, otherwise a b64 string from a buffer\r\n        return type === 'svg'\r\n          ? response.send(data.result)\r\n          : response.send(Buffer.from(data.result, 'base64'));\r\n      }\r\n    });\r\n  } catch (error) {\r\n    return next(error);\r\n  }\r\n}\r\n\r\n/**\r\n * Adds the `export` routes.\r\n *\r\n * @function exportRoutes\r\n *\r\n * @param {Express} app - The Express app instance.\r\n */\r\nexport default function exportRoutes(app) {\r\n  /**\r\n   * Adds the POST '/' - A route for handling POST requests at the root\r\n   * endpoint.\r\n   */\r\n  app.post('/', requestExport);\r\n\r\n  /**\r\n   * Adds the POST '/:filename' - A route for handling POST requests with\r\n   * a specified filename parameter.\r\n   */\r\n  app.post('/:filename', requestExport);\r\n}\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview Defines an Express route for server health monitoring, including\r\n * uptime, success rates, and other server statistics.\r\n */\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nimport { getHighchartsVersion } from '../../cache.js';\r\nimport { log } from '../../logger.js';\r\nimport { getPoolStats, getPoolInfoJSON } from '../../pool.js';\r\nimport { addTimer } from '../../timer.js';\r\nimport { __dirname, getNewDateTime } from '../../utils.js';\r\n\r\n// Set the start date of the server\r\nconst serverStartTime = new Date();\r\n\r\n// Get the `package.json` content\r\nconst packageFile = JSON.parse(\r\n  readFileSync(join(__dirname, 'package.json'), 'utf8')\r\n);\r\n\r\n// An array for success rate ratios\r\nconst successRates = [];\r\n\r\n// Record every minute\r\nconst recordInterval = 60 * 1000;\r\n\r\n// 30 minutes\r\nconst windowSize = 30;\r\n\r\n/**\r\n * Calculates moving average indicator based on the data from the `successRates`\r\n * array.\r\n *\r\n * @function _calculateMovingAverage\r\n *\r\n * @returns {number} A moving average for success ratio of the server exports.\r\n */\r\nfunction _calculateMovingAverage() {\r\n  return successRates.reduce((a, b) => a + b, 0) / successRates.length;\r\n}\r\n\r\n/**\r\n * Starts the interval responsible for calculating current success rate ratio\r\n * and collects records to the `successRates` array.\r\n *\r\n * @function _startSuccessRate\r\n *\r\n * @returns {NodeJS.Timeout} Id of an interval.\r\n */\r\nfunction _startSuccessRate() {\r\n  return setInterval(() => {\r\n    const stats = getPoolStats();\r\n    const successRatio =\r\n      stats.exportsAttempted === 0\r\n        ? 1\r\n        : (stats.exportsPerformed / stats.exportsAttempted) * 100;\r\n\r\n    successRates.push(successRatio);\r\n    if (successRates.length > windowSize) {\r\n      successRates.shift();\r\n    }\r\n  }, recordInterval);\r\n}\r\n\r\n/**\r\n * Adds the `health` routes.\r\n *\r\n * @function healthRoutes\r\n *\r\n * @param {Express} app - The Express app instance.\r\n */\r\nexport default function healthRoutes(app) {\r\n  // Start processing success rate ratio interval and save its id to the array\r\n  // for the graceful clearing on shutdown with injected `addTimer` funtion\r\n  addTimer(_startSuccessRate());\r\n\r\n  /**\r\n   * Adds the GET '/health' - A route for getting the basic stats of the server.\r\n   */\r\n  app.get('/health', (request, response, next) => {\r\n    try {\r\n      log(4, '[health] Returning server health.');\r\n\r\n      const stats = getPoolStats();\r\n      const period = successRates.length;\r\n      const movingAverage = _calculateMovingAverage();\r\n\r\n      // Send the server's statistics\r\n      response.send({\r\n        // Status and times\r\n        status: 'OK',\r\n        bootTime: serverStartTime,\r\n        uptime: `${Math.floor((getNewDateTime() - serverStartTime.getTime()) / 1000 / 60)} minutes`,\r\n\r\n        // Versions\r\n        serverVersion: packageFile.version,\r\n        highchartsVersion: getHighchartsVersion(),\r\n\r\n        // Exports\r\n        averageExportTime: stats.timeSpentAverage,\r\n        attemptedExports: stats.exportsAttempted,\r\n        performedExports: stats.exportsPerformed,\r\n        failedExports: stats.exportsDropped,\r\n        sucessRatio: (stats.exportsPerformed / stats.exportsAttempted) * 100,\r\n\r\n        // Pool\r\n        pool: getPoolInfoJSON(),\r\n\r\n        // Moving average\r\n        period,\r\n        movingAverage,\r\n        message:\r\n          isNaN(movingAverage) || !successRates.length\r\n            ? 'Too early to report. No exports made yet. Please check back soon.'\r\n            : `Last ${period} minutes had a success rate of ${movingAverage.toFixed(2)}%.`,\r\n\r\n        // SVG and JSON exports\r\n        svgExports: stats.exportsFromSvg,\r\n        jsonExports: stats.exportsFromOptions,\r\n        svgExportsAttempts: stats.exportsFromSvgAttempts,\r\n        jsonExportsAttempts: stats.exportsFromOptionsAttempts\r\n      });\r\n    } catch (error) {\r\n      return next(error);\r\n    }\r\n  });\r\n}\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview Defines an Express route for serving the UI for the export server\r\n * when enabled.\r\n */\r\n\r\nimport { join } from 'path';\r\n\r\nimport { getOptions } from '../../config.js';\r\nimport { log } from '../../logger.js';\r\nimport { __dirname } from '../../utils.js';\r\n\r\n/**\r\n * Adds the `ui` routes.\r\n *\r\n * @function uiRoutes\r\n *\r\n * @param {Express} app - The Express app instance.\r\n */\r\nexport default function uiRoutes(app) {\r\n  /**\r\n   * Adds the GET '/' - A route for a UI when enabled on the export server.\r\n   */\r\n  app.get(getOptions().ui.route || '/', (request, response, next) => {\r\n    try {\r\n      log(4, '[ui] Returning UI for the export.');\r\n\r\n      response.sendFile(join(__dirname, 'public', 'index.html'), {\r\n        acceptRanges: false\r\n      });\r\n    } catch (error) {\r\n      return next(error);\r\n    }\r\n  });\r\n}\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview Defines an Express route for updating the Highcharts version\r\n * on the server, with authentication and validation.\r\n */\r\n\r\nimport { getHighchartsVersion, updateHighchartsVersion } from '../../cache.js';\r\nimport { envs } from '../../envs.js';\r\nimport { log } from '../../logger.js';\r\n\r\nimport ExportError from '../../errors/ExportError.js';\r\n\r\n/**\r\n * Adds the `version_change` routes.\r\n *\r\n * @function versionChangeRoutes\r\n *\r\n * @param {Express} app - The Express app instance.\r\n */\r\nexport default function versionChangeRoutes(app) {\r\n  /**\r\n   * Adds the POST '/version_change/:newVersion' - A route for changing\r\n   * the Highcharts version on the server.\r\n   */\r\n  app.post('/version_change/:newVersion', async (request, response, next) => {\r\n    try {\r\n      log(4, '[version] Changing Highcharts version.');\r\n\r\n      // Get the token directly from envs\r\n      const adminToken = envs.HIGHCHARTS_ADMIN_TOKEN;\r\n\r\n      // Check the existence of the token\r\n      if (!adminToken || !adminToken.length) {\r\n        throw new ExportError(\r\n          '[version] The server is not configured to perform run-time version changes: `HIGHCHARTS_ADMIN_TOKEN` is not set.',\r\n          401\r\n        );\r\n      }\r\n\r\n      // Get the token from the hc-auth header\r\n      const token = request.get('hc-auth');\r\n\r\n      // Check if the hc-auth header contain a correct token\r\n      if (!token || token !== adminToken) {\r\n        throw new ExportError(\r\n          '[version] Invalid or missing token: Set the token in the hc-auth header.',\r\n          401\r\n        );\r\n      }\r\n\r\n      // Get the new version from the params\r\n      const newVersion = request.params.newVersion;\r\n\r\n      // Update version\r\n      if (newVersion) {\r\n        try {\r\n          await updateHighchartsVersion(newVersion);\r\n        } catch (error) {\r\n          throw new ExportError(\r\n            `[version] Version change: ${error.message}`,\r\n            400\r\n          ).setError(error);\r\n        }\r\n\r\n        // Success\r\n        response.status(200).send({\r\n          statusCode: 200,\r\n          highchartsVersion: getHighchartsVersion(),\r\n          message: `Successfully updated Highcharts to version: ${newVersion}.`\r\n        });\r\n      } else {\r\n        // No version specified\r\n        throw new ExportError('[version] No new version supplied.', 400);\r\n      }\r\n    } catch (error) {\r\n      return next(error);\r\n    }\r\n  });\r\n}\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview A module that sets up and manages HTTP and HTTPS servers\r\n * for the Highcharts Export Server. It handles server initialization,\r\n * configuration, error handling, middleware setup, route definition, and rate\r\n * limiting. The module exports functions to start, stop, and manage server\r\n * instances, as well as utility functions for defining routes and attaching\r\n * middlewares.\r\n */\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nimport cors from 'cors';\r\nimport express from 'express';\r\nimport http from 'http';\r\nimport https from 'https';\r\nimport multer from 'multer';\r\n\r\nimport { updateOptions } from '../config.js';\r\nimport { log, logWithStack } from '../logger.js';\r\nimport { __dirname, getAbsolutePath } from '../utils.js';\r\n\r\nimport errorMiddleware from './middlewares/error.js';\r\nimport rateLimitingMiddleware from './middlewares/rateLimiting.js';\r\nimport validationMiddleware from './middlewares/validation.js';\r\n\r\nimport exportRoutes from './routes/export.js';\r\nimport healthRoutes from './routes/health.js';\r\nimport uiRoutes from './routes/ui.js';\r\nimport versionChangeRoutes from './routes/versionChange.js';\r\n\r\nimport ExportError from '../errors/ExportError.js';\r\n\r\n// Array of an active servers\r\nconst activeServers = new Map();\r\n\r\n// Create express app\r\nconst app = express();\r\n\r\n/**\r\n * Starts an HTTP and/or HTTPS server based on the provided configuration.\r\n * The `serverOptions` object contains server-related properties (refer\r\n * to the `server` section in the `./lib/schemas/config.js` file for details).\r\n *\r\n * @async\r\n * @function startServer\r\n *\r\n * @param {Object} serverOptions - The configuration object containing `server`\r\n * options. This object may include a partial or complete set of the `server`\r\n * options. If the options are partial, missing values will default\r\n * to the current global configuration.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves when the server is either\r\n * not enabled or no valid Express app is found, signaling the end of the\r\n * function's execution.\r\n *\r\n * @throws {ExportError} Throws an `ExportError` if the server cannot\r\n * be configured and started.\r\n */\r\nexport async function startServer(serverOptions) {\r\n  try {\r\n    // Update the instance options object\r\n    const options = updateOptions({\r\n      server: serverOptions\r\n    });\r\n\r\n    // Use validated options\r\n    serverOptions = options.server;\r\n\r\n    // Stop if not enabled\r\n    if (!serverOptions.enable || !app) {\r\n      throw new ExportError(\r\n        '[server] Server cannot be started (not enabled or no correct Express app found).',\r\n        500\r\n      );\r\n    }\r\n\r\n    // Too big limits lead to timeouts in the export process when\r\n    // the rasterization timeout is set too low\r\n    const uploadLimitBytes = serverOptions.uploadLimit * 1024 * 1024;\r\n\r\n    // Memory storage for multer package\r\n    const storage = multer.memoryStorage();\r\n\r\n    // Enable parsing of form data (files) with multer package\r\n    const upload = multer({\r\n      storage,\r\n      limits: {\r\n        fieldSize: uploadLimitBytes\r\n      }\r\n    });\r\n\r\n    // Disable the X-Powered-By header\r\n    app.disable('x-powered-by');\r\n\r\n    // Enable CORS support\r\n    app.use(\r\n      cors({\r\n        methods: ['POST', 'GET', 'OPTIONS']\r\n      })\r\n    );\r\n\r\n    // Getting a lot of `RangeNotSatisfiableError` exceptions (even though this\r\n    // is a deprecated options, let's try to set it to false)\r\n    app.use((request, response, next) => {\r\n      response.set('Accept-Ranges', 'none');\r\n      next();\r\n    });\r\n\r\n    // Enable body parser for JSON data\r\n    app.use(\r\n      express.json({\r\n        limit: uploadLimitBytes\r\n      })\r\n    );\r\n\r\n    // Enable body parser for URL-encoded form data\r\n    app.use(\r\n      express.urlencoded({\r\n        extended: true,\r\n        limit: uploadLimitBytes\r\n      })\r\n    );\r\n\r\n    // Use only non-file multipart form fields\r\n    app.use(upload.none());\r\n\r\n    // Set up static folder's route\r\n    app.use(express.static(join(__dirname, 'public')));\r\n\r\n    // Listen HTTP server\r\n    if (!serverOptions.ssl.force) {\r\n      // Main server instance (HTTP)\r\n      const httpServer = http.createServer(app);\r\n\r\n      // Attach error handlers and listen to the server\r\n      _attachServerErrorHandlers(httpServer);\r\n\r\n      // Listen\r\n      httpServer.listen(serverOptions.port, serverOptions.host, () => {\r\n        // Save the reference to HTTP server\r\n        activeServers.set(serverOptions.port, httpServer);\r\n\r\n        log(\r\n          3,\r\n          `[server] Started HTTP server on ${serverOptions.host}:${serverOptions.port}.`\r\n        );\r\n      });\r\n    }\r\n\r\n    // Listen HTTPS server\r\n    if (serverOptions.ssl.enable) {\r\n      // Set up an SSL server also\r\n      let key, cert;\r\n\r\n      try {\r\n        // Get the SSL key\r\n        key = readFileSync(\r\n          join(getAbsolutePath(serverOptions.ssl.certPath), 'server.key'),\r\n          'utf8'\r\n        );\r\n\r\n        // Get the SSL certificate\r\n        cert = readFileSync(\r\n          join(getAbsolutePath(serverOptions.ssl.certPath), 'server.crt'),\r\n          'utf8'\r\n        );\r\n      } catch (error) {\r\n        log(\r\n          2,\r\n          `[server] Unable to load key/certificate from the '${serverOptions.ssl.certPath}' path. Could not run secured layer server.`\r\n        );\r\n      }\r\n\r\n      if (key && cert) {\r\n        // Main server instance (HTTPS)\r\n        const httpsServer = https.createServer({ key, cert }, app);\r\n\r\n        // Attach error handlers and listen to the server\r\n        _attachServerErrorHandlers(httpsServer);\r\n\r\n        // Listen\r\n        httpsServer.listen(serverOptions.ssl.port, serverOptions.host, () => {\r\n          // Save the reference to HTTPS server\r\n          activeServers.set(serverOptions.ssl.port, httpsServer);\r\n\r\n          log(\r\n            3,\r\n            `[server] Started HTTPS server on ${serverOptions.host}:${serverOptions.ssl.port}.`\r\n          );\r\n        });\r\n      }\r\n    }\r\n\r\n    // Set up the rate limiter\r\n    rateLimitingMiddleware(app, serverOptions.rateLimiting);\r\n\r\n    // Set up the validation handler\r\n    validationMiddleware(app);\r\n\r\n    // Set up routes\r\n    exportRoutes(app);\r\n    healthRoutes(app);\r\n    uiRoutes(app);\r\n    versionChangeRoutes(app);\r\n\r\n    // Set up the centralized error handler\r\n    errorMiddleware(app);\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[server] Could not configure and start the server.',\r\n      500\r\n    ).setError(error);\r\n  }\r\n}\r\n\r\n/**\r\n * Closes all servers associated with Express app instance.\r\n *\r\n * @function closeServers\r\n */\r\nexport function closeServers() {\r\n  // Check if there are servers working\r\n  if (activeServers.size > 0) {\r\n    log(4, `[server] Closing all servers.`);\r\n\r\n    // Close each one of servers\r\n    for (const [port, server] of activeServers) {\r\n      server.close(() => {\r\n        activeServers.delete(port);\r\n        log(4, `[server] Closed server on port: ${port}.`);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get all servers associated with Express app instance.\r\n *\r\n * @function getServers\r\n *\r\n * @returns {Array.<Object>} Servers associated with Express app instance.\r\n */\r\nexport function getServers() {\r\n  return activeServers;\r\n}\r\n\r\n/**\r\n * Get the Express instance.\r\n *\r\n * @function getExpress\r\n *\r\n * @returns {Express} The Express instance.\r\n */\r\nexport function getExpress() {\r\n  return express;\r\n}\r\n\r\n/**\r\n * Get the Express app instance.\r\n *\r\n * @function getApp\r\n *\r\n * @returns {Express} The Express app instance.\r\n */\r\nexport function getApp() {\r\n  return app;\r\n}\r\n\r\n/**\r\n * Enable rate limiting for the server.\r\n *\r\n * @function enableRateLimiting\r\n *\r\n * @param {Object} rateLimitingOptions - The configuration object containing\r\n * `rateLimiting` options. This object may include a partial or complete set\r\n * of the `rateLimiting` options. If the options are partial, missing values\r\n * will default to the current global configuration.\r\n */\r\nexport function enableRateLimiting(rateLimitingOptions) {\r\n  // Update the instance options object\r\n  const options = updateOptions({\r\n    server: {\r\n      rateLimiting: rateLimitingOptions\r\n    }\r\n  });\r\n\r\n  // Set the rate limiting options\r\n  rateLimitingMiddleware(app, options.server.rateLimitingOptions);\r\n}\r\n\r\n/**\r\n * Apply middleware(s) to a specific path.\r\n *\r\n * @function use\r\n *\r\n * @param {string} path - The path to which the middleware(s) should be applied.\r\n * @param {...Function} middlewares - The middleware function(s) to be applied.\r\n */\r\nexport function use(path, ...middlewares) {\r\n  app.use(path, ...middlewares);\r\n}\r\n\r\n/**\r\n * Set up a route with GET method and apply middleware(s).\r\n *\r\n * @function get\r\n *\r\n * @param {string} path - The path to which the middleware(s) should be applied.\r\n * @param {...Function} middlewares - The middleware function(s) to be applied.\r\n */\r\nexport function get(path, ...middlewares) {\r\n  app.get(path, ...middlewares);\r\n}\r\n\r\n/**\r\n * Set up a route with POST method and apply middleware(s).\r\n *\r\n * @function post\r\n *\r\n * @param {string} path - The path to which the middleware(s) should be applied.\r\n * @param {...Function} middlewares - The middleware function(s) to be applied.\r\n */\r\nexport function post(path, ...middlewares) {\r\n  app.post(path, ...middlewares);\r\n}\r\n\r\n/**\r\n * Attach error handlers to the server.\r\n *\r\n * @function _attachServerErrorHandlers\r\n *\r\n * @param {(http.Server|https.Server)} server - The HTTP/HTTPS server instance.\r\n */\r\nfunction _attachServerErrorHandlers(server) {\r\n  server.on('clientError', (error, socket) => {\r\n    logWithStack(\r\n      1,\r\n      error,\r\n      `[server] Client error: ${error.message}, destroying socket.`\r\n    );\r\n    socket.destroy();\r\n  });\r\n\r\n  server.on('error', (error) => {\r\n    logWithStack(1, error, `[server] Server error: ${error.message}`);\r\n  });\r\n\r\n  server.on('connection', (socket) => {\r\n    socket.on('error', (error) => {\r\n      logWithStack(1, error, `[server] Socket error: ${error.message}`);\r\n    });\r\n  });\r\n}\r\n\r\nexport default {\r\n  startServer,\r\n  closeServers,\r\n  getServers,\r\n  getExpress,\r\n  getApp,\r\n  enableRateLimiting,\r\n  use,\r\n  get,\r\n  post\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview Handles graceful shutdown of the Highcharts Export Server, ensuring\r\n * proper cleanup of resources such as browser, pages, servers, and timers.\r\n */\r\n\r\nimport { killPool } from './pool.js';\r\nimport { clearAllTimers } from './timer.js';\r\n\r\nimport { closeServers } from './server/server.js';\r\n\r\n/**\r\n * Performs cleanup operations to ensure a graceful shutdown of the process.\r\n * This includes clearing all registered timeouts/intervals, closing active\r\n * servers, terminating resources (pages) of the pool, pool itself, and closing\r\n * the browser.\r\n *\r\n * @function shutdownCleanUp\r\n *\r\n * @param {number} [exitCode=0] - The exit code to use with `process.exit()`.\r\n * The default value is `0`.\r\n */\r\nexport async function shutdownCleanUp(exitCode = 0) {\r\n  // Await freeing all resources\r\n  await Promise.allSettled([\r\n    // Clear all ongoing intervals\r\n    clearAllTimers(),\r\n\r\n    // Get available server instances (HTTP/HTTPS) and close them\r\n    closeServers(),\r\n\r\n    // Close an active pool along with its workers and the browser instance\r\n    killPool()\r\n  ]);\r\n\r\n  // Exit process with a correct code\r\n  process.exit(exitCode);\r\n}\r\n\r\nexport default {\r\n  shutdownCleanUp\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2025, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview Core module for initializing and managing the Highcharts Export\r\n * Server. Provides functionalities for configuring exports, setting up server\r\n * operations, logging, scripts caching, resource pooling, and graceful process\r\n * cleanup.\r\n */\r\n\r\nimport 'colors';\r\n\r\nimport { checkAndUpdateCache } from './cache.js';\r\nimport {\r\n  singleExport,\r\n  batchExport,\r\n  startExport,\r\n  setAllowCodeExecution\r\n} from './chart.js';\r\nimport { getOptions, updateOptions, mapToNewOptions } from './config.js';\r\nimport {\r\n  log,\r\n  logWithStack,\r\n  initLogging,\r\n  enableConsoleLogging,\r\n  enableFileLogging,\r\n  setLogLevel\r\n} from './logger.js';\r\nimport { initPool, killPool } from './pool.js';\r\nimport { shutdownCleanUp } from './resourceRelease.js';\r\n\r\nimport server from './server/server.js';\r\n\r\n/**\r\n * Initializes the export process. Tasks such as configuring logging, checking\r\n * the cache and sources, and initializing the resource pool occur during this\r\n * stage.\r\n *\r\n * This function must be called before attempting to export charts or set\r\n * up a server.\r\n *\r\n * @async\r\n * @function initExport\r\n *\r\n * @param {Object} initOptions - The `initOptions` object, which may\r\n * be a partial or complete set of options. If the options are partial, missing\r\n * values will default to the current global configuration.\r\n */\r\nexport async function initExport(initOptions) {\r\n  // Init and update the instance options object\r\n  const options = updateOptions(initOptions);\r\n\r\n  // Set the `allowCodeExecution` per export module scope\r\n  setAllowCodeExecution(options.customLogic.allowCodeExecution);\r\n\r\n  // Init the logging\r\n  initLogging(options.logging);\r\n\r\n  // Attach process' exit listeners\r\n  if (options.other.listenToProcessExits) {\r\n    _attachProcessExitListeners();\r\n  }\r\n\r\n  // Check if cache needs to be updated\r\n  await checkAndUpdateCache(options.highcharts, options.server.proxy);\r\n\r\n  // Init the pool\r\n  await initPool(options.pool, options.puppeteer.args);\r\n}\r\n\r\n/**\r\n * Attaches exit listeners to the process, ensuring proper cleanup of resources\r\n * and termination on exit signals. Handles 'exit', 'SIGINT', 'SIGTERM'\r\n * and 'uncaughtException' events.\r\n *\r\n * @function _attachProcessExitListeners\r\n */\r\nfunction _attachProcessExitListeners() {\r\n  log(3, '[process] Attaching exit listeners to the process.');\r\n\r\n  // Handler for the 'exit'\r\n  process.on('exit', (code) => {\r\n    log(4, `[process] Process exited with code ${code}.`);\r\n  });\r\n\r\n  // Handler for the 'SIGINT'\r\n  process.on('SIGINT', async (name, code) => {\r\n    log(4, `[process] The ${name} event with code: ${code}.`);\r\n    await shutdownCleanUp();\r\n  });\r\n\r\n  // Handler for the 'SIGTERM'\r\n  process.on('SIGTERM', async (name, code) => {\r\n    log(4, `[process] The ${name} event with code: ${code}.`);\r\n    await shutdownCleanUp();\r\n  });\r\n\r\n  // Handler for the 'SIGHUP'\r\n  process.on('SIGHUP', async (name, code) => {\r\n    log(4, `[process] The ${name} event with code: ${code}.`);\r\n    await shutdownCleanUp();\r\n  });\r\n\r\n  // Handler for the 'uncaughtException'\r\n  process.on('uncaughtException', async (error, name) => {\r\n    logWithStack(1, error, `[process] The ${name} error.`);\r\n    await shutdownCleanUp(1);\r\n  });\r\n}\r\n\r\nexport default {\r\n  // Server\r\n  ...server,\r\n\r\n  // Options\r\n  getOptions,\r\n  updateOptions,\r\n  mapToNewOptions,\r\n\r\n  // Exporting\r\n  initExport,\r\n  singleExport,\r\n  batchExport,\r\n  startExport,\r\n\r\n  // Release\r\n  killPool,\r\n  shutdownCleanUp,\r\n\r\n  // Logs\r\n  log,\r\n  logWithStack,\r\n  setLogLevel: function (level) {\r\n    // Update the instance options object\r\n    const options = updateOptions({\r\n      logging: {\r\n        level\r\n      }\r\n    });\r\n\r\n    // Call the function\r\n    setLogLevel(options.logging.level);\r\n  },\r\n  enableConsoleLogging: function (toConsole) {\r\n    // Update the instance options object\r\n    const options = updateOptions({\r\n      logging: {\r\n        toConsole\r\n      }\r\n    });\r\n\r\n    // Call the function\r\n    enableConsoleLogging(options.logging.toConsole);\r\n  },\r\n  enableFileLogging: function (dest, file, toFile) {\r\n    // Update the instance options object\r\n    const options = updateOptions({\r\n      logging: {\r\n        dest,\r\n        file,\r\n        toFile\r\n      }\r\n    });\r\n\r\n    // Call the function\r\n    enableFileLogging(\r\n      options.logging.dest,\r\n      options.logging.file,\r\n      options.logging.toFile\r\n    );\r\n  }\r\n};\r\n"],"names":["__dirname","fileURLToPath","URL","url","deepCopy","objArr","objArrCopy","Array","isArray","key","Object","prototype","hasOwnProperty","call","fixConstr","constr","fixedConstr","toLowerCase","replace","includes","fixOutfile","type","outfile","getAbsolutePath","split","shift","fixType","mimeTypes","formats","values","outType","pop","find","t","path","isAbsolute","normalize","resolve","getBase64","input","Buffer","from","toString","getNewDate","Date","trim","getNewDateTime","getTime","isObject","item","isObjectEmpty","keys","length","isPrivateRangeUrlFound","some","pattern","test","measureTime","start","process","hrtime","bigint","Number","roundNumber","value","precision","multiplier","Math","pow","round","wrapAround","customCode","allowFileResources","isCallback","endsWith","readFileSync","startsWith","colors","logging","toConsole","toFile","pathCreated","pathToLog","levelsDesc","title","color","log","args","newLevel","texts","level","prefix","_logToFile","console","apply","undefined","concat","logWithStack","error","customMessage","mainMessage","message","stackMessage","stack","push","initLogging","loggingOptions","dest","file","setLogLevel","enableConsoleLogging","enableFileLogging","isInteger","existsSync","mkdirSync","join","appendFile","defaultConfig","puppeteer","types","envLink","cliName","description","promptOptions","separator","highcharts","version","cdnUrl","forceFetch","cachePath","coreScripts","instructions","moduleScripts","indicatorScripts","customScripts","export","infile","instr","options","svg","batch","hint","choices","b64","noDownload","height","width","scale","defaultHeight","defaultWidth","defaultScale","min","max","globalOptions","themeOptions","rasterizationTimeout","customLogic","allowCodeExecution","callback","resources","loadConfig","legacyName","createConfig","server","enable","host","port","uploadLimit","benchmarking","proxy","timeout","rateLimiting","maxRequests","window","delay","trustProxy","skipKey","skipToken","ssl","force","certPath","pool","minWorkers","maxWorkers","workLimit","acquireTimeout","createTimeout","destroyTimeout","idleTimeout","createRetryInterval","reaperInterval","ui","route","other","nodeEnv","listenToProcessExits","noLogo","hardResetPage","browserShellMode","debug","headless","devtools","listenToConsole","dumpio","slowMo","debuggingPort","nestedProps","_createNestedProps","absoluteProps","_createAbsoluteProps","config","propChain","forEach","entry","substring","dotenv","v","array","filterArray","z","string","transform","map","filter","boolean","enum","refine","positiveNum","isNaN","parseFloat","nonNegativeNum","Config","object","PUPPETEER_ARGS","HIGHCHARTS_VERSION","HIGHCHARTS_CDN_URL","HIGHCHARTS_FORCE_FETCH","HIGHCHARTS_CACHE_PATH","HIGHCHARTS_ADMIN_TOKEN","HIGHCHARTS_CORE_SCRIPTS","HIGHCHARTS_MODULE_SCRIPTS","HIGHCHARTS_INDICATOR_SCRIPTS","HIGHCHARTS_CUSTOM_SCRIPTS","EXPORT_INFILE","EXPORT_INSTR","EXPORT_OPTIONS","EXPORT_SVG","EXPORT_BATCH","EXPORT_OUTFILE","EXPORT_TYPE","EXPORT_CONSTR","EXPORT_B64","EXPORT_NO_DOWNLOAD","EXPORT_HEIGHT","EXPORT_WIDTH","EXPORT_SCALE","EXPORT_DEFAULT_HEIGHT","EXPORT_DEFAULT_WIDTH","EXPORT_DEFAULT_SCALE","EXPORT_GLOBAL_OPTIONS","EXPORT_THEME_OPTIONS","EXPORT_RASTERIZATION_TIMEOUT","CUSTOM_LOGIC_ALLOW_CODE_EXECUTION","CUSTOM_LOGIC_ALLOW_FILE_RESOURCES","CUSTOM_LOGIC_CUSTOM_CODE","CUSTOM_LOGIC_CALLBACK","CUSTOM_LOGIC_RESOURCES","CUSTOM_LOGIC_LOAD_CONFIG","CUSTOM_LOGIC_CREATE_CONFIG","SERVER_ENABLE","SERVER_HOST","SERVER_PORT","SERVER_UPLOAD_LIMIT","SERVER_BENCHMARKING","SERVER_PROXY_HOST","SERVER_PROXY_PORT","SERVER_PROXY_TIMEOUT","SERVER_RATE_LIMITING_ENABLE","SERVER_RATE_LIMITING_MAX_REQUESTS","SERVER_RATE_LIMITING_WINDOW","SERVER_RATE_LIMITING_DELAY","SERVER_RATE_LIMITING_TRUST_PROXY","SERVER_RATE_LIMITING_SKIP_KEY","SERVER_RATE_LIMITING_SKIP_TOKEN","SERVER_SSL_ENABLE","SERVER_SSL_FORCE","SERVER_SSL_PORT","SERVER_SSL_CERT_PATH","POOL_MIN_WORKERS","POOL_MAX_WORKERS","POOL_WORK_LIMIT","POOL_ACQUIRE_TIMEOUT","POOL_CREATE_TIMEOUT","POOL_DESTROY_TIMEOUT","POOL_IDLE_TIMEOUT","POOL_CREATE_RETRY_INTERVAL","POOL_REAPER_INTERVAL","POOL_BENCHMARKING","LOGGING_LEVEL","LOGGING_FILE","LOGGING_DEST","LOGGING_TO_CONSOLE","LOGGING_TO_FILE","UI_ENABLE","UI_ROUTE","OTHER_NODE_ENV","OTHER_LISTEN_TO_PROCESS_EXITS","OTHER_NO_LOGO","OTHER_HARD_RESET_PAGE","OTHER_BROWSER_SHELL_MODE","DEBUG_ENABLE","DEBUG_HEADLESS","DEBUG_DEVTOOLS","DEBUG_LISTEN_TO_CONSOLE","DEBUG_DUMPIO","DEBUG_SLOW_MO","DEBUG_DEBUGGING_PORT","envs","partial","parse","env","_initOptions","getOptions","getCopy","updateOptions","newOptions","_mergeOptions","mapToNewOptions","oldOptions","entries","propertiesChain","reduce","obj","prop","index","isAllowedConfig","allowFunctions","objectConfig","eval","JSON","stringifiedOptions","_optionsStringify","parsedOptions","_","name","originalOptions","stringifyFunctions","stringify","replaceAll","Error","async","fetch","requestOptions","Promise","reject","_getProtocolModule","get","response","responseData","on","chunk","text","https","http","ExportError","constructor","statusCode","super","this","setStatus","setError","cache","activeManifest","sources","hcVersion","checkAndUpdateCache","highchartsOptions","serverProxyOptions","fetchedModules","getCachePath","manifestPath","sourcePath","recursive","_updateCache","requestUpdate","manifest","modules","moduleMap","m","numberOfModules","moduleName","extractVersion","_saveConfigToManifest","getHighchartsVersion","updateHighchartsVersion","newVersion","cacheSources","indexOf","extractModuleName","scriptPath","_fetchAndProcessScript","script","shouldThrowError","newManifest","writeFileSync","_fetchScripts","proxyAgent","proxyHost","proxyPort","HttpsProxyAgent","agent","allFetchPromises","all","c","i","setupHighcharts","Highcharts","animObject","duration","createChart","exportOptions","customLogicOptions","setOptions","merge","wrap","setOptionsObj","isRenderComplete","Chart","proceed","userOptions","cb","exporting","enabled","plotOptions","series","label","tooltip","animation","onHighchartsRender","addEvent","Series","chart","additionalOptions","Function","finalOptions","finalCallback","defaultOptions","template","browser","createBrowser","puppeteerArgs","enabledDebug","debugOptions","launchOptions","userDataDir","handleSIGINT","handleSIGTERM","handleSIGHUP","waitForInitialPage","defaultViewport","tryCount","open","launch","setTimeout","closeBrowser","connected","close","newPage","poolResource","page","setCacheEnabled","_setPageContent","_setPageEvents","isClosed","clearPage","hardReset","goto","waitUntil","evaluate","document","body","innerHTML","id","workCount","addPageResources","injectedResources","injectedJs","js","content","files","isLocal","jsResource","addScriptTag","injectedCss","css","cssImports","match","cssImportPath","cssResource","addStyleTag","clearPageResources","resource","dispose","oldCharts","charts","oldChart","destroy","scriptsToRemove","getElementsByTagName","stylesToRemove","linksToRemove","element","remove","setContent","cssTemplate","svgTemplate","puppeteerExport","isSVG","size","svgElement","querySelector","chartHeight","baseVal","chartWidth","style","zoom","margin","x","y","_getClipRegion","viewportHeight","abs","ceil","viewportWidth","result","setViewport","deviceScaleFactor","_createSVG","_createImage","_createPDF","$eval","getBoundingClientRect","trunc","outerHTML","clip","race","screenshot","encoding","fullPage","optimizeForSpeed","captureBeyondViewport","quality","omitBackground","_resolve","emulateMediaType","pdf","poolStats","exportsAttempted","exportsPerformed","exportsDropped","exportsFromSvg","exportsFromOptions","exportsFromSvgAttempts","exportsFromOptionsAttempts","timeSpent","timeSpentAverage","initPool","poolOptions","Pool","_factory","acquireTimeoutMillis","createTimeoutMillis","destroyTimeoutMillis","idleTimeoutMillis","createRetryIntervalMillis","reapIntervalMillis","propagateCreateError","clearStatus","_eventId","initialResources","acquire","promise","release","killPool","worker","used","destroyed","postWork","workerHandle","getPoolInfo","acquireCounter","requestId","workStart","exportCounter","exportTime","getPoolStats","getPoolInfoJSON","numUsed","available","numFree","allCreated","pendingAcquires","numPendingAcquires","pendingCreates","numPendingCreates","pendingValidations","numPendingValidations","pendingDestroys","absoluteAll","create","uuid","random","startDate","validate","mainFrame","detached","removeAllListeners","sanitize","JSDOM","DOMPurify","ADD_TAGS","singleExport","startExport","data","batchExport","batchFunctions","pair","batchResults","allSettled","reason","imageOptions","endCallback","fileContent","_exportFromSvg","_exportFromOptions","getAllowCodeExecution","setAllowCodeExecution","inputToExport","_prepareExport","_handleCustomLogic","_handleGlobalAndTheme","_findChartSize","_checkDataSize","optionsChart","optionsExporting","globalOptionsChart","globalOptionsExporting","themeOptionsChart","themeOptionsExporting","sourceHeight","sourceWidth","param","_handleResources","allowedProps","handledResources","correctResources","propName","optionsName","totalSize","byteLength","toFixed","timerIds","addTimer","clearAllTimers","clearInterval","clearTimeout","logErrorMiddleware","request","next","returnErrorMiddleware","status","json","errorMiddleware","app","use","rateLimitingMiddleware","rateLimitingOptions","rateOptions","limiter","rateLimit","windowMs","limit","delayMs","handler","format","send","default","skip","query","access_token","contentTypeMiddleware","contentType","headers","requestBodyMiddleware","connection","remoteAddress","validatedOptions","params","filename","validationMiddleware","post","reversedMime","png","jpeg","gif","requestExport","requestCounter","connectionAborted","socket","hadErrors","header","attachment","exportRoutes","serverStartTime","packageFile","successRates","recordInterval","windowSize","_calculateMovingAverage","a","b","_startSuccessRate","setInterval","stats","successRatio","healthRoutes","period","movingAverage","bootTime","uptime","floor","serverVersion","highchartsVersion","averageExportTime","attemptedExports","performedExports","failedExports","sucessRatio","svgExports","jsonExports","svgExportsAttempts","jsonExportsAttempts","uiRoutes","sendFile","acceptRanges","versionChangeRoutes","adminToken","token","activeServers","Map","express","startServer","serverOptions","uploadLimitBytes","storage","multer","memoryStorage","upload","limits","fieldSize","disable","cors","methods","set","urlencoded","extended","none","static","httpServer","createServer","_attachServerErrorHandlers","listen","cert","httpsServer","closeServers","delete","getServers","getExpress","getApp","enableRateLimiting","middlewares","shutdownCleanUp","exitCode","exit","initExport","initOptions","_attachProcessExitListeners","code"],"mappings":"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KA,GAASpB,QAAQE,QAAUF,QAAQG,cACrCH,QAAQE,QAAS,EACjBF,QAAQG,aAAc,EACtBgB,aAAa,EAAGC,EAAO,yCACxB,GAGP,CCjPO,MAAMmB,cAAgB,CAC3BC,UAAW,CACT/B,KAAM,CACJvB,MAAO,CACL,mCACA,kBACA,0CACA,2BACA,kCACA,kCACA,wCACA,2CACA,qBACA,4BACA,2CACA,uDACA,6BACA,yBACA,0BACA,+BACA,uBACA,uFACA,yBACA,oCACA,oBACA,0BACA,8CACA,2BACA,0BACA,6BACA,mCACA,wCACA,mCACA,2BACA,kCACA,uBACA,iBACA,yBACA,8BACA,oBACA,2BACA,eACA,6BACA,iBACA,aACA,eACA,sBACA,cACA,yBACA,oBACA,uBAEFuD,MAAO,CAAC,YACRC,QAAS,iBACTC,QAAS,gBACTC,YAAa,+BACbC,cAAe,CACbtG,KAAM,OACNuG,UAAW,OAIjBC,WAAY,CACVC,QAAS,CACP9D,MAAO,SACPuD,MAAO,CAAC,UACRC,QAAS,qBACTE,YAAa,qBACbC,cAAe,CACbtG,KAAM,SAGV0G,OAAQ,CACN/D,MAAO,8BACPuD,MAAO,CAAC,UACRC,QAAS,qBACTE,YAAa,iCACbC,cAAe,CACbtG,KAAM,SAGV2G,WAAY,CACVhE,OAAO,EACPuD,MAAO,CAAC,WACRC,QAAS,yBACTE,YAAa,kDACbC,cAAe,CACbtG,KAAM,WAGV4G,UAAW,CACTjE,MAAO,SACPuD,MAAO,CAAC,UACRC,QAAS,wBACTE,YAAa,+CACbC,cAAe,CACbtG,KAAM,SAGV6G,YAAa,CACXlE,MAAO,CAAC,aAAc,kBAAmB,iBACzCuD,MAAO,CAAC,YACRC,QAAS,0BACTE,YAAa,mCACbC,cAAe,CACbtG,KAAM,cACN8G,aAAc,0DAGlBC,cAAe,CACbpE,MAAO,CACL,QACA,MACA,QACA,YACA,uBACA,gBAEA,eACA,QACA,OACA,aACA,mBACA,eACA,cACA,UACA,UACA,cACA,WACA,UACA,YACA,cACA,YACA,sBACA,SACA,SACA,WACA,aACA,YACA,eACA,yBACA,SACA,eACA,YACA,k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"}